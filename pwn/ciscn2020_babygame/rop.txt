


Gadgets
=======


0x00000000004a4380: adc ah, ah; clc; jmp rax; 
0x000000000048c77e: adc ah, byte ptr [rax + rax]; jmp rax; 
0x00000000004305fd: adc ah, byte ptr [rip + 0xffff]; and ecx, 0xffff; sub eax, ecx; ret; 
0x00000000004a43f8: adc ah, dl; clc; jmp qword ptr [rax - 0x2b]; 
0x00000000004c056d: adc al, 0; add byte ptr [rax + 0x20], dh; cmc; jmp qword ptr [rsi]; 
0x000000000042a19f: adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a209: adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004c0f90: adc al, 0; add byte ptr [rax], al; adc al, 0x1f; add byte ptr [rax], al; fcom dword ptr [rax - 0xb]; jmp qword ptr [rbx]; 
0x000000000049ce45: adc al, 0; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x00000000004736a2: adc al, 0; add byte ptr [rax], al; add rsp, 0x90; xor eax, eax; pop rbx; ret; 
0x00000000004c0d60: adc al, 0; add byte ptr [rax], al; in al, 0x1c; add byte ptr [rax], al; mov byte ptr [rcx - 0xb], cl; jmp qword ptr [rcx]; 
0x00000000004c8cf8: adc al, 0; add byte ptr [rax], al; jl 0xc8c9a; add byte ptr [rax], al; xor byte ptr [rsp + rdi*8], bh; jmp qword ptr [rdx]; 
0x00000000004c7930: adc al, 0; add byte ptr [rax], al; mov ah, 0x88; add byte ptr [rax], al; mov byte ptr [rdx - 5], dl; call qword ptr [rsi]; 
0x00000000004c1638: adc al, 0; add byte ptr [rax], al; mov esp, 0x20000025; cmc; call qword ptr [rdx]; 
0x00000000004c8238: adc al, 0; add byte ptr [rax], al; mov esp, 0x80000091; xchg eax, ecx; sti; call qword ptr [rax]; 
0x00000000004bfc38: adc al, 0; add byte ptr [rax], al; mov esp, 0xc000000b; cmc; hlt; call qword ptr [rbx]; 
0x00000000004bfd08: adc al, 0; add byte ptr [rax], al; mov word ptr [rax + rax], cs; add byte ptr [rax - 9], dl; hlt; call qword ptr [rdx]; 
0x00000000004c1708: adc al, 0; add byte ptr [rax], al; mov word ptr [rsi], fs; add byte ptr [rax], al; ret; 
0x0000000000473092: adc al, 0; add byte ptr [rax], al; movsxd rdi, ebx; mov eax, 3; syscall; 
0x000000000047399a: adc al, 0; add byte ptr [rax], al; syscall; 
0x000000000047399a: adc al, 0; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x00000000004c1400: adc al, 0; add byte ptr [rax], al; test byte ptr [rbx], ah; add byte ptr [rax], al; sbb byte ptr [rdi - 0xb], bl; jmp qword ptr [rax]; 
0x00000000004c1e10: adc al, 0; add byte ptr [rax], al; xchg eax, esp; sub eax, 0xc8480000; cmc; call qword ptr [rbx]; 
0x00000000004c8cb0: adc al, 0; add byte ptr [rax], al; xor al, 0x9c; add byte ptr [rax], al; or byte ptr [rcx - 0xd], bh; jmp qword ptr [rsi]; 
0x0000000000430785: adc al, 0x13; jmp rdx; 
0x000000000042ed75: adc al, 0x16; sub eax, edx; ret; 
0x0000000000424180: adc al, 0x16; test r8d, r8d; je 0x24188; xchg eax, edx; sub eax, edx; ret; 
0x00000000004c0f94: adc al, 0x1f; add byte ptr [rax], al; fcom dword ptr [rax - 0xb]; jmp qword ptr [rbx]; 
0x000000000048c525: adc al, 0x24; add al, ah; fldcw word ptr [rax + rax + 0x48]; add esp, 8; ret; 
0x00000000004408da: adc al, 0x24; add rsp, 0x18; mov eax, edx; ret; 
0x000000000049cb3a: adc al, 0x24; mov edi, 1; call rax; 
0x0000000000442cba: adc al, 0x24; mov rsi, r14; mov rdi, qword ptr [rsp + 8]; xor eax, eax; syscall; 
0x000000000040f198: adc al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rdx; 
0x0000000000419627: adc al, 0x41; pop rsp; ret; 
0x000000000043c580: adc al, 0x48; lea eax, dword ptr [rdi + 0x14]; ret; 
0x0000000000417363: adc al, 0x48; mov eax, dword ptr [rdi + 8]; cmp rax, rcx; jae 0x17390; movzx eax, byte ptr [rax]; ret; 
0x000000000043fe98: adc al, 0x51; add byte ptr [rax], al; ret; 
0x000000000044b9e1: adc al, 0x68; add al, bpl; sti; jmp qword ptr [rsi + 0xf]; 
0x000000000042081a: adc al, 0x77; and ecx, dword ptr [rcx - 0x7d]; ret 0xeb5b; 
0x0000000000440046: adc al, 0x89; ret 0xdaf7; 
0x00000000004c7a94: adc al, 0x8a; add byte ptr [rax], al; cmp byte ptr [rdi - 5], dl; call rsi; 
0x00000000004c8094: adc al, 0x90; add byte ptr [rax], al; test al, 0x8f; sti; jmp qword ptr [rsi]; 
0x000000000042b630: adc al, 0x91; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000429d5e: adc al, 0x91; sub eax, edx; ret; 
0x0000000000416de8: adc al, 0x92; mov esi, 0xc48348ff; sub byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000430781: adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000042eee3: adc al, 0xa; sub eax, edx; ret; 
0x0000000000473998: adc al, 0xb8; adc al, 0; add byte ptr [rax], al; syscall; 
0x000000000043fe28: adc al, 0xb8; add al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000043fe88: adc al, 0xb8; add byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x000000000043fee8: adc al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000473808: adc al, 0xb8; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000049d760: adc al, 0xb8; or byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000401d79: adc al, 0xdd; fsubr dword ptr [rsi - 0x7cb7ff94]; ret; 
0x00000000004914ca: adc al, 0xe; lea rcx, qword ptr [rip + 0x16f2d]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000048f56a: adc al, 0xe; lea rcx, qword ptr [rip + 0x18e8d]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000042b881: adc al, 0xe; lea rcx, qword ptr [rip + 0x7cb76]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000429d51: adc al, 0xe; lea rcx, qword ptr [rip + 0x7e6a6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000423541: adc al, 0xe; sub eax, edx; ret; 
0x000000000049cf1a: adc al, 0xf7; add rsp, 8; ret; 
0x00000000004c3949: adc al, 0xf8; call qword ptr [rbx]; 
0x00000000004a4655: adc al, 0xf9; push rax; adc edi, ecx; jmp qword ptr [rax + 0x13]; 
0x00000000004a47bc: adc al, 0xf; stc; call qword ptr [rsi + rcx + 0xe04fff9]; stc; push qword ptr [rbp + rcx - 7]; jmp rsp; 
0x000000000047f4f2: adc al, 3; add byte ptr [rax], al; or byte ptr [rsp + 0x5b], dh; ret; 
0x000000000048a29e: adc al, 9; ret 0xa074; 
0x000000000044ffdc: adc al, bl; insb byte ptr [rdi], dx; add byte ptr [rsi + 0x80000], bh; mov edi, 0x4a7820; mov eax, ecx; syscall; 
0x000000000042a347: adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a3b1: adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043c2ba: adc al, byte ptr [rdi + 0x63490006]; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000432fe0: adc al, byte ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000047c10b: adc al, ch; jg 0x7c150; std; inc dword ptr [rbp - 0x76b48a40]; ret; 
0x000000000047f6bc: adc al, ch; mov r8b, byte ptr [rcx]; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000040df17: adc al, ch; push rbx; ret; 
0x0000000000489438: adc al, ch; ret 0xfa38; 
0x00000000004a413c: adc bh, byte ptr [rbp - 0x454f0008]; clc; jmp qword ptr [rax - 0x45]; 
0x0000000000499d7e: adc bh, byte ptr [rcx]; ret 0x850f; 
0x00000000004a4661: adc bh, cl; jmp qword ptr [rax + 0x12]; 
0x00000000004a4665: adc bh, cl; jmp rax; 
0x000000000048cb3c: adc bh, dh; dec dword ptr [rax - 0x7b]; sal byte ptr [rsp + rcx + 0x5b], 0x5d; pop r12; ret; 
0x00000000004be420: adc bl, ch; cld; jmp qword ptr [rax - 0x13]; 
0x000000000048a842: adc bl, ch; jno 0x8a88f; shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x00000000004663a4: adc bl, ch; ret 0x8348; 
0x0000000000435b10: adc bl, dh; movq qword ptr [rdi + 0x10], mm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000004271f4: adc bl, dh; movq qword ptr [rdi + rdx - 0x20], mm0; ret; 
0x000000000043c556: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, qword ptr [rdi + 0x13]; ret; 
0x000000000043c576: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, qword ptr [rdi + 0x14]; ret; 
0x000000000043bec6: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000043beb6: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000043c5d7: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, qword ptr [rdi + 0x17]; ret; 
0x000000000043c5f7: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, qword ptr [rdi + 0x18]; ret; 
0x000000000043bf47: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000043bf27: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000043c517: adc bl, dh; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, qword ptr [rdi + 0x11]; ret; 
0x000000000043be87: adc bl, dh; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000043c6d8: adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, qword ptr [rdi + 0x1f]; ret; 
0x000000000043c028: adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000435b0f: adc bl, r14b; movq qword ptr [rdi + 0x10], mm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000043c555: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, qword ptr [rdi + 0x13]; ret; 
0x000000000043c575: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, qword ptr [rdi + 0x14]; ret; 
0x000000000043bec5: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000043beb5: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000043c5d6: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, qword ptr [rdi + 0x17]; ret; 
0x000000000043c5f6: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, qword ptr [rdi + 0x18]; ret; 
0x000000000043bf46: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000043bf26: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000043c516: adc bl, r14b; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, qword ptr [rdi + 0x11]; ret; 
0x000000000043be86: adc bl, r14b; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000413bff: adc byte ptr [r11 + 0x15], sil; movzx eax, byte ptr [rax]; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x000000000047d220: adc byte ptr [r11 + 0x5d], bl; pop r12; ret; 
0x0000000000413a96: adc byte ptr [r11 + 6], r14b; movzx eax, byte ptr [rax]; ret; 
0x0000000000498d10: adc byte ptr [r13 - 0x497bf040], al; add dword ptr [rax], eax; add byte ptr [rax + 1], cl; ret; 
0x000000000045071d: adc byte ptr [r15], cl; xchg eax, ebx; ret 0x3948; 
0x000000000045127b: adc byte ptr [r15], r9b; xchg eax, ebx; ret 0x3949; 
0x0000000000450716: adc byte ptr [r8 + 0x39], r9b; ret; 
0x000000000048101f: adc byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x000000000047b0dd: adc byte ptr [r8 + 3], cl; or byte ptr [r8 + 0x29], cl; ror byte ptr [rcx - 0x77], 1; add ch, cl; ret 0xfffd; 
0x000000000041749c: adc byte ptr [r8 - 0x77], cl; ret 0x348; 
0x000000000041560c: adc byte ptr [r8 - 0x77], r9b; sbb byte ptr [r8 - 0x77], r9b; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x000000000047a274: adc byte ptr [r8 - 0x7d], cl; ret; 
0x00000000004413b2: adc byte ptr [r8 - 0x7d], r9b; ret; 
0x0000000000411043: adc byte ptr [r9 + 0x2b], r9b; or byte ptr [r8 + 0x29], r9b; ret; 
0x00000000004110f8: adc byte ptr [r9 + 0x2b], r9b; or byte ptr [r8 - 9], r9b; fimul dword ptr [rax - 0x77]; ror dword ptr [rax + 0x29], cl; ret; 
0x000000000047b153: adc byte ptr [r9 + 3], cl; add al, 0x24; mov qword ptr [rbp - 0xc8], r11; mov qword ptr [rbp - 0xa8], r10; call rax; 
0x000000000047a912: adc byte ptr [r9 + 3], cl; add al, 0x24; mov qword ptr [rbp - 0xd0], r11; mov qword ptr [rbp - 0xc8], r10; call rax; 
0x000000000044045c: adc byte ptr [rax + 0x101], bh; syscall; 
0x000000000045afbe: adc byte ptr [rax + 0x29], cl; ret 0x8b48; 
0x000000000048a43c: adc byte ptr [rax + 0x29], cl; ret; 
0x000000000043c2fa: adc byte ptr [rax + 0x29], cl; retf 0x8d4c; sbb eax, 0x686cb; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bcda: adc byte ptr [rax + 0x29], cl; retf 0x8d4c; sbb eax, 0x68c6b; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000004191e3: adc byte ptr [rax + 0x39], cl; ret 0xef75; 
0x0000000000450717: adc byte ptr [rax + 0x39], cl; ret; 
0x0000000000444d8f: adc byte ptr [rax + 0x3b], cl; sub byte ptr [rbx - 0x26], sil; mov eax, 1; ret; 
0x0000000000481020: adc byte ptr [rax + 0x5a], bl; pop rbx; ret; 
0x000000000043bcb7: adc byte ptr [rax + 0xf], cl; mov esp, 0x1d8d4cd2; lea ecx, dword ptr [rsi + rax + 0xc634900]; xchg eax, ebx; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000049a57a: adc byte ptr [rax + 0xf], cl; scasd eax, dword ptr [rdi]; ret 0xf48; 
0x000000000048aede: adc byte ptr [rax + 1], cl; ret; 
0x00000000004404de: adc byte ptr [rax + 3], bh; syscall; 
0x000000000047b0de: adc byte ptr [rax + 3], cl; or byte ptr [r8 + 0x29], cl; ror byte ptr [rcx - 0x77], 1; add ch, cl; ret 0xfffd; 
0x000000000040043d: adc byte ptr [rax - 0x39], cl; ret 0xffd0; 
0x000000000047d594: adc byte ptr [rax - 0x6df0fe06], al; ret 0x8348; 
0x0000000000427310: adc byte ptr [rax - 0x73], cl; jbe 0x27325; lea rdi, qword ptr [rdi + 0x10]; jne 0x27300; mov rax, rdi; ret; 
0x0000000000427314: adc byte ptr [rax - 0x73], cl; jg 0x27329; jne 0x27300; mov rax, rdi; ret; 
0x0000000000473ab5: adc byte ptr [rax - 0x73], cl; or al, 0x8e; add eax, dword ptr [rcx + rdx]; ret; 
0x0000000000473ab4: adc byte ptr [rax - 0x73], r9b; or al, 0x8e; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000048187c: adc byte ptr [rax - 0x74b80000], 0x75; add byte ptr [rcx - 0x39], cl; ret 0xff81; 
0x0000000000441022: adc byte ptr [rax - 0x75], cl; and al, 0x18; call rax; 
0x0000000000447f98: adc byte ptr [rax - 0x75], cl; and al, 0x20; call rax; 
0x00000000004488fb: adc byte ptr [rax - 0x75], cl; and al, 0x28; call rax; 
0x000000000042d18a: adc byte ptr [rax - 0x75], cl; sbb byte ptr [rax - 0x7d], r9b; ret 0x4802; 
0x000000000049a3b1: adc byte ptr [rax - 0x77], cl; cmp al, 0x24; mov qword ptr [rsp + 8], rsi; je 0x9a3c4; mov edi, 0x6cc140; call rax; 
0x00000000004127e8: adc byte ptr [rax - 0x77], cl; jae 0x1281d; mov qword ptr [rbx + 0x28], rsi; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x000000000046c387: adc byte ptr [rax - 0x77], cl; jo 0x6c39c; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000047ccbc: adc byte ptr [rax - 0x77], cl; or byte ptr [r8 - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000046d6bc: adc byte ptr [rax - 0x77], cl; or cl, byte ptr [rax - 0x77]; ret; 
0x000000000046d2e3: adc byte ptr [rax - 0x77], cl; push rax; sub byte ptr [rax - 0x77], cl; push rax; sbb byte ptr [rcx + 0x5bc0310b], cl; ret; 
0x000000000041749d: adc byte ptr [rax - 0x77], cl; ret 0x348; 
0x00000000004686cf: adc byte ptr [rax - 0x77], cl; ret 0x860f; 
0x0000000000482d34: adc byte ptr [rax - 0x77], cl; ret 0x875; 
0x000000000041d241: adc byte ptr [rax - 0x77], cl; ret 0x8d4e; 
0x000000000040eb33: adc byte ptr [rax - 0x77], cl; ret; 
0x00000000004975c9: adc byte ptr [rax - 0x77], cl; retf 0x8b48; xor cl, byte ptr [rax - 0x7d]; ret 0xf08; 
0x000000000043346f: adc byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x77], 1; sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000041560d: adc byte ptr [rax - 0x77], cl; sbb byte ptr [r8 - 0x77], r9b; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x00000000004159d7: adc byte ptr [rax - 0x77], cl; sbb r11b, bpl; fldenv dword ptr [rsi - 0x70]; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000440ae8: adc byte ptr [rax - 0x7b], cl; push qword ptr [rax + rcx + 0x48]; mov esi, ebx; call 0x40aa0; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000440b29: adc byte ptr [rax - 0x7b], cl; push qword ptr [rax + rcx + 0x48]; mov esi, ebx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004a12d1: adc byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rdx + 0x48]; mov eax, dword ptr [rdi + 0x20]; test rax, rax; je 0xa12e7; call rax; 
0x00000000004a0abf: adc byte ptr [rax - 0x7b], cl; push qword ptr [rbx + rcx - 0x17]; xchg eax, esi; fcompi st(7); jmp qword ptr [rsi + 0xf]; 
0x0000000000452d48: adc byte ptr [rax - 0x7b], cl; ror byte ptr [rax - 0x77], 0xc7; mov byte ptr [rsi], dl; jne 0x52d38; mov rax, rsi; ret; 
0x0000000000438c27: adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; call qword ptr [rbx]; 
0x0000000000438c63: adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x0000000000401e2f: adc byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx + 0x31], 0xf6; mov edi, 1; call rax; 
0x0000000000421723: adc byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000004206fb: adc byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000048b419: adc byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000040119a: adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000450553: adc byte ptr [rax - 1], bh; add rsp, 0xd0; ret; 
0x000000000043ff2c: adc byte ptr [rax], 0; ret; 
0x0000000000475acc: adc byte ptr [rax], al; add byte ptr [rax + 0x9e], bh; syscall; 
0x00000000004af275: adc byte ptr [rax], al; add byte ptr [rax + rdx + 0x10bf0000], bh; add byte ptr [rax], al; ret 0x10; 
0x000000000047d39e: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0x5c493103; ret; 
0x000000000047d3f8: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0x5c49315d; ret; 
0x0000000000423730: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0x7f10; 
0x000000000042a132: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0xf10; 
0x000000000042bbfc: adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a551: adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000046be21: adc byte ptr [rax], al; add byte ptr [rax], al; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000043ff86: adc byte ptr [rax], al; add byte ptr [rax], al; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x000000000043ef5a: adc byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000047388d: adc byte ptr [rax], al; add byte ptr [rax], al; sub rsp, 0x30; mov rdx, rsp; syscall; 
0x000000000045eb99: adc byte ptr [rax], al; add byte ptr [rdi], cl; xchg dword ptr [rbx + rcx], esp; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004af26d: adc byte ptr [rax], al; add byte ptr [rsi - 0x46fffff0], dh; adc byte ptr [rax], al; add byte ptr [rax + rdx + 0x10bf0000], bh; add byte ptr [rax], al; ret 0x10; 
0x0000000000436d78: adc byte ptr [rax], al; add cl, ch; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x0000000000442284: adc byte ptr [rax], al; jne 0x417f8; mov esi, 3; mov rdi, r12; call rbx; 
0x00000000004422fb: adc byte ptr [rax], al; jne 0x4181d; mov esi, 3; mov rdi, r13; call rbx; 
0x000000000044233b: adc byte ptr [rax], al; jne 0x41841; mov esi, 3; mov rdi, r14; call rbx; 
0x000000000044257b: adc byte ptr [rax], al; jne 0x41861; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004425db: adc byte ptr [rax], al; jne 0x418da; mov esi, 3; mov rdi, r15; call rbx; 
0x000000000044239b: adc byte ptr [rax], al; jne 0x41966; mov esi, 3; mov rdi, r14; call rbx; 
0x000000000044261b: adc byte ptr [rax], al; jne 0x41986; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004425fb: adc byte ptr [rax], al; jne 0x419ff; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004422bb: adc byte ptr [rax], al; jne 0x41a9b; mov esi, 3; mov rdi, r13; call rbx; 
0x000000000044237b: adc byte ptr [rax], al; jne 0x41abf; mov esi, 3; mov rdi, r14; call rbx; 
0x00000000004425bb: adc byte ptr [rax], al; jne 0x41adf; mov esi, 3; mov rdi, r15; call rbx; 
0x000000000044259b: adc byte ptr [rax], al; jne 0x41b58; mov esi, 3; mov rdi, r15; call rbx; 
0x000000000044235b: adc byte ptr [rax], al; jne 0x41be4; mov esi, 3; mov rdi, r14; call rbx; 
0x000000000044255b: adc byte ptr [rax], al; jne 0x41c04; mov esi, 3; mov rdi, r15; call rbx; 
0x000000000044253b: adc byte ptr [rax], al; jne 0x41c7d; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442264: adc byte ptr [rax], al; jne 0x41d25; mov esi, 3; mov rdi, r12; call rbx; 
0x00000000004422db: adc byte ptr [rax], al; jne 0x41d4a; mov esi, 3; mov rdi, r13; call rbx; 
0x000000000044241b: adc byte ptr [rax], al; jne 0x41d6e; mov esi, 3; mov rdi, r14; call rbx; 
0x000000000044245b: adc byte ptr [rax], al; jne 0x41d8e; mov esi, 3; mov rdi, r15; call rbx; 
0x000000000044243b: adc byte ptr [rax], al; jne 0x41e07; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004423fb: adc byte ptr [rax], al; jne 0x41e93; mov esi, 3; mov rdi, r14; call rbx; 
0x000000000044251b: adc byte ptr [rax], al; jne 0x41eb3; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004424fb: adc byte ptr [rax], al; jne 0x41f2c; mov esi, 3; mov rdi, r15; call rbx; 
0x000000000044231b: adc byte ptr [rax], al; jne 0x41fc8; mov esi, 3; mov rdi, r13; call rbx; 
0x00000000004423db: adc byte ptr [rax], al; jne 0x41fec; mov esi, 3; mov rdi, r14; call rbx; 
0x00000000004424db: adc byte ptr [rax], al; jne 0x4200c; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004424bb: adc byte ptr [rax], al; jne 0x42085; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004423bb: adc byte ptr [rax], al; jne 0x42111; mov esi, 3; mov rdi, r14; call rbx; 
0x000000000044249b: adc byte ptr [rax], al; jne 0x42131; mov esi, 3; mov rdi, r15; call rbx; 
0x000000000044247b: adc byte ptr [rax], al; jne 0x421aa; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004811eb: adc byte ptr [rax], al; jne 0x81228; xor eax, eax; add rsp, 0x68; ret; 
0x000000000048bf08: adc byte ptr [rax], al; or rsi, rax; mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x0000000000443880: adc byte ptr [rax], dh; cmp byte ptr [rax + rax + 0x48], al; mov dword ptr [rax + 8], edx; ret; 
0x000000000044387f: adc byte ptr [rax], sil; cmp byte ptr [rax + rax + 0x48], al; mov dword ptr [rax + 8], edx; ret; 
0x000000000046d578: adc byte ptr [rbp + 0x15], dh; sub rdx, qword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; shr rdx, 2; sub eax, edx; ret; 
0x00000000004195ba: adc byte ptr [rbp + 0x39], cl; ret; 
0x000000000049ace8: adc byte ptr [rbp + rbp*8 - 0x18], dh; and byte ptr [rdi], dh; idiv edi; mov rax, qword ptr [rsi + 0xb8]; add rsp, 8; ret; 
0x000000000043c33f: adc byte ptr [rbp + rcx*4 + 0x1d], cl; mov dword ptr [rsi + 0x63490006], eax; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bd1f: adc byte ptr [rbp + rcx*4 + 0x1d], cl; sub dword ptr [rsi + rax + 0xc634900], ecx; xchg eax, ebx; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000048a3e5: adc byte ptr [rbp + rcx*4 + 0x34], cl; ret 0x8d4a; 
0x0000000000410779: adc byte ptr [rbp + rcx*4 + 0x44], cl; and al, 0x18; call qword ptr [rbp + 0x18]; 
0x00000000004114bc: adc byte ptr [rbp + rcx*4 + 0x44], cl; and al, 0x30; lea rsi, qword ptr [rsp + 0x20]; call qword ptr [rbx + 8]; 
0x0000000000427318: adc byte ptr [rbp - 0x1b], dh; mov rax, rdi; ret; 
0x0000000000498d11: adc byte ptr [rbp - 0x497bf040], al; add dword ptr [rax], eax; add byte ptr [rax + 1], cl; ret; 
0x0000000000440e97: adc byte ptr [rbp - 0x7b], cl; test byte ptr [rdi], 0x84; ret 0; 
0x00000000004a498c: adc byte ptr [rbp - 7], dh; jmp qword ptr [rax]; 
0x0000000000413c00: adc byte ptr [rbx + 0x15], dh; movzx eax, byte ptr [rax]; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x000000000048c777: adc byte ptr [rbx + 0x31], bl; test byte ptr [rbx + 0x2412433d], 0; jmp rax; 
0x0000000000401276: adc byte ptr [rbx + 0x410c247c], cl; call rsp; 
0x00000000004012ca: adc byte ptr [rbx + 0x480c247c], cl; mov eax, dword ptr [rsp + 0x18]; call rax; 
0x000000000049da3c: adc byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x000000000041f63b: adc byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000410733: adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000004c1892: adc byte ptr [rbx + 0xa], cl; ret; 
0x00000000004bff67: adc byte ptr [rbx + 0xe490202], al; nop; add dword ptr [rsi + rcx + 0x10], ecx; je 0xbff7e; ret; 
0x000000000043bf87: adc byte ptr [rbx + 0xff3174e], cl; jg 0x3bf96; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000043c637: adc byte ptr [rbx + 0xff3174e], cl; jg 0x3c646; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, qword ptr [rdi + 0x1a]; ret; 
0x000000000043bfa7: adc byte ptr [rbx + 0xff3184e], cl; jg 0x3bfb6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000043c657: adc byte ptr [rbx + 0xff3184e], cl; jg 0x3c666; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, qword ptr [rdi + 0x1b]; ret; 
0x0000000000413a97: adc byte ptr [rbx + 6], dh; movzx eax, byte ptr [rax]; ret; 
0x0000000000416f52: adc byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x00000000004a40ec: adc byte ptr [rbx - 0x5bcf0008], ah; clc; call qword ptr [rax - 0x5b]; 
0x000000000043ec0a: adc byte ptr [rbx - 0x6bf0fd06], al; ret 0x8444; 
0x00000000004c1590: adc byte ptr [rbx - 0xb], ah; call qword ptr [rsi]; 
0x00000000004c0630: adc byte ptr [rbx], ah; cmc; call qword ptr [rsi + 4]; 
0x000000000043f728: adc byte ptr [rbx], al; add byte ptr [rax - 0x7d], cl; call 0xffffffffc4873f33; cmp byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000411044: adc byte ptr [rcx + 0x2b], cl; or byte ptr [r8 + 0x29], r9b; ret; 
0x00000000004110f9: adc byte ptr [rcx + 0x2b], cl; or byte ptr [r8 - 9], r9b; fimul dword ptr [rax - 0x77]; ror dword ptr [rax + 0x29], cl; ret; 
0x000000000044d1c4: adc byte ptr [rcx + 0x39], cl; ret; 
0x000000000047b154: adc byte ptr [rcx + 3], cl; add al, 0x24; mov qword ptr [rbp - 0xc8], r11; mov qword ptr [rbp - 0xa8], r10; call rax; 
0x000000000047a913: adc byte ptr [rcx + 3], cl; add al, 0x24; mov qword ptr [rbp - 0xd0], r11; mov qword ptr [rbp - 0xc8], r10; call rax; 
0x000000000041c0a0: adc byte ptr [rcx + rcx*4 + 0x44], cl; and al, 8; mov qword ptr [rsp], rcx; call rdx; 
0x0000000000420fe3: adc byte ptr [rcx + rcx*4 - 0x1a], cl; mov rdi, rax; pop rbx; pop rbp; pop r12; jmp rcx; 
0x0000000000420543: adc byte ptr [rcx + rcx*4 - 0x1a], cl; pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000046a8e0: adc byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; ret; 
0x000000000049f8e8: adc byte ptr [rcx - 0x75], cl; sbb byte ptr [r8 - 0x7d], r9b; ret; 
0x000000000040db1c: adc byte ptr [rcx - 0x77], cl; ret 0x8d48; 
0x0000000000419567: adc byte ptr [rcx - 0x7d], al; ret 0x4801; 
0x00000000004235c3: adc byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000048f6a7: adc byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x00000000004a494c: adc byte ptr [rcx], ah; stc; jmp qword ptr [rax]; 
0x000000000045ad82: adc byte ptr [rcx], al; add byte ptr [rax - 0x77], cl; ret 0xf0e9; 
0x00000000004014bd: adc byte ptr [rcx], al; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000043f384: adc byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000420f29: adc byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000475ac9: adc byte ptr [rdi + 0x1002], bh; mov eax, 0x9e; syscall; 
0x0000000000475ac8: adc byte ptr [rdi + 0x1002], r15b; mov eax, 0x9e; syscall; 
0x000000000043f711: adc byte ptr [rdi + 1], bh; mov eax, 0xe5; syscall; 
0x000000000043f46f: adc byte ptr [rdi + rdx*8 + 0x48], dh; add esp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000411575: adc byte ptr [rdi - 1], dl; jo 0x115b2; mov rdi, rbp; lea r8, qword ptr [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x00000000004a4648: adc byte ptr [rdi], 0xf9; call qword ptr [rax]; 
0x0000000000433188: adc byte ptr [rdi], al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000049a456: adc byte ptr [rdi], cl; sub dword ptr [rsp + 0x20], ecx; movaps xmmword ptr [rsp + 0x30], xmm0; je 0x9a46a; mov edi, 0x6cc140; call rax; 
0x000000000043c793: adc byte ptr [rdi], cl; test esi, edx; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x0000000000492b1b: adc byte ptr [rdi], cl; xchg bh, cl; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000049161f: adc byte ptr [rdi], cl; xchg bl, cl; adc eax, 0x83480000; ret 0xe910; 
0x000000000049281f: adc byte ptr [rdi], cl; xchg bl, cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000491f1f: adc byte ptr [rdi], cl; xchg bl, cl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000049221f: adc byte ptr [rdi], cl; xchg bl, cl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000491917: adc byte ptr [rdi], cl; xchg bl, dl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000491bc4: adc byte ptr [rdi], cl; xchg byte ptr [rsi], ah; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004927c4: adc byte ptr [rdi], cl; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000492ac4: adc byte ptr [rdi], cl; xchg byte ptr [rsi], ah; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004921c4: adc byte ptr [rdi], cl; xchg byte ptr [rsi], ah; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000491ec4: adc byte ptr [rdi], cl; xchg byte ptr [rsi], ah; or eax, 0x83480000; ret 0x4910; 
0x00000000004918bc: adc byte ptr [rdi], cl; xchg byte ptr [rsi], ch; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000049094d: adc byte ptr [rdi], cl; xchg ch, ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000049076d: adc byte ptr [rdi], cl; xchg ch, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000491145: adc byte ptr [rdi], cl; xchg ch, dh; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000490065: adc byte ptr [rdi], cl; xchg ch, dl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000490f65: adc byte ptr [rdi], cl; xchg ch, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000045071e: adc byte ptr [rdi], cl; xchg eax, ebx; ret 0x3948; 
0x000000000045127c: adc byte ptr [rdi], cl; xchg eax, ebx; ret 0x3949; 
0x0000000000450c9c: adc byte ptr [rdi], r9b; xchg eax, ebx; ret 0x3948; 
0x0000000000426806: adc byte ptr [rdx + 0x426230], bh; mov eax, 0x43e180; cmove rax, rdx; ret; 
0x00000000004c660a: adc byte ptr [rdx + 0xe], al; or byte ptr [rdx + 0xb], cl; add byte ptr fs:[rax], al; add byte ptr [rbp + rsi*2 - 0x70e80000], dl; cli; jmp rdx; 
0x00000000004c335b: adc byte ptr [rdx + rax - 0x79e7f1bc], cl; add eax, dword ptr [rsi + rcx + 0x20]; add dword ptr [rsp + rbp*2], 0xa; ret; 
0x00000000004c0afb: adc byte ptr [rdx + rax - 0x79e7f1bf], cl; add eax, dword ptr [rbx + 0xe]; and byte ptr [rbx + 0xa4d0204], al; ret; 
0x00000000004c93bc: adc byte ptr [rdx + rax - 0x79e7f1bf], cl; add eax, dword ptr [rcx + 0xe]; and byte ptr [rbx + 0x1890304], al; ret; 
0x00000000004c0523: adc byte ptr [rdx + rax - 0x79e7f1bf], cl; add eax, dword ptr [rcx + 0xe]; and byte ptr [rbx + 0xa470204], al; ret; 
0x00000000004c0a03: adc byte ptr [rdx + rax - 0x79e7f1bf], cl; add eax, dword ptr [rsi + rcx + 0x20]; add dword ptr [rdx + rax], -0xc; ret; 
0x00000000004689aa: adc byte ptr [rdx + rdx*8 - 0x76b7d08c], al; ret; 
0x00000000004a49e4: adc byte ptr [rdx - 7], bh; push qword ptr [rax]; jp 0xa49e4; inc dword ptr [rax + 0x7a]; stc; call qword ptr [rax + 0x7a]; 
0x000000000044004e: adc byte ptr [rdx], al; cmove eax, edx; add rsp, 0x60; pop rbx; ret; 
0x000000000043e266: adc byte ptr [rdx], al; jne 0x3e280; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x3e260; ret; 
0x000000000043e316: adc byte ptr [rdx], al; jne 0x3e330; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x3e310; ret; 
0x00000000004c9d30: adc byte ptr [rdx], bh; std; jmp qword ptr [rdi]; 
0x000000000042fbdb: adc byte ptr [rdx], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000043e265: adc byte ptr [rdx], r8b; jne 0x3e280; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x3e260; ret; 
0x000000000043e315: adc byte ptr [rdx], r8b; jne 0x3e330; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x3e310; ret; 
0x00000000004be3b8: adc byte ptr [rip + 0x1ef0fffd], bl; std; call rax; 
0x000000000044002c: adc byte ptr [rsi + 0x10], bh; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x0000000000475ccd: adc byte ptr [rsi + 0x4b], ah; add al, ch; jp 0x75c96; clc; jmp qword ptr [rsi + 0x2e]; 
0x00000000004c7663: adc byte ptr [rsi + 0x60d4602], al; pop qword ptr [rbx]; mov es, word ptr [rcx*4 + 0x4b068c05]; add dword ptr [rdi], 3; mov bl, 2; ret; 
0x000000000042f085: adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042fa8a: adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret; 
0x000000000042f080: adc byte ptr [rsi + 0xf], ah; out dx, eax; push rsi; adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004221b5: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x0000000000427c6b: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0xf10; 
0x000000000049eacf: adc byte ptr [rsi + rsi*2 + 0x49], dh; lea ebp, dword ptr [rbp - 1]; mov rdx, r12; mov rdi, qword ptr [rsp]; mov rsi, qword ptr [r15 + rbp*8 + 0x10]; call rbx; 
0x000000000043c763: adc byte ptr [rsi - 0x70], ah; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x000000000043631a: adc byte ptr [rsi - 0x75], ah; mov cx, word ptr ss:[rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000043bf67: adc byte ptr [rsi - 0x75], ah; sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000004a49b4: adc byte ptr [rsi - 7], dh; push qword ptr [rax]; jbe 0xa49b4; call qword ptr [rax + 0x76]; 
0x00000000004a3fe0: adc byte ptr [rsi - 8], bh; jmp qword ptr [rax + 0x7f]; 
0x000000000048bfff: adc byte ptr [rsp - 4], al; ret; 
0x000000000048c045: adc byte ptr [rsp - 8], al; ret; 
0x0000000000491bc7: adc byte ptr es:[rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004bccd9: adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x00000000004a43a4: adc ch, cl; clc; jmp qword ptr [rax - 0x32]; 
0x00000000004a4671: adc cl, bh; jmp qword ptr [rax + 0x10]; 
0x00000000004a4675: adc cl, bh; jmp rax; 
0x000000000045331f: adc cl, byte ptr [rax - 0x75]; adc cl, byte ptr [rbx + rcx*4 + 0x74]; ret 0x4c40; 
0x00000000004242c5: adc cl, byte ptr [rax - 1]; ret 0x2288; 
0x0000000000453322: adc cl, byte ptr [rbx + rcx*4 + 0x74]; ret 0x4c40; 
0x000000000047db7a: adc cl, byte ptr [rcx + 0x48b48d8]; ret 0x8b48; 
0x000000000049c11c: adc cl, byte ptr [rcx + 1]; ret 0x3ee9; 
0x000000000046cf64: adc cl, byte ptr [rcx - 0x7d]; ret 0x4410; 
0x000000000048b411: adc cl, byte ptr [rcx - 0x7d]; ret; 
0x0000000000427280: adc dh, bh; ret; 
0x000000000049ed7b: adc dh, byte ptr [rsi + 0x489066ff]; mov eax, dword ptr [rip + 0x22efc9]; mov qword ptr [rip + 0x22efc2], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000041bbb1: adc dh, dh; ret 0xf0f; 
0x000000000048ad83: adc dword ptr [rax + 1], ecx; ror byte ptr [rax + 0x39], 1; ret 0x8949; 
0x000000000048c8bb: adc dword ptr [rax + rax], esp; call rax; 
0x000000000040f194: adc dword ptr [rax + rcx*2 + 0x33], esp; adc al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rdx; 
0x000000000040f1dc: adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x00000000004125f2: adc dword ptr [rax - 0x39], ecx; ret 0xffd0; 
0x0000000000450175: adc dword ptr [rax - 0x39], ecx; ret 0xffe0; 
0x0000000000411035: adc dword ptr [rax - 0x3f], ecx; cli; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x2948; 
0x000000000048b45c: adc dword ptr [rax - 0x73], ecx; add dword ptr [rax + 0x39], ecx; ret 0x8948; 
0x000000000045024c: adc dword ptr [rax - 0x75], ecx; add byte ptr [rax - 0x39], cl; ret 0xffe0; 
0x0000000000480c2c: adc dword ptr [rax - 0x77], ecx; je 0x80c55; or byte ptr [rdi + 0x6cc140], bh; call rax; 
0x000000000041876e: adc dword ptr [rax - 0x77], ecx; ret 0x8348; 
0x0000000000416efc: adc dword ptr [rax - 0x77], ecx; ret 0x8b48; 
0x000000000047ec2a: adc dword ptr [rax - 0x7d], ecx; ret 0x4808; 
0x000000000042bbfb: adc dword ptr [rax], 0x83480000; ret 0x4910; 
0x0000000000458b59: adc dword ptr [rax], eax; add byte ptr [rax - 0x12743], al; jmp qword ptr [rsi + 0xf]; 
0x000000000042a4e7: adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042baff: adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004bb197: adc dword ptr [rbp - 0x1f57cada], ebp; sar byte ptr [rsi + rax*2], 0xf8; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x000000000043f828: adc dword ptr [rbx], eax; add byte ptr [rax - 0x77], cl; ret 0x6b8; 
0x0000000000473ab0: adc dword ptr [rcx + 0x104e23c1], ecx; lea rcx, qword ptr [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x00000000004365e9: adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x00000000004365f0: adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x00000000004365f7: adc dword ptr [rcx + 7], edi; ret; 
0x0000000000478580: adc dword ptr [rcx + rcx*4 + 4], ecx; and al, 0x48; lea edi, dword ptr [rax + 0x6cc1e0]; call rdx; 
0x0000000000436292: adc dword ptr [rcx - 1], ebx; ret; 
0x0000000000436256: adc dword ptr [rcx - 1], edi; ret; 
0x000000000043628b: adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000436489: adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000043624f: adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000436482: adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000436248: adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000043647b: adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000436241: adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004173a6: adc dword ptr [rcx], esi; rol byte ptr [rbx - 0x6af00002], 0xc0; neg eax; ret; 
0x00000000004005cb: adc dword ptr [rdi + 0x4be2dc], edi; mov ecx, 0xe; mov rsi, rax; repe cmpsb byte ptr [rsi], byte ptr [rdi]; jne 0x5de; ret; 
0x0000000000480dbe: adc dword ptr [rdi + 0x6cc140], edi; add rsp, 8; jmp rax; 
0x00000000004036f4: adc dword ptr [rdi + 0x6ccfe0], edi; call rax; 
0x0000000000436284: adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000043e841: adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000436744: adc dword ptr [rdi - 5], esp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000043674b: adc dword ptr [rdi - 6], ebp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000436752: adc dword ptr [rdi - 7], esi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000436759: adc dword ptr [rdi - 8], edi; ret; 
0x00000000004330cb: adc dword ptr [rdi], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043627e: adc dword ptr [rdi], eax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000043dd90: adc dword ptr [rdi], ecx; test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x000000000043e83b: adc dword ptr [rdi], edx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043e85c: adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004723e5: adc dword ptr [rsi + 0x48000000], -0x77; fmul dword ptr [rax - 0x7d]; ret; 
0x000000000043e981: adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000043e988: adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000043e98f: adc dword ptr [rsi + 3], edx; ret; 
0x000000000043ea1e: adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000043ea25: adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000043ea2c: adc dword ptr [rsi + 7], edx; ret; 
0x000000000043e82e: adc dword ptr [rsi - 1], edx; ret; 
0x000000000043e827: adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043e820: adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043e819: adc dword ptr [rsi - 4], edx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043e97b: adc dword ptr [rsi], edx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000042a4e6: adc dword ptr es:[rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000046d57a: adc eax, 0x10502b48; mov eax, dword ptr [rdi + 0x10]; shr rdx, 2; sub eax, edx; ret; 
0x00000000004951e8: adc eax, 0x13213; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004951c3: adc eax, 0x13238; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000492c08: adc eax, 0x157f3; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000492be3: adc eax, 0x15818; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000491258: adc eax, 0x171a3; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000491233: adc eax, 0x171c8; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004be3a9: adc eax, 0x1770fffd; std; call qword ptr [rax + 0x19]; 
0x000000000048f288: adc eax, 0x19173; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004a12d6: adc eax, 0x20478b48; test rax, rax; je 0xa12e7; call rax; 
0x00000000004c062d: adc eax, 0x23100000; cmc; call qword ptr [rsi + 4]; 
0x000000000049a595: adc eax, 0x23359e; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000452938: adc eax, 0x23850f00; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000479d9d: adc eax, 0x2523e6; xor eax, eax; add rsp, 8; ret; 
0x0000000000473802: adc eax, 0x2630; jne 0x7381d; mov eax, 3; syscall; 
0x0000000000444dd7: adc eax, 0x2861bc; pop rbx; ret; 
0x00000000004172c3: adc eax, 0x2b62e0; add dword ptr [rip + 0x2b62d5], 1; ret; 
0x00000000004012c1: adc eax, 0x2cc37a; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000479e4a: adc eax, 0x3158f80; add byte ptr [rax], al; add al, 0x48; add esp, 8; ret; 
0x0000000000479e4d: adc eax, 0x4000003; add rsp, 8; ret; 
0x0000000000479d89: adc eax, 0x4000003; xor eax, eax; ret; 
0x00000000004b9bfe: adc eax, 0x42d35a1d; cmp al, 0xe; push rsp; jmp qword ptr [rbx - 0x40]; 
0x0000000000435fc5: adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435fc0: adc eax, 0x477f0ff3; adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000413c02: adc eax, 0x4800b60f; add esp, 0x98; pop rbx; pop rbp; ret; 
0x0000000000438a1e: adc eax, 0x6f9dd; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042cce8: adc eax, 0x7b713; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042ccce: adc eax, 0x7b72d; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042b678: adc eax, 0x7cd83; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042b65e: adc eax, 0x7cd9d; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000429ac8: adc eax, 0x7e933; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000429aae: adc eax, 0x7e94d; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042a071: adc eax, 0x83480000; ret 0xe910; 
0x0000000000477059: adc eax, 0x89000003; ret 0xe8c0; 
0x0000000000400f23: adc eax, 0x90fffffe; leave; ret; 
0x000000000043ff9a: adc eax, 0xac24448b; mov edx, eax; neg edx; cmp dword ptr [rsp - 0x58], 2; cmove eax, edx; ret; 
0x000000000042ed6a: adc eax, 0xd0bc0f48; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000046f02a: adc eax, 0xe180d188; pcmpeqb mm3, qword ptr [rsi]; ret; 
0x000000000040f568: adc eax, 0xf2850f00; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000049d7c4: adc eax, dword ptr [rax - 0x80]; push qword ptr [rax]; jne 0x9d7f0; mov rax, qword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x000000000049d824: adc eax, dword ptr [rax - 0x80]; push qword ptr [rax]; jne 0x9d850; mov rax, qword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x000000000042b95e: adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000048fe89: adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000048c569: adc eax, dword ptr [rcx]; add byte ptr [rax], al; mov esi, 0x48c500; mov edi, 0x6cd9c0; call rax; 
0x0000000000432f15: adc eax, dword ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004918bf: adc eax, dword ptr cs:[rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000048a309: adc eax, eax; ret; 
0x000000000048be86: adc eax, edx; pop rbp; pop rbx; ret; 
0x00000000004bef30: adc ebp, -3; call qword ptr [rax - 0x31]; 
0x00000000004bb025: adc ebp, dword ptr [rbx]; fstp dword ptr [rbx + 0x4a315a58]; ret 0x1b49; 
0x000000000049c782: adc ecx, dword ptr [rax + 0x63]; ret 0xbc80; 
0x0000000000442bff: adc ecx, dword ptr [rax - 0x39]; ret 0xffd0; 
0x0000000000415f6a: adc ecx, dword ptr [rax - 0x7b]; push qword ptr [rbp + rax - 0xa]; ret 0x7401; 
0x0000000000447f31: adc ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000044d494: adc ecx, dword ptr [rcx + 0x29d231fb]; ret; 
0x000000000044eccc: adc ecx, dword ptr [rcx - 0x77]; add al, 0x24; mov rax, qword ptr [rbp*8 + 0x4a6e00]; test rax, rax; je 0x4ece0; call rax; 
0x00000000004a4669: adc ecx, edi; jmp qword ptr [rax + 0x11]; 
0x00000000004a466d: adc ecx, edi; jmp rax; 
0x0000000000415f81: adc edi, dword ptr [rax + 1]; pop rbx; pop rbp; pop r12; ret; 
0x00000000004a4659: adc edi, ecx; jmp qword ptr [rax + 0x13]; 
0x00000000004a465d: adc edi, ecx; jmp rax; 
0x000000000042eff9: adc edx, dword ptr [rcx + 7]; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000048af1a: adc edx, eax; mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000048a301: adc edx, ebx; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x00000000004bc53e: adc esi, dword ptr [rbp - 0x60001a67]; mov dh, 0xc7; ret 0xe71f; 
0x000000000049da7c: adc esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000042cce9: adc esi, dword ptr [rdi + 0xc8b0007]; mov cl, byte ptr [rbx - 0x37d67dfc]; ret; 
0x00000000004951e9: adc esi, dword ptr [rdx]; add dword ptr [rax], eax; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000049ec22: adc esi, dword ptr [rsi + 0x1f0fff]; mov rax, qword ptr [rip + 0x22f121]; mov qword ptr [rip + 0x22f11a], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x0000000000491aa2: adc qword ptr [r8], rax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004365e8: adc qword ptr [rcx + 5], rbp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x00000000004365ef: adc qword ptr [rcx + 6], rsi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x00000000004365f6: adc qword ptr [rcx + 7], rdi; ret; 
0x0000000000436291: adc qword ptr [rcx - 1], rbx; ret; 
0x0000000000436255: adc qword ptr [rcx - 1], rdi; ret; 
0x000000000043628a: adc qword ptr [rcx - 2], rdx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000436488: adc qword ptr [rcx - 2], rsi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000043624e: adc qword ptr [rcx - 2], rsi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000436481: adc qword ptr [rcx - 3], rbp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000436247: adc qword ptr [rcx - 3], rbp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000043647a: adc qword ptr [rcx - 4], rsp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000436240: adc qword ptr [rcx - 4], rsp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000436283: adc qword ptr [rdi + 1], rcx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000043e840: adc qword ptr [rdi + 1], rdx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000436743: adc qword ptr [rdi - 5], rsp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000043674a: adc qword ptr [rdi - 6], rbp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000436751: adc qword ptr [rdi - 7], rsi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000436758: adc qword ptr [rdi - 8], rdi; ret; 
0x000000000043627d: adc qword ptr [rdi], rax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000043e83a: adc qword ptr [rdi], rdx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043e85b: adc qword ptr [rdi], rdx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043e980: adc qword ptr [rsi + 1], rdx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000043e987: adc qword ptr [rsi + 2], rdx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000043e98e: adc qword ptr [rsi + 3], rdx; ret; 
0x000000000043ea1d: adc qword ptr [rsi + 5], rdx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000043ea24: adc qword ptr [rsi + 6], rdx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000043ea2b: adc qword ptr [rsi + 7], rdx; ret; 
0x000000000043e82d: adc qword ptr [rsi - 1], rdx; ret; 
0x000000000043e826: adc qword ptr [rsi - 2], rdx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043e81f: adc qword ptr [rsi - 3], rdx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043e818: adc qword ptr [rsi - 4], rdx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043e97a: adc qword ptr [rsi], rdx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000048a300: adc r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x00000000004271f3: adc r11b, r14b; movq qword ptr [rdi + rdx - 0x20], mm0; ret; 
0x000000000047f6bb: adc r8b, bpl; mov r8b, byte ptr [rcx]; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000048fff0: adc r8b, byte ptr [r8]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000048be85: adc rax, rdx; pop rbp; pop rbx; ret; 
0x000000000048af19: adc rdx, r8; mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000042727f: adc sil, r15b; ret; 
0x000000000048c77d: adc spl, byte ptr [r8 + r8]; jmp rax; 
0x00000000004c7963: add ah, ah; mov byte ptr [rax], al; add al, bl; push rdx; sti; jmp qword ptr [rdx]; 
0x00000000004c4963: add ah, ah; pop rax; add byte ptr [rax], al; js 0xc4901; clc; jmp rbx; 
0x00000000004c3a43: add ah, al; add byte ptr [r8], al; mov byte ptr [rdx], bl; clc; call qword ptr [rax]; 
0x00000000004c3943: add ah, al; add byte ptr [rax], al; or byte ptr [rax + rdi*8], dl; call qword ptr [rbx]; 
0x00000000004c3f43: add ah, al; add byte ptr [rax], r8b; cwde; cmp al, bh; call qword ptr [rax]; 
0x00000000004c5a43: add ah, al; imul eax, dword ptr [rax], 0xfa61b800; jmp qword ptr [rdi + 1]; 
0x00000000004c0d43: add ah, al; sbb al, 0; add byte ptr [rax + 0x49], cl; cmc; call qword ptr [rsi]; 
0x000000000043eebe: add ah, bh; add eax, dword ptr [rax]; pop rbx; ret; 
0x000000000043eede: add ah, bh; add eax, dword ptr [rax]; ret; 
0x00000000004c117b: add ah, bh; and byte ptr [rax], al; add byte ptr [rax], dh; pop rdx; cmc; jmp qword ptr [rsi + 2]; 
0x000000000043ef6d: add ah, bh; inc dword ptr [rbx]; div ecx; pop rbx; mov eax, eax; ret; 
0x000000000043ee9d: add ah, bh; inc dword ptr [rbx]; pop rbx; ret; 
0x00000000004c7e7b: add ah, bh; lea eax, dword ptr [rax]; add byte ptr [rax], dl; test bl, bh; jmp rsi; 
0x00000000004c1b7b: add ah, bh; sub al, byte ptr [rax]; add byte ptr [rax], ah; cmpsb byte ptr [rsi], byte ptr [rdi]; cmc; call rsp; 
0x00000000004c3c5b: add ah, bl; add byte ptr [r8], al; sbb edi, eax; call qword ptr [rsi + 0xb]; 
0x00000000004c08ff: add ah, byte ptr [rbx + 0x41180e0a]; ret; 
0x00000000004c09d8: add ah, byte ptr [rdx + 0x41280e0a]; ret; 
0x000000000043e98a: add ah, byte ptr [rdx - 0xf]; jl 0x3e9d7; adc dword ptr [rsi + 3], edx; ret; 
0x000000000043b903: add ah, byte ptr [rsi - 0x75]; add al, 0x66; mov dword ptr [rdx + 4], eax; lea rax, qword ptr [rdx + 5]; ret; 
0x000000000043a143: add ah, byte ptr [rsi - 0x75]; add al, 0x66; mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x00000000004c056b: add ah, ch; adc al, 0; add byte ptr [rax + 0x20], dh; cmc; jmp qword ptr [rsi]; 
0x00000000004c616b: add ah, ch; jo 0xc616f; add byte ptr [rax + 0x78], dh; cli; call qword ptr [rcx]; 
0x00000000004c786b: add ah, ch; xchg dword ptr [rax], eax; add byte ptr [rax], ah; push rax; sti; jmp qword ptr [rdx]; 
0x00000000004c9f4b: add ah, cl; scasb al, byte ptr [rdi]; add byte ptr [rax], al; rol byte ptr [rdx - 3], 1; call qword ptr [rcx + 1]; 
0x00000000004c9c4b: add ah, cl; stosd dword ptr [rdi], eax; add byte ptr [rax], al; mov al, 0x38; std; call qword ptr [rdi]; 
0x00000000004c9973: add ah, dh; test al, 0; add byte ptr [rax + 0x32], cl; std; call rsp; 
0x00000000004c1253: add ah, dl; and dword ptr [rax], eax; add byte ptr [rax], cl; pop rbp; cmc; call qword ptr [rsi]; 
0x00000000004c8253: add ah, dl; xchg eax, ecx; add byte ptr [rax], al; js 0xc81eb; sti; call qword ptr [rdx]; 
0x000000000044a5d1: add al, 0; add byte ptr [rax - 0x73], cl; add dword ptr [rax + 0x39], ecx; ret; 
0x000000000044a609: add al, 0; add byte ptr [rax - 0x73], cl; add ecx, dword ptr [rax + 0x39]; ret; 
0x0000000000423cfd: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042c81f: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000423d21: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000049d781: add al, 0; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000421d7d: add al, 0; add byte ptr [rax], al; je 0x21d8a; lea rax, qword ptr [rip + 0x1a966]; ret; 
0x0000000000441dfd: add al, 0; add byte ptr [rax], al; je 0x42438; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441d84: add al, 0; add byte ptr [rax], al; je 0x42458; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004421a0: add al, 0; add byte ptr [rax], al; je 0x42478; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044207b: add al, 0; add byte ptr [rax], al; je 0x424b8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442002: add al, 0; add byte ptr [rax], al; je 0x424d8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441f22: add al, 0; add byte ptr [rax], al; je 0x424f8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441c73: add al, 0; add byte ptr [rax], al; je 0x42538; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441bfa: add al, 0; add byte ptr [rax], al; je 0x42558; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441857: add al, 0; add byte ptr [rax], al; je 0x42578; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441ad5: add al, 0; add byte ptr [rax], al; je 0x425b8; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004418d0: add al, 0; add byte ptr [rax], al; je 0x425d8; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004419f5: add al, 0; add byte ptr [rax], al; je 0x425f8; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044197c: add al, 0; add byte ptr [rax], al; je 0x42618; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441882: add al, 0; add byte ptr [rax], al; mov esi, 1; call rbx; 
0x00000000004418a4: add al, 0; add byte ptr [rax], al; mov esi, 2; mov rdi, r15; call rbx; 
0x0000000000427898: add al, 0; add byte ptr [rax], al; ret; 
0x000000000043fd8f: add al, 0; add byte ptr [rax], al; syscall; 
0x00000000004bf535: add al, 0; add byte ptr [rax], ch; xor dh, ah; call qword ptr [rdx]; 
0x000000000049e4f3: add al, 0; add byte ptr [rbx + rcx*4 + 0x4d], cl; sbb byte ptr [rbp + 0x31], al; ror byte ptr [rbp - 0x75], 0x51; or byte ptr [rbp + 0x39], cl; ret 0x4776; 
0x000000000044a931: add al, 0; add byte ptr [rcx - 0x73], cl; add dword ptr [r8 + 0x39], r9d; ret; 
0x0000000000418cad: add al, 0; add byte ptr [rcx - 0xa], al; ret; 
0x00000000004033f5: add al, 0; add byte ptr [rdi + 0x6cd720], bh; call rbx; 
0x0000000000440246: add al, 0; add byte ptr [rdx + 0x80000], bh; mov esi, 0x4a5790; mov rdi, -0x64; mov eax, 0x101; syscall; 
0x00000000004b2915: add al, 0; add byte ptr [rsp + rax + 0x4be0000], bh; add byte ptr [rax], al; rol byte ptr [rax + rax], 0; ret 4; 
0x00000000004197d6: add al, 0; add dh, dh; ret; 
0x000000000040fba4: add al, 0; add rsp, 0xd8; ret; 
0x0000000000401083: add al, 0; leave; ret; 
0x00000000004003fe: add al, 0; mov edx, 0x1d; mov esi, 0x4a2a86; mov rdi, rbx; mov eax, 1; syscall; 
0x0000000000473abb: add al, 0x11; ret; 
0x000000000043ef0d: add al, 0x12; pop rbx; and eax, 0x7ff80000; ret; 
0x000000000047d1c9: add al, 0x16; jae 0x7d171; xor eax, eax; ret; 
0x0000000000423f8b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg ah, bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000423b7b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg ah, ch; add eax, 0x83480000; ret 0xeb10; 
0x0000000000423687: add al, 0x16; sbb cl, byte ptr [rdi]; xchg al, ah; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000423e97: add al, 0x16; sbb cl, byte ptr [rdi]; xchg al, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042390b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000423c4b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax - 0x7cb80000], bl; ret 0xeb10; 
0x0000000000423f67: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000424037: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000423deb: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004235db: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rcx - 0x7cb80000], cl; ret 0xeb10; 
0x00000000004239db: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rdi + rax - 0x7cb80000], cl; ret 0xeb10; 
0x0000000000423ebb: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rax - 0x7cb80000], ch; ret 0xeb10; 
0x00000000004236ab: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x000000000042374d: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx], bl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000423aab: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi + rax - 0x7cb80000], bh; ret 0xeb10; 
0x0000000000423d1b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rsp + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000423771: add al, 0x16; sbb cl, byte ptr [rdi]; xchg dh, dh; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004951bf: add al, 0x17; lea rdx, qword ptr [rip + 0x13238]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000492bdf: add al, 0x17; lea rdx, qword ptr [rip + 0x15818]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000049122f: add al, 0x17; lea rdx, qword ptr [rip + 0x171c8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000438a1a: add al, 0x17; lea rdx, qword ptr [rip + 0x6f9dd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042ccca: add al, 0x17; lea rdx, qword ptr [rip + 0x7b72d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042b65a: add al, 0x17; lea rdx, qword ptr [rip + 0x7cd9d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000429aaa: add al, 0x17; lea rdx, qword ptr [rip + 0x7e94d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042ed71: add al, 0x17; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x00000000004233fa: add al, 0x17; sub eax, ecx; ret; 
0x000000000043fd6d: add al, 0x24; add rsp, 0x18; ret; 
0x000000000047a27c: add al, 0x24; call rax; 
0x0000000000478583: add al, 0x24; lea rdi, qword ptr [rax + 0x6cc1e0]; call rdx; 
0x000000000043fea8: add al, 0x24; mov eax, 0; syscall; 
0x00000000004739b8: add al, 0x24; mov eax, 0x14; syscall; 
0x000000000043ff08: add al, 0x24; mov eax, 1; syscall; 
0x000000000043fe48: add al, 0x24; mov eax, 2; syscall; 
0x0000000000473828: add al, 0x24; mov eax, 3; syscall; 
0x000000000047b157: add al, 0x24; mov qword ptr [rbp - 0xc8], r11; mov qword ptr [rbp - 0xa8], r10; call rax; 
0x000000000047a916: add al, 0x24; mov qword ptr [rbp - 0xd0], r11; mov qword ptr [rbp - 0xc8], r10; call rax; 
0x000000000044eccf: add al, 0x24; mov rax, qword ptr [rbp*8 + 0x4a6e00]; test rax, rax; je 0x4ece0; call rax; 
0x00000000004110c5: add al, 0x24; mov rbx, qword ptr [r15 + 0x98]; mov rdi, rbx; call qword ptr [rbx + 0x20]; 
0x0000000000442c7c: add al, 0x24; mov rdx, rax; mov eax, r12d; syscall; 
0x0000000000481353: add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; add rax, -8; ret; 
0x00000000004501ba: add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000496985: add al, 0x25; rol byte ptr [rdx], 1; add byte ptr [rax], al; ret; 
0x000000000040f1e0: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x000000000044dbed: add al, 0x29; ret 0x8941; 
0x000000000046e3ae: add al, 0x31; ret; 
0x000000000046e2aa: add al, 0x37; ret; 
0x0000000000452dce: add al, 0x38; mov rdi, rdx; mov byte ptr [rsi], al; jne 0x52db0; mov rax, rsi; ret; 
0x000000000041664f: add al, 0x3a; ret; 
0x00000000004c2980: add al, 0x45; mov word ptr [rip + 0x3068345], es; mov byte ptr [rcx], al; ret; 
0x0000000000479e51: add al, 0x48; add esp, 8; ret; 
0x000000000043c3eb: add al, 0x48; lea eax, dword ptr [rdi + 5]; ret; 
0x000000000043b8f9: add al, 0x48; lea eax, dword ptr [rdx + 4]; ret; 
0x000000000043b90b: add al, 0x48; lea eax, dword ptr [rdx + 5]; ret; 
0x000000000046c873: add al, 0x48; mov dword ptr [rax], ecx; mov eax, dword ptr [rdx]; pop rbx; ret; 
0x000000000046c7b3: add al, 0x48; mov dword ptr [rax], edx; mov eax, dword ptr [rsi]; pop rbx; ret; 
0x000000000048a11f: add al, 0x48; mov dword ptr [rbp], ebx; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000435cda: add al, 0x48; mov dword ptr [rdi], ecx; ret; 
0x000000000046c694: add al, 0x48; mov dword ptr [rdx], ecx; mov edx, dword ptr [rax]; mov eax, edx; pop rbx; ret; 
0x000000000043a139: add al, 0x48; mov eax, edi; ret; 
0x0000000000435cd3: add al, 0x48; mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000047357d: add al, 0x48; sub esp, 0x80; call 0x43300; add rsp, 0x80; pop rbx; ret; 
0x000000000046dfa4: add al, 0x48; xor eax, eax; ret; 
0x000000000047d1c6: add al, 0x4c; cmp eax, dword ptr [rsi + rdx]; jae 0x7d171; xor eax, eax; ret; 
0x000000000047cab6: add al, 0x4c; cmp edx, eax; jne 0x7ca5b; mov eax, dword ptr [rsi + 4]; ret; 
0x000000000046f686: add al, 0x4c; lea ecx, dword ptr [rsp + 0x20]; lea rdx, qword ptr [rsp + 0x28]; lea rsi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000043b907: add al, 0x66; mov dword ptr [rdx + 4], eax; lea rax, qword ptr [rdx + 5]; ret; 
0x000000000043a147: add al, 0x66; mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x000000000044d492: add al, 0x72; adc ecx, dword ptr [rcx + 0x29d231fb]; ret; 
0x0000000000436307: add al, 0x72; or al, 0x8b; mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000433352: add al, 0x72; or eax, 0xfc164c8b; mov esi, dword ptr [rsi]; mov dword ptr [rdi], esi; mov dword ptr [rdi + rdx - 4], ecx; ret; 
0x000000000041c814: add al, 0x74; and al, 0x89; ret 0xb48b; 
0x000000000049d75e: add al, 0x75; adc al, 0xb8; or byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000479e48: add al, 0x75; adc eax, 0x3158f80; add byte ptr [rax], al; add al, 0x48; add esp, 8; ret; 
0x00000000004209fa: add al, 0x77; or dword ptr [rcx - 0x7d], ecx; ret 0xe977; 
0x00000000004c0997: add al, 0x79; ret; 
0x000000000047de01: add al, 0x80; cli; add dword ptr [rdi], ecx; xchg eax, edx; ret 0xb60f; 
0x0000000000429d5b: add al, 0x81; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000042b633: add al, 0x81; sub eax, edx; ret; 
0x0000000000429ab7: add al, 0x82; sub eax, ecx; ret; 
0x000000000043f381: add al, 0x83; adc byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000449f9d: add al, 0x83; cli; add dword ptr [rax + 0x19], ecx; ror byte ptr [rax - 0x7d], cl; ret 0x4906; 
0x0000000000473d10: add al, 0x85; leave; jne 0x73cc1; xor eax, eax; ret; 
0x000000000049c62b: add al, 0x86; add rax, r14; jmp rax; 
0x000000000043b8f6: add al, 0x88; add al, 0x48; lea eax, dword ptr [rdx + 4]; ret; 
0x000000000043a136: add al, 0x88; add al, 0x48; mov eax, edi; ret; 
0x000000000040ea0a: add al, 0x89; add ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000045d0a0: add al, 0x8b; or byte ptr [rax - 0x7d], cl; ret 0x8504; 
0x000000000043eed6: add al, 0x8d; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; and eax, 0x3fc00; ret; 
0x0000000000482a03: add al, 0x8d; push rcx; rol byte ptr [rax - 0x6df0f506], 1; ret 0xb60f; 
0x00000000004c63de: add al, 0x8e; add ecx, dword ptr [rdi + 0x80e6a02]; ret; 
0x00000000004798be: add al, 0x90; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x00000000004c8284: add al, 0x92; add byte ptr [rax], al; js 0xc821b; sti; call qword ptr [rdx]; 
0x000000000049c0a3: add al, 0x98; add rax, r8; jmp rax; 
0x00000000004186c8: add al, 0xac; add al, byte ptr [rax]; add rsp, 0x80; mov eax, 0x6cb800; ret; 
0x00000000004603c9: add al, 0xc5; movabs al, byte ptr [0xffef5485c7004b48]; jmp qword ptr [rax]; 
0x00000000004584cc: add al, 0xd1; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x00000000004bef74: add al, 0xd7; std; call rsp; 
0x000000000045dbfa: add al, 0xd8; mov byte ptr [rbp - 0x514], r9b; mov byte ptr [rbp - 0x500], r8b; mov rsi, r15; mov rdi, qword ptr [rbp - 0x4a0]; call rax; 
0x000000000045397a: add al, 0xd8; mov dword ptr [rbp - 0x4d4], r9d; mov byte ptr [rbp - 0x4d0], r8b; mov rsi, r15; mov rdi, rbx; call rax; 
0x000000000040da31: add al, 0xe9; stosd dword ptr [rdi], eax; sar edi, cl; jmp qword ptr [rsi + 0xf]; 
0x00000000004a47c4: add al, 0xe; stc; push qword ptr [rbp + rcx - 7]; jmp rsp; 
0x0000000000436043: add al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x000000000043fdeb: add al, 0xf3; ret; 
0x00000000004272d9: add al, 0xf6; ret 0x7408; 
0x000000000048c805: add al, 0xf; mov dh, 0xc0; pop rbx; pop rbp; pop r12; ret; 
0x000000000042353d: add al, 0xf; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x00000000004be44d: add al, 0xfd; call rax; 
0x000000000044e7bd: add al, 0xfd; retf 0x6c; ret; 
0x000000000049e8d0: add al, 1; add byte ptr [rax], al; mov rsi, qword ptr [r14 + 8]; mov rdx, qword ptr [r15]; mov rdi, rbp; call rbx; 
0x0000000000463d38: add al, 1; add dword ptr [rax - 0x7d], ecx; ret 0xf01; 
0x000000000047d17c: add al, 1; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000041022d: add al, 1; mov rax, qword ptr [rdx + 0xd8]; mov rbx, rdx; mov rdi, rdx; call qword ptr [rax + 0x60]; 
0x00000000004c0a0f: add al, 2; hlt; ret; 
0x00000000004bf384: add al, 3; add byte ptr [rax], al; cmp byte ptr [rcx], ch; hlt; jmp qword ptr [rbx]; 
0x00000000004302e7: add al, 3; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004c93c8: add al, 3; mov dword ptr [rcx], eax; ret; 
0x00000000004a66b8: add al, 4; add al, 4; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x4a60; 
0x00000000004a66ba: add al, 4; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x4a60; 
0x0000000000446b35: add al, 7; add al, ch; ret; 
0x0000000000421ddd: add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000042d908: add al, 7; ret; 
0x000000000042eedf: add al, 8; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000004a4294: add al, ah; clc; jmp rax; 
0x000000000048c527: add al, ah; fldcw word ptr [rax + rax + 0x48]; add esp, 8; ret; 
0x00000000004c619f: add al, ah; js 0xc619d; call rsi; 
0x00000000004c8f1f: add al, ah; ret 0xfffc; 
0x000000000048c915: add al, ah; retf 0x6c; add rsp, 8; ret; 
0x00000000004bfc3f: add al, al; cmc; hlt; call qword ptr [rbx]; 
0x00000000004c402f: add al, al; cmp edi, eax; call qword ptr [rbx + 5]; 
0x000000000048131f: add al, al; retf 0x6c; add rsp, 0x48; ret; 
0x00000000004af127: add al, al; sldt word ptr [rax]; ret; 
0x0000000000413176: add al, al; sub dword ptr [rdx], ecx; mov rax, qword ptr [rbp + 0xd8]; call qword ptr [rax + 0x40]; 
0x0000000000413b39: add al, al; sub dword ptr [rdx], ecx; mov rax, qword ptr [rbx + 0xd8]; call qword ptr [rax + 0x20]; 
0x000000000041397a: add al, al; sub dword ptr [rdx], ecx; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x00000000004a3ec1: add al, bh; inc dword ptr [rax + 1]; clc; call qword ptr [rax]; 
0x00000000004c8fff: add al, bh; iretd; cld; call qword ptr [rdi + 9]; 
0x00000000004c7637: add al, bh; sub bl, bh; call rdx; 
0x00000000004a4404: add al, bl; clc; call qword ptr [rax - 0x27]; 
0x00000000004c0f97: add al, bl; push rax; cmc; jmp qword ptr [rbx]; 
0x00000000004c7967: add al, bl; push rdx; sti; jmp qword ptr [rdx]; 
0x00000000004c29c7: add al, bl; test al, 0xf6; jmp qword ptr [rsi]; 
0x00000000004011ea: add al, bpl; call qword ptr [rdx]; 
0x000000000046dc4f: add al, bpl; cli; stc; jmp qword ptr [rsi + 0x2e]; 
0x000000000041b6d5: add al, bpl; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000043ecf3: add al, bpl; push rsi; xor bh, ah; jmp qword ptr [rsi + 0xf]; 
0x000000000044b9e3: add al, bpl; sti; jmp qword ptr [rsi + 0xf]; 
0x00000000004929a2: add al, byte ptr [r8]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004242c1: add al, byte ptr [rax + rax*8 - 0xb7ed8c]; ret 0x2288; 
0x00000000004bf2ad: add al, byte ptr [rax]; add al, dh; and ah, dh; call rdi; 
0x000000000046b503: add al, byte ptr [rax]; add bl, ch; or dword ptr [rdi], 0x841f; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x0000000000419c3d: add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x00000000004268b3: add al, byte ptr [rax]; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x0000000000411115: add al, byte ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x0000000000450246: add al, byte ptr [rax]; add byte ptr [rax + rcx*2 - 0x77], ah; adc dword ptr [rax - 0x75], ecx; add byte ptr [rax - 0x39], cl; ret 0xffe0; 
0x000000000049b7fd: add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; jl 0x9b828; sub byte ptr [rax - 0x7d], cl; ret; 
0x000000000040049f: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; fild word ptr [rcx + rcx*4 - 0x30]; syscall; 
0x0000000000418160: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x18eb; 
0x00000000004729a6: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004798f1: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; xchg dword ptr [rax], eax; add eax, dword ptr [rax]; add bl, dh; ret; 
0x000000000041ec41: add al, byte ptr [rax]; add byte ptr [rax - 0x7b], cl; test byte ptr [rdi], 0x94; ret 0x8548; 
0x0000000000420336: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x000000000045293d: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000423e9d: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000497c2c: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x8308; 
0x000000000042b3f1: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000423ec1: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000044696d: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000048bf21: add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x000000000049d791: add al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000441a91: add al, byte ptr [rax]; add byte ptr [rax], al; je 0x422b8; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441d40: add al, byte ptr [rax]; add byte ptr [rax], al; je 0x422d8; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441813: add al, byte ptr [rax]; add byte ptr [rax], al; je 0x422f8; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000440a72: add al, byte ptr [rax]; add byte ptr [rax], al; jmp rax; 
0x0000000000442ed9: add al, byte ptr [rax]; add byte ptr [rax], al; mov esi, 0x80000; mov edi, 0x4a58c8; mov eax, ebx; syscall; 
0x000000000047312c: add al, byte ptr [rax]; add byte ptr [rax], al; mov esi, 0x90800; mov eax, ecx; sub rsp, 0x98; syscall; 
0x000000000044193b: add al, byte ptr [rax]; add byte ptr [rax], al; mov esi, 1; mov rdi, r13; call rbx; 
0x0000000000441a60: add al, byte ptr [rax]; add byte ptr [rax], al; mov esi, 2; mov rdi, r13; call rbx; 
0x0000000000441cf2: add al, byte ptr [rax]; add byte ptr [rax], al; mov rdi, r12; call rbx; 
0x0000000000441a65: add al, byte ptr [rax]; add byte ptr [rax], al; mov rdi, r13; call rbx; 
0x0000000000441931: add al, byte ptr [rax]; add byte ptr [rax], al; mov rdi, r14; call rbx; 
0x00000000004418a9: add al, byte ptr [rax]; add byte ptr [rax], al; mov rdi, r15; call rbx; 
0x000000000046f093: add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000400430: add al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000043fe2a: add al, byte ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x00000000004730ba: add al, byte ptr [rax]; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000403ff5: add al, byte ptr [rax]; add byte ptr [rax], al; xor esi, esi; mov eax, ecx; syscall; 
0x000000000040296e: add al, byte ptr [rax]; add byte ptr [rax], bh; test rax, rax; je 0x2984; lea rdi, qword ptr [rbx + 0x80]; call rax; 
0x00000000004036e8: add al, byte ptr [rax]; add byte ptr [rax], bh; test rax, rax; je 0x3706; mov edi, 0x6ccfe0; call rax; 
0x000000000042783d: add al, byte ptr [rax]; add byte ptr [rbp + 7], dh; lea rax, qword ptr [rip + 0x67]; ret; 
0x0000000000421fd1: add al, byte ptr [rax]; add byte ptr [rbp + 7], dh; lea rax, qword ptr [rip + 3]; ret; 
0x0000000000427890: add al, byte ptr [rax]; add byte ptr [rbp + 7], dh; lea rax, qword ptr [rip + 4]; ret; 
0x0000000000426b77: add al, byte ptr [rax]; add byte ptr [rbp + 8], dh; lea rax, qword ptr [rip + 0x1d]; ret; 
0x0000000000416d5d: add al, byte ptr [rax]; add byte ptr [rbp - 0x44], dh; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000041c80c: add al, byte ptr [rax]; add byte ptr [rbp - 0x77cfdb9], cl; add al, 0x74; and al, 0x89; ret 0xb48b; 
0x000000000041ff10: add al, byte ptr [rax]; add byte ptr [rbp - 0x7b], cl; in al, 0xf; xchg eax, esp; ret 0x8548; 
0x0000000000478e6e: add al, byte ptr [rax]; add byte ptr [rbx + 0x25d9e115], cl; add bh, dh; ret 0x804; 
0x000000000043dd94: add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x000000000047dd6d: add al, byte ptr [rax]; add byte ptr [rcx + 0x48b48d8], cl; ret 0x8b48; 
0x0000000000400463: add al, byte ptr [rax]; add byte ptr [rcx + rcx*4 - 0x39], cl; mov eax, ebp; syscall; 
0x0000000000465a8e: add al, byte ptr [rax]; add byte ptr [rcx - 0x73], cl; dec dword ptr [r8 + 0x39]; ret; 
0x000000000041dac7: add al, byte ptr [rax]; add byte ptr [rcx - 0xa], al; ret 0xf01; 
0x000000000041b08c: add al, byte ptr [rax]; add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x0000000000419288: add al, byte ptr [rax]; add byte ptr [rcx - 0xa], al; ret; 
0x000000000044881c: add al, byte ptr [rax]; add byte ptr [rcx], dh; ror byte ptr [rcx + 0x39], cl; ret 0x1e76; 
0x0000000000447e9c: add al, byte ptr [rax]; add byte ptr [rcx], dh; ror byte ptr [rcx + 0x39], cl; ret 0x2876; 
0x0000000000427721: add al, byte ptr [rax]; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0x12ad3]; ret; 
0x00000000004241f1: add al, byte ptr [rax]; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0x14853]; ret; 
0x000000000047c151: add al, byte ptr [rax]; add rsp, 0x140; pop rbx; ret; 
0x00000000004186ca: add al, byte ptr [rax]; add rsp, 0x80; mov eax, 0x6cb800; ret; 
0x00000000004172b8: add al, byte ptr [rax]; add rsp, 0x80; mov qword ptr [rip + 0x2b62e0], rdx; add dword ptr [rip + 0x2b62d5], 1; ret; 
0x0000000000417ed7: add al, byte ptr [rax]; add rsp, 0x80; mov qword ptr fs:[r9], rdx; mov rax, rdx; add rsp, 8; ret; 
0x000000000041ea4b: add al, byte ptr [rax]; add rsp, 0x80; mov rax, rbx; pop rbx; ret; 
0x00000000004209e3: add al, byte ptr [rax]; add rsp, 0x80; xor eax, eax; pop rbx; ret; 
0x000000000042716e: add al, byte ptr [rax]; je 0x27179; lea rax, qword ptr [rip + 0x17647]; ret; 
0x0000000000401939: add al, byte ptr [rax]; mov edi, 0x4a1e23; mov eax, 2; syscall; 
0x00000000004019aa: add al, byte ptr [rax]; mov edi, 0x4a1e2d; mov eax, 2; syscall; 
0x00000000004ca31d: add al, byte ptr [rax]; ret; 
0x00000000004629ab: add al, byte ptr [rbp + 0x481b7eed]; mov eax, dword ptr [rbx + 0xd8]; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004191fb: add al, byte ptr [rbx - 0x76b7fe38]; pop r8; mov dword ptr [rdi + 4], eax; ret; 
0x000000000044332e: add al, byte ptr [rcx + 0x39]; ret; 
0x00000000004c5e65: add al, byte ptr [rcx + 0xe]; sbb byte ptr [rsi + 0x200e4103], al; add dword ptr [rax + rbp*2], 0xa; ret; 
0x00000000004c0e15: add al, byte ptr [rcx + 0xe]; sbb byte ptr [rsi + 0x200e4103], al; add dword ptr [rsi], 0xa; ret; 
0x00000000004c0a05: add al, byte ptr [rcx + 0xe]; sbb byte ptr [rsi + 0x200e4403], al; add dword ptr [rdx + rax], -0xc; ret; 
0x00000000004c0530: add al, byte ptr [rdi + 0xa]; ret; 
0x00000000004341b7: add al, byte ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000046f026: add al, byte ptr [rdx + rdx*8 - 0x2e77ea8c]; and cl, 0xf; je 0x6f050; ret; 
0x00000000004c5fbd: add al, byte ptr [rdx]; pop rsi; ret; 
0x00000000004c5d95: add al, byte ptr [rdx]; push rsi; ret; 
0x000000000048c3c5: add al, byte ptr [rip + 0x5b000000]; ret; 
0x000000000048187a: add al, ch; adc byte ptr [rax - 0x74b80000], 0x75; add byte ptr [rcx - 0x39], cl; ret 0xff81; 
0x00000000004186c6: add al, ch; add al, 0xac; add al, byte ptr [rax]; add rsp, 0x80; mov eax, 0x6cb800; ret; 
0x00000000004441c8: add al, ch; and ch, byte ptr [rsi - 0x7a450004]; jle 0x4421d; add byte ptr [rax - 0x7b], cl; ror byte ptr [rax + 0xf], 0x44; ret 0x3880; 
0x00000000004011eb: add al, ch; call qword ptr [rdx]; 
0x000000000049c971: add al, ch; cdq; sbb dh, bh; jmp qword ptr [rsi + 0xf]; 
0x000000000047e914: add al, ch; clc; jmp qword ptr [rsi + 0xf]; 
0x000000000046dc50: add al, ch; cli; stc; jmp qword ptr [rsi + 0x2e]; 
0x00000000004c0f37: add al, ch; cmc; call qword ptr [rcx]; 
0x000000000047e508: add al, ch; cmp dil, al; jmp qword ptr [rsi - 0x70]; 
0x000000000047e56c: add al, ch; fidivr word ptr [rcx]; clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000047f570: add al, ch; fisubr dword ptr [rcx]; clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000045b930: add al, ch; fisubr dword ptr [rdx]; sti; jmp qword ptr [rsi + 0x2e]; 
0x0000000000400d18: add al, ch; in eax, dx; add byte ptr [rax], al; nop; pop rbp; ret; 
0x00000000004541d0: add al, ch; jp 0x541b1; cli; jmp qword ptr [rsi + 0x2e]; 
0x0000000000475cd0: add al, ch; jp 0x75c96; clc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000453161: add al, ch; leave; ret; 
0x000000000047e3c0: add al, ch; mov bh, byte ptr [rbx]; clc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000466698: add al, ch; mov dl, 0xb8; stc; jmp qword ptr [rsi - 0x70]; 
0x000000000041b6d6: add al, ch; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000481708: add al, ch; or al, dil; jmp qword ptr [rsi - 0x70]; 
0x000000000045d8f0: add al, ch; pop rdx; cli; jmp qword ptr [rsi + 0x2e]; 
0x000000000045318d: add al, ch; popfq; ret; 
0x000000000043ecf4: add al, ch; push rsi; xor bh, ah; jmp qword ptr [rsi + 0xf]; 
0x0000000000487488: add al, ch; ret 0xf7aa; 
0x0000000000484588: add al, ch; ret 0xf7d9; 
0x0000000000477988: add al, ch; ret 0xf8a5; 
0x0000000000470a08: add al, ch; ret 0xfd28; 
0x000000000046df48: add al, ch; ret 0xfe4d; 
0x0000000000410137: add al, ch; ret; 
0x000000000047ed1c: add al, ch; sahf; sar edi, 1; jmp qword ptr [rsi + 0xf]; 
0x0000000000400f5f: add al, ch; sbb ebp, edi; add eax, dword ptr [rax]; nop; pop rbp; ret; 
0x0000000000474031: add al, ch; stc; ret 0xfff8; 
0x00000000004c7797: add al, ch; sti; call qword ptr [rdi]; 
0x00000000004c76d7: add al, ch; sti; jmp qword ptr [rbp + 1]; 
0x000000000044b9e4: add al, ch; sti; jmp qword ptr [rsi + 0xf]; 
0x000000000046f61c: add al, ch; sub ecx, edi; jmp qword ptr [rsi + 0xf]; 
0x000000000048a0c4: add al, ch; xchg byte ptr [rsi - 9], bh; jmp qword ptr [rsi + 0xf]; 
0x00000000004c3057: add al, cl; int 0xf7; call qword ptr [rcx]; 
0x00000000004c55c7: add al, cl; jl 0xc55c4; call rdx; 
0x00000000004c4d27: add al, cl; mov ch, 0xf8; jmp qword ptr [rsi]; 
0x00000000004c6be7: add al, cl; ret; 
0x00000000004c9b97: add al, cl; std; call rcx; 
0x00000000004bf2af: add al, dh; and ah, dh; call rdi; 
0x00000000004c20bf: add al, dh; fdiv st(5); jmp qword ptr [rdi + 3]; 
0x00000000004c32cf: add al, dl; fdivr st(7), st(0); call qword ptr [rbx + 3]; 
0x00000000004c9f4f: add al, dl; std; call qword ptr [rcx + 1]; 
0x00000000004c070f: add al, dl; sub ch, dh; call qword ptr [rax]; 
0x00000000004c7dba: add bh, ah; ret; 
0x000000000048bf1f: add bh, al; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x000000000044566f: add bh, al; add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000041e6a7: add bh, al; add eax, 0x2aef56; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000460d4d: add bh, al; test dword ptr [rax + 0xffffef], eax; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x00000000004603ce: add bh, al; test dword ptr [rdi + rbp*8 - 1], edx; jmp qword ptr [rax]; 
0x0000000000413e7a: add bh, bh; nop; add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x0000000000401197: add bh, bh; push rbx; adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000400960: add bh, bh; rcr byte ptr [rbp - 0x3a], 1; add eax, 0x2cc1f5; add ebx, esi; ret; 
0x000000000049828f: add bh, bh; ror dword ptr [rax - 0x77], cl; ret; 
0x00000000004a4334: add bh, bl; clc; jmp rax; 
0x0000000000427129: add bh, byte ptr [rax + 0x4336a0]; mov edx, 0x430630; cmove rax, rdx; ret; 
0x000000000048bef0: add bh, byte ptr [rax + 1]; ret; 
0x0000000000412de2: add bh, byte ptr [rax - 1]; pop rbx; ret; 
0x000000000040e3fb: add bh, byte ptr [rax - 1]; ret; 
0x0000000000442ed7: add bh, byte ptr [rbx + 2]; mov esi, 0x80000; mov edi, 0x4a58c8; mov eax, ebx; syscall; 
0x00000000004c011b: add bh, byte ptr [rcx + 0x41380e0a]; ret; 
0x00000000004c0620: add bh, byte ptr [rdi + 0xe]; movabs al, byte ptr [0x44200e4c01]; lodsb al, byte ptr [rsi]; adc eax, 0x23100000; cmc; call qword ptr [rsi + 4]; 
0x0000000000443d3f: add bh, dh; ret 0; 
0x0000000000478e76: add bh, dh; ret 0x804; 
0x00000000004a431c: add bl, ah; clc; jmp rax; 
0x0000000000421c44: add bl, al; mov rsi, rbx; mov rdi, rax; call rcx; 
0x0000000000443265: add bl, al; nop word ptr [rax + rax]; mov eax, 0x63; syscall; 
0x00000000004409e2: add bl, al; nop word ptr cs:[rax + rax]; nop; mov eax, 0x1c; syscall; 
0x00000000004409c2: add bl, al; nop word ptr cs:[rax + rax]; nop; mov eax, 0xa; syscall; 
0x00000000004c6bff: add bl, byte ptr [rax + 0x41180e0a]; ret; 
0x000000000046c878: add bl, byte ptr [rbx - 0x3d]; nop dword ptr [rax + rax]; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004c5d67: add bl, byte ptr [rcx + 0xa]; ret; 
0x00000000004c6cbd: add bl, byte ptr [rdx + 0xa]; ret; 
0x000000000043f49f: add bl, ch; cmpsd dword ptr [rsi], dword ptr [rdi]; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0x25; syscall; 
0x0000000000480d8d: add bl, ch; lodsb al, byte ptr [rsi]; mov rax, qword ptr [rdi]; cmp rax, rsi; je 0x80da0; ret; 
0x000000000046b505: add bl, ch; or dword ptr [rdi], 0x841f; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x0000000000472baa: add bl, ch; ret 0x1f0f; 
0x000000000049b895: add bl, ch; xchg eax, ebx; nop dword ptr [rax + rax]; mov eax, 5; ret; 
0x000000000043be7f: add bl, dh; movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000043be9f: add bl, dh; movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000043bf1f: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000043bedf: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000043beff: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000043c01f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000043bfbf: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000043bfdf: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000043bfff: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000043c4ef: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000043c4ff: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, qword ptr [rdi + 0x10]; ret; 
0x000000000043be6f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000004271ef: add bl, dh; movq qword ptr [rdi + 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000406ad7: add bl, dh; ret; 
0x000000000043be7e: add bl, sil; movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000004c158b: add byte ptr [0x63100000], cl; cmc; call qword ptr [rsi]; 
0x00000000004c95ab: add byte ptr [0xfa00000], ch; std; call qword ptr [rax]; 
0x000000000042712d: add byte ptr [r10 + 0x430630], dil; cmove rax, rdx; ret; 
0x000000000040f15e: add byte ptr [r11 + 0x13], sil; mov rbp, rax; call qword ptr [rbp]; 
0x000000000046fda1: add byte ptr [r15 + 0x4b5e18], dil; call 0x1f50; nop dword ptr [rax]; mov eax, 0xc9; syscall; 
0x000000000046fda1: add byte ptr [r15 + 0x4b5e18], dil; call 0x1f50; nop dword ptr [rax]; mov eax, 0xc9; syscall; ret; 
0x000000000045c353: add byte ptr [r15 + r9 + 0x44], cl; ret 0xf4c; 
0x000000000045b33f: add byte ptr [r15 + r9 + 0x45], cl; ret 0xf4c; 
0x000000000047d201: add byte ptr [r8 + 0x39], r9b; ret; 
0x000000000040f158: add byte ptr [r8 + 0x3d], cl; lock add byte ptr [r11 + 0x13], sil; mov rbp, rax; call qword ptr [rbp]; 
0x000000000049e14f: add byte ptr [r8 + 1], r9b; ret; 
0x000000000041fa78: add byte ptr [r8 + rax*8 - 0x74b7d58b], r8b; add eax, 0x2adb6b; test rax, rax; je 0x1fa8c; call rax; 
0x00000000004603c5: add byte ptr [r8 - 0x75], cl; add al, 0xc5; movabs al, byte ptr [0xffef5485c7004b48]; jmp qword ptr [rax]; 
0x000000000046d193: add byte ptr [r8 - 0x75], r9b; push rax; and cl, ch; sar dh, 0xff; jmp qword ptr [rsi - 0x70]; 
0x0000000000470fd5: add byte ptr [r8 - 0x77], cl; ret; 
0x00000000004441d1: add byte ptr [r8 - 0x7b], cl; ror byte ptr [rax + 0xf], 0x44; ret 0x3880; 
0x0000000000447a35: add byte ptr [r8 - 0x7d], r9b; ret 0x4901; 
0x00000000004c39fd: add byte ptr [r8], al; mov al, 0x15; clc; call qword ptr [rax]; 
0x00000000004c3a45: add byte ptr [r8], al; mov byte ptr [rdx], bl; clc; call qword ptr [rax]; 
0x00000000004c3c5d: add byte ptr [r8], al; sbb edi, eax; call qword ptr [rsi + 0xb]; 
0x00000000004407e0: add byte ptr [r8], r8b; ret; 
0x00000000004c402d: add byte ptr [r8], r8b; sar byte ptr [rbx], 0xf8; call qword ptr [rbx + 5]; 
0x00000000004005cf: add byte ptr [r9 + 0xe], dil; mov rsi, rax; repe cmpsb byte ptr [rsi], byte ptr [rdi]; jne 0x5de; ret; 
0x00000000004005a4: add byte ptr [r9], sil; shr al, 0x93; ret; 
0x00000000004811e7: add byte ptr [rax + 0x10247c], al; jne 0x81228; xor eax, eax; add rsp, 0x68; ret; 
0x000000000047388b: add byte ptr [rax + 0x10], bh; sub rsp, 0x30; mov rdx, rsp; syscall; 
0x0000000000421c3f: add byte ptr [rax + 0x16], bh; ret; 
0x000000000043fd2f: add byte ptr [rax + 0x18], bh; syscall; 
0x000000000043fd2f: add byte ptr [rax + 0x18], bh; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x00000000004c3c5f: add byte ptr [rax + 0x1b], al; clc; call qword ptr [rsi + 0xb]; 
0x00000000004c056f: add byte ptr [rax + 0x20], dh; cmc; jmp qword ptr [rsi]; 
0x00000000004c7517: add byte ptr [rax + 0x23], bl; sti; jmp qword ptr [rdi]; 
0x000000000047cbbf: add byte ptr [rax + 0x259c213d], al; add byte ptr [rax], al; jne 0x7cbd1; mov rax, qword ptr [rip + 0x259800]; ret; 
0x000000000043f4af: add byte ptr [rax + 0x25], bh; syscall; 
0x000000000043f4af: add byte ptr [rax + 0x25], bh; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x000000000043f4ae: add byte ptr [rax + 0x25], dil; syscall; 
0x000000000043f4ae: add byte ptr [rax + 0x25], dil; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x000000000049ab2f: add byte ptr [rax + 0x26], bh; syscall; 
0x000000000049ab2f: add byte ptr [rax + 0x26], bh; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x00000000004c88df: add byte ptr [rax + 0x26], dl; cld; call qword ptr [rax + 1]; 
0x000000000043e72f: add byte ptr [rax + 0x27201fa], al; mov byte ptr [rdi], cl; ret; 
0x0000000000453a00: add byte ptr [rax + 0x29], cl; bnd call qword ptr [rax + 0x38]; 
0x000000000044ce48: add byte ptr [rax + 0x29], cl; ret 0x349; 
0x0000000000400b38: add byte ptr [rax + 0x29], cl; ret 0x8b48; 
0x0000000000419795: add byte ptr [rax + 0x29], cl; ret 0x8d48; 
0x000000000044bfc0: add byte ptr [rax + 0x29], cl; ret 0xe183; 
0x0000000000405c07: add byte ptr [rax + 0x29], cl; ret; 
0x000000000045dc89: add byte ptr [rax + 0x29], cl; sar rdx, 2; call qword ptr [rax + 0x38]; 
0x0000000000400a2b: add byte ptr [rax + 0x31], cl; ret 0x8b48; 
0x00000000004c9977: add byte ptr [rax + 0x32], cl; std; call rsp; 
0x000000000046667b: add byte ptr [rax + 0x39], cl; ret 0x820f; 
0x0000000000418176: add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000044f62b: add byte ptr [rax + 0x39], cl; ret 0x860f; 
0x0000000000418137: add byte ptr [rax + 0x39], cl; ret 0x8948; 
0x0000000000476989: add byte ptr [rax + 0x39], cl; ret 0xf48; 
0x0000000000417d2b: add byte ptr [rax + 0x39], cl; ret; 
0x000000000040f159: add byte ptr [rax + 0x3d], cl; lock add byte ptr [r11 + 0x13], sil; mov rbp, rax; call qword ptr [rbp]; 
0x00000000004bf59b: add byte ptr [rax + 0x3de00000], bl; hlt; call qword ptr [rbp + 9]; 
0x00000000004736cf: add byte ptr [rax + 0x3f], bh; syscall; 
0x00000000004736cf: add byte ptr [rax + 0x3f], bh; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x00000000004c0bf7: add byte ptr [rax + 0x42], bl; cmc; call qword ptr [rcx + 2]; 
0x000000000042680b: add byte ptr [rax + 0x43e180], bh; cmove rax, rdx; ret; 
0x000000000042680a: add byte ptr [rax + 0x43e180], dil; cmove rax, rdx; ret; 
0x000000000045031f: add byte ptr [rax + 0x441f0f], dl; add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, 0xf; syscall; 
0x000000000048c246: add byte ptr [rax + 0x4740000], al; mov eax, edx; pop rbx; ret; 
0x00000000004c0d47: add byte ptr [rax + 0x49], cl; cmc; call qword ptr [rsi]; 
0x00000000004123be: add byte ptr [rax + 0x4cc2894c], dl; mov esi, ebp; mov rdi, r14; mov eax, r9d; syscall; 
0x00000000004c799f: add byte ptr [rax + 0x53], dl; sti; jmp rdi; 
0x000000000046b5d7: add byte ptr [rax + 0x5b], dh; mov eax, edx; pop rbp; pop r12; ret; 
0x00000000004c58d7: add byte ptr [rax + 0x5c], bl; cli; jmp qword ptr [rdx + 1]; 
0x00000000004c1437: add byte ptr [rax + 0x5f], ch; cmc; jmp qword ptr [rdi + 1]; 
0x00000000004407cf: add byte ptr [rax + 0x61], bh; syscall; 
0x00000000004407cf: add byte ptr [rax + 0x61], bh; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x000000000044326f: add byte ptr [rax + 0x63], bh; syscall; 
0x000000000044326f: add byte ptr [rax + 0x63], bh; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x00000000004c5b17: add byte ptr [rax + 0x63], ch; cli; jmp qword ptr [rsi + 1]; 
0x000000000044e7b7: add byte ptr [rax + 0x63], cl; dec dword ptr [rax - 0x75]; add al, 0xfd; retf 0x6c; ret; 
0x00000000004003c4: add byte ptr [rax + 0x63], cl; fnstsw dword ptr [rdx + 0x1d]; mov esi, 0x4a2a68; mov rdi, rbx; mov eax, 1; syscall; 
0x00000000004125df: add byte ptr [rax + 0x63], cl; jg 0x12654; mov eax, 3; syscall; 
0x0000000000440457: add byte ptr [rax + 0x63], cl; jl 0x40480; adc byte ptr [rax + 0x101], bh; syscall; 
0x0000000000412dc8: add byte ptr [rax + 0x63], cl; jnp 0x12e3d; syscall; 
0x000000000046d43f: add byte ptr [rax + 0x63], cl; ret 0x8d4c; 
0x000000000045db4e: add byte ptr [rax + 0x63], cl; ret; 
0x000000000046be53: add byte ptr [rax + 0x63], cl; ror dword ptr [rcx + rcx*4 - 0x12], cl; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000040e3c2: add byte ptr [rax + 0x63], cl; stc; syscall; 
0x0000000000440090: add byte ptr [rax + 0x63], cl; sti; mov eax, 0x48; syscall; 
0x000000000044d728: add byte ptr [rax + 0x63], cl; sti; mov eax, 3; syscall; 
0x0000000000453d1f: add byte ptr [rax + 0x63], cl; xchg eax, ebp; cmp bl, 0xff; dec dword ptr [rax - 0x7d]; ret 0xe920; 
0x00000000004c8e27: add byte ptr [rax + 0x64], bh; cld; call qword ptr [rax]; 
0x000000000047370f: add byte ptr [rax + 0x68], bh; syscall; 
0x000000000047370f: add byte ptr [rax + 0x68], bh; syscall; ret; 
0x00000000004c17b7: add byte ptr [rax + 0x68], cl; cmc; jmp qword ptr [rsi]; 
0x00000000004736ff: add byte ptr [rax + 0x6b], bh; syscall; 
0x00000000004736ff: add byte ptr [rax + 0x6b], bh; syscall; ret; 
0x000000000047371f: add byte ptr [rax + 0x6c], bh; syscall; 
0x000000000047371f: add byte ptr [rax + 0x6c], bh; syscall; ret; 
0x00000000004186d2: add byte ptr [rax + 0x6cb800], bh; ret; 
0x00000000004242bf: add byte ptr [rax + 0x74c08402], cl; adc cl, byte ptr [rax - 1]; ret 0x2288; 
0x000000000047f424: add byte ptr [rax + 0x75], al; cmp bl, dh; ret; 
0x000000000049cd8e: add byte ptr [rax + 0x75], al; cmp qword ptr [r9 + 0x38], 0; je 0x9ce03; add rsp, 0x18; ret; 
0x00000000004c616f: add byte ptr [rax + 0x78], dh; cli; call qword ptr [rcx]; 
0x000000000043c38f: add byte ptr [rax + 0x78d4837], cl; ret; 
0x000000000041024a: add byte ptr [rax + 0x8740000], al; mov eax, edx; pop rbx; ret; 
0x0000000000475ace: add byte ptr [rax + 0x9e], bh; syscall; 
0x000000000043e6ff: add byte ptr [rax + 0xb7208fa], al; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x000000000046bf3f: add byte ptr [rax + 0xb740000], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000004409af: add byte ptr [rax + 0xb], bh; syscall; 
0x00000000004409af: add byte ptr [rax + 0xb], bh; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x000000000046fdaf: add byte ptr [rax + 0xc9], bh; syscall; 
0x000000000046fdaf: add byte ptr [rax + 0xc9], bh; syscall; ret; 
0x0000000000443311: add byte ptr [rax + 0xca], bh; syscall; 
0x0000000000443311: add byte ptr [rax + 0xca], bh; syscall; pop rdx; pop rsi; ret; 
0x00000000004433b8: add byte ptr [rax + 0xca], bh; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000043f716: add byte ptr [rax + 0xe5], bh; syscall; 
0x00000000004c94e7: add byte ptr [rax + 0xe], bh; std; jmp qword ptr [rax]; 
0x00000000004c0af8: add byte ptr [rax + 0xe], dl; adc byte ptr [rdx + rax - 0x79e7f1bf], cl; add eax, dword ptr [rbx + 0xe]; and byte ptr [rbx + 0xa4d0204], al; ret; 
0x000000000048132f: add byte ptr [rax + 0xf247c], al; je 0x81324; mov rdi, qword ptr [rsp + 0x18]; call 0x1ea60; add rsp, 0x48; ret; 
0x000000000048110f: add byte ptr [rax + 0xf247c], al; jne 0x81120; xor eax, eax; add rsp, 0x48; ret; 
0x000000000048129f: add byte ptr [rax + 0xf247c], al; jne 0x812b0; xor eax, eax; add rsp, 0x48; ret; 
0x00000000004477df: add byte ptr [rax + 0xf], al; mov dh, 0xc6; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000046e215: add byte ptr [rax + 0xf], cl; mov ebp, 0xf80148c0; ret; 
0x0000000000401c50: add byte ptr [rax + 0xf], cl; scasd eax, dword ptr [rdi]; ret 0x8b48; 
0x0000000000421b11: add byte ptr [rax + 0xfd63948], al; xchg eax, ecx; add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret 0xffdf; 
0x000000000046f03f: add byte ptr [rax + 0xfe580f5], cl; je 0x6f060; add rax, 2; ret; 
0x000000000043f3f3: add byte ptr [rax + 1], bh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000046b6f4: add byte ptr [rax + 1], bh; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000047d537: add byte ptr [rax + 1], bh; ret; 
0x00000000004268b5: add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x000000000048158f: add byte ptr [rax + 1], cl; ret 0x1a75; 
0x0000000000400ac8: add byte ptr [rax + 1], cl; ret 0x8b48; 
0x00000000004955ec: add byte ptr [rax + 1], cl; ret 0x8d48; 
0x0000000000499257: add byte ptr [rax + 1], cl; ret 0xb70f; 
0x0000000000411117: add byte ptr [rax + 1], cl; ret; 
0x000000000048b380: add byte ptr [rax + 1], cl; ror byte ptr [rax + 0x39], 1; ret 0x8949; 
0x0000000000431e4e: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x723f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431cfe: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x72547]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431bae: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x72697]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431a5e: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x727e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043190e: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x72937]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004317be: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x72a87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043166e: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x72bd7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004313ce: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x72e77]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043127e: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x72fc7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043112e: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x73117]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430fde: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x73267]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430e8e: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x733b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430d3e: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x73507]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430bee: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x73657]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000049d78f: add byte ptr [rax + 2], bh; add rsp, 8; ret; 
0x000000000040042e: add byte ptr [rax + 2], bh; syscall; 
0x000000000040042d: add byte ptr [rax + 2], dil; syscall; 
0x0000000000412dc3: add byte ptr [rax + 3], bh; movsxd rdi, dword ptr [rbx + 0x70]; syscall; 
0x000000000044f8e4: add byte ptr [rax + 3], bh; syscall; 
0x000000000049d77f: add byte ptr [rax + 4], bh; add rsp, 8; ret; 
0x00000000004c51cf: add byte ptr [rax + 5], ah; stc; call qword ptr [rsi + 0x2b]; 
0x000000000049b89f: add byte ptr [rax + 5], bh; ret; 
0x00000000004c73bf: add byte ptr [rax + 6], dl; sti; call rsi; 
0x000000000049cbae: add byte ptr [rax + 7], bh; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000043ef2e: add byte ptr [rax + 8], bh; pop rbx; ret; 
0x000000000044322f: add byte ptr [rax + 8], bh; syscall; 
0x000000000044322f: add byte ptr [rax + 8], bh; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x000000000043ef2d: add byte ptr [rax + 8], dil; pop rbx; ret; 
0x00000000004c4027: add byte ptr [rax + rax + 0x4fac0000], al; add byte ptr [rax], al; sar byte ptr [rbx], 0xf8; call qword ptr [rbx + 5]; 
0x00000000004c44df: add byte ptr [rax + rax + 0x54640000], ch; add byte ptr [rax], al; or byte ptr [rbp - 8], dh; call qword ptr [rcx]; 
0x00000000004ae0cb: add byte ptr [rax + rax + 0xbf0000], bh; add byte ptr [rax], al; ret 0; 
0x000000000041fa79: add byte ptr [rax + rax*8 - 0x74b7d58b], al; add eax, 0x2adb6b; test rax, rax; je 0x1fa8c; call rax; 
0x00000000004c5a3f: add byte ptr [rax + rax], ah; add ah, al; imul eax, dword ptr [rax], 0xfa61b800; jmp qword ptr [rdi + 1]; 
0x00000000004c80ff: add byte ptr [rax + rax], ah; add byte ptr [rax + rdx*4 - 0x6bf80000], al; std; call rcx; 
0x00000000004c6807: add byte ptr [rax + rax], ah; add byte ptr [rdi + rsi*2 - 0x67500000], cl; cli; jmp qword ptr [rax + 1]; 
0x00000000004bf52f: add byte ptr [rax + rax], ah; add byte ptr [rsp + rax + 0x32280000], dh; hlt; call qword ptr [rdx]; 
0x0000000000421d7c: add byte ptr [rax + rax], al; add byte ptr [rax], al; je 0x21d8a; lea rax, qword ptr [rip + 0x1a966]; ret; 
0x00000000004c6bdf: add byte ptr [rax + rax], al; add byte ptr [rbx + rdi*2], ah; add al, cl; ret; 
0x00000000004c51c7: add byte ptr [rax + rax], al; add byte ptr [rcx], cl; add byte ptr [rax + 5], ah; stc; call qword ptr [rsi + 0x2b]; 
0x0000000000440245: add byte ptr [rax + rax], al; add byte ptr [rdx + 0x80000], bh; mov esi, 0x4a5790; mov rdi, -0x64; mov eax, 0x101; syscall; 
0x00000000004c3ab7: add byte ptr [rax + rax], bh; add byte ptr [rax], al; cmp al, 0x4a; add byte ptr [rax], al; and byte ptr [rax + rdi*8], bl; jmp qword ptr [rdx]; 
0x00000000004c1587: add byte ptr [rax + rax], bh; add byte ptr [rax], al; or al, 0x25; add byte ptr [rax], al; adc byte ptr [rbx - 0xb], ah; call qword ptr [rsi]; 
0x00000000004c32c7: add byte ptr [rax + rax], bh; add byte ptr [rdx + rax*2], cl; add al, dl; fdivr st(7), st(0); call qword ptr [rbx + 3]; 
0x00000000004c29bf: add byte ptr [rax + rax], bl; add byte ptr [rax], al; cmp dword ptr [rax], r8d; add al, bl; test al, 0xf6; jmp qword ptr [rsi]; 
0x00000000004c9a1f: add byte ptr [rax + rax], bl; add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; test eax, 0x34980000; std; jmp qword ptr [rcx]; 
0x00000000004c48ff: add byte ptr [rax + rax], bl; add byte ptr [rax], al; test byte ptr [rax], bl; add byte ptr [rax], bl; ret 0xfffd; 
0x00000000004c4e2f: add byte ptr [rax + rax], bl; add byte ptr [rbp + rbx*2 - 0x48580000], dh; clc; call qword ptr [rcx + 0x1c]; 
0x00000000004c7a8f: add byte ptr [rax + rax], ch; add byte ptr [rax], al; adc al, 0x8a; add byte ptr [rax], al; cmp byte ptr [rdi - 5], dl; call rsi; 
0x00000000004c3c57: add byte ptr [rax + rax], ch; add byte ptr [rax], al; fmul qword ptr [rbx]; add byte ptr [rax + 0x1b], al; clc; call qword ptr [rsi + 0xb]; 
0x00000000004c8207: add byte ptr [rax + rax], ch; add byte ptr [rax], al; mov word ptr [rcx - 0x6eb00000], ss; sti; call qword ptr [rdx]; 
0x00000000004c996f: add byte ptr [rax + rax], cl; add ah, dh; test al, 0; add byte ptr [rax + 0x32], cl; std; call rsp; 
0x00000000004c8927: add byte ptr [rax + rax], cl; add byte ptr [rax + rbx*4 + 0x27900000], ch; cld; call qword ptr [rbp + 5]; 
0x00000000004c68ef: add byte ptr [rax + rax], cl; add byte ptr [rax + rdi*2], dh; add byte ptr [rax - 0x64], bh; cli; jmp rdi; 
0x0000000000473981: add byte ptr [rax + rax], cl; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000041d4e9: add byte ptr [rax + rax], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004c55bf: add byte ptr [rax + rax], cl; add byte ptr [rbp], al; add al, cl; jl 0xc55c4; call rdx; 
0x00000000004c5bb7: add byte ptr [rax + rax], cl; add byte ptr [rbx + rbp*2], bh; add byte ptr [rax], al; add byte ptr [rbp - 6], ah; call qword ptr [rsi]; 
0x00000000004c76cf: add byte ptr [rax + rax], cl; add byte ptr [rsi + rax*4], dl; add al, ch; sti; jmp qword ptr [rbp + 1]; 
0x00000000004c3a3f: add byte ptr [rax + rax], dh; add ah, al; add byte ptr [r8], al; mov byte ptr [rdx], bl; clc; call qword ptr [rax]; 
0x00000000004c9b57: add byte ptr [rax + rax], dh; add byte ptr [rax], al; fsubr qword ptr [rdx + 0x35a00000]; std; call qword ptr [rcx + 1]; 
0x00000000004c0f8f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; adc al, 0x1f; add byte ptr [rax], al; fcom dword ptr [rax - 0xb]; jmp qword ptr [rbx]; 
0x00000000004736a1: add byte ptr [rax + rax], dl; add byte ptr [rax], al; add rsp, 0x90; xor eax, eax; pop rbx; ret; 
0x00000000004c0d5f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; in al, 0x1c; add byte ptr [rax], al; mov byte ptr [rcx - 0xb], cl; jmp qword ptr [rcx]; 
0x00000000004c8cf7: add byte ptr [rax + rax], dl; add byte ptr [rax], al; jl 0xc8c9a; add byte ptr [rax], al; xor byte ptr [rsp + rdi*8], bh; jmp qword ptr [rdx]; 
0x00000000004c792f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; mov ah, 0x88; add byte ptr [rax], al; mov byte ptr [rdx - 5], dl; call qword ptr [rsi]; 
0x00000000004c1637: add byte ptr [rax + rax], dl; add byte ptr [rax], al; mov esp, 0x20000025; cmc; call qword ptr [rdx]; 
0x00000000004c8237: add byte ptr [rax + rax], dl; add byte ptr [rax], al; mov esp, 0x80000091; xchg eax, ecx; sti; call qword ptr [rax]; 
0x00000000004bfd07: add byte ptr [rax + rax], dl; add byte ptr [rax], al; mov word ptr [rax + rax], cs; add byte ptr [rax - 9], dl; hlt; call qword ptr [rdx]; 
0x00000000004c1707: add byte ptr [rax + rax], dl; add byte ptr [rax], al; mov word ptr [rsi], fs; add byte ptr [rax], al; ret; 
0x0000000000473091: add byte ptr [rax + rax], dl; add byte ptr [rax], al; movsxd rdi, ebx; mov eax, 3; syscall; 
0x00000000004c1e0f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; xchg eax, esp; sub eax, 0xc8480000; cmc; call qword ptr [rbx]; 
0x00000000004c8caf: add byte ptr [rax + rax], dl; add byte ptr [rax], al; xor al, 0x9c; add byte ptr [rax], al; or byte ptr [rcx - 0xd], bh; jmp qword ptr [rsi]; 
0x00000000004c142f: add byte ptr [rax + rax], dl; add byte ptr [rbx + 0x5f680000], dh; cmc; jmp qword ptr [rdi + 1]; 
0x00000000004c5b0f: add byte ptr [rax + rax], dl; add byte ptr [rsp + rbx*2 + 0x63680000], dh; cli; jmp qword ptr [rsi + 1]; 
0x00000000004c589b: add byte ptr [rax + rbp*2], bl; add byte ptr [rax], al; mov al, 0x5b; cli; jmp rax; 
0x00000000004c892b: add byte ptr [rax + rbx*4 + 0x27900000], ch; cld; call qword ptr [rbp + 5]; 
0x00000000004c88db: add byte ptr [rax + rbx*4], bl; add byte ptr [rax + 0x26], dl; cld; call qword ptr [rax + 1]; 
0x0000000000426b8d: add byte ptr [rax + rcx + 0x48], dh; lea eax, dword ptr [rip + 0x8449]; ret; 
0x000000000048134f: add byte ptr [rax + rcx*2 - 0x75], ah; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; add rax, -8; ret; 
0x0000000000450248: add byte ptr [rax + rcx*2 - 0x77], ah; adc dword ptr [rax - 0x75], ecx; add byte ptr [rax - 0x39], cl; ret 0xffe0; 
0x0000000000479e50: add byte ptr [rax + rcx*2], al; add esp, 8; ret; 
0x00000000004c7913: add byte ptr [rax + rcx*4 + 0x51b80000], dl; sti; jmp rsi; 
0x00000000004c7933: add byte ptr [rax + rcx*4 + 0x52880000], dh; sti; call qword ptr [rsi]; 
0x000000000041bfdf: add byte ptr [rax + rcx*4 + 0x5c], al; and al, 0x20; mov qword ptr [rsp + 0x18], r8; mov qword ptr [rsp + 0x10], r10; call rax; 
0x00000000004c68f3: add byte ptr [rax + rdi*2], dh; add byte ptr [rax - 0x64], bh; cli; jmp rdi; 
0x00000000004c28db: add byte ptr [rax + rdi], bl; add byte ptr [rax], al; jb 0xc28d9; call qword ptr [rax]; 
0x00000000004af277: add byte ptr [rax + rdx + 0x10bf0000], bh; add byte ptr [rax], al; ret 0x10; 
0x000000000048c195: add byte ptr [rax + rdx - 0x75], dh; jo 0x8c121; sar byte ptr [rax + 9], 0xf3; ret; 
0x00000000004c8103: add byte ptr [rax + rdx*4 - 0x6bf80000], al; std; call rcx; 
0x00000000004c8093: add byte ptr [rax + rdx*4], dl; add byte ptr [rax], al; test al, 0x8f; sti; jmp qword ptr [rsi]; 
0x000000000049cddf: add byte ptr [rax + rsi*4 + 0x48], dh; add esp, 0x18; ret; 
0x00000000004597f5: add byte ptr [rax - 0x12743], al; jmp qword ptr [rdi - 0x75]; 
0x0000000000458b5b: add byte ptr [rax - 0x12743], al; jmp qword ptr [rsi + 0xf]; 
0x0000000000403a56: add byte ptr [rax - 0x188b7f80], 0x89; ret 0x8948; 
0x0000000000445f23: add byte ptr [rax - 0x18], dh; ret 0xfba5; 
0x0000000000445f22: add byte ptr [rax - 0x18], sil; ret 0xfba5; 
0x00000000004c4fdf: add byte ptr [rax - 0x28], al; clc; call qword ptr [rax]; 
0x000000000046e035: add byte ptr [rax - 0x2d], cl; cli; test rdx, rdx; je 0x6e0e0; bsf rax, rdx; ret; 
0x00000000004c6e8f: add byte ptr [rax - 0x37], dh; cli; call qword ptr [rcx]; 
0x00000000004c1e17: add byte ptr [rax - 0x38], cl; cmc; call qword ptr [rbx]; 
0x000000000044387c: add byte ptr [rax - 0x39], cl; adc byte ptr [rax], sil; cmp byte ptr [rax + rax + 0x48], al; mov dword ptr [rax + 8], edx; ret; 
0x000000000046d385: add byte ptr [rax - 0x39], cl; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000417333: add byte ptr [rax - 0x39], cl; add eax, 0x2b6269; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004462a3: add byte ptr [rax - 0x39], cl; add eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000412dbb: add byte ptr [rax - 0x39], cl; cmp byte ptr [r8], al; add byte ptr [rax], al; add byte ptr [rax + 3], bh; movsxd rdi, dword ptr [rbx + 0x70]; syscall; 
0x000000000041e621: add byte ptr [rax - 0x39], cl; cmp byte ptr [rax + 8], 0; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x1be; 
0x0000000000416108: add byte ptr [rax - 0x39], cl; or byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret; 
0x00000000004156cc: add byte ptr [rax - 0x39], cl; push r8; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000045330f: add byte ptr [rax - 0x39], cl; ret 0xffb0; 
0x000000000040e3ef: add byte ptr [rax - 0x39], cl; ret 0xffd0; 
0x0000000000421b1b: add byte ptr [rax - 0x39], cl; ret 0xffdf; 
0x000000000045024f: add byte ptr [rax - 0x39], cl; ret 0xffe0; 
0x00000000004592ff: add byte ptr [rax - 0x39], cl; ret 0xfff0; 
0x0000000000410e9c: add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x0000000000440831: add byte ptr [rax - 0x39], cl; ret; 
0x000000000046f09f: add byte ptr [rax - 0x39], cl; rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x000000000046f07f: add byte ptr [rax - 0x39], cl; rol byte ptr [rcx], 0; add byte ptr [rax], al; ret; 
0x000000000046f0df: add byte ptr [rax - 0x39], cl; rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x000000000046f08f: add byte ptr [rax - 0x39], cl; rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x000000000046f0cf: add byte ptr [rax - 0x39], cl; rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x000000000045032f: add byte ptr [rax - 0x39], cl; ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x0000000000415ecb: add byte ptr [rax - 0x39], cl; sbb byte ptr [r8], al; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000004c4c27: add byte ptr [rax - 0x3a], bl; std; call qword ptr [rbx]; 
0x0000000000459cf8: add byte ptr [rax - 0x3f7cb7f0], cl; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000049cf46: add byte ptr [rax - 0x3f], cl; call 0x4810588d; mov eax, dword ptr [rdi + 0x98]; ret; 
0x000000000044d63d: add byte ptr [rax - 0x3f], cl; ret 0x4811; 
0x00000000004b290f: add byte ptr [rax - 0x45fffffc], bh; add al, 0; add byte ptr [rsp + rax + 0x4be0000], bh; add byte ptr [rax], al; rol byte ptr [rax + rax], 0; ret 4; 
0x0000000000481fa2: add byte ptr [rax - 0x48], cl; ret 0xffff; 
0x00000000004c56af: add byte ptr [rax - 0x57], al; stc; jmp qword ptr [rsi + 0x28]; 
0x00000000004c68f7: add byte ptr [rax - 0x64], bh; cli; jmp rdi; 
0x00000000004c4967: add byte ptr [rax - 0x69], bh; clc; jmp rbx; 
0x00000000004c48d7: add byte ptr [rax - 0x69], bl; clc; call qword ptr [rdx]; 
0x000000000041ccaf: add byte ptr [rax - 0x6af0ff94], bh; ret 0x8348; 
0x00000000004c671f: add byte ptr [rax - 0x6d], al; cli; jmp qword ptr [rax]; 
0x00000000004c8257: add byte ptr [rax - 0x6f], bh; sti; call qword ptr [rdx]; 
0x00000000004c81f7: add byte ptr [rax - 0x6f], bl; sti; call qword ptr [rax]; 
0x00000000004c820f: add byte ptr [rax - 0x6f], dl; sti; call qword ptr [rdx]; 
0x0000000000450713: add byte ptr [rax - 0x73], cl; adc byte ptr [r8 + 0x39], r9b; ret; 
0x000000000046c86f: add byte ptr [rax - 0x73], cl; add al, 0x48; mov dword ptr [rax], ecx; mov eax, dword ptr [rdx]; pop rbx; ret; 
0x000000000046f682: add byte ptr [rax - 0x73], cl; add al, 0x4c; lea ecx, dword ptr [rsp + 0x20]; lea rdx, qword ptr [rsp + 0x28]; lea rsi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000004798bb: add byte ptr [rax - 0x73], cl; add al, 0x90; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x0000000000421dda: add byte ptr [rax - 0x73], cl; add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000044a5ef: add byte ptr [rax - 0x73], cl; add cl, byte ptr [rax + 0x39]; ret; 
0x000000000044a5d3: add byte ptr [rax - 0x73], cl; add dword ptr [rax + 0x39], ecx; ret; 
0x000000000044a60b: add byte ptr [rax - 0x73], cl; add ecx, dword ptr [rax + 0x39]; ret; 
0x00000000004689c5: add byte ptr [rax - 0x73], cl; add qword ptr [rax - 0x77], rcx; lea esi, dword ptr [rax - 0x77000005]; adc byte ptr [rax - 0x7d], cl; ret; 
0x000000000040ff31: add byte ptr [rax - 0x73], cl; call 0x415d4095; pop rbp; pop rbp; ret; 
0x0000000000480bb6: add byte ptr [rax - 0x73], cl; dec dword ptr [r8 - 0x7d]; clc; std; jbe 0x80bc8; ret; 
0x000000000041b5f7: add byte ptr [rax - 0x73], cl; je 0x1b620; xor byte ptr [rcx + rcx*4 - 0x31], cl; mov eax, r8d; syscall; 
0x00000000004958ea: add byte ptr [rax - 0x73], cl; jl 0x95913; js 0x95932; call rsp; 
0x0000000000495bff: add byte ptr [rax - 0x73], cl; jl 0x95c28; js 0x95c47; call rsp; 
0x0000000000495fc6: add byte ptr [rax - 0x73], cl; jl 0x95fef; js 0x9600e; call rsp; 
0x000000000049b7ff: add byte ptr [rax - 0x73], cl; jl 0x9b828; sub byte ptr [rax - 0x7d], cl; ret; 
0x000000000041036c: add byte ptr [rax - 0x73], cl; mov al, dh; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000423535: add byte ptr [rax - 0x73], cl; or r14b, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000041bbad: add byte ptr [rax - 0x73], cl; push rax; adc dh, dh; ret 0xf0f; 
0x000000000046d213: add byte ptr [rax - 0x73], cl; test al, 0x28; add dword ptr [rax], eax; add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rdi*4 - 0xa]; ret 0x7508; 
0x000000000047b0da: add byte ptr [rax - 0x75], cl; adc byte ptr [r8 + 3], cl; or byte ptr [r8 + 0x29], cl; ror byte ptr [rcx - 0x77], 1; add ch, cl; ret 0xfffd; 
0x000000000047a90f: add byte ptr [rax - 0x75], cl; adc byte ptr [r9 + 3], cl; add al, 0x24; mov qword ptr [rbp - 0xd0], r11; mov qword ptr [rbp - 0xc8], r10; call rax; 
0x000000000047db77: add byte ptr [rax - 0x75], cl; adc cl, byte ptr [rcx + 0x48b48d8]; ret 0x8b48; 
0x00000000004012be: add byte ptr [rax - 0x75], cl; adc eax, 0x2cc37a; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000049c77f: add byte ptr [rax - 0x75], cl; adc ecx, dword ptr [rax + 0x63]; ret 0xbc80; 
0x00000000004603c6: add byte ptr [rax - 0x75], cl; add al, 0xc5; movabs al, byte ptr [0xffef5485c7004b48]; jmp qword ptr [rax]; 
0x000000000047d179: add byte ptr [rax - 0x75], cl; add al, 1; cmp rax, -1; cmove rax, rdx; ret; 
0x0000000000466672: add byte ptr [rax - 0x75], cl; add byte ptr [rbx + 0xa880], cl; add byte ptr [rax + 0x39], cl; ret 0x820f; 
0x000000000043b9af: add byte ptr [rax - 0x75], cl; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; lea rax, qword ptr [rdx + 0xc]; ret; 
0x000000000043a07f: add byte ptr [rax - 0x75], cl; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000049ec27: add byte ptr [rax - 0x75], cl; add eax, 0x22f121; mov qword ptr [rip + 0x22f11a], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000047cc1f: add byte ptr [rax - 0x75], cl; add eax, 0x24e469; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x259797]; mov qword ptr [rsi], rax; ret; 
0x0000000000470a54: add byte ptr [rax - 0x75], cl; add eax, 0x265f7c; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044d66f: add byte ptr [rax - 0x75], cl; add eax, 0x280089; ret; 
0x00000000004462ff: add byte ptr [rax - 0x75], cl; add eax, 0x290621; ret; 
0x000000000041722f: add byte ptr [rax - 0x75], cl; add eax, 0x2b3e89; ret; 
0x00000000004187fc: add byte ptr [rax - 0x75], cl; add eax, 0x2b4ddc; test rax, rax; je 0x1880b; call rax; 
0x000000000041a5fb: add byte ptr [rax - 0x75], cl; add ecx, dword ptr [rax + 0x29]; ret; 
0x000000000048121a: add byte ptr [rax - 0x75], cl; and al, 0x38; add rsp, 0x68; ret; 
0x000000000048c5ce: add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000043262f: add byte ptr [rax - 0x75], cl; cmc; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043280f: add byte ptr [rax - 0x75], cl; hlt; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432dff: add byte ptr [rax - 0x75], cl; int1; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000401271: add byte ptr [rax - 0x75], cl; je 0x129a; adc byte ptr [rbx + 0x410c247c], cl; call rsp; 
0x00000000004012c5: add byte ptr [rax - 0x75], cl; je 0x12ee; adc byte ptr [rbx + 0x480c247c], cl; mov eax, dword ptr [rsp + 0x18]; call rax; 
0x0000000000449a6d: add byte ptr [rax - 0x75], cl; jl 0x49a96; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000045072f: add byte ptr [rax - 0x75], cl; jl 0x50758; or byte ptr [rax - 0x7d], cl; call qword ptr [rbx]; 
0x000000000045f5ef: add byte ptr [rax - 0x75], cl; mov ebp, 0xfffffb60; mov rdx, r12; mov rsi, r13; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000045d2f7: add byte ptr [rax - 0x75], cl; mov edi, 0x218; movsxd rbx, edx; mov rdx, rbx; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x0000000000452f47: add byte ptr [rax - 0x75], cl; mov edi, 0xe0; movsxd r12, edx; mov rdx, r12; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000046d72f: add byte ptr [rax - 0x75], cl; mov rax, qword ptr [rax + 0x4c]; ret; 
0x00000000004329ff: add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432bff: add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004976ed: add byte ptr [rax - 0x75], cl; or al, byte ptr [rbx - 0x7cb7fe40]; ret 0x8008; 
0x0000000000413a8f: add byte ptr [rax - 0x75], cl; or byte ptr [r8 + 0x3b], r9b; adc byte ptr [r11 + 6], r14b; movzx eax, byte ptr [rax]; ret; 
0x0000000000480e0f: add byte ptr [rax - 0x75], cl; or byte ptr [rax + rcx*2 + 0x2b], spl; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000046d194: add byte ptr [rax - 0x75], cl; push rax; and cl, ch; sar dh, 0xff; jmp qword ptr [rsi - 0x70]; 
0x000000000041955f: add byte ptr [rax - 0x75], cl; push rax; or byte ptr [rax - 0x75], cl; adc byte ptr [rcx - 0x7d], al; ret 0x4801; 
0x00000000004177d7: add byte ptr [rax - 0x75], cl; push rbx; or byte ptr [rax + 0x29], cl; ret 0x149; 
0x0000000000435c5f: add byte ptr [rax - 0x75], cl; push rsi; add eax, 0x480e8b48; mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000004320af: add byte ptr [rax - 0x75], cl; push rsi; clc; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043549f: add byte ptr [rax - 0x75], cl; push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043540f: add byte ptr [rax - 0x75], cl; push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000004356af: add byte ptr [rax - 0x75], cl; push rsi; test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x00000000004810fd: add byte ptr [rax - 0x75], cl; push rsp; and al, 0x38; add rax, qword ptr [rdx + 8]; add rsp, 0x48; ret; 
0x000000000045050b: add byte ptr [rax - 0x75], cl; push rsp; and al, 0x38; mov qword ptr [r8 + 0x90], rdx; add rsp, 0xd0; ret; 
0x0000000000420157: add byte ptr [rax - 0x75], cl; push rsp; and al, 0x68; mov rsi, r12; mov rdi, rbx; call rax; 
0x0000000000413b3d: add byte ptr [rax - 0x75], cl; sbb eax, 0; add byte ptr [rax], al; call qword ptr [rax + 0x20]; 
0x000000000041379f: add byte ptr [rax - 0x75], cl; sbb eax, 0; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000041397e: add byte ptr [rax - 0x75], cl; sbb eax, 0; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x000000000040ff8f: add byte ptr [rax - 0x75], cl; sbb eax, 0; add byte ptr [rax], al; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x0000000000413168: add byte ptr [rax - 0x75], cl; test dword ptr [rax + 0x48000000], esp; mov dword ptr [rax + 0x130], 0x4a29c0; mov rax, qword ptr [rbp + 0xd8]; call qword ptr [rax + 0x40]; 
0x000000000046d0f8: add byte ptr [rax - 0x75], cl; test eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 0x20]; 
0x000000000043226f: add byte ptr [rax - 0x75], cl; test qword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x0000000000416eaf: add byte ptr [rax - 0x75], cl; xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp qword ptr [rsi - 1]; call qword ptr [rax + 0x18]; 
0x000000000049acff: add byte ptr [rax - 0x75], cl; xchg byte ptr [rax + 0x48000000], ch; add esp, 8; ret; 
0x000000000046d1af: add byte ptr [rax - 0x75], cl; xchg dword ptr [rax + 0x48000000], esp; cmp dword ptr [rax + 0x30], 0; je 0x6d1c0; ret; 
0x0000000000415aff: add byte ptr [rax - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rbx + 0x48], dl; mov ebx, edi; call qword ptr [rax + 0x20]; 
0x0000000000415f1f: add byte ptr [rax - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rcx + 0x48d231d1], cl; mov eax, dword ptr [rax + 0x48]; jmp rax; 
0x000000000041566f: add byte ptr [rax - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x000000000046d41f: add byte ptr [rax - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x30]; 
0x000000000046d307: add byte ptr [rax - 0x75], cl; xor byte ptr [rax], 1; add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000046d16f: add byte ptr [rax - 0x75], cl; xor byte ptr [rax], 1; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x000000000046c87f: add byte ptr [rax - 0x75], cl; xor byte ptr [rax], 1; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000044101a: add byte ptr [rax - 0x75], cl; xor ecx, dword ptr [rax - 0x75]; jl 0x41046; adc byte ptr [rax - 0x75], cl; and al, 0x18; call rax; 
0x000000000049cf17: add byte ptr [rax - 0x77], cl; adc al, 0xf7; add rsp, 8; ret; 
0x00000000004172c0: add byte ptr [rax - 0x77], cl; adc eax, 0x2b62e0; add dword ptr [rip + 0x2b62d5], 1; ret; 
0x000000000043fea5: add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 0; syscall; 
0x000000000043ff05: add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 1; syscall; 
0x000000000043fe45: add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 2; syscall; 
0x0000000000401d18: add byte ptr [rax - 0x77], cl; add eax, 0x2c9370; xor eax, eax; ret; 
0x000000000040fc2c: add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x11f00; add rsp, 0xd8; ret; 
0x000000000040fb9b: add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x55730; add rsp, 0xd8; ret; 
0x000000000047c86f: add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x7c1e0; add rsp, 0xd8; ret; 
0x000000000048c10c: add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x8c120; add rsp, 0xd8; ret; 
0x000000000047c7b1: add byte ptr [rax - 0x77], cl; call 0x5c492514; pop r13; ret; 
0x000000000047d3a0: add byte ptr [rax - 0x77], cl; call 0x5c493103; ret; 
0x000000000047d3fa: add byte ptr [rax - 0x77], cl; call 0x5c49315d; ret; 
0x00000000004135a8: add byte ptr [rax - 0x77], cl; call 0x8c5b8f8; pop rbx; pop rbp; ret; 
0x00000000004009e5: add byte ptr [rax - 0x77], cl; clc; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000041725f: add byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000004104e2: add byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000004004a1: add byte ptr [rax - 0x77], cl; fild word ptr [rcx + rcx*4 - 0x30]; syscall; 
0x000000000046b7f1: add byte ptr [rax - 0x77], cl; fimul dword ptr [rax - 0x77]; out dx, eax; call qword ptr [rax + 0x38]; 
0x00000000004105ae: add byte ptr [rax - 0x77], cl; fimul dword ptr [rcx + rcx*4 - 0x1a]; call qword ptr [rax + 0x38]; 
0x000000000041213c: add byte ptr [rax - 0x77], cl; fimul word ptr [rcx + rcx*4 - 0x19]; mov eax, r9d; syscall; 
0x00000000004003d1: add byte ptr [rax - 0x77], cl; fistp qword ptr [rax + 1]; syscall; 
0x0000000000416eb6: add byte ptr [rax - 0x77], cl; fistp qword ptr [rsi - 1]; call qword ptr [rax + 0x18]; 
0x0000000000411666: add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000415772: add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x20]; jmp rax; 
0x00000000004158e2: add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x28]; jmp rax; 
0x000000000049a00e: add byte ptr [rax - 0x77], cl; fisttp word ptr [rax - 0x75]; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000004723e9: add byte ptr [rax - 0x77], cl; fmul dword ptr [rax - 0x7d]; ret; 
0x0000000000441f65: add byte ptr [rax - 0x77], cl; fsubp st(0); movabs byte ptr [0x4baffffea], al; mov esi, 2; mov rdi, r15; call rbx; 
0x0000000000442145: add byte ptr [rax - 0x77], cl; fsubp st(0); ret 0xffe8; 
0x0000000000442045: add byte ptr [rax - 0x77], cl; fsubp st(0); ret 0xffe9; 
0x000000000045ec97: add byte ptr [rax - 0x77], cl; iretd; call qword ptr [rax + 0x38]; 
0x0000000000410331: add byte ptr [rax - 0x77], cl; mov dh, byte ptr [rax]; add dword ptr [rax], eax; add bl, dh; ret; 
0x0000000000401bc2: add byte ptr [rax - 0x77], cl; mov qword ptr ss:[rsi + 0x10], rsi; syscall; 
0x0000000000443696: add byte ptr [rax - 0x77], cl; mov word ptr [rax + rcx*4], gs; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000043f67c: add byte ptr [rax - 0x77], cl; out dx, al; mov rdi, r8; mov eax, r9d; syscall; 
0x000000000046d0ff: add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 0x20]; 
0x00000000004106f4: add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbp + 0x20]; 
0x0000000000441d01: add byte ptr [rax - 0x77], cl; out dx, eax; call rbx; 
0x0000000000415524: add byte ptr [rax - 0x77], cl; push -0x9617; jmp qword ptr [rsi - 0x70]; 
0x000000000041f110: add byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; pop r12; ret; 
0x0000000000418162: add byte ptr [rax - 0x77], cl; ret 0x18eb; 
0x000000000041e62c: add byte ptr [rax - 0x77], cl; ret 0x1be; 
0x000000000048c363: add byte ptr [rax - 0x77], cl; ret 0x38b; 
0x0000000000472c7f: add byte ptr [rax - 0x77], cl; ret 0x3e9; 
0x000000000043f82a: add byte ptr [rax - 0x77], cl; ret 0x6b8; 
0x00000000004031fe: add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000047524f: add byte ptr [rax - 0x77], cl; ret 0x8349; 
0x00000000004686a4: add byte ptr [rax - 0x77], cl; ret 0x83e8; 
0x000000000041a4ef: add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x000000000045a679: add byte ptr [rax - 0x77], cl; ret 0x858b; 
0x000000000044f984: add byte ptr [rax - 0x77], cl; ret 0x8840; 
0x0000000000456141: add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000043f693: add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x000000000044fd57: add byte ptr [rax - 0x77], cl; ret 0x8b41; 
0x0000000000479957: add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000004267bb: add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x000000000045b61f: add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000045ad84: add byte ptr [rax - 0x77], cl; ret 0xf0e9; 
0x0000000000413e80: add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x0000000000403b8c: add byte ptr [rax - 0x77], cl; ret; 
0x0000000000423732: add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0x7f10; 
0x000000000042a134: add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0xf10; 
0x000000000046155d: add byte ptr [rax - 0x77], cl; retf 0x8948; lea eax, dword ptr [rax + 0x48ffffef]; mov esi, dword ptr [rbp - 0x1090]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000045411f: add byte ptr [rax - 0x77], cl; retf 0x8948; lea eax, dword ptr [rax + 0x4cfffffb]; mov esi, ebx; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000045e8a7: add byte ptr [rax - 0x77], cl; ror byte ptr [rax - 0x3f], 1; clc; add cl, byte ptr [rax + 0x29]; ret; 
0x000000000047ac2f: add byte ptr [rax - 0x77], cl; ror byte ptr [rax - 0x7d], 1; ret; 
0x0000000000410235: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x77], cl; xlatb; call qword ptr [rax + 0x60]; 
0x0000000000447260: add byte ptr [rax - 0x77], cl; shr r8b, 0x96; movabs al, byte ptr [0xf7840fc08548ffff]; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004417cd: add byte ptr [rax - 0x77], cl; std; xor edx, edx; xor esi, esi; mov rbx, rax; call rax; 
0x0000000000415e5d: add byte ptr [rax - 0x77], cl; sti; mov rbp, rdx; call qword ptr [rax + 0x60]; 
0x000000000049ecbd: add byte ptr [rax - 0x77], cl; sub bl, r14b; ret; 
0x00000000004798f3: add byte ptr [rax - 0x77], cl; xchg dword ptr [rax], eax; add eax, dword ptr [rax]; add bl, dh; ret; 
0x000000000043f4ef: add byte ptr [rax - 0x77], cl; xlatb; mov eax, esi; syscall; 
0x000000000049ed86: add byte ptr [rax - 0x77], cl; xor eax, 0x22efc2; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000049ec2e: add byte ptr [rax - 0x77], cl; xor eax, 0x22f11a; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000043f0bf: add byte ptr [rax - 0x77], cl; xor ecx, dword ptr [rax - 0x75]; and al, 8; add rsp, 0x10; pop rbx; ret; 
0x000000000046df9f: add byte ptr [rax - 0x7b], cl; div byte ptr [rbp + 4]; xor rax, rax; ret; 
0x0000000000470bff: add byte ptr [rax - 0x7b], cl; fisttp dword ptr [rax + 0xf]; fucompp; ret 0xfffe; 
0x000000000049f86a: add byte ptr [rax - 0x7b], cl; fisttp dword ptr [rax - 0x77]; sbb eax, 0x22dd0b; jne 0x9f858; pop rbx; ret; 
0x0000000000440147: add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rdi*4 + 0x48]; mov dword ptr [rsp + 8], edi; mov rdi, qword ptr [rsp + 8]; mov eax, 0x4f; syscall; 
0x000000000046d21a: add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rdi*4 - 0xa]; ret 0x7508; 
0x00000000004441d2: add byte ptr [rax - 0x7b], cl; ror byte ptr [rax + 0xf], 0x44; ret 0x3880; 
0x00000000004432bf: add byte ptr [rax - 0x7b], cl; ror byte ptr [rax + 0xf], cl; sal byte ptr [rcx], 1; ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x0000000000411ff7: add byte ptr [rax - 0x7b], cl; ror byte ptr [rcx - 0x77], 4; and al, 0x74; ret 0x8b4c; 
0x000000000048c772: add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rdx + 0x5b], 0x31; test byte ptr [rbx + 0x2412433d], 0; jmp rax; 
0x000000000049cf9f: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbx + rcx + 0x48], 0x8b; and al, 0x10; add rsp, 0x28; ret; 
0x000000000047eee7: add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx + 0x48], 0x8b; mov ebp, 0xffffff78; call rax; 
0x0000000000402975: add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx + 0x48], 0x8d; mov ebx, 0x80; call rax; 
0x000000000047ea4e: add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rcx + 0x49], cl; mov eax, dword ptr [rbp]; add rax, qword ptr [rdx + 8]; call rax; 
0x00000000004125c0: add byte ptr [rax - 0x7b], cl; sar byte ptr [rax + 0xa], 0x48; mov dword ptr [rbx + 0x90], eax; pop rbx; ret; 
0x000000000041ec43: add byte ptr [rax - 0x7b], cl; test byte ptr [rdi], 0x94; ret 0x8548; 
0x000000000049d76f: add byte ptr [rax - 0x7c], al; push qword ptr [rsp + rbp*8 - 0x18]; xchg eax, esi; or al, 0xf7; jmp qword ptr [rsi + 0xf]; 
0x000000000043f72a: add byte ptr [rax - 0x7d], cl; call 0xffffffffc4873f33; cmp byte ptr [rbx + 0x5d], bl; ret; 
0x000000000041f028: add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000401ee8: add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rax - 0x77]; ret; 
0x000000000045724f: add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rcx - 0x77]; ret 0x8b4c; 
0x0000000000455c28: add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rcx - 0x77]; ret; 
0x0000000000400d48: add byte ptr [rax - 0x7d], cl; clc; or dword ptr [rdi], ecx; xchg dword ptr [rdi + 0x48000001], esp; mov eax, dword ptr [rax*8 + 0x4a1ca8]; jmp rax; 
0x000000000049d86f: add byte ptr [rax - 0x7d], cl; in al, dx; or byte ptr [rax - 0x80], al; call qword ptr [rax + 0x49]; 
0x000000000041f152: add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x00000000004487af: add byte ptr [rax - 0x7d], cl; mov dword ptr [rcx], 0x83480b89; rol byte ptr [rax + rcx*2], 0x83; ret; 
0x000000000041c7bf: add byte ptr [rax - 0x7d], cl; ret 0x110; 
0x000000000043e25f: add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x00000000004727df: add byte ptr [rax - 0x7d], cl; ret 0x4401; 
0x000000000040f56f: add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000047eb0f: add byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x00000000004a15ef: add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x0000000000453c2f: add byte ptr [rax - 0x7d], cl; ret 0x481e; 
0x0000000000401adf: add byte ptr [rax - 0x7d], cl; ret 0x4838; 
0x0000000000447a36: add byte ptr [rax - 0x7d], cl; ret 0x4901; 
0x000000000044ca20: add byte ptr [rax - 0x7d], cl; ret 0x4904; 
0x00000000004235bf: add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000046d137: add byte ptr [rax - 0x7d], cl; ret 0x4c01; 
0x0000000000426aaf: add byte ptr [rax - 0x7d], cl; ret 0x6620; 
0x0000000000426a3f: add byte ptr [rax - 0x7d], cl; ret 0x7e20; 
0x0000000000497c2e: add byte ptr [rax - 0x7d], cl; ret 0x8308; 
0x0000000000447e2f: add byte ptr [rax - 0x7d], cl; ret 0x8901; 
0x000000000046adb7: add byte ptr [rax - 0x7d], cl; ret 0x8b04; 
0x00000000004673ef: add byte ptr [rax - 0x7d], cl; ret 0xb908; 
0x0000000000426050: add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x0000000000429ed3: add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004235e3: add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000047012f: add byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x0000000000401d7e: add byte ptr [rax - 0x7d], cl; ret; 
0x000000000042ee1f: add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x000000000046e0df: add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x49], 0x39; ret 0x2774; 
0x000000000044d1a4: add byte ptr [rax - 0x7d], cl; rol byte ptr [rcx + rcx*2], 0x39; ret; 
0x000000000047cae3: add byte ptr [rax - 0x7d], cl; rol byte ptr [rcx], 0x48; mov dword ptr [rip + 0x2598e1], eax; add rsp, 8; ret; 
0x000000000044ec2f: add byte ptr [rax - 0x7d], cl; rol byte ptr [rcx], 0x83; ret 0x4801; 
0x0000000000470a01: add byte ptr [rax - 0x7f], cl; in al, dx; add byte ptr [rax], 0; add al, ch; ret 0xfd28; 
0x000000000047d2c2: add byte ptr [rax - 0x7f], cl; in al, dx; add byte ptr [rax], dl; add byte ptr [rax], al; mov rsi, rsp; syscall; 
0x00000000004a0ab6: add byte ptr [rax - 0x7f], cl; jmp rax; 
0x000000000044771c: add byte ptr [rax - 0x7f], cl; ret 0x6680; 
0x000000000043382b: add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x000000000049d7ef: add byte ptr [rax - 0x80], al; call qword ptr [rax + 0x75]; 
0x000000000049d7ef: add byte ptr [rax - 0x80], al; call qword ptr [rax + 0x75]; in eax, dx; xor eax, eax; add rsp, 8; ret; 
0x000000000044d7de: add byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004525fd: add byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x000000000046c7a2: add byte ptr [rax - 1], bh; pop rbx; ret; 
0x0000000000410c62: add byte ptr [rax - 1], bh; ret; 
0x000000000041738e: add byte ptr [rax - 1], dil; ret; 
0x00000000004c72a7: add byte ptr [rax - 6], bl; cli; jmp rdi; 
0x00000000004bfcf7: add byte ptr [rax - 9], bl; hlt; call qword ptr [rax]; 
0x0000000000444faf: add byte ptr [rax - 9], cl; fsub dword ptr [rcx + rcx*4 + 4]; and eax, 0xffffffd0; or rax, 0xffffffffffffffff; ret; 
0x00000000004bfd0f: add byte ptr [rax - 9], dl; hlt; call qword ptr [rdx]; 
0x0000000000470a05: add byte ptr [rax], 0; add al, ch; ret 0xfd28; 
0x0000000000410134: add byte ptr [rax], 0; add al, ch; ret; 
0x0000000000414e49: add byte ptr [rax], 0; add bl, dh; ret; 
0x00000000004186cf: add byte ptr [rax], 0; add byte ptr [rax + 0x6cb800], bh; ret; 
0x0000000000410e99: add byte ptr [rax], 0; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x0000000000449a6a: add byte ptr [rax], 0; add byte ptr [rax - 0x75], cl; jl 0x49a96; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004172bd: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; adc eax, 0x2b62e0; add dword ptr [rip + 0x2b62d5], 1; ret; 
0x0000000000443693: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; mov word ptr [rax + rcx*4], gs; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000413e7d: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x00000000004840d0: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004125bd: add byte ptr [rax], 0; add byte ptr [rax - 0x7b], cl; sar byte ptr [rax + 0xa], 0x48; mov dword ptr [rbx + 0x90], eax; pop rbx; ret; 
0x0000000000426aeb: add byte ptr [rax], 0; add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x0000000000426b0b: add byte ptr [rax], 0; add byte ptr [rax], al; bsf eax, eax; lea rax, qword ptr [rax + rdi + 0x20]; ret; 
0x00000000004980eb: add byte ptr [rax], 0; add byte ptr [rax], al; call rax; 
0x000000000041e6a3: add byte ptr [rax], 0; add byte ptr [rax], al; mov dword ptr [rip + 0x2aef56], 0; ret; 
0x000000000043fd2b: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 0x18; syscall; 
0x0000000000415aeb: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000047392b: add byte ptr [rax], 0; add byte ptr [rax], al; mov ecx, 0xc; mov eax, ecx; syscall; 
0x000000000043604b: add byte ptr [rax], 0; add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x000000000049cf13: add byte ptr [rax], 0; add byte ptr [rax], al; mov qword ptr [rdi + rsi*8], rdx; add rsp, 8; ret; 
0x0000000000476bf3: add byte ptr [rax], 0; add byte ptr [rax], al; mov qword ptr [rsi], -1; xor eax, eax; ret; 
0x000000000049a063: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, -0x30; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x0000000000471983: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, -0x30; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000041d4db: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, -0x30; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000048c1a3: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, -0x30; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000480dfb: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rax + 8]; ret; 
0x000000000046d1ab: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x6d1c0; ret; 
0x000000000046eb4b: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, rdi; ret; 
0x0000000000435e8b: add byte ptr [rax], 0; add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000043be6b: add byte ptr [rax], 0; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000004125db: add byte ptr [rax], 0; add byte ptr [rax], al; movsxd rdi, dword ptr [rdi + 0x70]; mov eax, 3; syscall; 
0x000000000044e7b3: add byte ptr [rax], 0; add byte ptr [rax], al; movsxd rdi, edi; mov rax, qword ptr [rdi*8 + 0x6cca40]; ret; 
0x000000000044f94b: add byte ptr [rax], 0; add byte ptr [rax], al; movsxd rdi, r14d; mov eax, 3; syscall; 
0x000000000043619b: add byte ptr [rax], 0; add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000043612b: add byte ptr [rax], 0; add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000444fab: add byte ptr [rax], 0; add byte ptr [rax], al; neg rax; mov dword ptr fs:[0xffffffffffffffd0], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000043e6eb: add byte ptr [rax], 0; add byte ptr [rax], al; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000041d4f3: add byte ptr [rax], 0; add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x00000000004186db: add byte ptr [rax], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042d8ab: add byte ptr [rax], 0; add byte ptr [rax], al; xor rax, rax; ret; 
0x000000000045b0fa: add byte ptr [rax], 0; add byte ptr [rbx + 0x44], bl; mov eax, eax; pop rbp; pop r12; ret; 
0x000000000046bf8b: add byte ptr [rax], 0; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000046b635: add byte ptr [rax], 0; add byte ptr [rbx - 0x77], bl; rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x0000000000410656: add byte ptr [rax], 0; add byte ptr [rcx + 0x415d5bd8], cl; pop rsp; ret; 
0x0000000000496595: add byte ptr [rax], 0; add byte ptr [rcx], bh; ret; 
0x00000000004432dc: add byte ptr [rax], 0; add byte ptr [rcx], bh; sal byte ptr [rbp + 8], 1; nop; mov eax, 0xca; syscall; 
0x00000000004350c7: add byte ptr [rax], 0; add byte ptr [rdi], cl; cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x00000000004497bb: add byte ptr [rax], 0; add byte ptr [rdi], cl; mov dh, 0x4a; dec dword ptr [rax - 0x7d]; ret 0x4801; 
0x000000000042f301: add byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000041acbe: add byte ptr [rax], 0; add cl, ch; xlatb; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000447c22: add byte ptr [rax], 0; add dh, dh; ret 0x4801; 
0x000000000041de7b: add byte ptr [rax], 0; add dh, dh; ret; 
0x000000000041024b: add byte ptr [rax], 0; je 0x10258; mov eax, edx; pop rbx; ret; 
0x000000000046bf40: add byte ptr [rax], 0; je 0x6bf50; pop rbx; pop rbp; pop r12; ret; 
0x000000000048c247: add byte ptr [rax], 0; je 0x8c250; mov eax, edx; pop rbx; ret; 
0x00000000004c163f: add byte ptr [rax], ah; cmc; call qword ptr [rdx]; 
0x00000000004c1b7f: add byte ptr [rax], ah; cmpsb byte ptr [rsi], byte ptr [rdi]; cmc; call rsp; 
0x00000000004c4caf: add byte ptr [rax], ah; mov ch, 0xf8; call qword ptr [rcx]; 
0x00000000004c141f: add byte ptr [rax], ah; pop rdi; cmc; call qword ptr [rsi]; 
0x00000000004c786f: add byte ptr [rax], ah; push rax; sti; jmp qword ptr [rdx]; 
0x00000000004c2ebf: add byte ptr [rax], ah; ret 0xfff7; 
0x00000000004c841f: add byte ptr [rax], ah; ret 0xfffb; 
0x00000000004c3abf: add byte ptr [rax], ah; sbb al, 0xf8; jmp qword ptr [rdx]; 
0x00000000004c1636: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; mov esp, 0x20000025; cmc; call qword ptr [rdx]; 
0x00000000004c1706: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; mov word ptr [rsi], fs; add byte ptr [rax], al; ret; 
0x00000000004c0f92: add byte ptr [rax], al; adc al, 0x1f; add byte ptr [rax], al; fcom dword ptr [rax - 0xb]; jmp qword ptr [rbx]; 
0x00000000004c7a92: add byte ptr [rax], al; adc al, 0x8a; add byte ptr [rax], al; cmp byte ptr [rdi - 5], dl; call rsi; 
0x00000000004c8092: add byte ptr [rax], al; adc al, 0x90; add byte ptr [rax], al; test al, 0x8f; sti; jmp qword ptr [rsi]; 
0x000000000048bf06: add byte ptr [rax], al; adc byte ptr [rax], al; or rsi, rax; mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x00000000004c158e: add byte ptr [rax], al; adc byte ptr [rbx - 0xb], ah; call qword ptr [rsi]; 
0x00000000004c062e: add byte ptr [rax], al; adc byte ptr [rbx], ah; cmc; call qword ptr [rsi + 4]; 
0x00000000004c9d2e: add byte ptr [rax], al; adc byte ptr [rdx], bh; std; jmp qword ptr [rdi]; 
0x00000000004c3a41: add byte ptr [rax], al; add ah, al; add byte ptr [r8], al; mov byte ptr [rdx], bl; clc; call qword ptr [rax]; 
0x00000000004c3941: add byte ptr [rax], al; add ah, al; add byte ptr [rax], al; or byte ptr [rax + rdi*8], dl; call qword ptr [rbx]; 
0x00000000004c3f41: add byte ptr [rax], al; add ah, al; add byte ptr [rax], r8b; cwde; cmp al, bh; call qword ptr [rax]; 
0x00000000004c5a41: add byte ptr [rax], al; add ah, al; imul eax, dword ptr [rax], 0xfa61b800; jmp qword ptr [rdi + 1]; 
0x00000000004c0d41: add byte ptr [rax], al; add ah, al; sbb al, 0; add byte ptr [rax + 0x49], cl; cmc; call qword ptr [rsi]; 
0x00000000004c7e79: add byte ptr [rax], al; add ah, bh; lea eax, dword ptr [rax]; add byte ptr [rax], dl; test bl, bh; jmp rsi; 
0x00000000004c3c59: add byte ptr [rax], al; add ah, bl; add byte ptr [r8], al; sbb edi, eax; call qword ptr [rsi + 0xb]; 
0x00000000004c0569: add byte ptr [rax], al; add ah, ch; adc al, 0; add byte ptr [rax + 0x20], dh; cmc; jmp qword ptr [rsi]; 
0x00000000004c6169: add byte ptr [rax], al; add ah, ch; jo 0xc616f; add byte ptr [rax + 0x78], dh; cli; call qword ptr [rcx]; 
0x00000000004c9f49: add byte ptr [rax], al; add ah, cl; scasb al, byte ptr [rdi]; add byte ptr [rax], al; rol byte ptr [rdx - 3], 1; call qword ptr [rcx + 1]; 
0x00000000004c9971: add byte ptr [rax], al; add ah, dh; test al, 0; add byte ptr [rax + 0x32], cl; std; call rsp; 
0x0000000000479e4f: add byte ptr [rax], al; add al, 0x48; add esp, 8; ret; 
0x00000000004c8282: add byte ptr [rax], al; add al, 0x92; add byte ptr [rax], al; js 0xc821b; sti; call qword ptr [rdx]; 
0x00000000004bf382: add byte ptr [rax], al; add al, 3; add byte ptr [rax], al; cmp byte ptr [rcx], ch; hlt; jmp qword ptr [rbx]; 
0x00000000004a66b6: add byte ptr [rax], al; add al, 4; add al, 4; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x4a60; 
0x000000000042783b: add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rbp + 7], dh; lea rax, qword ptr [rip + 0x67]; ret; 
0x0000000000421fcf: add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rbp + 7], dh; lea rax, qword ptr [rip + 3]; ret; 
0x000000000042788e: add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rbp + 7], dh; lea rax, qword ptr [rip + 4]; ret; 
0x0000000000426b75: add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rbp + 8], dh; lea rax, qword ptr [rip + 0x1d]; ret; 
0x000000000042771f: add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0x12ad3]; ret; 
0x00000000004241ef: add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0x14853]; ret; 
0x000000000042716c: add byte ptr [rax], al; add al, byte ptr [rax]; je 0x27179; lea rax, qword ptr [rip + 0x17647]; ret; 
0x00000000004019a8: add byte ptr [rax], al; add al, byte ptr [rax]; mov edi, 0x4a1e2d; mov eax, 2; syscall; 
0x000000000049c96f: add byte ptr [rax], al; add al, ch; cdq; sbb dh, bh; jmp qword ptr [rsi + 0xf]; 
0x000000000045315f: add byte ptr [rax], al; add al, ch; leave; ret; 
0x000000000045318b: add byte ptr [rax], al; add al, ch; popfq; ret; 
0x0000000000470a06: add byte ptr [rax], al; add al, ch; ret 0xfd28; 
0x0000000000410135: add byte ptr [rax], al; add al, ch; ret; 
0x000000000047ed1a: add byte ptr [rax], al; add al, ch; sahf; sar edi, 1; jmp qword ptr [rsi + 0xf]; 
0x000000000048bf1d: add byte ptr [rax], al; add bh, al; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x000000000044566d: add byte ptr [rax], al; add bh, al; add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000041e6a5: add byte ptr [rax], al; add bh, al; add eax, 0x2aef56; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000461046: add byte ptr [rax], al; add bh, al; test dword ptr [rdi + rbp*8 - 1], edx; jmp qword ptr [rax]; 
0x0000000000413e78: add byte ptr [rax], al; add bh, bh; nop; add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x0000000000443d3d: add byte ptr [rax], al; add bh, dh; ret 0; 
0x0000000000421c42: add byte ptr [rax], al; add bl, al; mov rsi, rbx; mov rdi, rax; call rcx; 
0x0000000000472ba8: add byte ptr [rax], al; add bl, ch; ret 0x1f0f; 
0x000000000043c4ed: add byte ptr [rax], al; add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000043be6d: add byte ptr [rax], al; add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000004271ed: add byte ptr [rax], al; add bl, dh; movq qword ptr [rdi + 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000414e4a: add byte ptr [rax], al; add bl, dh; ret; 
0x00000000004c1589: add byte ptr [rax], al; add byte ptr [0x63100000], cl; cmc; call qword ptr [rsi]; 
0x00000000004c95a9: add byte ptr [rax], al; add byte ptr [0xfa00000], ch; std; call qword ptr [rax]; 
0x00000000004811e5: add byte ptr [rax], al; add byte ptr [rax + 0x10247c], al; jne 0x81228; xor eax, eax; add rsp, 0x68; ret; 
0x0000000000421c3d: add byte ptr [rax], al; add byte ptr [rax + 0x16], bh; ret; 
0x000000000043fd2d: add byte ptr [rax], al; add byte ptr [rax + 0x18], bh; syscall; 
0x000000000043fd2d: add byte ptr [rax], al; add byte ptr [rax + 0x18], bh; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x000000000047cbbd: add byte ptr [rax], al; add byte ptr [rax + 0x259c213d], al; add byte ptr [rax], al; jne 0x7cbd1; mov rax, qword ptr [rip + 0x259800]; ret; 
0x00000000004539fe: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; bnd call qword ptr [rax + 0x38]; 
0x000000000045d32b: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000045dc87: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; sar rdx, 2; call qword ptr [rax + 0x38]; 
0x0000000000400a29: add byte ptr [rax], al; add byte ptr [rax + 0x31], cl; ret 0x8b48; 
0x0000000000466679: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x820f; 
0x000000000044f629: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x860f; 
0x00000000004bf599: add byte ptr [rax], al; add byte ptr [rax + 0x3de00000], bl; hlt; call qword ptr [rbp + 9]; 
0x000000000045031d: add byte ptr [rax], al; add byte ptr [rax + 0x441f0f], dl; add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, 0xf; syscall; 
0x000000000044326d: add byte ptr [rax], al; add byte ptr [rax + 0x63], bh; syscall; 
0x000000000044326d: add byte ptr [rax], al; add byte ptr [rax + 0x63], bh; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x000000000044e7b5: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; dec dword ptr [rax - 0x75]; add al, 0xfd; retf 0x6c; ret; 
0x00000000004125dd: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; jg 0x12654; mov eax, 3; syscall; 
0x0000000000412dc6: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; jnp 0x12e3d; syscall; 
0x000000000046d43d: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret 0x8d4c; 
0x000000000046be51: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ror dword ptr [rcx + rcx*4 - 0x12], cl; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000040e3c0: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; stc; syscall; 
0x000000000044008e: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; sti; mov eax, 0x48; syscall; 
0x000000000044d726: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; sti; mov eax, 3; syscall; 
0x000000000047370d: add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; 
0x000000000047370d: add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; ret; 
0x00000000004736fd: add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; 
0x00000000004736fd: add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; ret; 
0x000000000047371d: add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; 
0x000000000047371d: add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; ret; 
0x00000000004186d0: add byte ptr [rax], al; add byte ptr [rax + 0x6cb800], bh; ret; 
0x000000000049cd8c: add byte ptr [rax], al; add byte ptr [rax + 0x75], al; cmp qword ptr [r9 + 0x38], 0; je 0x9ce03; add rsp, 0x18; ret; 
0x000000000043c38d: add byte ptr [rax], al; add byte ptr [rax + 0x78d4837], cl; ret; 
0x00000000004409ad: add byte ptr [rax], al; add byte ptr [rax + 0xb], bh; syscall; 
0x00000000004409ad: add byte ptr [rax], al; add byte ptr [rax + 0xb], bh; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x000000000044330f: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; 
0x000000000044330f: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; pop rdx; pop rsi; ret; 
0x00000000004433b6: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000043f714: add byte ptr [rax], al; add byte ptr [rax + 0xe5], bh; syscall; 
0x00000000004c0af6: add byte ptr [rax], al; add byte ptr [rax + 0xe], dl; adc byte ptr [rdx + rax - 0x79e7f1bf], cl; add eax, dword ptr [rbx + 0xe]; and byte ptr [rbx + 0xa4d0204], al; ret; 
0x0000000000401c4e: add byte ptr [rax], al; add byte ptr [rax + 0xf], cl; scasd eax, dword ptr [rdi]; ret 0x8b48; 
0x0000000000421b0f: add byte ptr [rax], al; add byte ptr [rax + 0xfd63948], al; xchg eax, ecx; add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret 0xffdf; 
0x000000000046f03d: add byte ptr [rax], al; add byte ptr [rax + 0xfe580f5], cl; je 0x6f060; add rax, 2; ret; 
0x000000000043f3f1: add byte ptr [rax], al; add byte ptr [rax + 1], bh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000048bf23: add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x000000000048158d: add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret 0x1a75; 
0x00000000004816b4: add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret; 
0x0000000000412dc1: add byte ptr [rax], al; add byte ptr [rax + 3], bh; movsxd rdi, dword ptr [rbx + 0x70]; syscall; 
0x000000000044f8e2: add byte ptr [rax], al; add byte ptr [rax + 3], bh; syscall; 
0x000000000049b89d: add byte ptr [rax], al; add byte ptr [rax + 5], bh; ret; 
0x000000000044322d: add byte ptr [rax], al; add byte ptr [rax + 8], bh; syscall; 
0x000000000044322d: add byte ptr [rax], al; add byte ptr [rax + 8], bh; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x00000000004ae0c9: add byte ptr [rax], al; add byte ptr [rax + rax + 0xbf0000], bh; add byte ptr [rax], al; ret 0; 
0x00000000004c80fd: add byte ptr [rax], al; add byte ptr [rax + rax], ah; add byte ptr [rax + rdx*4 - 0x6bf80000], al; std; call rcx; 
0x00000000004bf52d: add byte ptr [rax], al; add byte ptr [rax + rax], ah; add byte ptr [rsp + rax + 0x32280000], dh; hlt; call qword ptr [rdx]; 
0x00000000004c6bdd: add byte ptr [rax], al; add byte ptr [rax + rax], al; add byte ptr [rbx + rdi*2], ah; add al, cl; ret; 
0x00000000004c51c5: add byte ptr [rax], al; add byte ptr [rax + rax], al; add byte ptr [rcx], cl; add byte ptr [rax + 5], ah; stc; call qword ptr [rsi + 0x2b]; 
0x00000000004c32c5: add byte ptr [rax], al; add byte ptr [rax + rax], bh; add byte ptr [rdx + rax*2], cl; add al, dl; fdivr st(7), st(0); call qword ptr [rbx + 3]; 
0x00000000004c48fd: add byte ptr [rax], al; add byte ptr [rax + rax], bl; add byte ptr [rax], al; test byte ptr [rax], bl; add byte ptr [rax], bl; ret 0xfffd; 
0x00000000004c4e2d: add byte ptr [rax], al; add byte ptr [rax + rax], bl; add byte ptr [rbp + rbx*2 - 0x48580000], dh; clc; call qword ptr [rcx + 0x1c]; 
0x00000000004c8205: add byte ptr [rax], al; add byte ptr [rax + rax], ch; add byte ptr [rax], al; mov word ptr [rcx - 0x6eb00000], ss; sti; call qword ptr [rdx]; 
0x00000000004c8925: add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rax + rbx*4 + 0x27900000], ch; cld; call qword ptr [rbp + 5]; 
0x00000000004c68ed: add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rax + rdi*2], dh; add byte ptr [rax - 0x64], bh; cli; jmp rdi; 
0x00000000004c55bd: add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rbp], al; add al, cl; jl 0xc55c4; call rdx; 
0x00000000004c5bb5: add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rbx + rbp*2], bh; add byte ptr [rax], al; add byte ptr [rbp - 6], ah; call qword ptr [rsi]; 
0x00000000004c9b55: add byte ptr [rax], al; add byte ptr [rax + rax], dh; add byte ptr [rax], al; fsubr qword ptr [rdx + 0x35a00000]; std; call qword ptr [rcx + 1]; 
0x00000000004c1635: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; mov esp, 0x20000025; cmc; call qword ptr [rdx]; 
0x00000000004c1705: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; mov word ptr [rsi], fs; add byte ptr [rax], al; ret; 
0x00000000004c142d: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rbx + 0x5f680000], dh; cmc; jmp qword ptr [rdi + 1]; 
0x00000000004c5b0d: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rsp + rbx*2 + 0x63680000], dh; cli; jmp qword ptr [rsi + 1]; 
0x00000000004c5899: add byte ptr [rax], al; add byte ptr [rax + rbp*2], bl; add byte ptr [rax], al; mov al, 0x5b; cli; jmp rax; 
0x00000000004c8929: add byte ptr [rax], al; add byte ptr [rax + rbx*4 + 0x27900000], ch; cld; call qword ptr [rbp + 5]; 
0x00000000004c7911: add byte ptr [rax], al; add byte ptr [rax + rcx*4 + 0x51b80000], dl; sti; jmp rsi; 
0x00000000004c7931: add byte ptr [rax], al; add byte ptr [rax + rcx*4 + 0x52880000], dh; sti; call qword ptr [rsi]; 
0x00000000004c68f1: add byte ptr [rax], al; add byte ptr [rax + rdi*2], dh; add byte ptr [rax - 0x64], bh; cli; jmp rdi; 
0x00000000004c28d9: add byte ptr [rax], al; add byte ptr [rax + rdi], bl; add byte ptr [rax], al; jb 0xc28d9; call qword ptr [rax]; 
0x00000000004c8101: add byte ptr [rax], al; add byte ptr [rax + rdx*4 - 0x6bf80000], al; std; call rcx; 
0x00000000004c8091: add byte ptr [rax], al; add byte ptr [rax + rdx*4], dl; add byte ptr [rax], al; test al, 0x8f; sti; jmp qword ptr [rsi]; 
0x000000000049cddd: add byte ptr [rax], al; add byte ptr [rax + rsi*4 + 0x48], dh; add esp, 0x18; ret; 
0x000000000046d383: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000417331: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; add eax, 0x2b6269; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000416106: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; or byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret; 
0x0000000000413d2d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffd0; 
0x00000000004592fd: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xfff0; 
0x0000000000410e9a: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000044082f: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x000000000046f09d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x000000000046f07d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rcx], 0; add byte ptr [rax], al; ret; 
0x000000000046f0dd: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x000000000046f08d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x000000000046f0cd: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x000000000045032d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x000000000049cf44: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; call 0x4810588d; mov eax, dword ptr [rdi + 0x98]; ret; 
0x000000000044d63b: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; ret 0x4811; 
0x0000000000421dd8: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000041b5f5: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; je 0x1b620; xor byte ptr [rcx + rcx*4 - 0x31], cl; mov eax, r8d; syscall; 
0x00000000004958e8: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; jl 0x95913; js 0x95932; call rsp; 
0x0000000000495bfd: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; jl 0x95c28; js 0x95c47; call rsp; 
0x0000000000495fc4: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; jl 0x95fef; js 0x9600e; call rsp; 
0x000000000041036a: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; mov al, dh; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000047d177: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add al, 1; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000043a07d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x00000000004462fd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x290621; ret; 
0x000000000041722d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x2b3e89; ret; 
0x000000000041a5f9: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add ecx, dword ptr [rax + 0x29]; ret; 
0x0000000000449a6b: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; jl 0x49a96; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000046d72d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov rax, qword ptr [rax + 0x4c]; ret; 
0x00000000004329fd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432bfd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004976eb: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; or al, byte ptr [rbx - 0x7cb7fe40]; ret 0x8008; 
0x000000000041955d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; push rax; or byte ptr [rax - 0x75], cl; adc byte ptr [rcx - 0x7d], al; ret 0x4801; 
0x00000000004320ad: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; push rsi; clc; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004356ad: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; push rsi; test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x0000000000413166: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; test dword ptr [rax + 0x48000000], esp; mov dword ptr [rax + 0x130], 0x4a29c0; mov rax, qword ptr [rbp + 0xd8]; call qword ptr [rax + 0x40]; 
0x000000000043226d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; test qword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x000000000046d1ad: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; xchg dword ptr [rax + 0x48000000], esp; cmp dword ptr [rax + 0x30], 0; je 0x6d1c0; ret; 
0x000000000041581d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x000000000046d41d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x30]; 
0x000000000049cf15: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; adc al, 0xf7; add rsp, 8; ret; 
0x00000000004172be: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; adc eax, 0x2b62e0; add dword ptr [rip + 0x2b62d5], 1; ret; 
0x000000000040fc2a: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x11f00; add rsp, 0xd8; ret; 
0x000000000040fb99: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x55730; add rsp, 0xd8; ret; 
0x000000000047c86d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x7c1e0; add rsp, 0xd8; ret; 
0x000000000048c10a: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x8c120; add rsp, 0xd8; ret; 
0x00000000004135a6: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0x8c5b8f8; pop rbx; pop rbp; ret; 
0x000000000041725d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000441345: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000046b7ef: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul dword ptr [rax - 0x77]; out dx, eax; call qword ptr [rax + 0x38]; 
0x00000000004105ac: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul dword ptr [rcx + rcx*4 - 0x1a]; call qword ptr [rax + 0x38]; 
0x000000000041213a: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rcx + rcx*4 - 0x19]; mov eax, r9d; syscall; 
0x0000000000416eb4: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp qword ptr [rsi - 1]; call qword ptr [rax + 0x18]; 
0x0000000000411664: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000415770: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x20]; jmp rax; 
0x00000000004158e0: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x28]; jmp rax; 
0x000000000049a00c: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fisttp word ptr [rax - 0x75]; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000004723e7: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fmul dword ptr [rax - 0x7d]; ret; 
0x0000000000442143: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fsubp st(0); ret 0xffe8; 
0x0000000000442043: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fsubp st(0); ret 0xffe9; 
0x000000000045ec95: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; iretd; call qword ptr [rax + 0x38]; 
0x000000000041032f: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; mov dh, byte ptr [rax]; add dword ptr [rax], eax; add bl, dh; ret; 
0x0000000000443694: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; mov word ptr [rax + rcx*4], gs; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000043f67a: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, al; mov rdi, r8; mov eax, r9d; syscall; 
0x000000000046d0fd: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 0x20]; 
0x00000000004106f2: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbp + 0x20]; 
0x0000000000441cff: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call rbx; 
0x000000000041e62a: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x1be; 
0x000000000047524d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8349; 
0x00000000004686a2: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x83e8; 
0x0000000000497714: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000043f691: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x00000000004267b9: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x000000000045b61d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000413e7e: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x0000000000410371: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000047ac2d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ror byte ptr [rax - 0x7d], 1; ret; 
0x0000000000410233: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x77], cl; xlatb; call qword ptr [rax + 0x60]; 
0x0000000000415e5b: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; sti; mov rbp, rdx; call qword ptr [rax + 0x60]; 
0x000000000043f4ed: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; xlatb; mov eax, esi; syscall; 
0x000000000047eee5: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx + 0x48], 0x8b; mov ebp, 0xffffff78; call rax; 
0x0000000000402973: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx + 0x48], 0x8d; mov ebx, 0x80; call rax; 
0x000000000047ea4c: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rcx + 0x49], cl; mov eax, dword ptr [rbp]; add rax, qword ptr [rdx + 8]; call rax; 
0x00000000004125be: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sar byte ptr [rax + 0xa], 0x48; mov dword ptr [rbx + 0x90], eax; pop rbx; ret; 
0x000000000049d86d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; in al, dx; or byte ptr [rax - 0x80], al; call qword ptr [rax + 0x49]; 
0x000000000043e25d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x0000000000445673: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000047eb0d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x00000000004a15ed: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x0000000000453c2d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x481e; 
0x000000000044ca1e: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4904; 
0x000000000042b527: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000426aad: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x6620; 
0x0000000000426a3d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x7e20; 
0x0000000000447e2d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x8901; 
0x00000000004674cd: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xb908; 
0x000000000042b591: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000047012d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x000000000044369c: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000042ee1d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x000000000044ec2d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; rol byte ptr [rcx], 0x83; ret 0x4801; 
0x0000000000435038: add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x000000000049d7ed: add byte ptr [rax], al; add byte ptr [rax - 0x80], al; call qword ptr [rax + 0x75]; 
0x00000000004525fb: add byte ptr [rax], al; add byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x0000000000410c60: add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000444fad: add byte ptr [rax], al; add byte ptr [rax - 9], cl; fsub dword ptr [rcx + rcx*4 + 4]; and eax, 0xffffffd0; or rax, 0xffffffffffffffff; ret; 
0x0000000000443d3b: add byte ptr [rax], al; add byte ptr [rax], al; add bh, dh; ret 0; 
0x00000000004271eb: add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; movq qword ptr [rdi + 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x000000000041721b: add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret; 
0x0000000000421c3b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x16], bh; ret; 
0x000000000047d1eb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000044326b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x63], bh; syscall; 
0x000000000046d43b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret 0x8d4c; 
0x000000000044d850: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; sti; mov eax, 3; syscall; 
0x000000000047370b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; 
0x000000000047370b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; ret; 
0x00000000004736fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; 
0x00000000004736fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; ret; 
0x000000000047371b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; 
0x000000000047371b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; ret; 
0x000000000043c38b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x78d4837], cl; ret; 
0x00000000004409ab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xb], bh; syscall; 
0x000000000049b89b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 5], bh; ret; 
0x000000000044322b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 8], bh; syscall; 
0x00000000004c80fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + rax], ah; add byte ptr [rax + rdx*4 - 0x6bf80000], al; std; call rcx; 
0x00000000004bf52b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + rax], ah; add byte ptr [rsp + rax + 0x32280000], dh; hlt; call qword ptr [rdx]; 
0x00000000004c8923: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rax + rbx*4 + 0x27900000], ch; cld; call qword ptr [rbp + 5]; 
0x0000000000413d2b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffd0; 
0x00000000004592fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xfff0; 
0x000000000049b90b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000046b50b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x000000000046f09b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x000000000046f07b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rcx], 0; add byte ptr [rax], al; ret; 
0x000000000046f0db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x000000000046f08b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x000000000046f0cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x000000000045032b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x00000000004462fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x290621; ret; 
0x000000000041722b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x2b3e89; ret; 
0x000000000046d72b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov rax, qword ptr [rax + 0x4c]; ret; 
0x000000000041725b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000041e628: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x1be; 
0x00000000004686a0: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x83e8; 
0x000000000045f52b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000043f4eb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; xlatb; mov eax, esi; syscall; 
0x000000000043e25b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x000000000047eb0b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x00000000004a15eb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x0000000000453c2b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x481e; 
0x0000000000426aab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x6620; 
0x0000000000426a3b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x7e20; 
0x0000000000447e2b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x8901; 
0x00000000004674cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xb908; 
0x000000000049b27b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x0000000000458ceb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000042ee1b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x000000000044ec2b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; rol byte ptr [rcx], 0x83; ret 0x4801; 
0x000000000049d7eb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x80], al; call qword ptr [rax + 0x75]; 
0x00000000004171db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000004aff52: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x24; 
0x00000000004b0442: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x33; 
0x000000000041605b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004a40cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], dh; wait; clc; call qword ptr [rax - 0x64]; 
0x00000000004a67c3: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], dl; ret 0x44; 
0x00000000004c8924: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rax + rbx*4 + 0x27900000], ch; cld; call qword ptr [rbp + 5]; 
0x00000000004c6bdc: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rbx + rdi*2], ah; add al, cl; ret; 
0x000000000049f2fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x3b801ff], al; add byte ptr [rax], al; add byte ptr [rsi + rax - 0xd], dh; ret; 
0x000000000043bdab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x000000000043b8db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x48028901], cl; lea eax, dword ptr [rdx + 3]; ret; 
0x000000000043592b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x5789fc56], cl; cld; ret; 
0x0000000000417a3b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000049eceb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x75c08507], cl; or dh, bl; ret; 
0x000000000049bf5b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret 0xde89; 
0x000000000043e49b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x00000000004983db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x000000000042359b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000042216b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x0000000000413e2b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rax - 0x7b], 0xd2; jne 0x13e40; ret; 
0x000000000041282b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 2; ret; 
0x000000000042d86b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp al, dh; ret; 
0x0000000000426afb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x000000000043b89b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdx + 0x48028801], cl; lea eax, dword ptr [rdx]; ret; 
0x000000000043a0eb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdx + 0x48028801], cl; mov eax, edi; ret; 
0x00000000004737d9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x15; syscall; 
0x00000000004409e9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x1c; syscall; 
0x00000000004736e9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x66; syscall; 
0x00000000004736e9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x66; syscall; ret; 
0x00000000004409c9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xa; syscall; 
0x0000000000443249: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0x19; syscall; 
0x00000000004c80fc: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr fs:[rax], al; add byte ptr [rax + rdx*4 - 0x6bf80000], al; std; call rcx; 
0x00000000004bf52c: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr fs:[rax], al; add byte ptr [rsp + rax + 0x32280000], dh; hlt; call qword ptr [rdx]; 
0x0000000000481355: add byte ptr [rax], al; add byte ptr [rax], al; add rax, -8; ret; 
0x000000000046f05c: add byte ptr [rax], al; add byte ptr [rax], al; add rax, 3; ret; 
0x000000000047305e: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x0000000000446365: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000480bdf: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000004273bc: add byte ptr [rax], al; add byte ptr [rax], al; and edx, 0x1f; jne 0x272a6; mov rax, rdi; ret; 
0x0000000000426aec: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x0000000000426afc: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, qword ptr [rax + rdi + 0x10]; ret; 
0x0000000000426b0c: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, qword ptr [rax + rdi + 0x20]; ret; 
0x000000000042d86c: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, qword ptr [rax + rdi - 0x10]; ret; 
0x000000000049ab0a: add byte ptr [rax], al; add byte ptr [rax], al; call 0x9a7e0; add rsp, 0x28; ret; 
0x00000000004980ec: add byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x00000000004b1f7c: add byte ptr [rax], al; add byte ptr [rax], al; call rdi; 
0x00000000004b112c: add byte ptr [rax], al; add byte ptr [rax], al; call rsp; 
0x000000000047cbbc: add byte ptr [rax], al; add byte ptr [rax], al; cmp byte ptr [rip + 0x259c21], 0; jne 0x7cbd1; mov rax, qword ptr [rip + 0x259800]; ret; 
0x0000000000421d5a: add byte ptr [rax], al; add byte ptr [rax], al; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x000000000049cddc: add byte ptr [rax], al; add byte ptr [rax], al; je 0x9cd92; add rsp, 0x18; ret; 
0x0000000000460454: add byte ptr [rax], al; add byte ptr [rax], al; jmp rax; 
0x000000000043c9bc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 0xa]; ret; 
0x000000000043c9cc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 0xb]; ret; 
0x000000000043c9dc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 0xc]; ret; 
0x000000000043c9ec: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 0xd]; ret; 
0x000000000043c9fc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 0xe]; ret; 
0x000000000043c93c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 1]; ret; 
0x000000000043c94c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 2]; ret; 
0x000000000043c95c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 3]; ret; 
0x000000000043c96c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 4]; ret; 
0x000000000043c97c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 5]; ret; 
0x000000000043c98c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 6]; ret; 
0x000000000043c99c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 8]; ret; 
0x000000000043c9ac: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 9]; ret; 
0x0000000000421dd7: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000043c92c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi]; ret; 
0x000000000043b89c: add byte ptr [rax], al; add byte ptr [rax], al; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, qword ptr [rdx]; ret; 
0x000000000043a0ec: add byte ptr [rax], al; add byte ptr [rax], al; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x000000000043b8ac: add byte ptr [rax], al; add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; lea rax, qword ptr [rdx + 1]; ret; 
0x000000000043a0fc: add byte ptr [rax], al; add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x000000000043c38c: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, qword ptr [rdi]; ret; 
0x000000000043bd6c: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x000000000043bd8c: add byte ptr [rax], al; add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x0000000000460436: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rbp - 0x1098], 0; mov dword ptr [rbp - 0x10a0], 0; mov dword ptr [rbp - 0x10b0], 0; jmp rax; 
0x0000000000460440: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rbp - 0x10a0], 0; mov dword ptr [rbp - 0x10b0], 0; jmp rax; 
0x000000000046044a: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rbp - 0x10b0], 0; jmp rax; 
0x0000000000455b99: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rbp - 0x4c8], 0; mov qword ptr [rbp - 0x4e8], rsi; jmp rax; 
0x0000000000455b8f: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rbp - 0x500], 0; mov dword ptr [rbp - 0x4c8], 0; mov qword ptr [rbp - 0x4e8], rsi; jmp rax; 
0x000000000048bf1c: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000041e6a4: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rip + 0x2aef56], 0; ret; 
0x000000000043c39c: add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, qword ptr [rdi + 1]; ret; 
0x000000000043bd7c: add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000421c3c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x16; ret; 
0x000000000043fd2c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x18; syscall; 
0x000000000044326c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x63; syscall; 
0x000000000047370c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x68; syscall; 
0x000000000047370c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x68; syscall; ret; 
0x00000000004736fc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6b; syscall; 
0x00000000004736fc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6b; syscall; ret; 
0x000000000047371c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6c; syscall; 
0x000000000047371c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6c; syscall; ret; 
0x00000000004409ac: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xb; syscall; 
0x0000000000415aec: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000048bf22: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 1; ret; 
0x0000000000412dc0: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 3; movsxd rdi, dword ptr [rbx + 0x70]; syscall; 
0x000000000049b89c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 5; ret; 
0x000000000044322c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 8; syscall; 
0x000000000043b8dc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; lea rax, qword ptr [rdx + 3]; ret; 
0x0000000000416f1c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000049a79c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rip + 0x23c11a]; ret; 
0x000000000047392c: add byte ptr [rax], al; add byte ptr [rax], al; mov ecx, 0xc; mov eax, ecx; syscall; 
0x000000000043bdac: add byte ptr [rax], al; add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x000000000043592c: add byte ptr [rax], al; add byte ptr [rax], al; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043604c: add byte ptr [rax], al; add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x0000000000443304: add byte ptr [rax], al; add byte ptr [rax], al; mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000046d382: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x0000000000455ba3: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rbp - 0x4e8], rsi; jmp rax; 
0x0000000000416225: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000049cf5c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + 0x98], rsi; ret; 
0x000000000049cf14: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + rsi*8], rdx; add rsp, 8; ret; 
0x0000000000417330: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rip + 0x2b6269], 0; ret; 
0x0000000000476bf4: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsi], -1; xor eax, eax; ret; 
0x00000000004501ac: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -0x10; add rax, qword ptr fs:[0]; ret; 
0x00000000004501cc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x00000000004501ec: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x000000000049a064: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -0x30; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x0000000000471984: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -0x30; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000041d4dc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -0x30; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000048c1a4: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -0x30; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x00000000004171cc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -1; ret; 
0x000000000045032c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xf; syscall; 
0x000000000046f07c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 1; ret; 
0x000000000046f08c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 2; ret; 
0x000000000046f09c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 3; ret; 
0x000000000046f0ac: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 4; ret; 
0x000000000046f0bc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 5; ret; 
0x000000000046f0cc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 6; ret; 
0x000000000046f0dc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 7; ret; 
0x0000000000480dfc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rax + 8]; ret; 
0x00000000004620f0: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rax*8 + 0x4b44a0]; jmp rax; 
0x000000000047d176: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rcx + rax]; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000043b82c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, qword ptr [rdx + 7]; ret; 
0x000000000043a07c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000046d72c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x000000000041724c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000049cf2c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000046d1ac: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x6d1c0; ret; 
0x000000000049cf6c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x000000000049cfcc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x000000000049cfbc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000049cf7c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x000000000041581c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000046d41c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x30]; 
0x0000000000415bfc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xd8]; mov rax, qword ptr [rax + 0x40]; jmp rax; 
0x00000000004462fc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x290621]; ret; 
0x000000000041722c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2b3e89]; ret; 
0x000000000041725c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rdi; ret; 
0x000000000043bdec: add byte ptr [rax], al; add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x000000000044f833: add byte ptr [rax], al; add byte ptr [rax], al; mov rdi, qword ptr [rdi]; syscall; 
0x000000000043f4ec: add byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rdx; mov eax, esi; syscall; 
0x000000000048c9ff: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x00000000004320ac: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435e8c: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x00000000004983dc: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x000000000043c4ec: add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000043be6c: add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000004271ec: add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000004125dc: add byte ptr [rax], al; add byte ptr [rax], al; movsxd rdi, dword ptr [rdi + 0x70]; mov eax, 3; syscall; 
0x000000000044d851: add byte ptr [rax], al; add byte ptr [rax], al; movsxd rdi, ebx; mov eax, 3; syscall; 
0x000000000044e7b4: add byte ptr [rax], al; add byte ptr [rax], al; movsxd rdi, edi; mov rax, qword ptr [rdi*8 + 0x6cca40]; ret; 
0x000000000044f94c: add byte ptr [rax], al; add byte ptr [rax], al; movsxd rdi, r14d; mov eax, 3; syscall; 
0x000000000043dc2c: add byte ptr [rax], al; add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0x10]; movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x000000000042f00c: add byte ptr [rax], al; add byte ptr [rax], al; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000041282c: add byte ptr [rax], al; add byte ptr [rax], al; movzx eax, byte ptr [rdx]; ret; 
0x000000000042340c: add byte ptr [rax], al; add byte ptr [rax], al; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000435abc: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000043619c: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x0000000000435a3c: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000043612c: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000444fac: add byte ptr [rax], al; add byte ptr [rax], al; neg rax; mov dword ptr fs:[0xffffffffffffffd0], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000043f4a8: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0x25; syscall; 
0x00000000004737da: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x15; syscall; 
0x00000000004409ea: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x1c; syscall; 
0x00000000004736ea: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x66; syscall; 
0x00000000004736ea: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x66; syscall; ret; 
0x00000000004409ca: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xa; syscall; 
0x000000000044324a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0x19; syscall; 
0x0000000000412e4c: add byte ptr [rax], al; add byte ptr [rax], al; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000047d525: add byte ptr [rax], al; add byte ptr [rax], al; or dword ptr [rip + 0x24ec40], 1; pop rbx; ret; 
0x00000000004008ec: add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x000000000043eed8: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; and eax, 0x3fc00; ret; 
0x0000000000415ed0: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000004156d1: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004b0f4c: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x1d4; 
0x00000000004b16e4: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x1d5; 
0x00000000004aff54: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x24; 
0x00000000004b0444: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x33; 
0x00000000004a66bc: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x4a60; 
0x000000000041605d: add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004aff4c: add byte ptr [rax], al; add byte ptr [rax], al; shl dword ptr [rax + rax], 0; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x24; 
0x000000000043fe8a: add byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x000000000043fe8a: add byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x000000000047f4ec: add byte ptr [rax], al; add byte ptr [rax], al; test byte ptr [rdi + 0x314], 8; je 0x7f55d; pop rbx; ret; 
0x0000000000402972: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x2984; lea rdi, qword ptr [rbx + 0x80]; call rax; 
0x0000000000402bbe: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x2bd0; lea rdi, qword ptr [rbx + 0x80]; call rax; 
0x000000000040349d: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x34ad; mov edi, 0x6cd060; call rax; 
0x00000000004036ec: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x3706; mov edi, 0x6ccfe0; call rax; 
0x00000000004038e0: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x38fa; mov edi, 0x6ccfe0; call rax; 
0x0000000000403e43: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x3e53; mov edi, 0x6cd0a0; call rax; 
0x000000000043f109: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x3f119; mov edi, 0x6cd720; call rax; 
0x0000000000444c2a: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x44c3a; mov edi, 0x6cc140; call rax; 
0x000000000044e618: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x4e630; mov edi, 0x6cd720; call rax; 
0x000000000044ec52: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x4e633; mov edi, 0x6cd720; call rax; 
0x000000000044e778: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x4e788; mov edi, 0x6cd720; call rax; 
0x000000000044e8f1: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x4e908; mov edi, 0x6cd720; call rax; 
0x000000000044ebd1: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x4ebe1; mov edi, 0x6cd720; call rax; 
0x000000000047d921: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x7d931; mov edi, 0x6cc140; call rax; 
0x000000000047d949: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x7d959; mov edi, 0x6cc140; call rax; 
0x000000000047d9bf: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x7d9cf; mov edi, 0x6cc140; call rax; 
0x000000000047eee4: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x7eef6; mov rdi, qword ptr [rbp - 0x88]; call rax; 
0x000000000047f48c: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x7f500; mov edi, 0x6cc140; call rax; 
0x0000000000480c47: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x80c12; mov edi, 0x6cc140; call rax; 
0x0000000000498821: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x98831; mov edi, 0x6cc140; call rax; 
0x000000000049884d: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x9885d; mov edi, 0x6cc140; call rax; 
0x00000000004009a1: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x998; call rax; 
0x000000000049a3db: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x9a3eb; mov edi, 0x6cc140; call rax; 
0x000000000049a483: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x9a493; mov edi, 0x6cc140; call rax; 
0x000000000049f634: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x9f644; mov edi, 0x6cc100; call rax; 
0x0000000000421a9c: add byte ptr [rax], al; add byte ptr [rax], al; test sil, 7; mov eax, 0x16; je 0x21ab0; ret; 
0x000000000043e6ec: add byte ptr [rax], al; add byte ptr [rax], al; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000041d4f4: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x000000000041259c: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000413e2c: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; test rdx, rdx; jne 0x13e40; ret; 
0x000000000040130c: add byte ptr [rax], al; add byte ptr [rax], al; xor edi, edi; mov eax, edx; syscall; 
0x000000000042d8ac: add byte ptr [rax], al; add byte ptr [rax], al; xor rax, rax; ret; 
0x0000000000403e3f: add byte ptr [rax], al; add byte ptr [rax], bh; test rax, rax; je 0x3e53; mov edi, 0x6cd0a0; call rax; 
0x000000000047d9bb: add byte ptr [rax], al; add byte ptr [rax], bh; test rax, rax; je 0x7d9cf; mov edi, 0x6cc140; call rax; 
0x000000000047eee0: add byte ptr [rax], al; add byte ptr [rax], bh; test rax, rax; je 0x7eef6; mov rdi, qword ptr [rbp - 0x88]; call rax; 
0x000000000047f488: add byte ptr [rax], al; add byte ptr [rax], bh; test rax, rax; je 0x7f500; mov edi, 0x6cc140; call rax; 
0x0000000000426b89: add byte ptr [rax], al; add byte ptr [rax], cl; add byte ptr [rax + rcx + 0x48], dh; lea eax, dword ptr [rip + 0x8449]; ret; 
0x00000000004a40cd: add byte ptr [rax], al; add byte ptr [rax], dh; wait; clc; call qword ptr [rax - 0x64]; 
0x00000000004a67c5: add byte ptr [rax], al; add byte ptr [rax], dl; ret 0x44; 
0x00000000004c8926: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rax + rbx*4 + 0x27900000], ch; cld; call qword ptr [rbp + 5]; 
0x00000000004c68ee: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rax + rdi*2], dh; add byte ptr [rax - 0x64], bh; cli; jmp rdi; 
0x00000000004c55be: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rbp], al; add al, cl; jl 0xc55c4; call rdx; 
0x00000000004c5bb6: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rbx + rbp*2], bh; add byte ptr [rax], al; add byte ptr [rbp - 6], ah; call qword ptr [rsi]; 
0x00000000004c6bde: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rbx + rdi*2], ah; add al, cl; ret; 
0x00000000004c51c6: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rcx], cl; add byte ptr [rax + 5], ah; stc; call qword ptr [rsi + 0x2b]; 
0x000000000045d02c: add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; pop r14; ret; 
0x000000000045d0fc: add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; ret; 
0x0000000000415a80: add byte ptr [rax], al; add byte ptr [rbp + 0x48497ed2], al; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x00000000004735ad: add byte ptr [rax], al; add byte ptr [rbp + 0x53], dl; mov rbx, rsi; sub rsp, 8; syscall; 
0x00000000004c1639: add byte ptr [rax], al; add byte ptr [rbp + 0x64200000], bh; cmc; call qword ptr [rdx]; 
0x00000000004c051e: add byte ptr [rax], al; add byte ptr [rbp + 0xe], cl; adc byte ptr [rdx + rax - 0x79e7f1bf], cl; add eax, dword ptr [rcx + 0xe]; and byte ptr [rbx + 0xa470204], al; ret; 
0x000000000040107b: add byte ptr [rax], al; add byte ptr [rbp + rax - 0x18], dh; cmp esp, dword ptr [rdi]; add al, 0; leave; ret; 
0x00000000004c7611: add byte ptr [rax], al; add byte ptr [rbp + rax*4 + 0x28a80000], dl; sti; jmp qword ptr [rcx]; 
0x00000000004c7631: add byte ptr [rax], al; add byte ptr [rbp + rax*4 + 0x28f80000], dh; sti; call rdx; 
0x00000000004c1e11: add byte ptr [rax], al; add byte ptr [rbp + rbp - 0x37b80000], dl; cmc; call qword ptr [rbx]; 
0x00000000004c4e31: add byte ptr [rax], al; add byte ptr [rbp + rbx*2 - 0x48580000], dh; clc; call qword ptr [rcx + 0x1c]; 
0x00000000004c3e09: add byte ptr [rax], al; add byte ptr [rbp + rcx*2 - 0x33600000], cl; std; jmp qword ptr [rdx]; 
0x00000000004336b8: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x1d], cl; or rax, 0x63490007; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000045d323: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x2c], cl; test dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000046d87c: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x18; mov rdi, r12; call rbx; 
0x00000000004c0629: add byte ptr [rax], al; add byte ptr [rbp + rdx + 0x23100000], ch; cmc; call qword ptr [rsi + 4]; 
0x00000000004c6611: add byte ptr [rax], al; add byte ptr [rbp + rsi*2 - 0x70e80000], dl; cli; jmp rdx; 
0x000000000043f708: add byte ptr [rax], al; add byte ptr [rbp - 0x35], dh; lea rsi, qword ptr [rsp + 0x10]; mov edi, 1; mov eax, 0xe5; syscall; 
0x00000000004431c8: add byte ptr [rax], al; add byte ptr [rbp - 0x3dbbf040], al; ret; 
0x0000000000473869: add byte ptr [rax], al; add byte ptr [rbp - 0x3f6bf040], al; add rsp, 0x48; movzx eax, al; ret; 
0x00000000004ae0c1: add byte ptr [rax], al; add byte ptr [rbp - 0x48000000], dh; add byte ptr [rax], al; add byte ptr [rax + rax + 0xbf0000], bh; add byte ptr [rax], al; ret 0; 
0x000000000043eed0: add byte ptr [rax], al; add byte ptr [rbp - 0x63], dh; lea eax, dword ptr [rcx*4]; pop rbx; and eax, 0x3fc00; ret; 
0x000000000046a7dd: add byte ptr [rax], al; add byte ptr [rbp - 0x76bb7ffc], cl; ret 0xf229; 
0x000000000043eb8a: add byte ptr [rax], al; add byte ptr [rbp - 0x7b], al; fild dword ptr [rcx + 0xf]; xchg eax, esp; ret 0xfe83; 
0x00000000004586c3: add byte ptr [rax], al; add byte ptr [rbp - 0x7b], cl; in al, 0xf; test byte ptr [rcx - 0x77000000], dh; ret 0xe283; 
0x00000000004c5bbe: add byte ptr [rax], al; add byte ptr [rbp - 6], ah; call qword ptr [rsi]; 
0x00000000004c55c1: add byte ptr [rax], al; add byte ptr [rbp], al; add al, cl; jl 0xc55c4; call rdx; 
0x000000000047d526: add byte ptr [rax], al; add byte ptr [rbx + 0x24ec400d], al; add byte ptr [rcx], al; pop rbx; ret; 
0x000000000043eed9: add byte ptr [rax], al; add byte ptr [rbx + 0x25], bl; add ah, bh; add eax, dword ptr [rax]; ret; 
0x0000000000495c2f: add byte ptr [rax], al; add byte ptr [rbx + 0x3950245c], cl; ret; 
0x000000000049f2fd: add byte ptr [rax], al; add byte ptr [rbx + 0x3b801ff], al; add byte ptr [rax], al; add byte ptr [rsi + rax - 0xd], dh; ret; 
0x000000000044345c: add byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop rbp; ret; 
0x00000000004100c9: add byte ptr [rax], al; add byte ptr [rbx + 0x42894c03], cl; or byte ptr [rbx - 0x76fefbbe], al; ret 0xe281; 
0x000000000045b0fb: add byte ptr [rax], al; add byte ptr [rbx + 0x44], bl; mov eax, eax; pop rbp; pop r12; ret; 
0x000000000043c3cd: add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; lea rax, qword ptr [rdi + 4]; ret; 
0x000000000043bdad: add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x000000000043b8dd: add byte ptr [rax], al; add byte ptr [rbx + 0x48028901], cl; lea eax, dword ptr [rdx + 3]; ret; 
0x0000000000415b04: add byte ptr [rax], al; add byte ptr [rbx + 0x48], dl; mov ebx, edi; call qword ptr [rax + 0x20]; 
0x0000000000432e1d: add byte ptr [rax], al; add byte ptr [rbx + 0x4e8bf956], cl; cld; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432c1d: add byte ptr [rax], al; add byte ptr [rbx + 0x4e8bfa56], cl; cld; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432a1d: add byte ptr [rax], al; add byte ptr [rbx + 0x4e8bfb56], cl; cld; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043592d: add byte ptr [rax], al; add byte ptr [rbx + 0x5789fc56], cl; cld; ret; 
0x0000000000411fe3: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000415ed1: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000413990: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004c1401: add byte ptr [rax], al; add byte ptr [rbx + 0x5f180000], al; cmc; jmp qword ptr [rax]; 
0x00000000004c1431: add byte ptr [rax], al; add byte ptr [rbx + 0x5f680000], dh; cmc; jmp qword ptr [rdi + 1]; 
0x000000000049eced: add byte ptr [rax], al; add byte ptr [rbx + 0x75c08507], cl; or dh, bl; ret; 
0x0000000000435fdd: add byte ptr [rax], al; add byte ptr [rbx + 0xe8b0156], cl; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000435f6d: add byte ptr [rax], al; add byte ptr [rbx + 0xe8b0256], cl; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000435efd: add byte ptr [rax], al; add byte ptr [rbx + 0xe8b0356], cl; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x00000000004bf381: add byte ptr [rax], al; add byte ptr [rbx + rax], al; add byte ptr [rax], al; cmp byte ptr [rcx], ch; hlt; jmp qword ptr [rbx]; 
0x00000000004c5bb9: add byte ptr [rax], al; add byte ptr [rbx + rbp*2], bh; add byte ptr [rax], al; add byte ptr [rbp - 6], ah; call qword ptr [rsi]; 
0x00000000004c4c21: add byte ptr [rax], al; add byte ptr [rbx + rbx*2 - 0x39a80000], ah; std; call qword ptr [rbx]; 
0x00000000004c4be1: add byte ptr [rax], al; add byte ptr [rbx + rbx*2], ah; add byte ptr [rax], cl; mov al, 0xf8; call qword ptr [rdi]; 
0x00000000004c0bf1: add byte ptr [rax], al; add byte ptr [rbx + rbx], dh; add byte ptr [rax + 0x42], bl; cmc; call qword ptr [rcx + 2]; 
0x00000000004bfc39: add byte ptr [rax], al; add byte ptr [rbx + rcx - 0xa400000], bh; hlt; call qword ptr [rbx]; 
0x0000000000473104: add byte ptr [rax], al; add byte ptr [rbx + rcx*4 + 0x32], ah; syscall; 
0x00000000004c7c29: add byte ptr [rax], al; add byte ptr [rbx + rcx*4 + 0x5eb00000], ch; sti; jmp qword ptr [rdx]; 
0x00000000004c6be1: add byte ptr [rax], al; add byte ptr [rbx + rdi*2], ah; add al, cl; ret; 
0x00000000004611c6: add byte ptr [rax], al; add byte ptr [rbx - 0x106f43], al; call qword ptr [rax]; 
0x000000000049ce9d: add byte ptr [rax], al; add byte ptr [rbx - 0x118af706], al; mov rax, qword ptr [rax]; add rsp, 8; ret; 
0x0000000000452f4c: add byte ptr [rax], al; add byte ptr [rbx - 0x1e], cl; mov rdx, r12; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x00000000004115ed: add byte ptr [rax], al; add byte ptr [rbx - 0x3b7cb7fe], cl; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000045e96c: add byte ptr [rax], al; add byte ptr [rbx - 0x4db43], al; call qword ptr [rax]; 
0x0000000000455f72: add byte ptr [rax], al; add byte ptr [rbx - 0x67b7df18], al; movzx eax, byte ptr [rax + 0x4b40e0]; mov rax, qword ptr [rax*8 + 0x4b3a20]; jmp rax; 
0x0000000000455fc3: add byte ptr [rax], al; add byte ptr [rbx - 0x67b7df18], al; movzx eax, byte ptr [rax + 0x4b40e0]; mov rax, qword ptr [rax*8 + 0x4b3b20]; jmp rax; 
0x00000000004580b3: add byte ptr [rax], al; add byte ptr [rbx - 0x67b7df18], al; movzx eax, byte ptr [rax + 0x4b40e0]; mov rax, qword ptr [rax*8 + 0x4b3c20]; jmp rax; 
0x0000000000456be6: add byte ptr [rax], al; add byte ptr [rbx - 0x67b7df18], al; movzx eax, byte ptr [rax + 0x4b40e0]; mov rax, qword ptr [rax*8 + 0x4b3f20]; jmp rax; 
0x000000000046d18f: add byte ptr [rax], al; add byte ptr [rbx - 0x74b7ffb3], cl; push rax; and cl, ch; sar dh, 0xff; jmp qword ptr [rsi - 0x70]; 
0x000000000046b636: add byte ptr [rax], al; add byte ptr [rbx - 0x77], bl; rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x000000000041705c: add byte ptr [rax], al; add byte ptr [rbx - 0xd], bl; ret; 
0x00000000004c93a9: add byte ptr [rax], al; add byte ptr [rbx], ch; add byte ptr [rax], al; mov al, 8; std; call qword ptr [rbx + 2]; 
0x000000000047c14b: add byte ptr [rax], al; add byte ptr [rcx + 0x2c6d8], cl; add rsp, 0x140; pop rbx; ret; 
0x0000000000410657: add byte ptr [rax], al; add byte ptr [rcx + 0x415d5bd8], cl; pop rsp; ret; 
0x0000000000415f24: add byte ptr [rax], al; add byte ptr [rcx + 0x48d231d1], cl; mov eax, dword ptr [rax + 0x48]; jmp rax; 
0x000000000046d28a: add byte ptr [rax], al; add byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x000000000047392d: add byte ptr [rax], al; add byte ptr [rcx + 0xc], bh; mov eax, ecx; syscall; 
0x0000000000415b9f: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x36; mov rdi, r12; lea rbx, qword ptr [r14 + 1]; call qword ptr [rax + 0x18]; 
0x000000000045df72: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x57; or al, 0x83; ret; 
0x000000000045def5: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x57; or al, 0xf6; ret 0xf08; 
0x0000000000477052: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x87; adc eax, 0x89000003; ret 0xe8c0; 
0x000000000049bf5d: add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret 0xde89; 
0x000000000043e49d: add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x000000000049ce40: add byte ptr [rax], al; add byte ptr [rcx + 3], cl; adc al, 0; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x0000000000421208: add byte ptr [rax], al; add byte ptr [rcx + 9], al; ret; 
0x00000000004c9a21: add byte ptr [rax], al; add byte ptr [rcx + rbp*4 + 0x34980000], ah; std; jmp qword ptr [rcx]; 
0x0000000000441941: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call rbx; 
0x000000000046be22: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x12], cl; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000453e3f: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, qword ptr [rbp - 0x4a8]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004983dd: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x0000000000441a75: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; call rbx; 
0x000000000046d95a: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; lea rdx, qword ptr [rsp + 0x18]; lea r9, qword ptr [rsp + 0x10]; call rbx; 
0x00000000004545c5: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x1e], cl; mov rsi, r8; mov qword ptr [rbp - 0x4a8], r8; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000454ddc: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x1e], cl; mov rsi, r8; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000046b5b9: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x1e], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000412ecd: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x1e], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000460b8a: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x26], cl; mov qword ptr [rbp - 0x10a0], r11; mov rsi, qword ptr [rbp - 0x1088]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x00000000004569fa: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x2e], cl; mov qword ptr [rbp - 0x4d0], r10; mov rsi, r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000416226: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x7f], cl; xor byte ptr [rcx], al; add byte ptr [rax], al; mov qword ptr [rdi + 0xa8], 0; ret; 
0x00000000004133ed: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0xa], cl; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x0000000000410920: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0xa], cl; mov rdi, rbx; sub rdx, r14; call qword ptr [rax + 0x70]; 
0x00000000004137fb: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0xe], cl; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x00000000004418aa: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; call rbx; 
0x00000000004418b9: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 9], cl; call rbx; 
0x00000000004c6a19: add byte ptr [rax], al; add byte ptr [rcx + rdi*2 - 0x56d00000], bl; cli; jmp qword ptr [rbx + 2]; 
0x00000000004c29c1: add byte ptr [rax], al; add byte ptr [rcx + rdi], al; add al, bl; test al, 0xf6; jmp qword ptr [rsi]; 
0x00000000004c8239: add byte ptr [rax], al; add byte ptr [rcx + rdx*4 - 0x6e800000], bh; sti; call qword ptr [rax]; 
0x00000000004c8209: add byte ptr [rax], al; add byte ptr [rcx + rdx*4 - 0x6eb00000], cl; sti; call qword ptr [rdx]; 
0x000000000046cb3e: add byte ptr [rax], al; add byte ptr [rcx - 0x1076b322], cl; call qword ptr [rax + 0x18]; 
0x000000000049a14a: add byte ptr [rax], al; add byte ptr [rcx - 0x1976b317], cl; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x000000000046d3bf: add byte ptr [rax], al; add byte ptr [rcx - 0x2076b73a], cl; call qword ptr [rdx + 0x30]; 
0x0000000000460160: add byte ptr [rax], al; add byte ptr [rcx - 0x3f], cl; inc dword ptr [rdx]; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000044f8dc: add byte ptr [rax], al; add byte ptr [rcx - 0x43], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 3; syscall; 
0x00000000004263b1: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000045965c: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], al; std; xor byte ptr [rdi], cl; xchg eax, esp; ret; 
0x000000000042359d: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000042216d: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x000000000041db75: add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x0000000000496e2f: add byte ptr [rax], al; add byte ptr [rcx - 0xb37b], cl; inc dword ptr [rcx - 0x77]; ret; 
0x0000000000426bc0: add byte ptr [rax], al; add byte ptr [rcx - 9], cl; ret 1; 
0x0000000000426be6: add byte ptr [rax], al; add byte ptr [rcx - 9], cl; ret 2; 
0x0000000000496596: add byte ptr [rax], al; add byte ptr [rcx], bh; ret; 
0x00000000004432dd: add byte ptr [rax], al; add byte ptr [rcx], bh; sal byte ptr [rbp + 8], 1; nop; mov eax, 0xca; syscall; 
0x000000000045c3fa: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0xd089; 
0x00000000004c51c9: add byte ptr [rax], al; add byte ptr [rcx], cl; add byte ptr [rax + 5], ah; stc; call qword ptr [rsi + 0x2b]; 
0x000000000043f649: add byte ptr [rax], al; add byte ptr [rcx], dh; idiv byte ptr [rax + 2]; syscall; 
0x000000000040f3ea: add byte ptr [rax], al; add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000413e2d: add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rax - 0x7b], 0xd2; jne 0x13e40; ret; 
0x000000000041cca7: add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rax - 0x7f], cl; sti; add byte ptr [rax - 0x6af0ff94], bh; ret 0x8348; 
0x000000000044d6a9: add byte ptr [rax], al; add byte ptr [rcx], dh; sal byte ptr [rcx], cl; idiv byte ptr [rdi + 0x4a6d28]; mov eax, ecx; syscall; 
0x0000000000414f62: add byte ptr [rax], al; add byte ptr [rcx], dh; sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], 0xdf; call qword ptr [rax + 0x58]; 
0x00000000004736c3: add byte ptr [rax], al; add byte ptr [rcx], dh; shr bl, 0xbe; nop word ptr [rax + rax]; mov eax, 0x3f; syscall; 
0x000000000040ff94: add byte ptr [rax], al; add byte ptr [rcx], dh; test byte ptr [rax - 0x77], 0xdf; call qword ptr [rax + 0x10]; 
0x00000000004c3356: add byte ptr [rax], al; add byte ptr [rdi + 0xe], al; adc byte ptr [rdx + rax - 0x79e7f1bc], cl; add eax, dword ptr [rsi + rcx + 0x20]; add dword ptr [rsp + rbp*2], 0xa; ret; 
0x000000000049cc1f: add byte ptr [rax], al; add byte ptr [rdi + 1], bh; call rax; 
0x0000000000421d7e: add byte ptr [rax], al; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0x1a966]; ret; 
0x00000000004c4fc1: add byte ptr [rax], al; add byte ptr [rdi + rbx*2], al; add byte ptr [rax], bh; fdivr st(0); call qword ptr [rbx]; 
0x00000000004c4fd9: add byte ptr [rax], al; add byte ptr [rdi + rbx*2], bl; add byte ptr [rax - 0x28], al; clc; call qword ptr [rax]; 
0x00000000004c4ff1: add byte ptr [rax], al; add byte ptr [rdi + rbx*2], dh; add byte ptr [rax], bh; fdivr st(0); call qword ptr [rdx]; 
0x00000000004c0f91: add byte ptr [rax], al; add byte ptr [rdi + rbx], dl; add byte ptr [rax], al; fcom dword ptr [rax - 0xb]; jmp qword ptr [rbx]; 
0x00000000004c4029: add byte ptr [rax], al; add byte ptr [rdi + rcx*2 + 0x3bc00000], ch; clc; call qword ptr [rbx + 5]; 
0x00000000004c6809: add byte ptr [rax], al; add byte ptr [rdi + rsi*2 - 0x67500000], cl; cli; jmp qword ptr [rax + 1]; 
0x000000000044d72e: add byte ptr [rax], al; add byte ptr [rdi], cl; add eax, 0xc63d8b48; jmp qword ptr [rdi]; 
0x00000000004350c8: add byte ptr [rax], al; add byte ptr [rdi], cl; cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x000000000043ee35: add byte ptr [rax], al; add byte ptr [rdi], cl; lahf; ret 0xea81; 
0x000000000043612d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; ret; 
0x000000000043619d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x16; mov byte ptr [rdi], dl; ret; 
0x00000000004497bc: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x4a; dec dword ptr [rax - 0x7d]; ret 0x4801; 
0x000000000046b255: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x53; or al, 0xf6; ret 0xf04; 
0x000000000042340d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000041282d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 2; ret; 
0x000000000042f00d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000042d86d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp al, dh; ret; 
0x0000000000426b0d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x0000000000426afd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x0000000000426b1d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0x26b60; add rax, rdi; ret; 
0x0000000000426aed: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0xf80148c0; ret; 
0x0000000000441f23: add byte ptr [rax], al; add byte ptr [rdi], cl; test ah, cl; add eax, 0xf6310000; mov rdi, r15; call rbx; 
0x0000000000441d1c: add byte ptr [rax], al; add byte ptr [rdi], cl; test byte ptr [rbx], bh; add eax, 0xf6310000; mov rdi, r12; call rbx; 
0x0000000000441858: add byte ptr [rax], al; add byte ptr [rdi], cl; test byte ptr [rdi], dl; or eax, 0xf6310000; mov rdi, r15; call rbx; 
0x0000000000461797: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rax - 0x16000006], ebp; ret 0xffef; 
0x0000000000497c26: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rcx], edx; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x8308; 
0x0000000000400f1e: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rip - 0x6f000002], edx; leave; ret; 
0x0000000000444014: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, ebp; ret 0xc985; 
0x0000000000474757: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, esp; ret 0xc283; 
0x000000000046be1d: add byte ptr [rax], al; add byte ptr [rdx + 0x10], bh; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000043f675: add byte ptr [rax], al; add byte ptr [rdx + 0x1f], bh; mov rsi, rbp; mov rdi, r8; mov eax, r9d; syscall; 
0x000000000043b89d: add byte ptr [rax], al; add byte ptr [rdx + 0x48028801], cl; lea eax, dword ptr [rdx]; ret; 
0x000000000043a0ed: add byte ptr [rax], al; add byte ptr [rdx + 0x48028801], cl; mov eax, edi; ret; 
0x000000000044330a: add byte ptr [rax], al; add byte ptr [rdx + 1], bh; mov eax, 0xca; syscall; 
0x00000000004c32c9: add byte ptr [rax], al; add byte ptr [rdx + rax*2], cl; add al, dl; fdivr st(7), st(0); call qword ptr [rbx + 3]; 
0x0000000000444dd1: add byte ptr [rax], al; add byte ptr [rdx + rcx - 0x77], dh; adc eax, 0x2861bc; pop rbx; ret; 
0x00000000004c3ab9: add byte ptr [rax], al; add byte ptr [rdx + rcx*2], bh; add byte ptr [rax], al; and byte ptr [rax + rdi*8], bl; jmp qword ptr [rdx]; 
0x00000000004c7a91: add byte ptr [rax], al; add byte ptr [rdx + rcx*4], dl; add byte ptr [rax], al; cmp byte ptr [rdi - 5], dl; call rsi; 
0x00000000004c8281: add byte ptr [rax], al; add byte ptr [rdx + rdx*4], al; add byte ptr [rax], al; js 0xc821b; sti; call qword ptr [rdx]; 
0x00000000004c82b1: add byte ptr [rax], al; add byte ptr [rdx + rdx*4], dh; add byte ptr [rax], al; js 0xc824b; sti; call qword ptr [rdx]; 
0x00000000004c6311: add byte ptr [rax], al; add byte ptr [rdx + rsi*2 + 0x7ea80000], dl; cli; jmp rdx; 
0x00000000004c28de: add byte ptr [rax], al; add byte ptr [rdx - 0xa], dh; call qword ptr [rax]; 
0x000000000042716b: add byte ptr [rax], al; add byte ptr [rdx], al; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0x17647]; ret; 
0x0000000000401303: add byte ptr [rax], al; add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x0000000000446399: add byte ptr [rax], al; add byte ptr [rsi + 0x447090], bh; mov edi, 0x6cd6d8; call rax; 
0x000000000048c82c: add byte ptr [rax], al; add byte ptr [rsi + 0x48c740], bh; mov edi, 0x6cd9c4; call rdx; 
0x00000000004003ca: add byte ptr [rax], al; add byte ptr [rsi + 0x4a2a68], bh; mov rdi, rbx; mov eax, 1; syscall; 
0x0000000000400402: add byte ptr [rax], al; add byte ptr [rsi + 0x4a2a86], bh; mov rdi, rbx; mov eax, 1; syscall; 
0x00000000004a67bd: add byte ptr [rax], al; add byte ptr [rsi + 0x4a61], al; add byte ptr [rax], al; add byte ptr [rax], dl; ret 0x44; 
0x0000000000442eda: add byte ptr [rax], al; add byte ptr [rsi + 0x80000], bh; mov edi, 0x4a58c8; mov eax, ebx; syscall; 
0x00000000004796de: add byte ptr [rax], al; add byte ptr [rsi + 0x81], bh; add rdi, 0x1c; mov eax, 0xca; syscall; 
0x0000000000443305: add byte ptr [rax], al; add byte ptr [rsi + 0x81], bh; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000047312d: add byte ptr [rax], al; add byte ptr [rsi + 0x90800], bh; mov eax, ecx; sub rsp, 0x98; syscall; 
0x00000000004c09fe: add byte ptr [rax], al; add byte ptr [rsi + 0xe], cl; adc byte ptr [rdx + rax - 0x79e7f1bf], cl; add eax, dword ptr [rsi + rcx + 0x20]; add dword ptr [rdx + rax], -0xc; ret; 
0x000000000042f302: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000426a02: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x0000000000441883: add byte ptr [rax], al; add byte ptr [rsi + 1], bh; call rbx; 
0x0000000000441a70: add byte ptr [rax], al; add byte ptr [rsi + 1], bh; mov rdi, r12; call rbx; 
0x000000000044193c: add byte ptr [rax], al; add byte ptr [rsi + 1], bh; mov rdi, r13; call rbx; 
0x00000000004418b4: add byte ptr [rax], al; add byte ptr [rsi + 1], bh; mov rdi, r14; call rbx; 
0x0000000000441cee: add byte ptr [rax], al; add byte ptr [rsi + 2], bh; mov rdi, r12; call rbx; 
0x0000000000441a61: add byte ptr [rax], al; add byte ptr [rsi + 2], bh; mov rdi, r13; call rbx; 
0x000000000044192d: add byte ptr [rax], al; add byte ptr [rsi + 2], bh; mov rdi, r14; call rbx; 
0x00000000004418a5: add byte ptr [rax], al; add byte ptr [rsi + 2], bh; mov rdi, r15; call rbx; 
0x00000000004bf711: add byte ptr [rax], al; add byte ptr [rsi + rax + 0x5d880000], dl; hlt; call qword ptr [rax]; 
0x000000000049f305: add byte ptr [rax], al; add byte ptr [rsi + rax - 0xd], dh; ret; 
0x00000000004c76d1: add byte ptr [rax], al; add byte ptr [rsi + rax*4], dl; add al, ch; sti; jmp qword ptr [rbp + 1]; 
0x00000000004c1f01: add byte ptr [rax], al; add byte ptr [rsi + rbp - 0x32e80000], al; cmc; jmp rdx; 
0x00000000004c0f31: add byte ptr [rax], al; add byte ptr [rsi + rbx + 0x4fe80000], dh; cmc; call qword ptr [rcx]; 
0x00000000004ca09e: add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x10], bh; add dword ptr [rdx], 0x69; ret; 
0x00000000004c7dd6: add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x1370303; ret; 
0x00000000004c7d66: add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x34b0303; ret; 
0x00000000004c7d9e: add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x35b0303; ret; 
0x00000000004c6f01: add byte ptr [rax], al; add byte ptr [rsi + rdi*2 - 0x35780000], al; cli; call qword ptr [rcx]; 
0x00000000004c6e89: add byte ptr [rax], al; add byte ptr [rsi + rdi*2], cl; add byte ptr [rax], al; jo 0xc6e5b; cli; call qword ptr [rcx]; 
0x00000000004c0709: add byte ptr [rax], al; add byte ptr [rsi + rdx + 0x28d00000], cl; cmc; call qword ptr [rax]; 
0x00000000004c6719: add byte ptr [rax], al; add byte ptr [rsi + rsi*2 - 0x6cc00000], bl; cli; jmp qword ptr [rax]; 
0x00000000004737fb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; cmp dword ptr [rip + 0x263015], 0; jne 0x7381d; mov eax, 3; syscall; 
0x00000000004737db: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x15; syscall; 
0x00000000004409eb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x1c; syscall; 
0x00000000004736eb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x66; syscall; 
0x00000000004736eb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x66; syscall; ret; 
0x00000000004409cb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xa; syscall; 
0x000000000044324b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0x19; syscall; 
0x000000000045059b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10d, 8; movsxd rdi, edi; mov eax, 0xe; syscall; 
0x0000000000426b6b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; test dword ptr [rip + 0x2a6b16], 0x200; jne 0x26b84; lea rax, qword ptr [rip + 0x1d]; ret; 
0x000000000043a0fd: add byte ptr [rax], al; add byte ptr [rsi - 0x75], ah; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x0000000000410bf9: add byte ptr [rax], al; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x0000000000416604: add byte ptr [rax], al; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x30]; 
0x00000000004137a4: add byte ptr [rax], al; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004136fc: add byte ptr [rax], al; add byte ptr [rsi - 1], bh; mov rdi, rbx; mov rbp, r12; call qword ptr [rax + 0x18]; 
0x00000000004bf531: add byte ptr [rax], al; add byte ptr [rsp + rax + 0x32280000], dh; hlt; call qword ptr [rdx]; 
0x00000000004c7511: add byte ptr [rax], al; add byte ptr [rsp + rax*4 + 0x23580000], dl; sti; jmp qword ptr [rdi]; 
0x00000000004a66b5: add byte ptr [rax], al; add byte ptr [rsp + rax], al; add al, 4; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x4a60; 
0x00000000004c5b11: add byte ptr [rax], al; add byte ptr [rsp + rbx*2 + 0x63680000], dh; cli; jmp qword ptr [rsi + 1]; 
0x00000000004c4d21: add byte ptr [rax], al; add byte ptr [rsp + rbx*2 - 0x4a380000], ah; clc; jmp qword ptr [rsi]; 
0x00000000004c4cc1: add byte ptr [rax], al; add byte ptr [rsp + rbx*2], al; add byte ptr [rax], ch; mov ch, 0xf8; call qword ptr [rcx]; 
0x00000000004c4cd9: add byte ptr [rax], al; add byte ptr [rsp + rbx*2], bl; add byte ptr [rax], dh; mov ch, 0xf8; call qword ptr [rsi]; 
0x00000000004c8cf9: add byte ptr [rax], al; add byte ptr [rsp + rbx*4], bh; add byte ptr [rax], dh; cmp al, 0xfc; jmp qword ptr [rdx]; 
0x00000000004c8cb1: add byte ptr [rax], al; add byte ptr [rsp + rbx*4], dh; add byte ptr [rax], al; or byte ptr [rcx - 0xd], bh; jmp qword ptr [rsi]; 
0x00000000004bfd09: add byte ptr [rax], al; add byte ptr [rsp + rcx - 0x8b00000], cl; hlt; call qword ptr [rdx]; 
0x00000000004bfcf1: add byte ptr [rax], al; add byte ptr [rsp + rcx], dh; add byte ptr [rax - 9], bl; hlt; call qword ptr [rax]; 
0x00000000004c6d21: add byte ptr [rax], al; add byte ptr [rsp + rdi*2 - 0x38280000], ah; cli; call qword ptr [rbx]; 
0x00000000004c0511: add byte ptr [rax], al; add byte ptr [rsp + rdx + 0x1ff80000], dl; cmc; call qword ptr [rbx]; 
0x00000000004c44e1: add byte ptr [rax], al; add byte ptr [rsp + rdx*2], ah; add byte ptr [rax], cl; jne 0xc44e3; call qword ptr [rcx]; 
0x00000000004c94e1: add byte ptr [rax], al; add byte ptr [rsp], ah; add byte ptr [rax + 0xe], bh; std; jmp qword ptr [rax]; 
0x00000000004c80fe: add byte ptr [rax], al; add byte ptr fs:[rax], al; add byte ptr [rax + rdx*4 - 0x6bf80000], al; std; call rcx; 
0x00000000004c6806: add byte ptr [rax], al; add byte ptr fs:[rax], al; add byte ptr [rdi + rsi*2 - 0x67500000], cl; cli; jmp qword ptr [rax + 1]; 
0x00000000004bf52e: add byte ptr [rax], al; add byte ptr fs:[rax], al; add byte ptr [rsp + rax + 0x32280000], dh; hlt; call qword ptr [rdx]; 
0x00000000004c54c2: add byte ptr [rax], al; add byte ptr fs:[rax], al; cwde; jp 0xc54c4; call rdi; 
0x000000000043e6ed: add byte ptr [rax], al; add ch, al; cli; jg 0x3e6fb; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000045934d: add byte ptr [rax], al; add ch, bl; fmul dword ptr [rax - 0x39]; ret 0xfff0; 
0x00000000004c93b7: add byte ptr [rax], al; add cl, byte ptr [rcx + 0xe]; adc byte ptr [rdx + rax - 0x79e7f1bf], cl; add eax, dword ptr [rcx + 0xe]; and byte ptr [rbx + 0x1890304], al; ret; 
0x0000000000465fda: add byte ptr [rax], al; add cl, ch; int 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000004646d6: add byte ptr [rax], al; add cl, ch; out 0xff, al; jmp qword ptr [rsi - 0x70]; 
0x000000000047b012: add byte ptr [rax], al; add cl, ch; ret 0xfffd; 
0x000000000044a655: add byte ptr [rax], al; add cl, ch; ret; 
0x0000000000416e0e: add byte ptr [rax], al; add cl, ch; sar ebp, -1; jmp qword ptr [rsi + 0x2e]; 
0x000000000041acbf: add byte ptr [rax], al; add cl, ch; xlatb; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000046df41: add byte ptr [rax], al; add dh, al; and al, 0x14; add al, ch; ret 0xfe4d; 
0x0000000000447c23: add byte ptr [rax], al; add dh, dh; ret 0x4801; 
0x000000000043dbf1: add byte ptr [rax], al; add dh, dh; ret 0x7501; 
0x0000000000468570: add byte ptr [rax], al; add dh, dh; ret 0x7504; 
0x0000000000417f38: add byte ptr [rax], al; add dh, dh; ret; 
0x000000000047f4ed: add byte ptr [rax], al; add dh, dh; xchg dword ptr [rbx + rax], edx; add byte ptr [rax], al; or byte ptr [rsp + 0x5b], dh; ret; 
0x000000000049ba45: add byte ptr [rax], al; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000004c2977: add byte ptr [rax], al; add esp, dword ptr [rcx + rax - 0x72bafc72]; add al, 0x45; mov word ptr [rip + 0x3068345], es; mov byte ptr [rcx], al; ret; 
0x00000000004c71ca: add byte ptr [rax], al; add qword ptr [rax], -0x50c8000; jmp qword ptr [rbx + 5]; 
0x0000000000481357: add byte ptr [rax], al; add rax, -8; ret; 
0x000000000046f05e: add byte ptr [rax], al; add rax, 3; ret; 
0x000000000049ce41: add byte ptr [rax], al; add rax, qword ptr [r8 + 0xd0]; add rsp, 0x18; ret; 
0x00000000004268b4: add byte ptr [rax], al; add rax, rdi; add rax, rcx; ret; 
0x00000000004796e4: add byte ptr [rax], al; add rdi, 0x1c; mov eax, 0xca; syscall; 
0x0000000000473310: add byte ptr [rax], al; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000043f0ae: add byte ptr [rax], al; add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x000000000043f485: add byte ptr [rax], al; add rsp, 0x18; mov eax, 1; pop rbx; pop rbp; ret; 
0x000000000043f3f7: add byte ptr [rax], al; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000049ce48: add byte ptr [rax], al; add rsp, 0x18; ret; 
0x000000000046b4c6: add byte ptr [rax], al; add rsp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x00000000004736a4: add byte ptr [rax], al; add rsp, 0x90; xor eax, eax; pop rbx; ret; 
0x0000000000473060: add byte ptr [rax], al; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x000000000040191c: add byte ptr [rax], al; add rsp, 0x98; ret; 
0x000000000040fd9f: add byte ptr [rax], al; add rsp, 0xd0; mov eax, esi; pop rbx; ret; 
0x0000000000450516: add byte ptr [rax], al; add rsp, 0xd0; ret; 
0x000000000040fc35: add byte ptr [rax], al; add rsp, 0xd8; ret; 
0x000000000041f8c5: add byte ptr [rax], al; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000492c71: add byte ptr [rax], al; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000040f34d: add byte ptr [rax], al; add rsp, 8; mov rax, rsi; pop rbx; pop rbp; ret; 
0x0000000000446367: add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004135d5: add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; sub rax, rdx; ret; 
0x0000000000480be1: add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000424316: add byte ptr [rax], al; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000004c3abe: add byte ptr [rax], al; and byte ptr [rax + rdi*8], bl; jmp qword ptr [rdx]; 
0x00000000004c786e: add byte ptr [rax], al; and byte ptr [rax - 5], dl; jmp qword ptr [rdx]; 
0x00000000004c141e: add byte ptr [rax], al; and byte ptr [rdi - 0xb], bl; call qword ptr [rsi]; 
0x000000000042fd41: add byte ptr [rax], al; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000430613: add byte ptr [rax], al; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000042fd46: add byte ptr [rax], al; and ecx, 0xffff; sub eax, ecx; ret; 
0x00000000004273be: add byte ptr [rax], al; and edx, 0x1f; jne 0x272a6; mov rax, rdi; ret; 
0x0000000000401d0d: add byte ptr [rax], al; and rax, 0xffffffffffffffc0; add rax, 0x900; mov qword ptr [rip + 0x2c9370], rax; xor eax, eax; ret; 
0x0000000000426aee: add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x0000000000426afe: add byte ptr [rax], al; bsf eax, eax; lea rax, qword ptr [rax + rdi + 0x10]; ret; 
0x0000000000426b0e: add byte ptr [rax], al; bsf eax, eax; lea rax, qword ptr [rax + rdi + 0x20]; ret; 
0x000000000042d86e: add byte ptr [rax], al; bsf eax, eax; lea rax, qword ptr [rax + rdi - 0x10]; ret; 
0x0000000000426b1e: add byte ptr [rax], al; bsf eax, eax; sub rdx, rax; jbe 0x26b60; add rax, rdi; ret; 
0x00000000004243b0: add byte ptr [rax], al; bsf rax, rdx; ret; 
0x00000000004233ee: add byte ptr [rax], al; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000046e214: add byte ptr [rax], al; bsr rax, rax; add rax, rdi; ret; 
0x000000000046e2a2: add byte ptr [rax], al; bsr rsi, rsi; lea rax, qword ptr [rdi + rsi]; ret; 
0x0000000000418720: add byte ptr [rax], al; call 0x17dc0; test rax, rax; je 0x1872e; pop rbx; ret; 
0x0000000000400f5e: add byte ptr [rax], al; call 0x3fe80; nop; pop rbp; ret; 
0x000000000040190e: add byte ptr [rax], al; call 0x3ffd0; cmp eax, -1; je 0x1a03; add rsp, 0x98; ret; 
0x00000000004186c5: add byte ptr [rax], al; call 0x432d0; add rsp, 0x80; mov eax, 0x6cb800; ret; 
0x00000000004172b3: add byte ptr [rax], al; call 0x432d0; add rsp, 0x80; mov qword ptr [rip + 0x2b62e0], rdx; add dword ptr [rip + 0x2b62d5], 1; ret; 
0x000000000045d1a6: add byte ptr [rax], al; call 0x43300; add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x0000000000473583: add byte ptr [rax], al; call 0x43300; add rsp, 0x80; pop rbx; ret; 
0x00000000004527eb: add byte ptr [rax], al; call 0x43300; add rsp, 0x80; xor eax, eax; add rsp, 8; ret; 
0x000000000049ab0c: add byte ptr [rax], al; call 0x9a7e0; add rsp, 0x28; ret; 
0x0000000000400d17: add byte ptr [rax], al; call 0xfb10; nop; pop rbp; ret; 
0x0000000000413b43: add byte ptr [rax], al; call qword ptr [rax + 0x20]; 
0x0000000000413b43: add byte ptr [rax], al; call qword ptr [rax + 0x20]; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x0000000000452f5a: add byte ptr [rax], al; call qword ptr [rax + 0x38]; 
0x0000000000413180: add byte ptr [rax], al; call qword ptr [rax + 0x40]; 
0x0000000000413df2: add byte ptr [rax], al; call qword ptr [rax + 0x48]; 
0x000000000046d1f5: add byte ptr [rax], al; call qword ptr [rax + 0x68]; 
0x0000000000401e3a: add byte ptr [rax], al; call rax; 
0x0000000000441889: add byte ptr [rax], al; call rbx; 
0x00000000004b1f7e: add byte ptr [rax], al; call rdi; 
0x000000000040f19c: add byte ptr [rax], al; call rdx; 
0x00000000004b112e: add byte ptr [rax], al; call rsp; 
0x00000000004c8ffe: add byte ptr [rax], al; clc; iretd; cld; call qword ptr [rdi + 9]; 
0x00000000004c7636: add byte ptr [rax], al; clc; sub bl, bh; call rdx; 
0x00000000004c7e7a: add byte ptr [rax], al; cld; lea eax, dword ptr [rax]; add byte ptr [rax], dl; test bl, bh; jmp rsi; 
0x00000000004c5bbf: add byte ptr [rax], al; cli; call qword ptr [rsi]; 
0x00000000004c0d46: add byte ptr [rax], al; cmc; call qword ptr [rsi]; 
0x00000000004969b8: add byte ptr [rax], al; cmove edx, eax; call 0x76ff0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x00000000004c3aba: add byte ptr [rax], al; cmp al, 0x4a; add byte ptr [rax], al; and byte ptr [rax + rdi*8], bl; jmp qword ptr [rdx]; 
0x00000000004c5bba: add byte ptr [rax], al; cmp al, 0x6b; add byte ptr [rax], al; add byte ptr [rbp - 6], ah; call qword ptr [rsi]; 
0x00000000004c4fc6: add byte ptr [rax], al; cmp al, bl; clc; call qword ptr [rbx]; 
0x00000000004c4ff6: add byte ptr [rax], al; cmp al, bl; clc; call qword ptr [rdx]; 
0x00000000004bf386: add byte ptr [rax], al; cmp byte ptr [rcx], ch; hlt; jmp qword ptr [rbx]; 
0x00000000004c7a96: add byte ptr [rax], al; cmp byte ptr [rdi - 5], dl; call rsi; 
0x000000000047cbbe: add byte ptr [rax], al; cmp byte ptr [rip + 0x259c21], 0; jne 0x7cbd1; mov rax, qword ptr [rip + 0x259800]; ret; 
0x00000000004811e6: add byte ptr [rax], al; cmp byte ptr [rsp + 0x10], 0; jne 0x81228; xor eax, eax; add rsp, 0x68; ret; 
0x000000000049d7ee: add byte ptr [rax], al; cmp dil, 0x50; jne 0x9d7e3; xor eax, eax; add rsp, 8; ret; 
0x000000000049d84e: add byte ptr [rax], al; cmp dil, 0x50; jne 0x9d843; xor eax, eax; add rsp, 8; ret; 
0x000000000043e6fe: add byte ptr [rax], al; cmp dl, 8; jb 0x3e710; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x00000000004c29c2: add byte ptr [rax], al; cmp dword ptr [rax], r8d; add al, bl; test al, 0xf6; jmp qword ptr [rsi]; 
0x000000000043fede: add byte ptr [rax], al; cmp dword ptr [rip + 0x296935], 0; jne 0x3fefd; mov eax, 1; syscall; 
0x000000000043fe7e: add byte ptr [rax], al; cmp dword ptr [rip + 0x296995], 0; jne 0x3fe9d; mov eax, 0; syscall; 
0x0000000000411657: add byte ptr [rax], al; cmp eax, -1; jne 0x11660; pop rbx; ret; 
0x00000000004434be: add byte ptr [rax], al; cmp eax, -1; jne 0x434b8; xor eax, eax; leave; ret; 
0x000000000046c798: add byte ptr [rax], al; cmp eax, 1; je 0x6c8b0; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000046c958: add byte ptr [rax], al; cmp eax, 1; je 0x6ca90; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000043e0a8: add byte ptr [rax], al; cmp eax, ecx; jne 0x3e165; xor eax, eax; ret; 
0x00000000004432de: add byte ptr [rax], al; cmp eax, edx; jne 0x432ec; nop; mov eax, 0xca; syscall; 
0x000000000049ce9e: add byte ptr [rax], al; cmp edx, 8; jne 0x9ce93; mov rax, qword ptr [rax]; add rsp, 8; ret; 
0x00000000004422f6: add byte ptr [rax], al; cmp qword ptr [r13 + 0x10], 0; jne 0x4181d; mov esi, 3; mov rdi, r13; call rbx; 
0x00000000004422d6: add byte ptr [rax], al; cmp qword ptr [r13 + 0x10], 0; jne 0x41d4a; mov esi, 3; mov rdi, r13; call rbx; 
0x0000000000442336: add byte ptr [rax], al; cmp qword ptr [r14 + 0x10], 0; jne 0x41841; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442396: add byte ptr [rax], al; cmp qword ptr [r14 + 0x10], 0; jne 0x41966; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442376: add byte ptr [rax], al; cmp qword ptr [r14 + 0x10], 0; jne 0x41abf; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442416: add byte ptr [rax], al; cmp qword ptr [r14 + 0x10], 0; jne 0x41d6e; mov esi, 3; mov rdi, r14; call rbx; 
0x00000000004423d6: add byte ptr [rax], al; cmp qword ptr [r14 + 0x10], 0; jne 0x41fec; mov esi, 3; mov rdi, r14; call rbx; 
0x00000000004423b6: add byte ptr [rax], al; cmp qword ptr [r14 + 0x10], 0; jne 0x42111; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442576: add byte ptr [rax], al; cmp qword ptr [r15 + 0x10], 0; jne 0x41861; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004425d6: add byte ptr [rax], al; cmp qword ptr [r15 + 0x10], 0; jne 0x418da; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442616: add byte ptr [rax], al; cmp qword ptr [r15 + 0x10], 0; jne 0x41986; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004425f6: add byte ptr [rax], al; cmp qword ptr [r15 + 0x10], 0; jne 0x419ff; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442536: add byte ptr [rax], al; cmp qword ptr [r15 + 0x10], 0; jne 0x41c7d; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442456: add byte ptr [rax], al; cmp qword ptr [r15 + 0x10], 0; jne 0x41d8e; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442436: add byte ptr [rax], al; cmp qword ptr [r15 + 0x10], 0; jne 0x41e07; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004424f6: add byte ptr [rax], al; cmp qword ptr [r15 + 0x10], 0; jne 0x41f2c; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004424d6: add byte ptr [rax], al; cmp qword ptr [r15 + 0x10], 0; jne 0x4200c; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004424b6: add byte ptr [rax], al; cmp qword ptr [r15 + 0x10], 0; jne 0x42085; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442476: add byte ptr [rax], al; cmp qword ptr [r15 + 0x10], 0; jne 0x421aa; mov esi, 3; mov rdi, r15; call rbx; 
0x000000000046d1b5: add byte ptr [rax], al; cmp qword ptr [rax + 0x30], 0; je 0x6d1c0; ret; 
0x0000000000421d5c: add byte ptr [rax], al; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x000000000049ad95: add byte ptr [rax], al; cmp sil, 0x2f; ja 0x9b5ee; movsxd rcx, dword ptr [r14 + rsi*4]; add rcx, r14; jmp rcx; 
0x00000000004c3f46: add byte ptr [rax], al; cwde; cmp al, bh; call qword ptr [rax]; 
0x00000000004c54c6: add byte ptr [rax], al; cwde; jp 0xc54c4; call rdi; 
0x00000000004c9a26: add byte ptr [rax], al; cwde; xor al, 0xfd; jmp qword ptr [rcx]; 
0x00000000004c745a: add byte ptr [rax], al; fadd qword ptr [rbx + 0xd200000]; sti; jmp qword ptr [rbp + 0xb]; 
0x00000000004c6d26: add byte ptr [rax], al; fadd st(7); cli; call qword ptr [rbx]; 
0x00000000004c0f96: add byte ptr [rax], al; fcom dword ptr [rax - 0xb]; jmp qword ptr [rbx]; 
0x00000000004c7966: add byte ptr [rax], al; fcom dword ptr [rdx - 5]; jmp qword ptr [rdx]; 
0x00000000004c4fde: add byte ptr [rax], al; fdivr st(0); call qword ptr [rax]; 
0x00000000004c3c5a: add byte ptr [rax], al; fmul qword ptr [rbx]; add byte ptr [rax + 0x1b], al; clc; call qword ptr [rsi + 0xb]; 
0x00000000004c9b5a: add byte ptr [rax], al; fsubr qword ptr [rdx + 0x35a00000]; std; call qword ptr [rcx + 1]; 
0x00000000004c9972: add byte ptr [rax], al; hlt; test al, 0; add byte ptr [rax + 0x32], cl; std; call rsp; 
0x00000000004c0d62: add byte ptr [rax], al; in al, 0x1c; add byte ptr [rax], al; mov byte ptr [rcx - 0xb], cl; jmp qword ptr [rcx]; 
0x00000000004c4962: add byte ptr [rax], al; in al, 0x58; add byte ptr [rax], al; js 0xc4901; clc; jmp rbx; 
0x00000000004c7962: add byte ptr [rax], al; in al, 0x88; add byte ptr [rax], al; fcom dword ptr [rdx - 5]; jmp qword ptr [rdx]; 
0x00000000004c056a: add byte ptr [rax], al; in al, dx; adc al, 0; add byte ptr [rax + 0x20], dh; cmc; jmp qword ptr [rsi]; 
0x00000000004c616a: add byte ptr [rax], al; in al, dx; jo 0xc616f; add byte ptr [rax + 0x78], dh; cli; call qword ptr [rcx]; 
0x00000000004c28df: add byte ptr [rax], al; jb 0xc28d9; call qword ptr [rax]; 
0x000000000041024c: add byte ptr [rax], al; je 0x10258; mov eax, edx; pop rbx; ret; 
0x000000000040107c: add byte ptr [rax], al; je 0x1085; call 0x437c0; leave; ret; 
0x0000000000421aa7: add byte ptr [rax], al; je 0x21ab0; ret; 
0x0000000000421d7f: add byte ptr [rax], al; je 0x21d8a; lea rax, qword ptr [rip + 0x1a966]; ret; 
0x00000000004241f2: add byte ptr [rax], al; je 0x241fd; lea rax, qword ptr [rip + 0x14853]; ret; 
0x0000000000427722: add byte ptr [rax], al; je 0x2772d; lea rax, qword ptr [rip + 0x12ad3]; ret; 
0x0000000000441d1d: add byte ptr [rax], al; je 0x42260; xor esi, esi; mov rdi, r12; call rbx; 
0x00000000004417f0: add byte ptr [rax], al; je 0x42280; xor esi, esi; mov rdi, r12; call rbx; 
0x0000000000441a93: add byte ptr [rax], al; je 0x422b8; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441d42: add byte ptr [rax], al; je 0x422d8; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441815: add byte ptr [rax], al; je 0x422f8; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441fc0: add byte ptr [rax], al; je 0x42318; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441839: add byte ptr [rax], al; je 0x42338; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441bdc: add byte ptr [rax], al; je 0x42358; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441ab7: add byte ptr [rax], al; je 0x42378; xor esi, esi; mov rdi, r14; call rbx; 
0x000000000044195e: add byte ptr [rax], al; je 0x42398; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442109: add byte ptr [rax], al; je 0x423b8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441fe4: add byte ptr [rax], al; je 0x423d8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441e8b: add byte ptr [rax], al; je 0x423f8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441d66: add byte ptr [rax], al; je 0x42418; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441dff: add byte ptr [rax], al; je 0x42438; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441d86: add byte ptr [rax], al; je 0x42458; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004421a2: add byte ptr [rax], al; je 0x42478; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442129: add byte ptr [rax], al; je 0x42498; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044207d: add byte ptr [rax], al; je 0x424b8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442004: add byte ptr [rax], al; je 0x424d8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441f24: add byte ptr [rax], al; je 0x424f8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441eab: add byte ptr [rax], al; je 0x42518; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441c75: add byte ptr [rax], al; je 0x42538; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441bfc: add byte ptr [rax], al; je 0x42558; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441859: add byte ptr [rax], al; je 0x42578; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441b50: add byte ptr [rax], al; je 0x42598; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441ad7: add byte ptr [rax], al; je 0x425b8; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004418d2: add byte ptr [rax], al; je 0x425d8; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004419f7: add byte ptr [rax], al; je 0x425f8; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044197e: add byte ptr [rax], al; je 0x42618; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000444dd2: add byte ptr [rax], al; je 0x44de0; mov dword ptr [rip + 0x2861bc], edx; pop rbx; ret; 
0x000000000046bf41: add byte ptr [rax], al; je 0x6bf50; pop rbx; pop rbp; pop r12; ret; 
0x000000000048bf6f: add byte ptr [rax], al; je 0x8bf79; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000048c248: add byte ptr [rax], al; je 0x8c250; mov eax, edx; pop rbx; ret; 
0x000000000048c565: add byte ptr [rax], al; je 0x8c680; mov esi, 0x48c500; mov edi, 0x6cd9c0; call rax; 
0x000000000049cdde: add byte ptr [rax], al; je 0x9cd92; add rsp, 0x18; ret; 
0x00000000004bfcf2: add byte ptr [rax], al; je 0xbfd02; add byte ptr [rax], al; pop rax; div esp; call qword ptr [rax]; 
0x00000000004c0bf2: add byte ptr [rax], al; je 0xc0c11; add byte ptr [rax], al; pop rax; cmc; call qword ptr [rcx + 2]; 
0x00000000004c4ff2: add byte ptr [rax], al; je 0xc5055; add byte ptr [rax], al; cmp al, bl; clc; call qword ptr [rdx]; 
0x00000000004c68f2: add byte ptr [rax], al; je 0xc696e; add byte ptr [rax], al; js 0xc6896; cli; jmp rdi; 
0x00000000004c39fa: add byte ptr [rax], al; jl 0xc3a47; add byte ptr [rax], al; mov al, 0x15; clc; call qword ptr [rax]; 
0x00000000004c8cfa: add byte ptr [rax], al; jl 0xc8c9a; add byte ptr [rax], al; xor byte ptr [rsp + rdi*8], bh; jmp qword ptr [rdx]; 
0x0000000000440a74: add byte ptr [rax], al; jmp rax; 
0x0000000000410bea: add byte ptr [rax], al; jne 0x108e0; mov rdi, rbp; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000412842: add byte ptr [rax], al; jne 0x127c0; mov rdi, rbp; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000416d5e: add byte ptr [rax], al; jne 0x16d1e; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000421fd2: add byte ptr [rax], al; jne 0x21fdd; lea rax, qword ptr [rip + 3]; ret; 
0x0000000000426b78: add byte ptr [rax], al; jne 0x26b84; lea rax, qword ptr [rip + 0x1d]; ret; 
0x000000000042783e: add byte ptr [rax], al; jne 0x27849; lea rax, qword ptr [rip + 0x67]; ret; 
0x0000000000427891: add byte ptr [rax], al; jne 0x2789c; lea rax, qword ptr [rip + 4]; ret; 
0x000000000043eed1: add byte ptr [rax], al; jne 0x3ee72; lea eax, dword ptr [rcx*4]; pop rbx; and eax, 0x3fc00; ret; 
0x000000000043f709: add byte ptr [rax], al; jne 0x3f6d8; lea rsi, qword ptr [rsp + 0x10]; mov edi, 1; mov eax, 0xe5; syscall; 
0x000000000043fe25: add byte ptr [rax], al; jne 0x3fe3d; mov eax, 2; syscall; 
0x000000000043fe85: add byte ptr [rax], al; jne 0x3fe9d; mov eax, 0; syscall; 
0x000000000043fee5: add byte ptr [rax], al; jne 0x3fefd; mov eax, 1; syscall; 
0x000000000044333d: add byte ptr [rax], al; jne 0x43328; and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x4334c; ret; 
0x0000000000473805: add byte ptr [rax], al; jne 0x7381d; mov eax, 3; syscall; 
0x0000000000473995: add byte ptr [rax], al; jne 0x739ad; mov eax, 0x14; syscall; 
0x000000000047cbc5: add byte ptr [rax], al; jne 0x7cbd1; mov rax, qword ptr [rip + 0x259800]; ret; 
0x000000000048c988: add byte ptr [rax], al; jne 0x8ca20; mov rdx, qword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x000000000048cbee: add byte ptr [rax], al; jne 0x8cbf9; lea rax, qword ptr [rip + 0x67]; ret; 
0x000000000048cc41: add byte ptr [rax], al; jne 0x8cc4c; lea rax, qword ptr [rip + 4]; ret; 
0x000000000049cd8d: add byte ptr [rax], al; jne 0x9cdd8; cmp qword ptr [r9 + 0x38], 0; je 0x9ce03; add rsp, 0x18; ret; 
0x0000000000400f1f: add byte ptr [rax], al; jne 0xd3c; nop; leave; ret; 
0x00000000004c6be2: add byte ptr [rax], al; jnp 0xc6be7; add al, cl; ret; 
0x00000000004c056e: add byte ptr [rax], al; jo 0xc0592; cmc; jmp qword ptr [rsi]; 
0x00000000004c616e: add byte ptr [rax], al; jo 0xc61ea; cli; call qword ptr [rcx]; 
0x00000000004c6e8e: add byte ptr [rax], al; jo 0xc6e5b; cli; call qword ptr [rcx]; 
0x00000000004c4966: add byte ptr [rax], al; js 0xc4901; clc; jmp rbx; 
0x00000000004c68f6: add byte ptr [rax], al; js 0xc6896; cli; jmp rdi; 
0x00000000004c8256: add byte ptr [rax], al; js 0xc81eb; sti; call qword ptr [rdx]; 
0x00000000004c8286: add byte ptr [rax], al; js 0xc821b; sti; call qword ptr [rdx]; 
0x00000000004c82b6: add byte ptr [rax], al; js 0xc824b; sti; call qword ptr [rdx]; 
0x00000000004c8e26: add byte ptr [rax], al; js 0xc8e8e; cld; call qword ptr [rax]; 
0x00000000004c94e6: add byte ptr [rax], al; js 0xc94f8; std; jmp qword ptr [rax]; 
0x00000000004336b9: add byte ptr [rax], al; lea r11, qword ptr [rip + 0x70d4e]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000046d87d: add byte ptr [rax], al; lea r9, qword ptr [rsp + 0x18]; mov rdi, r12; call rbx; 
0x00000000004798ba: add byte ptr [rax], al; lea rax, qword ptr [rax + rdx*4]; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x000000000043c9be: add byte ptr [rax], al; lea rax, qword ptr [rdi + 0xa]; ret; 
0x000000000043c9ce: add byte ptr [rax], al; lea rax, qword ptr [rdi + 0xb]; ret; 
0x000000000043c9de: add byte ptr [rax], al; lea rax, qword ptr [rdi + 0xc]; ret; 
0x000000000043c9ee: add byte ptr [rax], al; lea rax, qword ptr [rdi + 0xd]; ret; 
0x000000000043c9fe: add byte ptr [rax], al; lea rax, qword ptr [rdi + 0xe]; ret; 
0x000000000043c91d: add byte ptr [rax], al; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000043c93e: add byte ptr [rax], al; lea rax, qword ptr [rdi + 1]; ret; 
0x000000000043c94e: add byte ptr [rax], al; lea rax, qword ptr [rdi + 2]; ret; 
0x000000000043c95e: add byte ptr [rax], al; lea rax, qword ptr [rdi + 3]; ret; 
0x000000000043c96e: add byte ptr [rax], al; lea rax, qword ptr [rdi + 4]; ret; 
0x000000000043c97e: add byte ptr [rax], al; lea rax, qword ptr [rdi + 5]; ret; 
0x000000000043c98e: add byte ptr [rax], al; lea rax, qword ptr [rdi + 6]; ret; 
0x000000000043c8ca: add byte ptr [rax], al; lea rax, qword ptr [rdi + 7]; ret; 
0x000000000043c99e: add byte ptr [rax], al; lea rax, qword ptr [rdi + 8]; ret; 
0x000000000043c9ae: add byte ptr [rax], al; lea rax, qword ptr [rdi + 9]; ret; 
0x0000000000421dd9: add byte ptr [rax], al; lea rax, qword ptr [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000043c92e: add byte ptr [rax], al; lea rax, qword ptr [rdi]; ret; 
0x000000000046c86e: add byte ptr [rax], al; lea rcx, qword ptr [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; pop rbx; ret; 
0x0000000000423534: add byte ptr [rax], al; lea rcx, qword ptr [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000401bb5: add byte ptr [rax], al; lea rsi, qword ptr [rcx + r15]; mov qword ptr [rsi + 8], 0x6d63f0; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000041b5f6: add byte ptr [rax], al; lea rsi, qword ptr [rsp + 0x30]; mov rdi, r9; mov eax, r8d; syscall; 
0x00000000004c062a: add byte ptr [rax], al; lodsb al, byte ptr [rsi]; adc eax, 0x23100000; cmc; call qword ptr [rsi + 4]; 
0x00000000004c402a: add byte ptr [rax], al; lodsb al, byte ptr [rsi]; add byte ptr [r8], r8b; sar byte ptr [rbx], 0xf8; call qword ptr [rbx + 5]; 
0x00000000004c9ce2: add byte ptr [rax], al; lodsb al, byte ptr fs:[rsi]; add byte ptr [rax], al; test al, 0x39; std; jmp qword ptr [rdx]; 
0x00000000004c4e32: add byte ptr [rax], al; mov ah, 0x5d; add byte ptr [rax], al; test al, 0xb7; clc; call qword ptr [rcx + 0x1c]; 
0x00000000004c7632: add byte ptr [rax], al; mov ah, 0x85; add byte ptr [rax], al; clc; sub bl, bh; call rdx; 
0x00000000004c7932: add byte ptr [rax], al; mov ah, 0x88; add byte ptr [rax], al; mov byte ptr [rdx - 5], dl; call qword ptr [rsi]; 
0x00000000004bf532: add byte ptr [rax], al; mov ah, 4; add byte ptr [rax], al; sub byte ptr [rdx], dh; hlt; call qword ptr [rdx]; 
0x00000000004c39fe: add byte ptr [rax], al; mov al, 0x15; clc; call qword ptr [rax]; 
0x00000000004c9c4e: add byte ptr [rax], al; mov al, 0x38; std; call qword ptr [rdi]; 
0x00000000004c589e: add byte ptr [rax], al; mov al, 0x5b; cli; jmp rax; 
0x00000000004c7c2e: add byte ptr [rax], al; mov al, 0x5e; sti; jmp qword ptr [rdx]; 
0x00000000004c680e: add byte ptr [rax], al; mov al, 0x98; cli; jmp qword ptr [rax + 1]; 
0x00000000004c8eee: add byte ptr [rax], al; mov al, 0x9d; cld; call qword ptr [rax]; 
0x00000000004c93ae: add byte ptr [rax], al; mov al, 8; std; call qword ptr [rbx + 2]; 
0x000000000043b89e: add byte ptr [rax], al; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, qword ptr [rdx]; ret; 
0x000000000043a0ee: add byte ptr [rax], al; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x000000000043b8ae: add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; lea rax, qword ptr [rdx + 1]; ret; 
0x000000000043a0fe: add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x00000000004c2376: add byte ptr [rax], al; mov bh, ch; cmc; call qword ptr [rdx]; 
0x00000000004738fb: add byte ptr [rax], al; mov byte ptr [rax + 0xc], 0; add rsp, 0x30; mov eax, ebx; pop rbx; ret; 
0x00000000004bf716: add byte ptr [rax], al; mov byte ptr [rbp - 0xc], bl; call qword ptr [rax]; 
0x00000000004c2826: add byte ptr [rax], al; mov byte ptr [rcx - 0xa], cl; jmp rbx; 
0x00000000004c0d66: add byte ptr [rax], al; mov byte ptr [rcx - 0xb], cl; jmp qword ptr [rcx]; 
0x000000000043c38e: add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, qword ptr [rdi]; ret; 
0x000000000043bd6e: add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x00000000004c7936: add byte ptr [rax], al; mov byte ptr [rdx - 5], dl; call qword ptr [rsi]; 
0x00000000004c3a46: add byte ptr [rax], al; mov byte ptr [rdx], bl; clc; call qword ptr [rax]; 
0x00000000004c2146: add byte ptr [rax], al; mov ch, bl; cmc; jmp qword ptr [rdx]; 
0x000000000046f03e: add byte ptr [rax], al; mov ch, dh; and ch, 0xf; je 0x6f060; add rax, 2; ret; 
0x000000000043c3ae: add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, qword ptr [rdi + 2]; ret; 
0x000000000043bd8e: add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x00000000004c6f06: add byte ptr [rax], al; mov dl, cl; cli; call qword ptr [rcx]; 
0x0000000000473059: add byte ptr [rax], al; mov dword ptr [rax + 0x28], 0; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x00000000004620e8: add byte ptr [rax], al; mov dword ptr [rbp - 0x1070], 0; mov rax, qword ptr [rax*8 + 0x4b44a0]; jmp rax; 
0x0000000000462195: add byte ptr [rax], al; mov dword ptr [rbp - 0x1070], 1; mov rax, qword ptr [rax*8 + 0x4b44a0]; jmp rax; 
0x000000000046130b: add byte ptr [rax], al; mov dword ptr [rbp - 0x1078], r9d; mov rdi, r14; mov rdx, qword ptr [rbp - 0x10b8]; mov rsi, qword ptr [rbp - 0x1090]; call qword ptr [rax + 0x38]; 
0x0000000000462614: add byte ptr [rax], al; mov dword ptr [rbp - 0x1088], 0; mov rax, qword ptr [rax*8 + 0x4b44a0]; jmp rax; 
0x0000000000460438: add byte ptr [rax], al; mov dword ptr [rbp - 0x1098], 0; mov dword ptr [rbp - 0x10a0], 0; mov dword ptr [rbp - 0x10b0], 0; jmp rax; 
0x0000000000462468: add byte ptr [rax], al; mov dword ptr [rbp - 0x1098], 1; mov rax, qword ptr [rax*8 + 0x4b48a0]; jmp rax; 
0x0000000000460442: add byte ptr [rax], al; mov dword ptr [rbp - 0x10a0], 0; mov dword ptr [rbp - 0x10b0], 0; jmp rax; 
0x000000000046042e: add byte ptr [rax], al; mov dword ptr [rbp - 0x10a8], 0; mov dword ptr [rbp - 0x1098], 0; mov dword ptr [rbp - 0x10a0], 0; mov dword ptr [rbp - 0x10b0], 0; jmp rax; 
0x000000000046044c: add byte ptr [rax], al; mov dword ptr [rbp - 0x10b0], 0; jmp rax; 
0x0000000000455b9b: add byte ptr [rax], al; mov dword ptr [rbp - 0x4c8], 0; mov qword ptr [rbp - 0x4e8], rsi; jmp rax; 
0x0000000000455e70: add byte ptr [rax], al; mov dword ptr [rbp - 0x4d8], r9d; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000455b87: add byte ptr [rax], al; mov dword ptr [rbp - 0x4f8], 0; mov dword ptr [rbp - 0x500], 0; mov dword ptr [rbp - 0x4c8], 0; mov qword ptr [rbp - 0x4e8], rsi; jmp rax; 
0x0000000000455b91: add byte ptr [rax], al; mov dword ptr [rbp - 0x500], 0; mov dword ptr [rbp - 0x4c8], 0; mov qword ptr [rbp - 0x4e8], rsi; jmp rax; 
0x0000000000413cb0: add byte ptr [rax], al; mov dword ptr [rbx + 0x70], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000046d28b: add byte ptr [rax], al; mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x000000000044f826: add byte ptr [rax], al; mov dword ptr [rdi + 8], 1; mov qword ptr [rdi + 0x10], 0; mov rdi, qword ptr [rdi]; syscall; 
0x000000000048bf1e: add byte ptr [rax], al; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000041e6a6: add byte ptr [rax], al; mov dword ptr [rip + 0x2aef56], 0; ret; 
0x00000000004360be: add byte ptr [rax], al; mov dx, word ptr [rsi + 1]; mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x000000000043c39e: add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, qword ptr [rdi + 1]; ret; 
0x000000000043bd7e: add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000040296f: add byte ptr [rax], al; mov eax, 0; test rax, rax; je 0x2984; lea rdi, qword ptr [rbx + 0x80]; call rax; 
0x00000000004036e9: add byte ptr [rax], al; mov eax, 0; test rax, rax; je 0x3706; mov edi, 0x6ccfe0; call rax; 
0x0000000000403e40: add byte ptr [rax], al; mov eax, 0; test rax, rax; je 0x3e53; mov edi, 0x6cd0a0; call rax; 
0x000000000047d91e: add byte ptr [rax], al; mov eax, 0; test rax, rax; je 0x7d931; mov edi, 0x6cc140; call rax; 
0x000000000047d9bc: add byte ptr [rax], al; mov eax, 0; test rax, rax; je 0x7d9cf; mov edi, 0x6cc140; call rax; 
0x000000000047eee1: add byte ptr [rax], al; mov eax, 0; test rax, rax; je 0x7eef6; mov rdi, qword ptr [rbp - 0x88]; call rax; 
0x000000000047f489: add byte ptr [rax], al; mov eax, 0; test rax, rax; je 0x7f500; mov edi, 0x6cc140; call rax; 
0x000000000049884a: add byte ptr [rax], al; mov eax, 0; test rax, rax; je 0x9885d; mov edi, 0x6cc140; call rax; 
0x000000000047388a: add byte ptr [rax], al; mov eax, 0x10; sub rsp, 0x30; mov rdx, rsp; syscall; 
0x0000000000421c3e: add byte ptr [rax], al; mov eax, 0x16; ret; 
0x000000000043fd2e: add byte ptr [rax], al; mov eax, 0x18; syscall; 
0x000000000043fd2e: add byte ptr [rax], al; mov eax, 0x18; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x00000000004736ce: add byte ptr [rax], al; mov eax, 0x3f; syscall; 
0x00000000004736ce: add byte ptr [rax], al; mov eax, 0x3f; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x000000000044326e: add byte ptr [rax], al; mov eax, 0x63; syscall; 
0x000000000044326e: add byte ptr [rax], al; mov eax, 0x63; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x000000000047370e: add byte ptr [rax], al; mov eax, 0x68; syscall; 
0x000000000047370e: add byte ptr [rax], al; mov eax, 0x68; syscall; ret; 
0x00000000004736fe: add byte ptr [rax], al; mov eax, 0x6b; syscall; 
0x00000000004736fe: add byte ptr [rax], al; mov eax, 0x6b; syscall; ret; 
0x000000000047371e: add byte ptr [rax], al; mov eax, 0x6c; syscall; 
0x000000000047371e: add byte ptr [rax], al; mov eax, 0x6c; syscall; ret; 
0x00000000004186d1: add byte ptr [rax], al; mov eax, 0x6cb800; ret; 
0x0000000000475acd: add byte ptr [rax], al; mov eax, 0x9e; syscall; 
0x00000000004409ae: add byte ptr [rax], al; mov eax, 0xb; syscall; 
0x00000000004409ae: add byte ptr [rax], al; mov eax, 0xb; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x0000000000443310: add byte ptr [rax], al; mov eax, 0xca; syscall; 
0x0000000000443310: add byte ptr [rax], al; mov eax, 0xca; syscall; pop rdx; pop rsi; ret; 
0x00000000004433b7: add byte ptr [rax], al; mov eax, 0xca; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000043f715: add byte ptr [rax], al; mov eax, 0xe5; syscall; 
0x00000000004525fc: add byte ptr [rax], al; mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; ret; 
0x000000000046c7a1: add byte ptr [rax], al; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000410c61: add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000043f3f2: add byte ptr [rax], al; mov eax, 1; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000046b6f3: add byte ptr [rax], al; mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000047d536: add byte ptr [rax], al; mov eax, 1; ret; 
0x000000000049d78e: add byte ptr [rax], al; mov eax, 2; add rsp, 8; ret; 
0x0000000000412dc2: add byte ptr [rax], al; mov eax, 3; movsxd rdi, dword ptr [rbx + 0x70]; syscall; 
0x000000000044f8e3: add byte ptr [rax], al; mov eax, 3; syscall; 
0x000000000049d77e: add byte ptr [rax], al; mov eax, 4; add rsp, 8; ret; 
0x000000000049b89e: add byte ptr [rax], al; mov eax, 5; ret; 
0x000000000044322e: add byte ptr [rax], al; mov eax, 8; syscall; 
0x000000000044322e: add byte ptr [rax], al; mov eax, 8; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x000000000043b8de: add byte ptr [rax], al; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; lea rax, qword ptr [rdx + 3]; ret; 
0x0000000000416f1e: add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x00000000004115ee: add byte ptr [rax], al; mov eax, dword ptr [rdx]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000049a79e: add byte ptr [rax], al; mov eax, dword ptr [rip + 0x23c11a]; ret; 
0x0000000000410061: add byte ptr [rax], al; mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000047c14c: add byte ptr [rax], al; mov eax, ebx; mov byte ptr [rdx], 0; add rsp, 0x140; pop rbx; ret; 
0x0000000000410658: add byte ptr [rax], al; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x000000000047c176: add byte ptr [rax], al; mov eax, ebx; pop rbx; ret; 
0x0000000000473933: add byte ptr [rax], al; mov eax, ecx; syscall; 
0x0000000000410295: add byte ptr [rax], al; mov eax, edx; pop rbx; ret; 
0x0000000000445613: add byte ptr [rax], al; mov eax, edx; ret; 
0x000000000040fda6: add byte ptr [rax], al; mov eax, esi; pop rbx; ret; 
0x00000000004af122: add byte ptr [rax], al; mov ebp, 0xc000000f; sldt word ptr [rax]; ret; 
0x00000000004aee72: add byte ptr [rax], al; mov ecx, 0xbc00000d; or eax, 0xdbf0000; add byte ptr [rax], al; ret 0xd; 
0x000000000047392e: add byte ptr [rax], al; mov ecx, 0xc; mov eax, ecx; syscall; 
0x000000000043c3ce: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, qword ptr [rdi + 4]; ret; 
0x000000000043bdae: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x000000000043bdbe: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x000000000049a14b: add byte ptr [rax], al; mov ecx, ebp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x0000000000415f25: add byte ptr [rax], al; mov ecx, edx; xor edx, edx; mov rax, qword ptr [rax + 0x48]; jmp rax; 
0x00000000004120b3: add byte ptr [rax], al; mov edi, 0x4a2ac7; mov eax, 2; syscall; 
0x00000000004033f6: add byte ptr [rax], al; mov edi, 0x6cd720; call rbx; 
0x000000000049cc20: add byte ptr [rax], al; mov edi, 1; call rax; 
0x000000000046be1e: add byte ptr [rax], al; mov edx, 0x10; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000043f676: add byte ptr [rax], al; mov edx, 0x1f; mov rsi, rbp; mov rdi, r8; mov eax, r9d; syscall; 
0x0000000000440247: add byte ptr [rax], al; mov edx, 0x80000; mov esi, 0x4a5790; mov rdi, -0x64; mov eax, 0x101; syscall; 
0x000000000044044c: add byte ptr [rax], al; mov edx, 0x80000; mov esi, 0x4a5790; movsxd rdi, dword ptr [rsp + 0x10]; mov eax, 0x101; syscall; 
0x0000000000472fbe: add byte ptr [rax], al; mov edx, 0x90800; movsxd rdi, edi; mov eax, ecx; sub rsp, 0x98; syscall; 
0x000000000044330b: add byte ptr [rax], al; mov edx, 1; mov eax, 0xca; syscall; 
0x0000000000435fde: add byte ptr [rax], al; mov edx, dword ptr [rsi + 1]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000435f6e: add byte ptr [rax], al; mov edx, dword ptr [rsi + 2]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000435efe: add byte ptr [rax], al; mov edx, dword ptr [rsi + 3]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000043592e: add byte ptr [rax], al; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432a1e: add byte ptr [rax], al; mov edx, dword ptr [rsi - 5]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432c1e: add byte ptr [rax], al; mov edx, dword ptr [rsi - 6]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432e1e: add byte ptr [rax], al; mov edx, dword ptr [rsi - 7]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043604e: add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x000000000044639a: add byte ptr [rax], al; mov esi, 0x447090; mov edi, 0x6cd6d8; call rax; 
0x000000000048c56b: add byte ptr [rax], al; mov esi, 0x48c500; mov edi, 0x6cd9c0; call rax; 
0x000000000048c82d: add byte ptr [rax], al; mov esi, 0x48c740; mov edi, 0x6cd9c4; call rdx; 
0x00000000004003cb: add byte ptr [rax], al; mov esi, 0x4a2a68; mov rdi, rbx; mov eax, 1; syscall; 
0x0000000000400403: add byte ptr [rax], al; mov esi, 0x4a2a86; mov rdi, rbx; mov eax, 1; syscall; 
0x0000000000442edb: add byte ptr [rax], al; mov esi, 0x80000; mov edi, 0x4a58c8; mov eax, ebx; syscall; 
0x00000000004433c6: add byte ptr [rax], al; mov esi, 0x80; syscall; 
0x00000000004796df: add byte ptr [rax], al; mov esi, 0x81; add rdi, 0x1c; mov eax, 0xca; syscall; 
0x0000000000443306: add byte ptr [rax], al; mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x00000000004120ae: add byte ptr [rax], al; mov esi, 0x902; mov edi, 0x4a2ac7; mov eax, 2; syscall; 
0x000000000047312e: add byte ptr [rax], al; mov esi, 0x90800; mov eax, ecx; sub rsp, 0x98; syscall; 
0x0000000000410bfa: add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000416605: add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x30]; 
0x000000000046d175: add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x00000000004137a5: add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004136fd: add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; mov rbp, r12; call qword ptr [rax + 0x18]; 
0x0000000000441884: add byte ptr [rax], al; mov esi, 1; call rbx; 
0x0000000000441a71: add byte ptr [rax], al; mov esi, 1; mov rdi, r12; call rbx; 
0x000000000044193d: add byte ptr [rax], al; mov esi, 1; mov rdi, r13; call rbx; 
0x00000000004418b5: add byte ptr [rax], al; mov esi, 1; mov rdi, r14; call rbx; 
0x0000000000441cef: add byte ptr [rax], al; mov esi, 2; mov rdi, r12; call rbx; 
0x0000000000441a62: add byte ptr [rax], al; mov esi, 2; mov rdi, r13; call rbx; 
0x000000000044192e: add byte ptr [rax], al; mov esi, 2; mov rdi, r14; call rbx; 
0x00000000004418a6: add byte ptr [rax], al; mov esi, 2; mov rdi, r15; call rbx; 
0x0000000000473105: add byte ptr [rax], al; mov esi, dword ptr fs:[rdx]; syscall; 
0x000000000046d3c0: add byte ptr [rax], al; mov esi, eax; mov rdi, rbx; call qword ptr [rdx + 0x30]; 
0x000000000046cb3f: add byte ptr [rax], al; mov esi, ebx; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x00000000004c163a: add byte ptr [rax], al; mov esp, 0x20000025; cmc; call qword ptr [rdx]; 
0x00000000004c823a: add byte ptr [rax], al; mov esp, 0x80000091; xchg eax, ecx; sti; call qword ptr [rax]; 
0x00000000004b2b16: add byte ptr [rax], al; mov esp, 0xbe000005; add eax, 0x5c00000; add byte ptr [rax], al; ret 5; 
0x00000000004bfc3a: add byte ptr [rax], al; mov esp, 0xc000000b; cmc; hlt; call qword ptr [rbx]; 
0x000000000041316e: add byte ptr [rax], al; mov qword ptr [rax + 0x130], 0x4a29c0; mov rax, qword ptr [rbp + 0xd8]; call qword ptr [rax + 0x40]; 
0x000000000046d384: add byte ptr [rax], al; mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x000000000048ca08: add byte ptr [rax], al; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000455ba5: add byte ptr [rax], al; mov qword ptr [rbp - 0x4e8], rsi; jmp rax; 
0x0000000000415eca: add byte ptr [rax], al; mov qword ptr [rbx + 0x18], 0; pop rbx; pop rbp; pop r12; ret; 
0x000000000049a392: add byte ptr [rax], al; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x000000000049a416: add byte ptr [rax], al; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x0000000000412dba: add byte ptr [rax], al; mov qword ptr [rbx + 0x38], 0; mov eax, 3; movsxd rdi, dword ptr [rbx + 0x70]; syscall; 
0x00000000004156cb: add byte ptr [rax], al; mov qword ptr [rbx + 0x50], 0; pop rbx; ret; 
0x0000000000412e32: add byte ptr [rax], al; mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x0000000000446360: add byte ptr [rax], al; mov qword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000043f0be: add byte ptr [rax], al; mov qword ptr [rbx], rsi; mov rax, qword ptr [rsp + 8]; add rsp, 0x10; pop rbx; ret; 
0x0000000000416227: add byte ptr [rax], al; mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000044f82d: add byte ptr [rax], al; mov qword ptr [rdi + 0x10], 0; mov rdi, qword ptr [rdi]; syscall; 
0x00000000004798c4: add byte ptr [rax], al; mov qword ptr [rdi + 0x308], rax; ret; 
0x000000000049cf5e: add byte ptr [rax], al; mov qword ptr [rdi + 0x98], rsi; ret; 
0x000000000041622e: add byte ptr [rax], al; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000049cf16: add byte ptr [rax], al; mov qword ptr [rdi + rsi*8], rdx; add rsp, 8; ret; 
0x000000000048bf10: add byte ptr [rax], al; mov qword ptr [rdi], rsi; ret; 
0x0000000000417332: add byte ptr [rax], al; mov qword ptr [rip + 0x2b6269], 0; ret; 
0x00000000004172bf: add byte ptr [rax], al; mov qword ptr [rip + 0x2b62e0], rdx; add dword ptr [rip + 0x2b62d5], 1; ret; 
0x0000000000401d17: add byte ptr [rax], al; mov qword ptr [rip + 0x2c9370], rax; xor eax, eax; ret; 
0x0000000000476bf6: add byte ptr [rax], al; mov qword ptr [rsi], -1; xor eax, eax; ret; 
0x0000000000475ac1: add byte ptr [rax], al; mov qword ptr [rsi], rax; mov qword ptr [rsi + 0x10], rax; mov edi, 0x1002; mov eax, 0x9e; syscall; 
0x000000000040fc2b: add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x11f00; add rsp, 0xd8; ret; 
0x000000000040fb9a: add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x55730; add rsp, 0xd8; ret; 
0x000000000047c86e: add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x7c1e0; add rsp, 0xd8; ret; 
0x000000000048c10b: add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x8c120; add rsp, 0xd8; ret; 
0x000000000043fea4: add byte ptr [rax], al; mov qword ptr [rsp], rax; mov eax, 0; syscall; 
0x000000000043ff04: add byte ptr [rax], al; mov qword ptr [rsp], rax; mov eax, 1; syscall; 
0x000000000043fe44: add byte ptr [rax], al; mov qword ptr [rsp], rax; mov eax, 2; syscall; 
0x0000000000417ede: add byte ptr [rax], al; mov qword ptr fs:[r9], rdx; mov rax, rdx; add rsp, 8; ret; 
0x000000000045025f: add byte ptr [rax], al; mov qword ptr fs:[rdx], rax; ret; 
0x000000000045041e: add byte ptr [rax], al; mov r10d, 8; movsxd rdi, edi; mov eax, ecx; syscall; 
0x000000000043208e: add byte ptr [rax], al; mov r11, qword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000403972: add byte ptr [rax], al; mov r13, rcx; test rax, rax; je 0x3731; mov edi, 0x6ccfe0; call rax; 
0x000000000044f8dd: add byte ptr [rax], al; mov r13d, 1; mov eax, 3; syscall; 
0x00000000004501ae: add byte ptr [rax], al; mov rax, -0x10; add rax, qword ptr fs:[0]; ret; 
0x00000000004501ce: add byte ptr [rax], al; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x00000000004501ee: add byte ptr [rax], al; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x000000000043fdb6: add byte ptr [rax], al; mov rax, -0x30; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000049a066: add byte ptr [rax], al; mov rax, -0x30; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x0000000000471986: add byte ptr [rax], al; mov rax, -0x30; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000473976: add byte ptr [rax], al; mov rax, -0x30; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000041d4de: add byte ptr [rax], al; mov rax, -0x30; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000048c1a6: add byte ptr [rax], al; mov rax, -0x30; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x00000000004171ce: add byte ptr [rax], al; mov rax, -1; ret; 
0x000000000045032e: add byte ptr [rax], al; mov rax, 0xf; syscall; 
0x000000000046f07e: add byte ptr [rax], al; mov rax, 1; ret; 
0x000000000046f08e: add byte ptr [rax], al; mov rax, 2; ret; 
0x000000000046f09e: add byte ptr [rax], al; mov rax, 3; ret; 
0x000000000046f0ae: add byte ptr [rax], al; mov rax, 4; ret; 
0x000000000046f0be: add byte ptr [rax], al; mov rax, 5; ret; 
0x000000000046f0ce: add byte ptr [rax], al; mov rax, 6; ret; 
0x000000000046f0de: add byte ptr [rax], al; mov rax, 7; ret; 
0x000000000046cb38: add byte ptr [rax], al; mov rax, qword ptr [r13 + 0xd8]; mov esi, ebx; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x000000000046d306: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000046d16e: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x000000000046c87e: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000415709: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x18]; jmp rax; 
0x0000000000411670: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000415c05: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x40]; jmp rax; 
0x0000000000480dfe: add byte ptr [rax], al; mov rax, qword ptr [rax + 8]; ret; 
0x0000000000480e0e: add byte ptr [rax], al; mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x0000000000400d51: add byte ptr [rax], al; mov rax, qword ptr [rax*8 + 0x4a1ca8]; jmp rax; 
0x0000000000460dce: add byte ptr [rax], al; mov rax, qword ptr [rax*8 + 0x4b43a0]; jmp rax; 
0x00000000004620f2: add byte ptr [rax], al; mov rax, qword ptr [rax*8 + 0x4b44a0]; jmp rax; 
0x00000000004625d6: add byte ptr [rax], al; mov rax, qword ptr [rax*8 + 0x4b45a0]; jmp rax; 
0x0000000000460e64: add byte ptr [rax], al; mov rax, qword ptr [rax*8 + 0x4b48a0]; jmp rax; 
0x0000000000413167: add byte ptr [rax], al; mov rax, qword ptr [rbp + 0xa0]; mov qword ptr [rax + 0x130], 0x4a29c0; mov rax, qword ptr [rbp + 0xd8]; call qword ptr [rax + 0x40]; 
0x000000000046d0f7: add byte ptr [rax], al; mov rax, qword ptr [rbp + 0xd8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000047a90e: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; mov qword ptr [rbp - 0xd0], r11; mov qword ptr [rbp - 0xc8], r10; call rax; 
0x000000000047a70e: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r15]; call rax; 
0x000000000048c99e: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x18]; mov rdx, qword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000041379e: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000040ff8e: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0xd8]; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x000000000047d178: add byte ptr [rax], al; mov rax, qword ptr [rcx + rax]; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000043b82e: add byte ptr [rax], al; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, qword ptr [rdx + 7]; ret; 
0x000000000043a07e: add byte ptr [rax], al; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x0000000000417a5e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000046d72e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x000000000041724e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000049cf2e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000046d1ae: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x6d1c0; ret; 
0x000000000049cf6e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x000000000049cfce: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x000000000049cfbe: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000049cf7e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x0000000000415f1e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xd8]; mov ecx, edx; xor edx, edx; mov rax, qword ptr [rax + 0x48]; jmp rax; 
0x000000000041566e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000046d41e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x30]; 
0x0000000000415bfe: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xd8]; mov rax, qword ptr [rax + 0x40]; jmp rax; 
0x0000000000415afe: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xd8]; push rbx; mov rbx, rdi; call qword ptr [rax + 0x20]; 
0x0000000000413a8e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; cmp rax, qword ptr [rdi + 0x10]; jae 0x13aa0; movzx eax, byte ptr [rax]; ret; 
0x000000000047cc1e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x24e469]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x259797]; mov qword ptr [rsi], rax; ret; 
0x0000000000470a53: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x265f7c]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004462fe: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x290621]; ret; 
0x000000000041722e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2b3e89]; ret; 
0x00000000004187fb: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2b4ddc]; test rax, rax; je 0x1880b; call rax; 
0x0000000000481219: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x38]; add rsp, 0x68; ret; 
0x000000000048c5cd: add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000048134e: add byte ptr [rax], al; mov rax, qword ptr fs:[0]; add rax, -8; ret; 
0x00000000004135a7: add byte ptr [rax], al; mov rax, rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000047d39f: add byte ptr [rax], al; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000049d0d7: add byte ptr [rax], al; mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000413d1a: add byte ptr [rax], al; mov rax, rbx; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004104e1: add byte ptr [rax], al; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000041ea52: add byte ptr [rax], al; mov rax, rbx; pop rbx; ret; 
0x000000000041725e: add byte ptr [rax], al; mov rax, rdi; ret; 
0x000000000043fe5b: add byte ptr [rax], al; mov rax, rdx; add rsp, 8; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x000000000041e775: add byte ptr [rax], al; mov rax, rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041f10f: add byte ptr [rax], al; mov rax, rdx; pop rbx; pop rbp; pop r12; ret; 
0x000000000048c389: add byte ptr [rax], al; mov rax, rdx; pop rbx; ret; 
0x00000000004417cc: add byte ptr [rax], al; mov rbp, rdi; xor edx, edx; xor esi, esi; mov rbx, rax; call rax; 
0x0000000000415e5c: add byte ptr [rax], al; mov rbx, rdi; mov rbp, rdx; call qword ptr [rax + 0x60]; 
0x0000000000410234: add byte ptr [rax], al; mov rbx, rdx; mov rdi, rdx; call qword ptr [rax + 0x60]; 
0x000000000043244e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043262e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043280e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004329fe: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432bfe: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432dfe: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043226e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043c41e: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, qword ptr [rdi + 8]; ret; 
0x000000000043bdee: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x000000000043bdfe: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000045f5ee: add byte ptr [rax], al; mov rdi, qword ptr [rbp - 0x4a0]; mov rdx, r12; mov rsi, r13; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x0000000000452f46: add byte ptr [rax], al; mov rdi, qword ptr [rdi + 0xe0]; movsxd r12, edx; mov rdx, r12; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000044f835: add byte ptr [rax], al; mov rdi, qword ptr [rdi]; syscall; 
0x0000000000449a6c: add byte ptr [rax], al; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000441a76: add byte ptr [rax], al; mov rdi, r12; call rbx; 
0x000000000046d95b: add byte ptr [rax], al; mov rdi, r12; lea rdx, qword ptr [rsp + 0x18]; lea r9, qword ptr [rsp + 0x10]; call rbx; 
0x0000000000441942: add byte ptr [rax], al; mov rdi, r13; call rbx; 
0x00000000004418ba: add byte ptr [rax], al; mov rdi, r14; call rbx; 
0x00000000004418ab: add byte ptr [rax], al; mov rdi, r15; call rbx; 
0x0000000000400464: add byte ptr [rax], al; mov rdi, r8; mov eax, ebp; syscall; 
0x000000000046d0fe: add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x00000000004106f3: add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x0000000000441d00: add byte ptr [rax], al; mov rdi, rbp; call rbx; 
0x0000000000413984: add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x00000000004165af: add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x0000000000415a8c: add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x00000000004110cc: add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rbx + 0x20]; 
0x000000000046a89b: add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x00000000004004a0: add byte ptr [rax], al; mov rdi, rbx; mov eax, r10d; syscall; 
0x0000000000416eb5: add byte ptr [rax], al; mov rdi, rbx; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000049a00d: add byte ptr [rax], al; mov rdi, rbx; mov rax, qword ptr [rax + 0x48]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000411665: add byte ptr [rax], al; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000415771: add byte ptr [rax], al; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x00000000004158e1: add byte ptr [rax], al; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x28]; jmp rax; 
0x000000000045ec96: add byte ptr [rax], al; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000043f4ee: add byte ptr [rax], al; mov rdi, rdx; mov eax, esi; syscall; 
0x00000000004505be: add byte ptr [rax], al; mov rdx, -0x30; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000048c98e: add byte ptr [rax], al; mov rdx, qword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x000000000048ca01: add byte ptr [rax], al; mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x00000000004012bd: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0x2cc37a]; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000435e1e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 1]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435dae: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 2]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435d3e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 3]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435c5e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 5]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435bee: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 6]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435b7e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 7]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043562e: add byte ptr [rax], al; mov rdx, qword ptr [rsi - 0xa]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043549e: add byte ptr [rax], al; mov rdx, qword ptr [rsi - 0xd]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043540e: add byte ptr [rax], al; mov rdx, qword ptr [rsi - 0xe]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000004320ae: add byte ptr [rax], al; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004356ae: add byte ptr [rax], al; mov rdx, qword ptr [rsi - 9]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000435e8e: add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000045050a: add byte ptr [rax], al; mov rdx, qword ptr [rsp + 0x38]; mov qword ptr [r8 + 0x90], rdx; add rsp, 0xd0; ret; 
0x00000000004569fb: add byte ptr [rax], al; mov rdx, r10; mov qword ptr [rbp - 0x4d0], r10; mov rsi, r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000460b8b: add byte ptr [rax], al; mov rdx, r11; mov qword ptr [rbp - 0x10a0], r11; mov rsi, qword ptr [rbp - 0x1088]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x00000000004545c6: add byte ptr [rax], al; mov rdx, r12; mov rsi, r8; mov qword ptr [rbp - 0x4a8], r8; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000454ddd: add byte ptr [rax], al; mov rdx, r12; mov rsi, r8; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000046b5ba: add byte ptr [rax], al; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000412ece: add byte ptr [rax], al; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000453e40: add byte ptr [rax], al; mov rdx, r13; mov rsi, qword ptr [rbp - 0x4a8]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004983de: add byte ptr [rax], al; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x00000000004137fc: add byte ptr [rax], al; mov rdx, r14; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000043f692: add byte ptr [rax], al; mov rdx, rax; mov rdi, r8; mov eax, 3; syscall; 
0x000000000046bf2f: add byte ptr [rax], al; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000413e9b: add byte ptr [rax], al; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000045ea8f: add byte ptr [rax], al; mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x000000000046b7f0: add byte ptr [rax], al; mov rdx, rbx; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x00000000004105ad: add byte ptr [rax], al; mov rdx, rbx; mov rsi, r12; call qword ptr [rax + 0x38]; 
0x000000000046155c: add byte ptr [rax], al; mov rdx, rcx; mov qword ptr [rbp - 0x1080], rcx; mov rsi, qword ptr [rbp - 0x1090]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000045411e: add byte ptr [rax], al; mov rdx, rcx; mov qword ptr [rbp - 0x480], rcx; mov rsi, r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000049e8d2: add byte ptr [rax], al; mov rsi, qword ptr [r14 + 8]; mov rdx, qword ptr [r15]; mov rdi, rbp; call rbx; 
0x00000000004564b5: add byte ptr [rax], al; mov rsi, qword ptr [rbp - 0x4e0]; mov rdi, rbx; mov rdx, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000441019: add byte ptr [rax], al; mov rsi, qword ptr [rbx]; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000041e816: add byte ptr [rax], al; mov rsi, qword ptr [rsp + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x000000000046be23: add byte ptr [rax], al; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x00000000004133ee: add byte ptr [rax], al; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x0000000000410921: add byte ptr [rax], al; mov rsi, r14; mov rdi, rbx; sub rdx, r14; call qword ptr [rax + 0x70]; 
0x000000000044fab7: add byte ptr [rax], al; mov rsi, rax; mov rdx, r9; mov rdi, r13; xor eax, eax; syscall; 
0x00000000004005d4: add byte ptr [rax], al; mov rsi, rax; repe cmpsb byte ptr [rsi], byte ptr [rdi]; jne 0x5de; ret; 
0x000000000043f67b: add byte ptr [rax], al; mov rsi, rbp; mov rdi, r8; mov eax, r9d; syscall; 
0x000000000041213b: add byte ptr [rax], al; mov rsi, rbx; mov rdi, r12; mov eax, r9d; syscall; 
0x000000000047d2c8: add byte ptr [rax], al; mov rsi, rsp; syscall; 
0x00000000004bfd0a: add byte ptr [rax], al; mov word ptr [rax + rax], cs; add byte ptr [rax - 9], dl; hlt; call qword ptr [rdx]; 
0x00000000004c820a: add byte ptr [rax], al; mov word ptr [rcx - 0x6eb00000], ss; sti; call qword ptr [rdx]; 
0x00000000004c170a: add byte ptr [rax], al; mov word ptr [rsi], fs; add byte ptr [rax], al; ret; 
0x00000000004c070a: add byte ptr [rax], al; mov word ptr [rsi], ss; add byte ptr [rax], al; shr byte ptr [rax], 1; cmc; call qword ptr [rax]; 
0x000000000043be9e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000043bf1e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000043bede: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000043befe: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000043c01e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000043bfbe: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000043bfde: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000043bffe: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000043c4ee: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000043be6e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000004271ee: add byte ptr [rax], al; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000004c9a22: add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; test eax, 0x34980000; std; jmp qword ptr [rcx]; 
0x00000000004c94e2: add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr fs:[rsi]; add byte ptr [rax], al; js 0xc94f8; std; jmp qword ptr [rax]; 
0x0000000000440966: add byte ptr [rax], al; movsxd r10, r10d; syscall; 
0x0000000000452f4d: add byte ptr [rax], al; movsxd r12, edx; mov rdx, r12; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000045d2fd: add byte ptr [rax], al; movsxd rbx, edx; mov rdx, rbx; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000049ad9f: add byte ptr [rax], al; movsxd rcx, dword ptr [r14 + rsi*4]; add rcx, r14; jmp rcx; 
0x0000000000412dc7: add byte ptr [rax], al; movsxd rdi, dword ptr [rbx + 0x70]; syscall; 
0x00000000004125de: add byte ptr [rax], al; movsxd rdi, dword ptr [rdi + 0x70]; mov eax, 3; syscall; 
0x000000000044008f: add byte ptr [rax], al; movsxd rdi, ebx; mov eax, 0x48; syscall; 
0x000000000044d727: add byte ptr [rax], al; movsxd rdi, ebx; mov eax, 3; syscall; 
0x000000000040e3c1: add byte ptr [rax], al; movsxd rdi, ecx; syscall; 
0x000000000043ff88: add byte ptr [rax], al; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x00000000004505a4: add byte ptr [rax], al; movsxd rdi, edi; mov eax, 0xe; syscall; 
0x0000000000450424: add byte ptr [rax], al; movsxd rdi, edi; mov eax, ecx; syscall; 
0x000000000044e7b6: add byte ptr [rax], al; movsxd rdi, edi; mov rax, qword ptr [rdi*8 + 0x6cca40]; ret; 
0x00000000004040f2: add byte ptr [rax], al; movsxd rdi, r12d; mov eax, 3; syscall; 
0x000000000044f8d4: add byte ptr [rax], al; movsxd rdi, r13d; mov r14d, 1; mov r13d, 1; mov eax, 3; syscall; 
0x000000000044f94e: add byte ptr [rax], al; movsxd rdi, r14d; mov eax, 3; syscall; 
0x00000000004583b5: add byte ptr [rax], al; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000046be52: add byte ptr [rax], al; movsxd rdx, ebx; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000040e3b6: add byte ptr [rax], al; movsxd rsi, eax; movsxd rdx, edi; mov eax, 0xea; movsxd rdi, ecx; syscall; 
0x000000000040e39e: add byte ptr [rax], al; movsxd rsi, eax; test esi, esi; jne 0xe3d8; mov eax, 0xba; syscall; 
0x000000000049bd43: add byte ptr [rax], al; movzx eax, al; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x000000000043dc2e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0x10]; movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x000000000043dc8e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000043dc7e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000043dc6e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000043dc5e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000043dc4e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000043dc3e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000043dfe8: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; cmp al, byte ptr [rsi - 1]; jne 0x3e165; xor eax, eax; ret; 
0x000000000042feae: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000042fc61: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000042f00e: add byte ptr [rax], al; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000041282e: add byte ptr [rax], al; movzx eax, byte ptr [rdx]; ret; 
0x00000000004477de: add byte ptr [rax], al; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000042340e: add byte ptr [rax], al; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000435abe: add byte ptr [rax], al; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000043619e: add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x0000000000435a3e: add byte ptr [rax], al; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000043612e: add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000415ba0: add byte ptr [rax], al; movzx esi, byte ptr [r14]; mov rdi, r12; lea rbx, qword ptr [r14 + 1]; call qword ptr [rax + 0x18]; 
0x0000000000444fae: add byte ptr [rax], al; neg rax; mov dword ptr fs:[0xffffffffffffffd0], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000043fed9: add byte ptr [rax], al; nop dword ptr [rax + rax]; cmp dword ptr [rip + 0x296935], 0; jne 0x3fefd; mov eax, 1; syscall; 
0x000000000043fe79: add byte ptr [rax], al; nop dword ptr [rax + rax]; cmp dword ptr [rip + 0x296995], 0; jne 0x3fe9d; mov eax, 0; syscall; 
0x000000000043f4aa: add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0x25; syscall; 
0x0000000000444dab: add byte ptr [rax], al; nop dword ptr [rax]; mov eax, dword ptr [rip + 0x291b5a]; test eax, eax; je 0x44dc0; ret; 
0x0000000000414e72: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000046df9b: add byte ptr [rax], al; nop dword ptr [rax]; test rsi, rsi; jne 0x6dfa9; xor rax, rax; ret; 
0x0000000000435924: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004501c4: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x00000000004501e4: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x0000000000450324: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x000000000049cf24: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000435ab4: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000435a34: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x0000000000401304: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x00000000004737fc: add byte ptr [rax], al; nop; cmp dword ptr [rip + 0x263015], 0; jne 0x7381d; mov eax, 3; syscall; 
0x00000000004737dc: add byte ptr [rax], al; nop; mov eax, 0x15; syscall; 
0x00000000004409ec: add byte ptr [rax], al; nop; mov eax, 0x1c; syscall; 
0x00000000004736ec: add byte ptr [rax], al; nop; mov eax, 0x66; syscall; 
0x00000000004736ec: add byte ptr [rax], al; nop; mov eax, 0x66; syscall; ret; 
0x00000000004409cc: add byte ptr [rax], al; nop; mov eax, 0xa; syscall; 
0x000000000044324c: add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0x19; syscall; 
0x000000000045059c: add byte ptr [rax], al; nop; mov r10d, 8; movsxd rdi, edi; mov eax, 0xe; syscall; 
0x000000000045031e: add byte ptr [rax], al; nop; nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x00000000004c126e: add byte ptr [rax], al; nop; pop rbp; cmc; jmp qword ptr [rdx]; 
0x0000000000400d1c: add byte ptr [rax], al; nop; pop rbp; ret; 
0x00000000004c784e: add byte ptr [rax], al; nop; sti; jmp qword ptr [rdx]; 
0x0000000000426b6c: add byte ptr [rax], al; nop; test dword ptr [rip + 0x2a6b16], 0x200; jne 0x26b84; lea rax, qword ptr [rip + 0x1d]; ret; 
0x00000000004c158a: add byte ptr [rax], al; or al, 0x25; add byte ptr [rax], al; adc byte ptr [rbx - 0xb], ah; call qword ptr [rsi]; 
0x00000000004c6e8a: add byte ptr [rax], al; or al, 0x7e; add byte ptr [rax], al; jo 0xc6e5b; cli; call qword ptr [rcx]; 
0x00000000004c3946: add byte ptr [rax], al; or byte ptr [rax + rdi*8], dl; call qword ptr [rbx]; 
0x0000000000426b8a: add byte ptr [rax], al; or byte ptr [rax], al; je 0x26b98; lea rax, qword ptr [rip + 0x8449]; ret; 
0x000000000041b5d0: add byte ptr [rax], al; or byte ptr [rax], al; mov edi, 0x4a34a0; mov eax, 2; syscall; 
0x0000000000442eaf: add byte ptr [rax], al; or byte ptr [rax], al; mov edi, 0x4a58bd; mov eax, ebx; syscall; 
0x0000000000442ede: add byte ptr [rax], al; or byte ptr [rax], al; mov edi, 0x4a58c8; mov eax, ebx; syscall; 
0x000000000044ffe1: add byte ptr [rax], al; or byte ptr [rax], al; mov edi, 0x4a7820; mov eax, ecx; syscall; 
0x000000000044024a: add byte ptr [rax], al; or byte ptr [rax], al; mov esi, 0x4a5790; mov rdi, -0x64; mov eax, 0x101; syscall; 
0x000000000044044f: add byte ptr [rax], al; or byte ptr [rax], al; mov esi, 0x4a5790; movsxd rdi, dword ptr [rsp + 0x10]; mov eax, 0x101; syscall; 
0x000000000044f9dc: add byte ptr [rax], al; or byte ptr [rax], al; mov rdi, r13; mov eax, r15d; syscall; 
0x00000000004c1256: add byte ptr [rax], al; or byte ptr [rbp - 0xb], bl; call qword ptr [rsi]; 
0x00000000004c44e6: add byte ptr [rax], al; or byte ptr [rbp - 8], dh; call qword ptr [rcx]; 
0x00000000004c8cb6: add byte ptr [rax], al; or byte ptr [rcx - 0xd], bh; jmp qword ptr [rsi]; 
0x000000000047f4f4: add byte ptr [rax], al; or byte ptr [rsp + 0x5b], dh; ret; 
0x0000000000412e4e: add byte ptr [rax], al; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000047d527: add byte ptr [rax], al; or dword ptr [rip + 0x24ec40], 1; pop rbx; ret; 
0x00000000004138f2: add byte ptr [rax], al; or esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000426a29: add byte ptr [rax], al; pmovmskb eax, xmm1; bsf eax, eax; lea rax, qword ptr [rdi + rax + 0x30]; ret; 
0x00000000004c7516: add byte ptr [rax], al; pop rax; and edi, ebx; jmp qword ptr [rdi]; 
0x00000000004c72a6: add byte ptr [rax], al; pop rax; cli; cli; jmp rdi; 
0x00000000004c0bf6: add byte ptr [rax], al; pop rax; cmc; call qword ptr [rcx + 2]; 
0x00000000004bfcf6: add byte ptr [rax], al; pop rax; div esp; call qword ptr [rax]; 
0x00000000004c2c26: add byte ptr [rax], al; pop rax; mov ch, 0xf7; call qword ptr [rbx + 4]; 
0x00000000004c58d6: add byte ptr [rax], al; pop rax; pop rsp; cli; jmp qword ptr [rdx + 1]; 
0x00000000004c81f6: add byte ptr [rax], al; pop rax; xchg eax, ecx; sti; call qword ptr [rax]; 
0x00000000004c48d6: add byte ptr [rax], al; pop rax; xchg eax, edi; clc; call qword ptr [rdx]; 
0x000000000045d02d: add byte ptr [rax], al; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000045d0fd: add byte ptr [rax], al; pop rbp; pop r12; pop r13; ret; 
0x00000000004008ee: add byte ptr [rax], al; pop rbp; ret; 
0x000000000043eeda: add byte ptr [rax], al; pop rbx; and eax, 0x3fc00; ret; 
0x000000000046b637: add byte ptr [rax], al; pop rbx; mov eax, edx; pop rbp; pop r12; ret; 
0x000000000045b0fc: add byte ptr [rax], al; pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000044345d: add byte ptr [rax], al; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000411fe4: add byte ptr [rax], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000400606: add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000004004ce: add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x00000000004125cb: add byte ptr [rax], al; pop rbx; ret; 
0x00000000004c4fc2: add byte ptr [rax], al; pop rdi; add byte ptr [rax], al; cmp al, bl; clc; call qword ptr [rbx]; 
0x00000000004c4e2e: add byte ptr [rax], al; pop rsp; add byte ptr [rax], al; add byte ptr [rbp + rbx*2 - 0x48580000], dh; clc; call qword ptr [rcx + 0x1c]; 
0x00000000004c28da: add byte ptr [rax], al; pop rsp; cmp byte ptr [rax], al; add byte ptr [rax], al; jb 0xc28d9; call qword ptr [rax]; 
0x00000000004c4fda: add byte ptr [rax], al; pop rsp; pop rdi; add byte ptr [rax], al; fdivr st(0); call qword ptr [rax]; 
0x00000000004c88de: add byte ptr [rax], al; push rax; cld; call qword ptr [rax + 1]; 
0x00000000004bfd0e: add byte ptr [rax], al; push rax; div esp; call qword ptr [rdx]; 
0x00000000004c799e: add byte ptr [rax], al; push rax; push rbx; sti; jmp rdi; 
0x00000000004c820e: add byte ptr [rax], al; push rax; xchg eax, ecx; sti; call qword ptr [rdx]; 
0x00000000004735ae: add byte ptr [rax], al; push rbp; push rbx; mov rbx, rsi; sub rsp, 8; syscall; 
0x0000000000415b05: add byte ptr [rax], al; push rbx; mov rbx, rdi; call qword ptr [rax + 0x20]; 
0x00000000004c142e: add byte ptr [rax], al; push rsp; add byte ptr [rax], al; add byte ptr [rbx + 0x5f680000], dh; cmc; jmp qword ptr [rdi + 1]; 
0x00000000004c5b0e: add byte ptr [rax], al; push rsp; add byte ptr [rax], al; add byte ptr [rsp + rbx*2 + 0x63680000], dh; cli; jmp qword ptr [rsi + 1]; 
0x00000000004c44e2: add byte ptr [rax], al; push rsp; add byte ptr [rax], al; or byte ptr [rbp - 8], dh; call qword ptr [rcx]; 
0x00000000004c76d2: add byte ptr [rax], al; push rsp; xchg byte ptr [rax], al; add al, ch; sti; jmp qword ptr [rbp + 1]; 
0x00000000004c671a: add byte ptr [rax], al; pushfq; jbe 0xc671f; add byte ptr [rax - 0x6d], al; cli; jmp qword ptr [rax]; 
0x00000000004a8306: add byte ptr [rax], al; ret 0; 
0x00000000004af27e: add byte ptr [rax], al; ret 0x10; 
0x00000000004b0f4e: add byte ptr [rax], al; ret 0x1d4; 
0x00000000004b16e6: add byte ptr [rax], al; ret 0x1d5; 
0x00000000004aff56: add byte ptr [rax], al; ret 0x24; 
0x00000000004b0446: add byte ptr [rax], al; ret 0x33; 
0x00000000004a66be: add byte ptr [rax], al; ret 0x4a60; 
0x00000000004aea7e: add byte ptr [rax], al; ret 0xa; 
0x00000000004aee7e: add byte ptr [rax], al; ret 0xd; 
0x00000000004b2322: add byte ptr [rax], al; ret 1; 
0x00000000004b2522: add byte ptr [rax], al; ret 2; 
0x00000000004b2722: add byte ptr [rax], al; ret 3; 
0x00000000004b2922: add byte ptr [rax], al; ret 4; 
0x00000000004b2b22: add byte ptr [rax], al; ret 5; 
0x00000000004ae626: add byte ptr [rax], al; ret 6; 
0x00000000004b2f22: add byte ptr [rax], al; ret 7; 
0x00000000004b3122: add byte ptr [rax], al; ret 8; 
0x00000000004b3322: add byte ptr [rax], al; ret 9; 
0x0000000000401923: add byte ptr [rax], al; ret; 
0x00000000004b291e: add byte ptr [rax], al; rol byte ptr [rax + rax], 0; ret 4; 
0x00000000004c9f4e: add byte ptr [rax], al; rol byte ptr [rdx - 3], 1; call qword ptr [rcx + 1]; 
0x00000000004aed26: add byte ptr [rax], al; ror byte ptr [rax + rax], 0; ret; 
0x00000000004bfc3e: add byte ptr [rax], al; sal ch, 0xf4; call qword ptr [rbx]; 
0x00000000004c402e: add byte ptr [rax], al; sar byte ptr [rbx], 0xf8; call qword ptr [rbx + 5]; 
0x0000000000460161: add byte ptr [rax], al; sar r15, 2; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000046e034: add byte ptr [rax], al; sar rdx, cl; test rdx, rdx; je 0x6e0e0; bsf rax, rdx; ret; 
0x00000000004c48fe: add byte ptr [rax], al; sbb al, 0; add byte ptr [rax], al; test byte ptr [rax], bl; add byte ptr [rax], bl; ret 0xfffd; 
0x00000000004c589a: add byte ptr [rax], al; sbb al, 0x68; add byte ptr [rax], al; mov al, 0x5b; cli; jmp rax; 
0x00000000004c1406: add byte ptr [rax], al; sbb byte ptr [rdi - 0xb], bl; jmp qword ptr [rax]; 
0x00000000004c1f06: add byte ptr [rax], al; sbb ch, cl; cmc; jmp rdx; 
0x000000000049d5af: add byte ptr [rax], al; sbb eax, eax; cmp qword ptr [rsi + 8], rcx; cmova eax, edx; ret; 
0x00000000004c3c5e: add byte ptr [rax], al; sbb edi, eax; call qword ptr [rsi + 0xb]; 
0x00000000004aff4e: add byte ptr [rax], al; shl dword ptr [rax + rax], 0; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x24; 
0x00000000004c070e: add byte ptr [rax], al; shr byte ptr [rax], 1; cmc; call qword ptr [rax]; 
0x0000000000413b38: add byte ptr [rax], al; shr byte ptr [rcx], 0x4a; add byte ptr [rax - 0x75], cl; sbb eax, 0; add byte ptr [rax], al; call qword ptr [rax + 0x20]; 
0x000000000049cf45: add byte ptr [rax], al; shr rax, 0x3f; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x00000000004c8206: add byte ptr [rax], al; sub al, 0; add byte ptr [rax], al; mov word ptr [rcx - 0x6eb00000], ss; sti; call qword ptr [rdx]; 
0x00000000004c93aa: add byte ptr [rax], al; sub al, 0xa3; add byte ptr [rax], al; mov al, 8; std; call qword ptr [rbx + 2]; 
0x00000000004bf536: add byte ptr [rax], al; sub byte ptr [rdx], dh; hlt; call qword ptr [rdx]; 
0x00000000004126a8: add byte ptr [rax], al; sub dword ptr [rdx], ecx; pop rbx; ret; 
0x0000000000455f73: add byte ptr [rax], al; sub eax, 0x20; cdqe; movzx eax, byte ptr [rax + 0x4b40e0]; mov rax, qword ptr [rax*8 + 0x4b3a20]; jmp rax; 
0x0000000000455fc4: add byte ptr [rax], al; sub eax, 0x20; cdqe; movzx eax, byte ptr [rax + 0x4b40e0]; mov rax, qword ptr [rax*8 + 0x4b3b20]; jmp rax; 
0x00000000004580b4: add byte ptr [rax], al; sub eax, 0x20; cdqe; movzx eax, byte ptr [rax + 0x4b40e0]; mov rax, qword ptr [rax*8 + 0x4b3c20]; jmp rax; 
0x0000000000456be7: add byte ptr [rax], al; sub eax, 0x20; cdqe; movzx eax, byte ptr [rax + 0x4b40e0]; mov rax, qword ptr [rax*8 + 0x4b3f20]; jmp rax; 
0x000000000042fd4c: add byte ptr [rax], al; sub eax, ecx; ret; 
0x0000000000416656: add byte ptr [rax], al; sub r8, rcx; lea eax, dword ptr [r8 - 1]; ret; 
0x000000000046d476: add byte ptr [rax], al; sub r8, rcx; sar r8, 2; lea eax, dword ptr [r8 - 1]; ret; 
0x000000000046d58e: add byte ptr [rax], al; sub rdx, qword ptr [rax + 8]; mov eax, dword ptr [rdi + 0x10]; shr rdx, 2; sub eax, edx; ret; 
0x00000000004539ff: add byte ptr [rax], al; sub rdx, rsi; call qword ptr [rax + 0x38]; 
0x000000000045dc88: add byte ptr [rax], al; sub rdx, rsi; sar rdx, 2; call qword ptr [rax + 0x38]; 
0x000000000047d2c1: add byte ptr [rax], al; sub rsp, 0x1000; mov rsi, rsp; syscall; 
0x000000000047388f: add byte ptr [rax], al; sub rsp, 0x30; mov rdx, rsp; syscall; 
0x00000000004a1c6e: add byte ptr [rax], al; sub rsp, 8; add rsp, 8; ret; 
0x0000000000480da3: add byte ptr [rax], al; sub rsp, 8; test rax, rax; je 0x80db5; mov edi, 0x6cc140; call rax; 
0x00000000004003d8: add byte ptr [rax], al; syscall; 
0x00000000004733b3: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x733c8; pop rbx; ret; 
0x000000000043f4b3: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x0000000000443315: add byte ptr [rax], al; syscall; pop rdx; pop rsi; ret; 
0x000000000046fdb3: add byte ptr [rax], al; syscall; ret; 
0x000000000043c914: add byte ptr [rax], al; test ah, 0x40; jne 0x3ca00; lea rax, qword ptr [rdi + 0xf]; ret; 
0x00000000004c7616: add byte ptr [rax], al; test al, 0x28; sti; jmp qword ptr [rcx]; 
0x00000000004c9ce6: add byte ptr [rax], al; test al, 0x39; std; jmp qword ptr [rdx]; 
0x000000000043c8c2: add byte ptr [rax], al; test al, 0x40; jne 0x3c990; lea rax, qword ptr [rdi + 7]; ret; 
0x00000000004c6316: add byte ptr [rax], al; test al, 0x7e; cli; jmp rdx; 
0x00000000004c8096: add byte ptr [rax], al; test al, 0x8f; sti; jmp qword ptr [rsi]; 
0x00000000004c4e36: add byte ptr [rax], al; test al, 0xb7; clc; call qword ptr [rcx + 0x1c]; 
0x00000000004c8102: add byte ptr [rax], al; test byte ptr [rax - 0x6bf80000], dl; std; call rcx; 
0x00000000004c7456: add byte ptr [rax], al; test byte ptr [rax], al; add byte ptr [rax], al; fadd qword ptr [rbx + 0xd200000]; sti; jmp qword ptr [rbp + 0xb]; 
0x00000000004c4902: add byte ptr [rax], al; test byte ptr [rax], bl; add byte ptr [rax], bl; ret 0xfffd; 
0x00000000004c1402: add byte ptr [rax], al; test byte ptr [rbx], ah; add byte ptr [rax], al; sbb byte ptr [rdi - 0xb], bl; jmp qword ptr [rax]; 
0x000000000047f4ee: add byte ptr [rax], al; test byte ptr [rdi + 0x314], 8; je 0x7f55d; pop rbx; ret; 
0x000000000041361e: add byte ptr [rax], al; test byte ptr [rdi + 0x74], 2; je 0x13658; movsxd rdi, dword ptr [rdi + 0x70]; xor eax, eax; syscall; 
0x00000000004267fe: add byte ptr [rax], al; test byte ptr [rip + 0x2a6ec1], 0x10; mov edx, 0x426230; mov eax, 0x43e180; cmove rax, rdx; ret; 
0x00000000004c1f02: add byte ptr [rax], al; test byte ptr [rsi], ch; add byte ptr [rax], al; sbb ch, cl; cmc; jmp rdx; 
0x000000000043c835: add byte ptr [rax], al; test dh, 0x40; jne 0x3c770; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000043c87b: add byte ptr [rax], al; test dh, 4; jne 0x3c770; lea rax, qword ptr [rdi + 0xb]; ret; 
0x000000000043c7b2: add byte ptr [rax], al; test dl, 0x40; jne 0x3c770; lea rax, qword ptr [rdi + 7]; ret; 
0x000000000043c7e0: add byte ptr [rax], al; test dl, 4; jne 0x3c770; lea rax, qword ptr [rdi + 3]; ret; 
0x00000000004431c9: add byte ptr [rax], al; test eax, eax; cmove eax, edx; ret; 
0x00000000004408d4: add byte ptr [rax], al; test eax, eax; cmovns edx, dword ptr [rsp]; add rsp, 0x18; mov eax, edx; ret; 
0x0000000000496970: add byte ptr [rax], al; test eax, eax; jne 0x9695f; mov ecx, 0x27; mov eax, ecx; syscall; 
0x000000000043fd5f: add byte ptr [rax], al; test eax, eax; mov rax, -1; cmove rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000047386a: add byte ptr [rax], al; test eax, eax; sete al; add rsp, 0x48; movzx eax, al; ret; 
0x0000000000421d2e: add byte ptr [rax], al; test edi, edi; je 0x21d40; mov eax, 0x16; ret; 
0x0000000000415a81: add byte ptr [rax], al; test edx, edx; jle 0x15ad0; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x0000000000402974: add byte ptr [rax], al; test rax, rax; je 0x2984; lea rdi, qword ptr [rbx + 0x80]; call rax; 
0x0000000000402bc0: add byte ptr [rax], al; test rax, rax; je 0x2bd0; lea rdi, qword ptr [rbx + 0x80]; call rax; 
0x000000000040349f: add byte ptr [rax], al; test rax, rax; je 0x34ad; mov edi, 0x6cd060; call rax; 
0x00000000004036ee: add byte ptr [rax], al; test rax, rax; je 0x3706; mov edi, 0x6ccfe0; call rax; 
0x00000000004038e2: add byte ptr [rax], al; test rax, rax; je 0x38fa; mov edi, 0x6ccfe0; call rax; 
0x0000000000403e45: add byte ptr [rax], al; test rax, rax; je 0x3e53; mov edi, 0x6cd0a0; call rax; 
0x000000000043f10b: add byte ptr [rax], al; test rax, rax; je 0x3f119; mov edi, 0x6cd720; call rax; 
0x0000000000444c2c: add byte ptr [rax], al; test rax, rax; je 0x44c3a; mov edi, 0x6cc140; call rax; 
0x000000000044e5eb: add byte ptr [rax], al; test rax, rax; je 0x4e5f9; mov edi, 0x6cd720; call rax; 
0x000000000044e61a: add byte ptr [rax], al; test rax, rax; je 0x4e630; mov edi, 0x6cd720; call rax; 
0x000000000044ec54: add byte ptr [rax], al; test rax, rax; je 0x4e633; mov edi, 0x6cd720; call rax; 
0x000000000044e77a: add byte ptr [rax], al; test rax, rax; je 0x4e788; mov edi, 0x6cd720; call rax; 
0x000000000044e8f3: add byte ptr [rax], al; test rax, rax; je 0x4e908; mov edi, 0x6cd720; call rax; 
0x000000000044ebd3: add byte ptr [rax], al; test rax, rax; je 0x4ebe1; mov edi, 0x6cd720; call rax; 
0x00000000004793ce: add byte ptr [rax], al; test rax, rax; je 0x793ea; mov qword ptr [rbp - 0xb8], r9; mov edi, 0x6cc140; call rax; 
0x0000000000479445: add byte ptr [rax], al; test rax, rax; je 0x7945f; mov dword ptr [rbp - 0xa0], edx; mov edi, 0x6cc140; call rax; 
0x000000000047d923: add byte ptr [rax], al; test rax, rax; je 0x7d931; mov edi, 0x6cc140; call rax; 
0x000000000047d94b: add byte ptr [rax], al; test rax, rax; je 0x7d959; mov edi, 0x6cc140; call rax; 
0x000000000047d9c1: add byte ptr [rax], al; test rax, rax; je 0x7d9cf; mov edi, 0x6cc140; call rax; 
0x000000000047eee6: add byte ptr [rax], al; test rax, rax; je 0x7eef6; mov rdi, qword ptr [rbp - 0x88]; call rax; 
0x000000000047f4d7: add byte ptr [rax], al; test rax, rax; je 0x7f4f9; pop rbx; mov edi, 0x6cc140; jmp rax; 
0x000000000047f48e: add byte ptr [rax], al; test rax, rax; je 0x7f500; mov edi, 0x6cc140; call rax; 
0x0000000000480c49: add byte ptr [rax], al; test rax, rax; je 0x80c12; mov edi, 0x6cc140; call rax; 
0x0000000000480db8: add byte ptr [rax], al; test rax, rax; je 0x80dd0; mov edi, 0x6cc140; add rsp, 8; jmp rax; 
0x000000000048c8aa: add byte ptr [rax], al; test rax, rax; je 0x8c7c0; mov rsi, rbx; mov edi, dword ptr [rip + 0x241106]; call rax; 
0x00000000004008d8: add byte ptr [rax], al; test rax, rax; je 0x8f0; pop rbp; mov edi, 0x6ccb50; jmp rax; 
0x0000000000400926: add byte ptr [rax], al; test rax, rax; je 0x938; pop rbp; mov edi, 0x6ccb50; jmp rax; 
0x0000000000498823: add byte ptr [rax], al; test rax, rax; je 0x98831; mov edi, 0x6cc140; call rax; 
0x000000000049884f: add byte ptr [rax], al; test rax, rax; je 0x9885d; mov edi, 0x6cc140; call rax; 
0x0000000000498af5: add byte ptr [rax], al; test rax, rax; je 0x98b05; mov rax, qword ptr [rax + 8]; add rax, qword ptr [rbx]; call rax; 
0x00000000004009a3: add byte ptr [rax], al; test rax, rax; je 0x998; call rax; 
0x000000000049a3dd: add byte ptr [rax], al; test rax, rax; je 0x9a3eb; mov edi, 0x6cc140; call rax; 
0x000000000049a485: add byte ptr [rax], al; test rax, rax; je 0x9a493; mov edi, 0x6cc140; call rax; 
0x000000000049cf9e: add byte ptr [rax], al; test rax, rax; je 0x9cfb0; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000049f636: add byte ptr [rax], al; test rax, rax; je 0x9f644; mov edi, 0x6cc100; call rax; 
0x00000000004125bf: add byte ptr [rax], al; test rax, rax; js 0x125d0; mov qword ptr [rbx + 0x90], rax; pop rbx; ret; 
0x000000000049f869: add byte ptr [rax], al; test rbx, rbx; mov qword ptr [rip + 0x22dd0b], rbx; jne 0x9f858; pop rbx; ret; 
0x000000000047ea4d: add byte ptr [rax], al; test rdx, rdx; je 0x7ea5e; mov rax, qword ptr [r13]; add rax, qword ptr [rdx + 8]; call rax; 
0x000000000048c691: add byte ptr [rax], al; test rdx, rdx; je 0x8c6ae; mov esi, 0x48c740; mov edi, 0x6cd9c4; call rdx; 
0x000000000048c824: add byte ptr [rax], al; test rdx, rdx; je 0x8c8de; mov esi, 0x48c740; mov edi, 0x6cd9c4; call rdx; 
0x0000000000421a9e: add byte ptr [rax], al; test sil, 7; mov eax, 0x16; je 0x21ab0; ret; 
0x000000000043e6ee: add byte ptr [rax], al; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x00000000004a67be: add byte ptr [rax], al; xchg byte ptr [rcx + 0x4a], ah; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], dl; ret 0x44; 
0x00000000004c671e: add byte ptr [rax], al; xchg eax, ebx; cli; jmp qword ptr [rax]; 
0x00000000004c1e12: add byte ptr [rax], al; xchg eax, esp; sub eax, 0xc8480000; cmc; call qword ptr [rbx]; 
0x00000000004c7512: add byte ptr [rax], al; xchg eax, esp; test byte ptr [rax], al; add byte ptr [rax + 0x23], bl; sti; jmp qword ptr [rdi]; 
0x00000000004c9b56: add byte ptr [rax], al; xor al, 0; add byte ptr [rax], al; fsubr qword ptr [rdx + 0x35a00000]; std; call qword ptr [rcx + 1]; 
0x00000000004c82b2: add byte ptr [rax], al; xor al, 0x92; add byte ptr [rax], al; js 0xc824b; sti; call qword ptr [rdx]; 
0x00000000004c8cb2: add byte ptr [rax], al; xor al, 0x9c; add byte ptr [rax], al; or byte ptr [rcx - 0xd], bh; jmp qword ptr [rsi]; 
0x00000000004c71ce: add byte ptr [rax], al; xor bl, 0xfa; jmp qword ptr [rbx + 5]; 
0x00000000004c117e: add byte ptr [rax], al; xor byte ptr [rdx - 0xb], bl; jmp qword ptr [rsi + 2]; 
0x00000000004c8cfe: add byte ptr [rax], al; xor byte ptr [rsp + rdi*8], bh; jmp qword ptr [rdx]; 
0x00000000004c9976: add byte ptr [rax], al; xor dil, bpl; call rsp; 
0x00000000004527f7: add byte ptr [rax], al; xor eax, eax; add rsp, 8; ret; 
0x000000000040f3eb: add byte ptr [rax], al; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000004730a5: add byte ptr [rax], al; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000041d4f6: add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x000000000041259e: add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000413e2e: add byte ptr [rax], al; xor eax, eax; test rdx, rdx; jne 0x13e40; ret; 
0x000000000040130e: add byte ptr [rax], al; xor edi, edi; mov eax, edx; syscall; 
0x000000000049a541: add byte ptr [rax], al; xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x000000000044d6aa: add byte ptr [rax], al; xor edx, edx; xor esi, esi; mov edi, 0x4a6d28; mov eax, ecx; syscall; 
0x0000000000414f63: add byte ptr [rax], al; xor edx, edx; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x000000000043f64a: add byte ptr [rax], al; xor esi, esi; mov eax, 2; syscall; 
0x0000000000403ff7: add byte ptr [rax], al; xor esi, esi; mov eax, ecx; syscall; 
0x00000000004417f6: add byte ptr [rax], al; xor esi, esi; mov rdi, r12; call rbx; 
0x000000000044181b: add byte ptr [rax], al; xor esi, esi; mov rdi, r13; call rbx; 
0x000000000044183f: add byte ptr [rax], al; xor esi, esi; mov rdi, r14; call rbx; 
0x000000000044185f: add byte ptr [rax], al; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000040ff95: add byte ptr [rax], al; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x00000000004433bc: add byte ptr [rax], al; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x0000000000426a9d: add byte ptr [rax], al; xor rax, rax; ret; 
0x00000000004c4fc7: add byte ptr [rax], bh; fdivr st(0); call qword ptr [rbx]; 
0x00000000004c4ff7: add byte ptr [rax], bh; fdivr st(0); call qword ptr [rdx]; 
0x00000000004c7a97: add byte ptr [rax], bh; push rdi; sti; call rsi; 
0x00000000004bf387: add byte ptr [rax], bh; sub esp, esi; jmp qword ptr [rbx]; 
0x0000000000402970: add byte ptr [rax], bh; test rax, rax; je 0x2984; lea rdi, qword ptr [rbx + 0x80]; call rax; 
0x00000000004036ea: add byte ptr [rax], bh; test rax, rax; je 0x3706; mov edi, 0x6ccfe0; call rax; 
0x0000000000403e41: add byte ptr [rax], bh; test rax, rax; je 0x3e53; mov edi, 0x6cd0a0; call rax; 
0x000000000044ebcf: add byte ptr [rax], bh; test rax, rax; je 0x4ebe1; mov edi, 0x6cd720; call rax; 
0x000000000047d91f: add byte ptr [rax], bh; test rax, rax; je 0x7d931; mov edi, 0x6cc140; call rax; 
0x000000000047d947: add byte ptr [rax], bh; test rax, rax; je 0x7d959; mov edi, 0x6cc140; call rax; 
0x000000000047d9bd: add byte ptr [rax], bh; test rax, rax; je 0x7d9cf; mov edi, 0x6cc140; call rax; 
0x000000000047eee2: add byte ptr [rax], bh; test rax, rax; je 0x7eef6; mov rdi, qword ptr [rbp - 0x88]; call rax; 
0x000000000047f48a: add byte ptr [rax], bh; test rax, rax; je 0x7f500; mov edi, 0x6cc140; call rax; 
0x000000000049881f: add byte ptr [rax], bh; test rax, rax; je 0x98831; mov edi, 0x6cc140; call rax; 
0x000000000049884b: add byte ptr [rax], bh; test rax, rax; je 0x9885d; mov edi, 0x6cc140; call rax; 
0x00000000004c1f07: add byte ptr [rax], bl; int 0xf5; jmp rdx; 
0x00000000004c4c97: add byte ptr [rax], bl; mov ch, 0xf8; call qword ptr [rcx]; 
0x00000000004c1407: add byte ptr [rax], bl; pop rdi; cmc; jmp qword ptr [rax]; 
0x00000000004c8437: add byte ptr [rax], bl; ret 0xfffb; 
0x00000000004c4907: add byte ptr [rax], bl; ret 0xfffd; 
0x00000000004c8f37: add byte ptr [rax], bl; ret; 
0x00000000004c8e57: add byte ptr [rax], bl; test ah, bh; call qword ptr [rax]; 
0x00000000004c4cc7: add byte ptr [rax], ch; mov ch, 0xf8; call qword ptr [rcx]; 
0x00000000004bf537: add byte ptr [rax], ch; xor dh, ah; call qword ptr [rdx]; 
0x00000000004c3947: add byte ptr [rax], cl; adc al, 0xf8; call qword ptr [rbx]; 
0x0000000000426b8b: add byte ptr [rax], cl; add byte ptr [rax + rcx + 0x48], dh; lea eax, dword ptr [rip + 0x8449]; ret; 
0x000000000044f9dd: add byte ptr [rax], cl; add byte ptr [rcx + rcx*4 - 0x11], cl; mov eax, r15d; syscall; 
0x000000000041b5d1: add byte ptr [rax], cl; add byte ptr [rdi + 0x4a34a0], bh; mov eax, 2; syscall; 
0x0000000000442eb0: add byte ptr [rax], cl; add byte ptr [rdi + 0x4a58bd], bh; mov eax, ebx; syscall; 
0x0000000000442edf: add byte ptr [rax], cl; add byte ptr [rdi + 0x4a58c8], bh; mov eax, ebx; syscall; 
0x000000000044ffe2: add byte ptr [rax], cl; add byte ptr [rdi + 0x4a7820], bh; mov eax, ecx; syscall; 
0x000000000044024b: add byte ptr [rax], cl; add byte ptr [rsi + 0x4a5790], bh; mov rdi, -0x64; mov eax, 0x101; syscall; 
0x0000000000440450: add byte ptr [rax], cl; add byte ptr [rsi + 0x4a5790], bh; movsxd rdi, dword ptr [rsp + 0x10]; mov eax, 0x101; syscall; 
0x000000000047f4f5: add byte ptr [rax], cl; je 0x7f55d; pop rbx; ret; 
0x00000000004c44e7: add byte ptr [rax], cl; jne 0xc44e3; call qword ptr [rcx]; 
0x00000000004c8cb7: add byte ptr [rax], cl; jns 0xc8cae; jmp qword ptr [rsi]; 
0x00000000004c4be7: add byte ptr [rax], cl; mov al, 0xf8; call qword ptr [rdi]; 
0x000000000049b67e: add byte ptr [rax], cl; mov byte ptr [rip + 0x2324d9], 8; ret; 
0x000000000049b677: add byte ptr [rax], cl; mov byte ptr [rip + 0x2324df], 8; mov byte ptr [rip + 0x2324d9], 8; ret; 
0x000000000049b670: add byte ptr [rax], cl; mov byte ptr [rip + 0x2324e5], 8; mov byte ptr [rip + 0x2324df], 8; mov byte ptr [rip + 0x2324d9], 8; ret; 
0x000000000049b669: add byte ptr [rax], cl; mov byte ptr [rip + 0x2324eb], 8; mov byte ptr [rip + 0x2324e5], 8; mov byte ptr [rip + 0x2324df], 8; mov byte ptr [rip + 0x2324d9], 8; ret; 
0x0000000000473131: add byte ptr [rax], cl; or dword ptr [rax], eax; mov eax, ecx; sub rsp, 0x98; syscall; 
0x0000000000472fc1: add byte ptr [rax], cl; or dword ptr [rax], eax; movsxd rdi, edi; mov eax, ecx; sub rsp, 0x98; syscall; 
0x00000000004c1257: add byte ptr [rax], cl; pop rbp; cmc; call qword ptr [rsi]; 
0x000000000049b685: add byte ptr [rax], cl; ret; 
0x00000000004c8107: add byte ptr [rax], cl; xchg eax, esp; std; call rcx; 
0x00000000004c8cff: add byte ptr [rax], dh; cmp al, 0xfc; jmp qword ptr [rdx]; 
0x00000000004c4cdf: add byte ptr [rax], dh; mov ch, 0xf8; call qword ptr [rsi]; 
0x00000000004c117f: add byte ptr [rax], dh; pop rdx; cmc; jmp qword ptr [rsi + 2]; 
0x00000000004a40cf: add byte ptr [rax], dh; wait; clc; call qword ptr [rax - 0x64]; 
0x000000000047d946: add byte ptr [rax], dil; test rax, rax; je 0x7d959; mov edi, 0x6cc140; call rax; 
0x000000000047d2c6: add byte ptr [rax], dl; add byte ptr [rax], al; mov rsi, rsp; syscall; 
0x00000000004c062f: add byte ptr [rax], dl; and esi, ebp; call qword ptr [rsi + 4]; 
0x00000000004c9d2f: add byte ptr [rax], dl; cmp bh, ch; jmp qword ptr [rdi]; 
0x00000000004c4c7f: add byte ptr [rax], dl; mov ch, 0xf8; call qword ptr [rdi]; 
0x0000000000426805: add byte ptr [rax], dl; mov edx, 0x426230; mov eax, 0x43e180; cmove rax, rdx; ret; 
0x00000000004c648f: add byte ptr [rax], dl; mov edx, edi; jmp qword ptr [rsi]; 
0x00000000004c158f: add byte ptr [rax], dl; movsxd rsi, ebp; call qword ptr [rsi]; 
0x00000000004a67c7: add byte ptr [rax], dl; ret 0x44; 
0x00000000004c7e7f: add byte ptr [rax], dl; test bl, bh; jmp rsi; 
0x00000000004c9970: add byte ptr [rax], r8b; add ah, dh; test al, 0; add byte ptr [rax + 0x32], cl; std; call rsp; 
0x00000000004c8928: add byte ptr [rax], r8b; add byte ptr [rax + rbx*4 + 0x27900000], ch; cld; call qword ptr [rbp + 5]; 
0x00000000004c68f0: add byte ptr [rax], r8b; add byte ptr [rax + rdi*2], dh; add byte ptr [rax - 0x64], bh; cli; jmp rdi; 
0x00000000004735ac: add byte ptr [rax], r8b; add byte ptr [rbp + 0x53], dl; mov rbx, rsi; sub rsp, 8; syscall; 
0x00000000004c0628: add byte ptr [rax], r8b; add byte ptr [rbp + rdx + 0x23100000], ch; cmc; call qword ptr [rsi + 4]; 
0x00000000004c55c0: add byte ptr [rax], r8b; add byte ptr [rbp], al; add al, cl; jl 0xc55c4; call rdx; 
0x00000000004c5bb8: add byte ptr [rax], r8b; add byte ptr [rbx + rbp*2], bh; add byte ptr [rax], al; add byte ptr [rbp - 6], ah; call qword ptr [rsi]; 
0x00000000004c0bf0: add byte ptr [rax], r8b; add byte ptr [rbx + rbx], dh; add byte ptr [rax + 0x42], bl; cmc; call qword ptr [rcx + 2]; 
0x00000000004c6be0: add byte ptr [rax], r8b; add byte ptr [rbx + rdi*2], ah; add al, cl; ret; 
0x00000000004c51c8: add byte ptr [rax], r8b; add byte ptr [rcx], cl; add byte ptr [rax + 5], ah; stc; call qword ptr [rsi + 0x2b]; 
0x00000000004c76d0: add byte ptr [rax], r8b; add byte ptr [rsi + rax*4], dl; add al, ch; sti; jmp qword ptr [rbp + 1]; 
0x00000000004799ad: add byte ptr [rax], r8b; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000480dcd: add byte ptr [rax], r8b; add rsp, 8; ret; 
0x0000000000424315: add byte ptr [rax], r8b; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000042419d: add byte ptr [rax], r8b; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000049828d: add byte ptr [rax], r8b; call rbx; 
0x000000000043e6fd: add byte ptr [rax], r8b; cmp dl, 8; jb 0x3e710; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x000000000043fedd: add byte ptr [rax], r8b; cmp dword ptr [rip + 0x296935], 0; jne 0x3fefd; mov eax, 1; syscall; 
0x000000000043fe7d: add byte ptr [rax], r8b; cmp dword ptr [rip + 0x296995], 0; jne 0x3fe9d; mov eax, 0; syscall; 
0x00000000004434bd: add byte ptr [rax], r8b; cmp eax, -1; jne 0x434b8; xor eax, eax; leave; ret; 
0x00000000004422f5: add byte ptr [rax], r8b; cmp qword ptr [r13 + 0x10], 0; jne 0x4181d; mov esi, 3; mov rdi, r13; call rbx; 
0x00000000004422d5: add byte ptr [rax], r8b; cmp qword ptr [r13 + 0x10], 0; jne 0x41d4a; mov esi, 3; mov rdi, r13; call rbx; 
0x0000000000442335: add byte ptr [rax], r8b; cmp qword ptr [r14 + 0x10], 0; jne 0x41841; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442395: add byte ptr [rax], r8b; cmp qword ptr [r14 + 0x10], 0; jne 0x41966; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442375: add byte ptr [rax], r8b; cmp qword ptr [r14 + 0x10], 0; jne 0x41abf; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442415: add byte ptr [rax], r8b; cmp qword ptr [r14 + 0x10], 0; jne 0x41d6e; mov esi, 3; mov rdi, r14; call rbx; 
0x00000000004423d5: add byte ptr [rax], r8b; cmp qword ptr [r14 + 0x10], 0; jne 0x41fec; mov esi, 3; mov rdi, r14; call rbx; 
0x00000000004423b5: add byte ptr [rax], r8b; cmp qword ptr [r14 + 0x10], 0; jne 0x42111; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442575: add byte ptr [rax], r8b; cmp qword ptr [r15 + 0x10], 0; jne 0x41861; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004425d5: add byte ptr [rax], r8b; cmp qword ptr [r15 + 0x10], 0; jne 0x418da; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442615: add byte ptr [rax], r8b; cmp qword ptr [r15 + 0x10], 0; jne 0x41986; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004425f5: add byte ptr [rax], r8b; cmp qword ptr [r15 + 0x10], 0; jne 0x419ff; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442535: add byte ptr [rax], r8b; cmp qword ptr [r15 + 0x10], 0; jne 0x41c7d; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442455: add byte ptr [rax], r8b; cmp qword ptr [r15 + 0x10], 0; jne 0x41d8e; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442435: add byte ptr [rax], r8b; cmp qword ptr [r15 + 0x10], 0; jne 0x41e07; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004424f5: add byte ptr [rax], r8b; cmp qword ptr [r15 + 0x10], 0; jne 0x41f2c; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004424d5: add byte ptr [rax], r8b; cmp qword ptr [r15 + 0x10], 0; jne 0x4200c; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004424b5: add byte ptr [rax], r8b; cmp qword ptr [r15 + 0x10], 0; jne 0x42085; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442475: add byte ptr [rax], r8b; cmp qword ptr [r15 + 0x10], 0; jne 0x421aa; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004c3f45: add byte ptr [rax], r8b; cwde; cmp al, bh; call qword ptr [rax]; 
0x000000000043c3ad: add byte ptr [rax], r8b; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, qword ptr [rdi + 2]; ret; 
0x00000000004736cd: add byte ptr [rax], r8b; mov eax, 0x3f; syscall; 
0x00000000004736cd: add byte ptr [rax], r8b; mov eax, 0x3f; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x000000000047d535: add byte ptr [rax], r8b; mov eax, 1; ret; 
0x000000000049d78d: add byte ptr [rax], r8b; mov eax, 2; add rsp, 8; ret; 
0x000000000049d77d: add byte ptr [rax], r8b; mov eax, 4; add rsp, 8; ret; 
0x000000000043bd9d: add byte ptr [rax], r8b; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x000000000043fdb5: add byte ptr [rax], r8b; mov rax, -0x30; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000473975: add byte ptr [rax], r8b; mov rax, -0x30; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000046d305: add byte ptr [rax], r8b; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000046d16d: add byte ptr [rax], r8b; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x000000000046c87d: add byte ptr [rax], r8b; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000041379d: add byte ptr [rax], r8b; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000417a5d: add byte ptr [rax], r8b; mov rax, qword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000041566d: add byte ptr [rax], r8b; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000413a8d: add byte ptr [rax], r8b; mov rax, qword ptr [rdi + 8]; cmp rax, qword ptr [rdi + 0x10]; jae 0x13aa0; movzx eax, byte ptr [rax]; ret; 
0x000000000043c41d: add byte ptr [rax], r8b; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, qword ptr [rdi + 8]; ret; 
0x000000000043bdfd: add byte ptr [rax], r8b; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000004505bd: add byte ptr [rax], r8b; mov rdx, -0x30; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000043bddd: add byte ptr [rax], r8b; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000041e815: add byte ptr [rax], r8b; mov rsi, qword ptr [rsp + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x000000000043dc8d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000043dc7d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000043dc6d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000043dc5d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000043dc4d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000043dc3d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x00000000004477dd: add byte ptr [rax], r8b; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000435923: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004501c3: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x00000000004501e3: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x0000000000450323: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x000000000049cf23: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000435ab3: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000435a33: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000048c785: add byte ptr [rax], r8b; pop rbx; ret; 
0x000000000049d0ed: add byte ptr [rax], r8b; ret; 
0x0000000000416655: add byte ptr [rax], r8b; sub r8, rcx; lea eax, dword ptr [r8 - 1]; ret; 
0x000000000046d475: add byte ptr [rax], r8b; sub r8, rcx; sar r8, 2; lea eax, dword ptr [r8 - 1]; ret; 
0x0000000000421d2d: add byte ptr [rax], r8b; test edi, edi; je 0x21d40; mov eax, 0x16; ret; 
0x000000000049acd5: add byte ptr [rax], r8b; xor eax, eax; add rsp, 8; ret; 
0x0000000000413e0d: add byte ptr [rax], r8b; xor eax, eax; ret; 
0x00000000004408d5: add byte ptr [rbp + 0x14490fc0], al; and al, 0x48; add esp, 0x18; mov eax, edx; ret; 
0x000000000043fe86: add byte ptr [rbp + 0x14], dh; mov eax, 0; syscall; 
0x0000000000473996: add byte ptr [rbp + 0x14], dh; mov eax, 0x14; syscall; 
0x000000000043fee6: add byte ptr [rbp + 0x14], dh; mov eax, 1; syscall; 
0x000000000043fe26: add byte ptr [rbp + 0x14], dh; mov eax, 2; syscall; 
0x0000000000473806: add byte ptr [rbp + 0x14], dh; mov eax, 3; syscall; 
0x0000000000401192: add byte ptr [rbp + 0x20], dh; nop dword ptr [rax]; call qword ptr [rbx + 0x10]; 
0x0000000000401191: add byte ptr [rbp + 0x20], sil; nop dword ptr [rax]; call qword ptr [rbx + 0x10]; 
0x000000000049f62f: add byte ptr [rbp + 0x31], al; idiv byte ptr [rax]; test rax, rax; je 0x9f644; mov edi, 0x6cc100; call rax; 
0x00000000004796d8: add byte ptr [rbp + 0x31], al; sar byte ptr [rdx + 1], cl; mov esi, 0x81; add rdi, 0x1c; mov eax, 0xca; syscall; 
0x000000000046ffd7: add byte ptr [rbp + 0x39440750], cl; ret 0x8d0f; 
0x000000000041bcc1: add byte ptr [rbp + 0x39], cl; ret 0x8948; 
0x000000000041be3e: add byte ptr [rbp + 0x39], cl; ret 0x976; 
0x00000000004811ec: add byte ptr [rbp + 0x39], dh; xor eax, eax; add rsp, 0x68; ret; 
0x0000000000470213: add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; pop r14; pop r15; ret; 
0x000000000045d02e: add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; pop r14; ret; 
0x000000000045d0fe: add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; ret; 
0x000000000040070a: add byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x0000000000498060: add byte ptr [rbp + 0x480375d2], al; mov dword ptr [rbx], eax; add rsp, 0x10; pop rbx; ret; 
0x0000000000415a82: add byte ptr [rbp + 0x48497ed2], al; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x000000000040409f: add byte ptr [rbp + 0x4d1c74c0], al; movsxd rsp, esp; mov rdi, r12; mov eax, 3; syscall; 
0x00000000004735af: add byte ptr [rbp + 0x53], dl; mov rbx, rsi; sub rsp, 8; syscall; 
0x000000000047d307: add byte ptr [rbp + 0x6348ff59], cl; ret; 
0x00000000004c163b: add byte ptr [rbp + 0x64200000], bh; cmc; call qword ptr [rdx]; 
0x000000000041b5cc: add byte ptr [rbp + 0x64], dh; mov esi, 0x80000; mov edi, 0x4a34a0; mov eax, 2; syscall; 
0x0000000000481072: add byte ptr [rbp + 0xb], dh; add rsp, 0x38; ret; 
0x000000000044d19c: add byte ptr [rbp + 0xd840fd2], al; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; rol byte ptr [rcx + rcx*2], 0x39; ret; 
0x000000000047d814: add byte ptr [rbp + 0xd], dh; mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004c0520: add byte ptr [rbp + 0xe], cl; adc byte ptr [rdx + rax - 0x79e7f1bf], cl; add eax, dword ptr [rcx + 0xe]; and byte ptr [rbx + 0xa470204], al; ret; 
0x000000000048a9af: add byte ptr [rbp + 0xf], cl; lodsd eax, dword ptr [rsi]; ret; 
0x000000000048a89f: add byte ptr [rbp + 0xf], cl; movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x000000000042783f: add byte ptr [rbp + 7], dh; lea rax, qword ptr [rip + 0x67]; ret; 
0x0000000000421fd3: add byte ptr [rbp + 7], dh; lea rax, qword ptr [rip + 3]; ret; 
0x0000000000427892: add byte ptr [rbp + 7], dh; lea rax, qword ptr [rip + 4]; ret; 
0x0000000000426b79: add byte ptr [rbp + 8], dh; lea rax, qword ptr [rip + 0x1d]; ret; 
0x000000000047cbc6: add byte ptr [rbp + 8], dh; mov rax, qword ptr [rip + 0x259800]; ret; 
0x0000000000481114: add byte ptr [rbp + 9], dh; xor eax, eax; add rsp, 0x48; ret; 
0x000000000040107d: add byte ptr [rbp + rax - 0x18], dh; cmp esp, dword ptr [rdi]; add al, 0; leave; ret; 
0x00000000004c7613: add byte ptr [rbp + rax*4 + 0x28a80000], dl; sti; jmp qword ptr [rcx]; 
0x00000000004c7633: add byte ptr [rbp + rax*4 + 0x28f80000], dh; sti; call rdx; 
0x00000000004c1e13: add byte ptr [rbp + rbp - 0x37b80000], dl; cmc; call qword ptr [rbx]; 
0x0000000000481334: add byte ptr [rbp + rbp*8 + 0x48], dh; mov edi, dword ptr [rsp + 0x18]; call 0x1ea60; add rsp, 0x48; ret; 
0x00000000004c4e33: add byte ptr [rbp + rbx*2 - 0x48580000], dh; clc; call qword ptr [rcx + 0x1c]; 
0x00000000004c8e23: add byte ptr [rbp + rbx*4 + 0x64780000], ah; cld; call qword ptr [rax]; 
0x00000000004aee77: add byte ptr [rbp + rcx + 0xdbf0000], bh; add byte ptr [rax], al; ret 0xd; 
0x00000000004c3e0b: add byte ptr [rbp + rcx*2 - 0x33600000], cl; std; jmp qword ptr [rdx]; 
0x0000000000431526: add byte ptr [rbp + rcx*4 + 0x1d], cl; and ch, byte ptr [rip + 0x63490007]; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043146f: add byte ptr [rbp + rcx*4 + 0x1d], cl; fldcw word ptr [rip + 0x63490007]; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430ddf: add byte ptr [rbp + rcx*4 + 0x1d], cl; imul esi, dword ptr [rdi + rax], 0x14634900; xchg eax, ebx; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004315bf: add byte ptr [rbp + rcx*4 + 0x1d], cl; mov dword ptr [rdi + rax], ebp; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004336ba: add byte ptr [rbp + rcx*4 + 0x1d], cl; or rax, 0x63490007; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431c4f: add byte ptr [rbp + rcx*4 + 0x1d], cl; stc; and eax, 0x63490007; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000045d325: add byte ptr [rbp + rcx*4 + 0x2c], cl; test dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000046d87e: add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x18; mov rdi, r12; call rbx; 
0x000000000049dd53: add byte ptr [rbp + rcx*4 + 5], cl; cmc; jmp qword ptr [rdx]; 
0x00000000004c062b: add byte ptr [rbp + rdx + 0x23100000], ch; cmc; call qword ptr [rsi + 4]; 
0x00000000004c6613: add byte ptr [rbp + rsi*2 - 0x70e80000], dl; cli; jmp rdx; 
0x00000000004433a1: add byte ptr [rbp - 0x14], dh; mov eax, r11d; and eax, 0xc; cmp eax, 4; je 0x433b0; ret; 
0x000000000047154d: add byte ptr [rbp - 0x16738a40], al; imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000044333e: add byte ptr [rbp - 0x19], dh; and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x4334c; ret; 
0x000000000049f874: add byte ptr [rbp - 0x1f], dh; pop rbx; ret; 
0x000000000043f70a: add byte ptr [rbp - 0x35], dh; lea rsi, qword ptr [rsp + 0x10]; mov edi, 1; mov eax, 0xe5; syscall; 
0x00000000004431ca: add byte ptr [rbp - 0x3dbbf040], al; ret; 
0x000000000047386b: add byte ptr [rbp - 0x3f6bf040], al; add rsp, 0x48; movzx eax, al; ret; 
0x00000000004af123: add byte ptr [rbp - 0x3ffffff1], bh; sldt word ptr [rax]; ret; 
0x0000000000416d5f: add byte ptr [rbp - 0x44], dh; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004ae0c3: add byte ptr [rbp - 0x48000000], dh; add byte ptr [rax], al; add byte ptr [rax + rax + 0xbf0000], bh; add byte ptr [rax], al; ret 0; 
0x000000000043eed2: add byte ptr [rbp - 0x63], dh; lea eax, dword ptr [rcx*4]; pop rbx; and eax, 0x3fc00; ret; 
0x0000000000440a84: add byte ptr [rbp - 0x69], dh; pop rbx; pop rbp; pop r12; mov esi, 3; jmp rax; 
0x0000000000453439: add byte ptr [rbp - 0x75], cl; jl 0x53462; and byte ptr [rax + 1], cl; ret; 
0x000000000045d6b9: add byte ptr [rbp - 0x75], cl; jl 0x5d6e2; and byte ptr [rax + 1], cl; ret; 
0x000000000046a7df: add byte ptr [rbp - 0x76bb7ffc], cl; ret 0xf229; 
0x0000000000478ae9: add byte ptr [rbp - 0x77], cl; mov bh, 8; ret 0x6c; 
0x000000000041c80e: add byte ptr [rbp - 0x77cfdb9], cl; add al, 0x74; and al, 0x89; ret 0xb48b; 
0x000000000043eb8c: add byte ptr [rbp - 0x7b], al; fild dword ptr [rcx + 0xf]; xchg eax, esp; ret 0xfe83; 
0x0000000000478dcf: add byte ptr [rbp - 0x7b], cl; in al, 0x75; or byte ptr [rbp + 0x7b850fc0], al; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004586c5: add byte ptr [rbp - 0x7b], cl; in al, 0xf; test byte ptr [rcx - 0x77000000], dh; ret 0xe283; 
0x000000000041ff12: add byte ptr [rbp - 0x7b], cl; in al, 0xf; xchg eax, esp; ret 0x8548; 
0x00000000004404d4: add byte ptr [rbp - 0x7c], al; in eax, dx; je 0x404e6; movsxd rdi, dword ptr [rsp + 0x10]; mov eax, 3; syscall; 
0x00000000004630ff: add byte ptr [rbp - 0x7cb776f4], cl; ret 0x8d01; 
0x000000000044e0af: add byte ptr [rbp - 0x7cf78140], al; call 0x84869bb; pop rbx; ret; 
0x0000000000478e68: add byte ptr [rbp - 0x7f7bf037], al; add al, byte ptr [rax]; add byte ptr [rbx + 0x25d9e115], cl; add bh, dh; ret 0x804; 
0x00000000004c5bc0: add byte ptr [rbp - 6], ah; call qword ptr [rsi]; 
0x00000000004a4988: add byte ptr [rbp - 7], dh; call qword ptr [rax]; 
0x00000000004a4988: add byte ptr [rbp - 7], dh; call qword ptr [rax]; jne 0xa4988; jmp qword ptr [rax]; 
0x00000000004c55c3: add byte ptr [rbp], al; add al, cl; jl 0xc55c4; call rdx; 
0x000000000040f15f: add byte ptr [rbx + 0x13], dh; mov rbp, rax; call qword ptr [rbp]; 
0x0000000000429d59: add byte ptr [rbx + 0x148b8104], cl; xchg eax, ecx; sub eax, edx; ret; 
0x000000000043efb5: add byte ptr [rbx + 0x157401f8], al; cmp eax, 2; je 0x3efc8; xor eax, eax; ret; 
0x0000000000499d75: add byte ptr [rbx + 0x233cc405], cl; add byte ptr [rcx - 0x75], al; adc bh, byte ptr [rcx]; ret 0x850f; 
0x000000000047d528: add byte ptr [rbx + 0x24ec400d], al; add byte ptr [rcx], al; pop rbx; ret; 
0x000000000043eedb: add byte ptr [rbx + 0x25], bl; add ah, bh; add eax, dword ptr [rax]; ret; 
0x0000000000478e70: add byte ptr [rbx + 0x25d9e115], cl; add bh, dh; ret 0x804; 
0x000000000047398f: add byte ptr [rbx + 0x262e853d], al; add byte ptr [rax], al; jne 0x739ad; mov eax, 0x14; syscall; 
0x0000000000411658: add byte ptr [rbx + 0x275fff8], al; pop rbx; ret; 
0x00000000004431bf: add byte ptr [rbx + 0x2936fa05], cl; add byte ptr [rdx + 0x64], bh; test eax, eax; cmove eax, edx; ret; 
0x000000000043fedf: add byte ptr [rbx + 0x2969353d], al; add byte ptr [rax], al; jne 0x3fefd; mov eax, 1; syscall; 
0x000000000043fe7f: add byte ptr [rbx + 0x2969953d], al; add byte ptr [rax], al; jne 0x3fe9d; mov eax, 0; syscall; 
0x000000000043fe1f: add byte ptr [rbx + 0x2969f53d], al; add byte ptr [rax], al; jne 0x3fe3d; mov eax, 2; syscall; 
0x00000000004172c7: add byte ptr [rbx + 0x2b62d505], al; add byte ptr [rcx], al; ret; 
0x000000000043c3ff: add byte ptr [rbx + 0x3568b0e], cl; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, qword ptr [rdi + 6]; ret; 
0x000000000043bdcf: add byte ptr [rbx + 0x3568b0e], cl; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x0000000000495c31: add byte ptr [rbx + 0x3950245c], cl; ret; 
0x000000000049f2ff: add byte ptr [rbx + 0x3b801ff], al; add byte ptr [rax], al; add byte ptr [rsi + rax - 0xd], dh; ret; 
0x000000000044345e: add byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop rbp; ret; 
0x00000000004100cb: add byte ptr [rbx + 0x42894c03], cl; or byte ptr [rbx - 0x76fefbbe], al; ret 0xe281; 
0x000000000045b0fd: add byte ptr [rbx + 0x44], bl; mov eax, eax; pop rbp; pop r12; ret; 
0x000000000043c3cf: add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; lea rax, qword ptr [rdi + 4]; ret; 
0x000000000043bdaf: add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x000000000042fbd0: add byte ptr [rbx + 0x478bfc4e], cl; cld; cmp ecx, eax; jne 0x305ef; xor eax, eax; ret; 
0x000000000043b8df: add byte ptr [rbx + 0x48028901], cl; lea eax, dword ptr [rdx + 3]; ret; 
0x000000000041c78f: add byte ptr [rbx + 0x488d2404], cl; add dword ptr [rcx], eax; ror byte ptr [rax - 0x73], 0x54; ret; 
0x000000000043ec42: add byte ptr [rbx + 0x48], bl; add eax, 1; pop rbp; pop r12; pop r13; ret; 
0x000000000044fb8f: add byte ptr [rbx + 0x48], dl; mov eax, dword ptr [rdi + 0x20]; mov rbx, rdi; test rax, rax; je 0x4fb9f; call rax; 
0x0000000000415b06: add byte ptr [rbx + 0x48], dl; mov ebx, edi; call qword ptr [rax + 0x20]; 
0x0000000000420d07: add byte ptr [rbx + 0x4c], bl; mov esi, esp; pop rbp; pop r12; jmp rax; 
0x0000000000432e1f: add byte ptr [rbx + 0x4e8bf956], cl; cld; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432c1f: add byte ptr [rbx + 0x4e8bfa56], cl; cld; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432a1f: add byte ptr [rbx + 0x4e8bfb56], cl; cld; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043df3b: add byte ptr [rbx + 0x4e8bfc47], cl; cld; cmp eax, ecx; jne 0x3e150; xor eax, eax; ret; 
0x000000000042fe32: add byte ptr [rbx + 0x4e8bfc47], cl; cld; cmp ecx, eax; jne 0x305ef; xor eax, eax; ret; 
0x000000000043592f: add byte ptr [rbx + 0x5789fc56], cl; cld; ret; 
0x00000000004799a6: add byte ptr [rbx + 0x5d], bl; jmp rax; 
0x000000000041f217: add byte ptr [rbx + 0x5d], bl; pop r12; jmp rax; 
0x0000000000413061: add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x0000000000411fe5: add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000400607: add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000004004cf: add byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004c1403: add byte ptr [rbx + 0x5f180000], al; cmc; jmp qword ptr [rax]; 
0x00000000004c141b: add byte ptr [rbx + 0x5f200000], bl; cmc; call qword ptr [rsi]; 
0x00000000004c1433: add byte ptr [rbx + 0x5f680000], dh; cmc; jmp qword ptr [rdi + 1]; 
0x000000000049f30f: add byte ptr [rbx + 0x67502e6], al; mov eax, 8; ret; 
0x000000000049ecef: add byte ptr [rbx + 0x75c08507], cl; or dh, bl; ret; 
0x0000000000410c4f: add byte ptr [rbx + 0x78920c8], al; mov rax, -0x30; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000466675: add byte ptr [rbx + 0xa880], cl; add byte ptr [rax + 0x39], cl; ret 0x820f; 
0x000000000049a590: add byte ptr [rbx + 0xc], dh; mov rdx, qword ptr [rip + 0x23359e]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000435fdf: add byte ptr [rbx + 0xe8b0156], cl; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000435f6f: add byte ptr [rbx + 0xe8b0256], cl; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000435eff: add byte ptr [rbx + 0xe8b0356], cl; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000045015a: add byte ptr [rbx + rax - 0xd], dh; ret; 
0x00000000004bf383: add byte ptr [rbx + rax], al; add byte ptr [rax], al; cmp byte ptr [rcx], ch; hlt; jmp qword ptr [rbx]; 
0x00000000004c5bbb: add byte ptr [rbx + rbp*2], bh; add byte ptr [rax], al; add byte ptr [rbp - 6], ah; call qword ptr [rsi]; 
0x00000000004c4c23: add byte ptr [rbx + rbx*2 - 0x39a80000], ah; std; call qword ptr [rbx]; 
0x00000000004c4be3: add byte ptr [rbx + rbx*2], ah; add byte ptr [rax], cl; mov al, 0xf8; call qword ptr [rdi]; 
0x00000000004c0bf3: add byte ptr [rbx + rbx], dh; add byte ptr [rax + 0x42], bl; cmc; call qword ptr [rcx + 2]; 
0x000000000046bf42: add byte ptr [rbx + rcx + 0x5b], dh; pop rbp; pop r12; ret; 
0x00000000004bfc3b: add byte ptr [rbx + rcx - 0xa400000], bh; hlt; call qword ptr [rbx]; 
0x0000000000473106: add byte ptr [rbx + rcx*4 + 0x32], ah; syscall; 
0x000000000047dd32: add byte ptr [rbx + rcx*4 + 0x45], al; test byte ptr [rax - 0x77], cl; ret; 
0x000000000049e4f5: add byte ptr [rbx + rcx*4 + 0x4d], cl; sbb byte ptr [rbp + 0x31], al; ror byte ptr [rbp - 0x75], 0x51; or byte ptr [rbp + 0x39], cl; ret 0x4776; 
0x000000000048be77: add byte ptr [rbx + rcx*4 + 0x57], cl; or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x0000000000499f97: add byte ptr [rbx + rcx*4 + 0x57], cl; or byte ptr [rcx + 1], cl; ret 0x894c; 
0x00000000004c7c2b: add byte ptr [rbx + rcx*4 + 0x5eb00000], ch; sti; jmp qword ptr [rdx]; 
0x00000000004038da: add byte ptr [rbx + rcx*4 + 0x68], cl; sub byte ptr [rax], bh; test rax, rax; je 0x38fa; mov edi, 0x6ccfe0; call rax; 
0x00000000004604a6: add byte ptr [rbx + rcx*4 - 0x63], cl; sub bh, 0xff; dec dword ptr [rcx + 0x39]; ret; 
0x00000000004609ff: add byte ptr [rbx + rcx*4 - 0x73], al; sub bh, 0xff; dec dword ptr [rax - 0x77]; ret 0xb848; 
0x000000000041a46d: add byte ptr [rbx + rdi + 0x25], cl; ret; 
0x00000000004c6be3: add byte ptr [rbx + rdi*2], ah; add al, cl; ret; 
0x000000000044ecca: add byte ptr [rbx + rdx + 0x49], dh; mov dword ptr [rsp], eax; mov rax, qword ptr [rbp*8 + 0x4a6e00]; test rax, rax; je 0x4ece0; call rax; 
0x00000000004611c8: add byte ptr [rbx - 0x106f43], al; call qword ptr [rax]; 
0x000000000049ce9f: add byte ptr [rbx - 0x118af706], al; mov rax, qword ptr [rax]; add rsp, 8; ret; 
0x0000000000452f4e: add byte ptr [rbx - 0x1e], cl; mov rdx, r12; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x00000000004191f5: add byte ptr [rbx - 0x377cfbb9], cl; add al, byte ptr [rbx - 0x76b7fe38]; pop r8; mov dword ptr [rdi + 4], eax; ret; 
0x00000000004706ca: add byte ptr [rbx - 0x38b7cf18], al; ret; 
0x00000000004115ef: add byte ptr [rbx - 0x3b7cb7fe], cl; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004153db: add byte ptr [rbx - 0x3fea74f5], cl; sub dword ptr [rbx], 0x1d894800; movsd dword ptr [rdi], dword ptr [rsi]; sub dword ptr [rbx], 0x83c88900; ret 0x2501; 
0x000000000045eb4e: add byte ptr [rbx - 0x4af43], al; call qword ptr [rbx + 0xf]; 
0x000000000045e96e: add byte ptr [rbx - 0x4db43], al; call qword ptr [rax]; 
0x000000000041577f: add byte ptr [rbx - 0x4f8b0008], al; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000043eca5: add byte ptr [rbx - 0x50f0fe40], al; ret 0x72e9; 
0x000000000043ec90: add byte ptr [rbx - 0x50f0fe40], al; ret 0xaf0f; 
0x000000000047d591: add byte ptr [rbx - 0x57fef1e], al; add dword ptr [rdi], ecx; xchg eax, edx; ret 0x8348; 
0x000000000047ddfe: add byte ptr [rbx - 0x57ffb1e], al; add dword ptr [rdi], ecx; xchg eax, edx; ret 0xb60f; 
0x000000000043f63d: add byte ptr [rbx - 0x5f40fc05], al; add byte ptr [rdi], cl; test dword ptr [rax + rax - 0x9cf0000], ecx; mov eax, 2; syscall; 
0x0000000000455f74: add byte ptr [rbx - 0x67b7df18], al; movzx eax, byte ptr [rax + 0x4b40e0]; mov rax, qword ptr [rax*8 + 0x4b3a20]; jmp rax; 
0x0000000000455fc5: add byte ptr [rbx - 0x67b7df18], al; movzx eax, byte ptr [rax + 0x4b40e0]; mov rax, qword ptr [rax*8 + 0x4b3b20]; jmp rax; 
0x00000000004580b5: add byte ptr [rbx - 0x67b7df18], al; movzx eax, byte ptr [rax + 0x4b40e0]; mov rax, qword ptr [rax*8 + 0x4b3c20]; jmp rax; 
0x0000000000456be8: add byte ptr [rbx - 0x67b7df18], al; movzx eax, byte ptr [rax + 0x4b40e0]; mov rax, qword ptr [rax*8 + 0x4b3f20]; jmp rax; 
0x000000000046d191: add byte ptr [rbx - 0x74b7ffb3], cl; push rax; and cl, ch; sar dh, 0xff; jmp qword ptr [rsi - 0x70]; 
0x000000000043b8ef: add byte ptr [rbx - 0x75fd76ff], cl; add al, 0x88; add al, 0x48; lea eax, dword ptr [rdx + 4]; ret; 
0x000000000043a12f: add byte ptr [rbx - 0x75fd76ff], cl; add al, 0x88; add al, 0x48; mov eax, edi; ret; 
0x000000000046d12f: add byte ptr [rbx - 0x76be69c4], cl; jl 0x6d0cc; add byte ptr [rax - 0x7d], cl; ret 0x4c01; 
0x000000000046b638: add byte ptr [rbx - 0x77], bl; rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x0000000000410e54: add byte ptr [rbx - 0x7af0fd03], al; ret 0; 
0x0000000000401914: add byte ptr [rbx - 0x7bf00008], al; in eax, 0; add byte ptr [rax], al; add rsp, 0x98; ret; 
0x000000000043dd96: add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x000000000040abff: add byte ptr [rbx - 0x7bf0fc08], al; or byte ptr [eax], al; add byte ptr [rbx - 0x7bf0fe08], al; ret 8; 
0x0000000000406f93: add byte ptr [rbx - 0x7bf0fc08], al; ret; 
0x000000000040abf6: add byte ptr [rbx - 0x7bf0fd08], al; movabs byte ptr [0x840f03f883000008], al; or byte ptr [eax], al; add byte ptr [rbx - 0x7bf0fe08], al; ret 8; 
0x000000000046b264: add byte ptr [rbx - 0x7bf0fd1e], al; ret 1; 
0x000000000040ac08: add byte ptr [rbx - 0x7bf0fe08], al; ret 8; 
0x0000000000443a80: add byte ptr [rbx - 0x7cbefe39], al; ret 0x4901; 
0x00000000004434bf: add byte ptr [rbx - 0xc8a0008], al; xor eax, eax; leave; ret; 
0x000000000041705e: add byte ptr [rbx - 0xd], bl; ret; 
0x00000000004a4a08: add byte ptr [rbx - 7], bh; jmp qword ptr [rax]; 
0x00000000004798b8: add byte ptr [rbx], al; add byte ptr [rax], al; lea rax, qword ptr [rax + rdx*4]; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x00000000004c93ab: add byte ptr [rbx], ch; add byte ptr [rax], al; mov al, 8; std; call qword ptr [rbx + 2]; 
0x000000000044fadf: add byte ptr [rcx + 0x29], cl; ror dword ptr [rcx + 1], 1; ret 0x854d; 
0x000000000047c14d: add byte ptr [rcx + 0x2c6d8], cl; add rsp, 0x140; pop rbx; ret; 
0x000000000041bbff: add byte ptr [rcx + 0x39], cl; ret 0x860f; 
0x00000000004824dd: add byte ptr [rcx + 0x39], cl; ret 0x87e; 
0x000000000046e10f: add byte ptr [rcx + 0x39], cl; ret; 
0x0000000000427416: add byte ptr [rcx + 0x39], cl; ror byte ptr [rdi + rcx + 0x47], 1; ret 0x894c; 
0x00000000004984de: add byte ptr [rcx + 0x3c8b48d8], cl; ret 0x87f6; 
0x0000000000401343: add byte ptr [rcx + 0x401d89c2], cl; ret; 
0x0000000000410659: add byte ptr [rcx + 0x415d5bd8], cl; pop rsp; ret; 
0x0000000000410062: add byte ptr [rcx + 0x415d5be8], cl; pop rsp; ret; 
0x000000000047dd6f: add byte ptr [rcx + 0x48b48d8], cl; ret 0x8b48; 
0x0000000000415f26: add byte ptr [rcx + 0x48d231d1], cl; mov eax, dword ptr [rax + 0x48]; jmp rax; 
0x000000000046d28c: add byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x000000000043077e: add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004040f3: add byte ptr [rcx + 0x63], cl; cld; mov eax, 3; syscall; 
0x000000000042effc: add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000043bc28: add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000049ada0: add byte ptr [rcx + 0x63], cl; or al, 0xb6; add rcx, r14; jmp rcx; 
0x000000000044f8d5: add byte ptr [rcx + 0x63], cl; std; mov r14d, 1; mov r13d, 1; mov eax, 3; syscall; 
0x000000000047392f: add byte ptr [rcx + 0xc], bh; mov eax, ecx; syscall; 
0x00000000004005d0: add byte ptr [rcx + 0xe], bh; mov rsi, rax; repe cmpsb byte ptr [rsi], byte ptr [rdi]; jne 0x5de; ret; 
0x000000000043eeb7: add byte ptr [rcx + 0xee8c1c8], cl; and eax, 0x3fc00; pop rbx; ret; 
0x0000000000441095: add byte ptr [rcx + 0xf], al; lahf; ret; 
0x0000000000415ba1: add byte ptr [rcx + 0xf], al; mov dh, 0x36; mov rdi, r12; lea rbx, qword ptr [r14 + 1]; call qword ptr [rax + 0x18]; 
0x000000000045df74: add byte ptr [rcx + 0xf], al; mov dh, 0x57; or al, 0x83; ret; 
0x000000000045def7: add byte ptr [rcx + 0xf], al; mov dh, 0x57; or al, 0xf6; ret 0xf08; 
0x0000000000477054: add byte ptr [rcx + 0xf], al; mov dh, 0x87; adc eax, 0x89000003; ret 0xe8c0; 
0x000000000041b8f7: add byte ptr [rcx + 0xf], al; xchg eax, ebp; ret; 
0x000000000047801e: add byte ptr [rcx + 0xf], al; xchg eax, esp; ret 0x8545; 
0x000000000049bf5f: add byte ptr [rcx + 1], cl; ret 0xde89; 
0x000000000043e49f: add byte ptr [rcx + 1], cl; ret; 
0x000000000049ce42: add byte ptr [rcx + 3], cl; adc al, 0; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x000000000042120a: add byte ptr [rcx + 9], al; ret; 
0x0000000000444e9a: add byte ptr [rcx + rbp - 0x3f], al; shl ecx, 3; shl eax, cl; pop rbx; pop rbp; ret; 
0x00000000004c9a23: add byte ptr [rcx + rbp*4 + 0x34980000], ah; std; jmp qword ptr [rcx]; 
0x000000000042d53f: add byte ptr [rcx + rcx*4 + 0x4f], cl; cmp bl, dh; ret; 
0x0000000000442ea5: add byte ptr [rcx + rcx*4 + 0x65], cl; mov eax, 0xc065894c; mov esi, 0x80000; mov edi, 0x4a58bd; mov eax, ebx; syscall; 
0x000000000046cb31: add byte ptr [rcx + rcx*4 - 0x11], cl; call 0x6da80; mov rax, qword ptr [r13 + 0xd8]; mov esi, ebx; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000441943: add byte ptr [rcx + rcx*4 - 0x11], cl; call rbx; 
0x000000000044f9df: add byte ptr [rcx + rcx*4 - 0x11], cl; mov eax, r15d; syscall; 
0x000000000046be24: add byte ptr [rcx + rcx*4 - 0x12], cl; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000453e41: add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, qword ptr [rbp - 0x4a8]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004983df: add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x0000000000441a77: add byte ptr [rcx + rcx*4 - 0x19], cl; call rbx; 
0x000000000046d95c: add byte ptr [rcx + rcx*4 - 0x19], cl; lea rdx, qword ptr [rsp + 0x18]; lea r9, qword ptr [rsp + 0x10]; call rbx; 
0x0000000000445f92: add byte ptr [rcx + rcx*4 - 0x19], cl; mov rax, qword ptr [rbp - 0x58]; call rax; 
0x00000000004545c7: add byte ptr [rcx + rcx*4 - 0x1e], cl; mov rsi, r8; mov qword ptr [rbp - 0x4a8], r8; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000454dde: add byte ptr [rcx + rcx*4 - 0x1e], cl; mov rsi, r8; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000046b5bb: add byte ptr [rcx + rcx*4 - 0x1e], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000412ecf: add byte ptr [rcx + rcx*4 - 0x1e], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x00000000004455bc: add byte ptr [rcx + rcx*4 - 0x1f], cl; push 0; mov rdx, rbp; mov rsi, qword ptr [rsp + 0x18]; mov r9, r14; call rbx; 
0x00000000004430c7: add byte ptr [rcx + rcx*4 - 0x20], al; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000004629e8: add byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000460ca9: add byte ptr [rcx + rcx*4 - 0x26], cl; mov qword ptr [rbp - 0x1078], r11; mov dword ptr [rbp - 0x1080], r9d; mov rsi, qword ptr [rbp - 0x1088]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000460b8c: add byte ptr [rcx + rcx*4 - 0x26], cl; mov qword ptr [rbp - 0x10a0], r11; mov rsi, qword ptr [rbp - 0x1088]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x00000000004569fc: add byte ptr [rcx + rcx*4 - 0x2e], cl; mov qword ptr [rbp - 0x4d0], r10; mov rsi, r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000457052: add byte ptr [rcx + rcx*4 - 0x2e], cl; mov qword ptr [rbp - 0x500], r10; mov rsi, r11; mov qword ptr [rbp - 0x4f0], r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000041b628: add byte ptr [rcx + rcx*4 - 0x31], cl; mov eax, 3; syscall; 
0x0000000000400465: add byte ptr [rcx + rcx*4 - 0x39], cl; mov eax, ebp; syscall; 
0x0000000000416228: add byte ptr [rcx + rcx*4 - 0x7f], cl; xor byte ptr [rcx], al; add byte ptr [rax], al; mov qword ptr [rdi + 0xa8], 0; ret; 
0x00000000004133ef: add byte ptr [rcx + rcx*4 - 0xa], cl; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x0000000000410922: add byte ptr [rcx + rcx*4 - 0xa], cl; mov rdi, rbx; sub rdx, r14; call qword ptr [rax + 0x70]; 
0x00000000004137fd: add byte ptr [rcx + rcx*4 - 0xe], cl; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x00000000004418ac: add byte ptr [rcx + rcx*4 - 1], cl; call rbx; 
0x00000000004418bb: add byte ptr [rcx + rcx*4 - 9], cl; call rbx; 
0x00000000004c799b: add byte ptr [rcx + rcx*4], bl; add byte ptr [rax], al; push rax; push rbx; sti; jmp rdi; 
0x00000000004c6a1b: add byte ptr [rcx + rdi*2 - 0x56d00000], bl; cli; jmp qword ptr [rbx + 2]; 
0x00000000004a4a2c: add byte ptr [rcx + rdi*8 - 1], bh; and byte ptr [rcx + rdi*8 - 1], bh; jl 0xa4a30; jmp qword ptr [rax + 0x7c]; 
0x00000000004c29c3: add byte ptr [rcx + rdi], al; add al, bl; test al, 0xf6; jmp qword ptr [rsi]; 
0x00000000004c823b: add byte ptr [rcx + rdx*4 - 0x6e800000], bh; sti; call qword ptr [rax]; 
0x00000000004c820b: add byte ptr [rcx + rdx*4 - 0x6eb00000], cl; sti; call qword ptr [rdx]; 
0x00000000004c81f3: add byte ptr [rcx + rdx*4], dh; add byte ptr [rax - 0x6f], bl; sti; call qword ptr [rax]; 
0x000000000046cb40: add byte ptr [rcx - 0x1076b322], cl; call qword ptr [rax + 0x18]; 
0x000000000049a14c: add byte ptr [rcx - 0x1976b317], cl; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x000000000046d3c1: add byte ptr [rcx - 0x2076b73a], cl; call qword ptr [rdx + 0x30]; 
0x000000000048793b: add byte ptr [rcx - 0x39], cl; ret 0xc001; 
0x0000000000484a83: add byte ptr [rcx - 0x39], cl; ret 0xfc01; 
0x0000000000481883: add byte ptr [rcx - 0x39], cl; ret 0xff81; 
0x000000000045bc74: add byte ptr [rcx - 0x39], cl; ret 0xffe0; 
0x0000000000478af0: add byte ptr [rcx - 0x39], cl; xchg dword ptr [rax], esp; ret 0x6c; 
0x0000000000460162: add byte ptr [rcx - 0x3f], cl; inc dword ptr [rdx]; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000044f8de: add byte ptr [rcx - 0x43], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 3; syscall; 
0x00000000004aee73: add byte ptr [rcx - 0x43fffff3], bh; or eax, 0xdbf0000; add byte ptr [rax], al; ret 0xd; 
0x000000000045041f: add byte ptr [rcx - 0x46], al; or byte ptr [rax], al; add byte ptr [rax], al; movsxd rdi, edi; mov eax, ecx; syscall; 
0x0000000000405d14: add byte ptr [rcx - 0x55551e], al; call rcx; 
0x000000000044a933: add byte ptr [rcx - 0x73], cl; add dword ptr [r8 + 0x39], r9d; ret; 
0x000000000044a950: add byte ptr [rcx - 0x73], cl; add r9b, byte ptr [r8 + 0x39]; ret; 
0x000000000044a96d: add byte ptr [rcx - 0x73], cl; add r9d, dword ptr [r8 + 0x39]; ret; 
0x0000000000465a90: add byte ptr [rcx - 0x73], cl; dec dword ptr [r8 + 0x39]; ret; 
0x0000000000499d7b: add byte ptr [rcx - 0x75], al; adc bh, byte ptr [rcx]; ret 0x850f; 
0x00000000004413af: add byte ptr [rcx - 0x75], cl; adc byte ptr [r8 - 0x7d], r9b; ret; 
0x000000000049e8d3: add byte ptr [rcx - 0x75], cl; jbe 0x9e8e0; mov rdx, qword ptr [r15]; mov rdi, rbp; call rbx; 
0x000000000040f0ff: add byte ptr [rcx - 0x75], cl; or byte ptr [r8 - 0x77], r9b; ret 0xc148; 
0x000000000046cb39: add byte ptr [rcx - 0x75], cl; test eax, ebx; add byte ptr [rax], al; add byte ptr [rcx - 0x1076b322], cl; call qword ptr [rax + 0x18]; 
0x000000000047dd67: add byte ptr [rcx - 0x75], cl; xchg eax, esp; and al, 0xb8; add al, byte ptr [rax]; add byte ptr [rcx + 0x48b48d8], cl; ret 0x8b48; 
0x0000000000443327: add byte ptr [rcx - 0x77], al; ret; 
0x0000000000403973: add byte ptr [rcx - 0x77], cl; int 0x48; test eax, eax; je 0x3731; mov edi, 0x6ccfe0; call rax; 
0x00000000004263b3: add byte ptr [rcx - 0x77], cl; ret; 
0x00000000004105f7: add byte ptr [rcx - 0x77], dh; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000413dea: add byte ptr [rcx - 0x7874b7f9], cl; fadd dword ptr [rax]; add byte ptr [rax], al; call qword ptr [rax + 0x48]; 
0x000000000049697a: add byte ptr [rcx - 0x7afaf038], cl; sal byte ptr [rbp - 0x24], cl; mov dword ptr fs:[0x2d0], eax; ret; 
0x0000000000463a69: add byte ptr [rcx - 0x7afcb730], cl; push -0x7c000006; ret 0x8908; 
0x0000000000411ec3: add byte ptr [rcx - 0x7cb768f4], cl; ret 0x4801; 
0x000000000045965e: add byte ptr [rcx - 0x7d], al; std; xor byte ptr [rdi], cl; xchg eax, esp; ret; 
0x00000000004469e7: add byte ptr [rcx - 0x7d], cl; ret 0x4901; 
0x000000000047557f: add byte ptr [rcx - 0x7d], cl; ret 0x4b30; 
0x000000000042359f: add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x0000000000420850: add byte ptr [rcx - 0x7d], cl; ret 0xe96e; 
0x000000000042216f: add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x0000000000444c77: add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000049cdd7: add byte ptr [rcx - 0x80], al; mov ecx, 0xdf; add byte ptr [rax + rsi*4 + 0x48], dh; add esp, 0x18; ret; 
0x000000000041abb9: add byte ptr [rcx - 0xa], al; ret 0xf01; 
0x000000000041abc3: add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x0000000000418caf: add byte ptr [rcx - 0xa], al; ret; 
0x0000000000496e31: add byte ptr [rcx - 0xb37b], cl; inc dword ptr [rcx - 0x77]; ret; 
0x00000000004033eb: add byte ptr [rcx - 0xc37b], cl; dec dword ptr [rdi]; test byte ptr [rbp + 4], ah; add byte ptr [rax], al; mov edi, 0x6cd720; call rbx; 
0x000000000049695a: add byte ptr [rcx - 0xcf68130], cl; ret; 
0x0000000000426bc2: add byte ptr [rcx - 9], cl; ret 1; 
0x0000000000426be8: add byte ptr [rcx - 9], cl; ret 2; 
0x0000000000444012: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, ebp; ret 0xc985; 
0x000000000049a53f: add byte ptr [rcx], al; add byte ptr [rax], al; xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x000000000044e775: add byte ptr [rcx], al; mov eax, 0; test rax, rax; je 0x4e788; mov edi, 0x6cd720; call rax; 
0x000000000047d52e: add byte ptr [rcx], al; pop rbx; ret; 
0x00000000004172cd: add byte ptr [rcx], al; ret; 
0x000000000047857a: add byte ptr [rcx], al; test rdx, rdx; je 0x78592; mov qword ptr [rsp], r8; lea rdi, qword ptr [rax + 0x6cc1e0]; call rdx; 
0x00000000004012dc: add byte ptr [rcx], bh; ret 0x860f; 
0x0000000000444dcc: add byte ptr [rcx], bh; ret; 
0x0000000000470ce9: add byte ptr [rcx], bh; ror dword ptr [rdi], -0x6c; ret; 
0x00000000004432df: add byte ptr [rcx], bh; sal byte ptr [rbp + 8], 1; nop; mov eax, 0xca; syscall; 
0x000000000045c3fc: add byte ptr [rcx], ch; ret 0xd089; 
0x00000000004c51cb: add byte ptr [rcx], cl; add byte ptr [rax + 5], ah; stc; call qword ptr [rsi + 0x2b]; 
0x0000000000410c5e: add byte ptr [rcx], cl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000401d15: add byte ptr [rcx], cl; add byte ptr [rax], al; mov qword ptr [rip + 0x2c9370], rax; xor eax, eax; ret; 
0x000000000048bff4: add byte ptr [rcx], cl; or edx, eax; mov dword ptr [rsp - 4], edx; movss xmm0, dword ptr [rsp - 4]; ret; 
0x00000000004142ba: add byte ptr [rcx], cl; ret 0x8948; 
0x000000000049eebf: add byte ptr [rcx], dh; fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000043f64b: add byte ptr [rcx], dh; idiv byte ptr [rax + 2]; syscall; 
0x0000000000495557: add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r14; ret; 
0x000000000040f3ec: add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x00000000004815a7: add byte ptr [rcx], dh; ror byte ptr [rax + 1], cl; ret 0xe974; 
0x0000000000413e2f: add byte ptr [rcx], dh; ror byte ptr [rax - 0x7b], 0xd2; jne 0x13e40; ret; 
0x000000000048c238: add byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rdi]; xchg eax, esp; ret 0xdaf7; 
0x000000000041cca9: add byte ptr [rcx], dh; ror byte ptr [rax - 0x7f], cl; sti; add byte ptr [rax - 0x6af0ff94], bh; ret 0x8348; 
0x000000000049a542: add byte ptr [rcx], dh; ror byte ptr [rax], cl; leave; cmove rax, rdx; ret; 
0x000000000044881e: add byte ptr [rcx], dh; ror byte ptr [rcx + 0x39], cl; ret 0x1e76; 
0x0000000000447a17: add byte ptr [rcx], dh; ror byte ptr [rcx + 0x39], cl; ret 0x2176; 
0x0000000000447e9e: add byte ptr [rcx], dh; ror byte ptr [rcx + 0x39], cl; ret 0x2876; 
0x000000000044d6ab: add byte ptr [rcx], dh; sal byte ptr [rcx], cl; idiv byte ptr [rdi + 0x4a6d28]; mov eax, ecx; syscall; 
0x0000000000414f64: add byte ptr [rcx], dh; sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], 0xdf; call qword ptr [rax + 0x58]; 
0x0000000000444deb: add byte ptr [rcx], dh; sar byte ptr [rcx], cl; ret; 
0x00000000004005a5: add byte ptr [rcx], dh; shr al, 0x93; ret; 
0x00000000004736c5: add byte ptr [rcx], dh; shr bl, 0xbe; nop word ptr [rax + rax]; mov eax, 0x3f; syscall; 
0x000000000040ff96: add byte ptr [rcx], dh; test byte ptr [rax - 0x77], 0xdf; call qword ptr [rax + 0x10]; 
0x000000000040193a: add byte ptr [rdi + 0x4a1e23], bh; mov eax, 2; syscall; 
0x00000000004019ab: add byte ptr [rdi + 0x4a1e2d], bh; mov eax, 2; syscall; 
0x00000000004120b4: add byte ptr [rdi + 0x4a2ac7], bh; mov eax, 2; syscall; 
0x00000000004a1c63: add byte ptr [rdi + 0x4a2e50], bh; call 0x17a80; add byte ptr [rax], al; sub rsp, 8; add rsp, 8; ret; 
0x00000000004a1c62: add byte ptr [rdi + 0x4a2e50], dil; call 0x17a80; add byte ptr [rax], al; sub rsp, 8; add rsp, 8; ret; 
0x000000000041b5d3: add byte ptr [rdi + 0x4a34a0], bh; mov eax, 2; syscall; 
0x0000000000442eb2: add byte ptr [rdi + 0x4a58bd], bh; mov eax, ebx; syscall; 
0x0000000000442ee1: add byte ptr [rdi + 0x4a58c8], bh; mov eax, ebx; syscall; 
0x000000000044ffe4: add byte ptr [rdi + 0x4a7820], bh; mov eax, ecx; syscall; 
0x000000000046fda2: add byte ptr [rdi + 0x4b5e18], bh; call 0x1f50; nop dword ptr [rax]; mov eax, 0xc9; syscall; 
0x000000000046fda2: add byte ptr [rdi + 0x4b5e18], bh; call 0x1f50; nop dword ptr [rax]; mov eax, 0xc9; syscall; ret; 
0x00000000004463a0: add byte ptr [rdi + 0x6cd6d8], bh; call rax; 
0x000000000044639f: add byte ptr [rdi + 0x6cd6d8], r15b; call rax; 
0x00000000004033f7: add byte ptr [rdi + 0x6cd720], bh; call rbx; 
0x000000000048c571: add byte ptr [rdi + 0x6cd9c0], bh; call rax; 
0x000000000048c570: add byte ptr [rdi + 0x6cd9c0], dil; call rax; 
0x000000000048c69c: add byte ptr [rdi + 0x6cd9c4], bh; call rdx; 
0x000000000048c69b: add byte ptr [rdi + 0x6cd9c4], dil; call rdx; 
0x00000000004c3358: add byte ptr [rdi + 0xe], al; adc byte ptr [rdx + rax - 0x79e7f1bc], cl; add eax, dword ptr [rsi + rcx + 0x20]; add dword ptr [rsp + rbp*2], 0xa; ret; 
0x000000000049cc21: add byte ptr [rdi + 1], bh; call rax; 
0x000000000044f97b: add byte ptr [rdi + r9 - 0x4a], al; mov dl, 0x78; outsb dx, byte ptr [rsi]; add byte ptr [rax - 0x77], cl; ret 0x8840; 
0x0000000000427723: add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0x12ad3]; ret; 
0x00000000004241f3: add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0x14853]; ret; 
0x000000000042716f: add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0x17647]; ret; 
0x0000000000421d80: add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0x1a966]; ret; 
0x00000000004c4fc3: add byte ptr [rdi + rbx*2], al; add byte ptr [rax], bh; fdivr st(0); call qword ptr [rbx]; 
0x00000000004c4fdb: add byte ptr [rdi + rbx*2], bl; add byte ptr [rax - 0x28], al; clc; call qword ptr [rax]; 
0x00000000004c4ff3: add byte ptr [rdi + rbx*2], dh; add byte ptr [rax], bh; fdivr st(0); call qword ptr [rdx]; 
0x00000000004c8ffb: add byte ptr [rdi + rbx*4], bh; add al, bh; iretd; cld; call qword ptr [rdi + 9]; 
0x00000000004c0f93: add byte ptr [rdi + rbx], dl; add byte ptr [rax], al; fcom dword ptr [rax - 0xb]; jmp qword ptr [rbx]; 
0x000000000045c354: add byte ptr [rdi + rcx + 0x44], cl; ret 0xf4c; 
0x000000000045b340: add byte ptr [rdi + rcx + 0x45], cl; ret 0xf4c; 
0x000000000044f97c: add byte ptr [rdi + rcx - 0x4a], al; mov dl, 0x78; outsb dx, byte ptr [rsi]; add byte ptr [rax - 0x77], cl; ret 0x8840; 
0x00000000004c402b: add byte ptr [rdi + rcx*2 + 0x3bc00000], ch; clc; call qword ptr [rbx + 5]; 
0x00000000004c680b: add byte ptr [rdi + rsi*2 - 0x67500000], cl; cli; jmp qword ptr [rax + 1]; 
0x00000000004af11b: add byte ptr [rdi - 0x45fffff1], dh; sldt word ptr [rax]; mov ebp, 0xc000000f; sldt word ptr [rax]; ret; 
0x0000000000434337: add byte ptr [rdi], al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004723e3: add byte ptr [rdi], cl; adc dword ptr [rsi + 0x48000000], -0x77; fmul dword ptr [rax - 0x7d]; ret; 
0x000000000044d730: add byte ptr [rdi], cl; add eax, 0xc63d8b48; jmp qword ptr [rdi]; 
0x00000000004350ca: add byte ptr [rdi], cl; cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x000000000043ee37: add byte ptr [rdi], cl; lahf; ret 0xea81; 
0x000000000043612f: add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; ret; 
0x000000000043619f: add byte ptr [rdi], cl; mov dh, 0x16; mov byte ptr [rdi], dl; ret; 
0x000000000043dc7f: add byte ptr [rdi], cl; mov dh, 0x47; cmc; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000043dc6f: add byte ptr [rdi], cl; mov dh, 0x47; hlt; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000043dc3f: add byte ptr [rdi], cl; mov dh, 0x47; int1; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000043dc5f: add byte ptr [rdi], cl; mov dh, 0x47; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000043dc4f: add byte ptr [rdi], cl; mov dh, 0x47; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x00000000004829ff: add byte ptr [rdi], cl; mov dh, 0x48; add al, 0x8d; push rcx; rol byte ptr [rax - 0x6df0f506], 1; ret 0xb60f; 
0x00000000004829bf: add byte ptr [rdi], cl; mov dh, 0x48; add cl, byte ptr [rbp - 0x57f2faf]; or cl, byte ptr [rdi]; xchg eax, edx; ret 0xb60f; 
0x000000000048299f: add byte ptr [rdi], cl; mov dh, 0x48; add dword ptr [rbp - 0x57f2faf], ecx; or cl, byte ptr [rdi]; xchg eax, edx; ret 0xb60f; 
0x00000000004829df: add byte ptr [rdi], cl; mov dh, 0x48; add ecx, dword ptr [rbp - 0x57f2faf]; or cl, byte ptr [rdi]; xchg eax, edx; ret 0xb60f; 
0x0000000000482a7f: add byte ptr [rdi], cl; mov dh, 0x48; or byte ptr [rbp - 0x57f2faf], cl; or cl, byte ptr [rdi]; xchg eax, edx; ret 0xb60f; 
0x0000000000482abf: add byte ptr [rdi], cl; mov dh, 0x48; or cl, byte ptr [rbp - 0x57f2faf]; or cl, byte ptr [rdi]; xchg eax, edx; ret 0xb60f; 
0x0000000000482a9f: add byte ptr [rdi], cl; mov dh, 0x48; or dword ptr [rbp - 0x57f2faf], ecx; or cl, byte ptr [rdi]; xchg eax, edx; ret 0xb60f; 
0x00000000004497be: add byte ptr [rdi], cl; mov dh, 0x4a; dec dword ptr [rax - 0x7d]; ret 0x4801; 
0x000000000046b257: add byte ptr [rdi], cl; mov dh, 0x53; or al, 0xf6; ret 0xf04; 
0x000000000049bd44: add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x000000000042340f: add byte ptr [rdi], cl; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000041282f: add byte ptr [rdi], cl; mov dh, 2; ret; 
0x000000000042f00f: add byte ptr [rdi], cl; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000426c6f: add byte ptr [rdi], cl; mov dh, 7; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x0000000000447723: add byte ptr [rdi], cl; mov esi, 0x48891b52; push rax; mov dword ptr [rax + 0x54], edx; ret; 
0x000000000042d86f: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp al, dh; ret; 
0x0000000000426b0f: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x0000000000426aff: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x0000000000426b1f: add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0x26b60; add rax, rdi; ret; 
0x0000000000426b2f: add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0x26b60; lea rax, qword ptr [rdi + rax + 0x10]; ret; 
0x0000000000426aef: add byte ptr [rdi], cl; mov esp, 0xf80148c0; ret; 
0x00000000004bf1bf: add byte ptr [rdi], cl; sbb esi, esp; call qword ptr [rdx]; 
0x00000000004a483c: add byte ptr [rdi], cl; stc; inc dword ptr [rax - 0xf0006f2]; or eax, 0xd60fff9; stc; call rax; 
0x0000000000441f25: add byte ptr [rdi], cl; test ah, cl; add eax, 0xf6310000; mov rdi, r15; call rbx; 
0x00000000004611c2: add byte ptr [rdi], cl; test al, al; add byte ptr [rax], al; add byte ptr [rbx - 0x106f43], al; call qword ptr [rax]; 
0x00000000004613d2: add byte ptr [rdi], cl; test bh, al; add byte ptr [rax], al; add byte ptr [rbx - 0x106f43], al; call qword ptr [rax]; 
0x0000000000441b51: add byte ptr [rdi], cl; test byte ptr [rax + 0xa], al; add byte ptr [rax], al; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441fc1: add byte ptr [rdi], cl; test byte ptr [rax + 3], dl; add byte ptr [rax], al; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441e8c: add byte ptr [rdi], cl; test byte ptr [rbp + 5], ah; add byte ptr [rax], al; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441eac: add byte ptr [rdi], cl; test byte ptr [rbp + 6], ah; add byte ptr [rax], al; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441d1e: add byte ptr [rdi], cl; test byte ptr [rbx], bh; add eax, 0xf6310000; mov rdi, r12; call rbx; 
0x000000000044a06a: add byte ptr [rdi], cl; test byte ptr [rbx], cl; add dword ptr [rax], eax; add byte ptr [rcx - 0xa], al; ret; 
0x000000000048c566: add byte ptr [rdi], cl; test byte ptr [rbx], dl; add dword ptr [rax], eax; add byte ptr [rsi + 0x48c500], bh; mov edi, 0x6cd9c0; call rax; 
0x000000000044212a: add byte ptr [rdi], cl; test byte ptr [rdi + 3], ah; add byte ptr [rax], al; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044185a: add byte ptr [rdi], cl; test byte ptr [rdi], dl; or eax, 0xf6310000; mov rdi, r15; call rbx; 
0x0000000000421204: add byte ptr [rdi], cl; test cl, dl; add byte ptr [rax], al; add byte ptr [rcx + 9], al; ret; 
0x000000000048c989: add byte ptr [rdi], cl; test dword ptr [rax + 0x48000000], edx; mov edx, dword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x000000000043f645: add byte ptr [rdi], cl; test dword ptr [rax + rax - 0x9cf0000], ecx; mov eax, 2; syscall; 
0x0000000000461799: add byte ptr [rdi], cl; test dword ptr [rax - 0x16000006], ebp; ret 0xffef; 
0x00000000004423fc: add byte ptr [rdi], cl; test dword ptr [rax - 0x41000006], edx; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r14; call rbx; 
0x000000000044251c: add byte ptr [rdi], cl; test dword ptr [rax - 0x41000007], edx; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r15; call rbx; 
0x000000000044231c: add byte ptr [rdi], cl; test dword ptr [rbp - 0x41000004], esp; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r13; call rbx; 
0x000000000044259c: add byte ptr [rdi], cl; test dword ptr [rbp - 0x4100000b], esi; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r15; call rbx; 
0x0000000000452939: add byte ptr [rdi], cl; test dword ptr [rbx], esp; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000442265: add byte ptr [rdi], cl; test dword ptr [rcx - 0x41000006], edi; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r12; call rbx; 
0x000000000044235c: add byte ptr [rdi], cl; test dword ptr [rcx - 0x41000008], eax; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r14; call rbx; 
0x000000000044255c: add byte ptr [rdi], cl; test dword ptr [rcx - 0x4100000a], esp; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r15; call rbx; 
0x0000000000497c28: add byte ptr [rdi], cl; test dword ptr [rcx], edx; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x8308; 
0x0000000000400f20: add byte ptr [rdi], cl; test dword ptr [rip - 0x6f000002], edx; leave; ret; 
0x000000000044249c: add byte ptr [rdi], cl; test dword ptr [rsi - 0x41000004], ecx; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r15; call rbx; 
0x00000000004425bc: add byte ptr [rdi], cl; test dword ptr [rsi*8 + 0x3beffff], ebx; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; call rbx; 
0x0000000000420b1a: add byte ptr [rdi], cl; test edi, esp; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x000000000040f569: add byte ptr [rdi], cl; test edx, esi; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000045eb9b: add byte ptr [rdi], cl; xchg dword ptr [rbx + rcx], esp; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000041ccb2: add byte ptr [rdi], cl; xchg eax, ebp; ret 0x8348; 
0x0000000000470879: add byte ptr [rdi], cl; xchg eax, ebp; ret 0xb60f; 
0x0000000000444016: add byte ptr [rdi], cl; xchg eax, ebp; ret 0xc985; 
0x00000000004707ed: add byte ptr [rdi], cl; xchg eax, ebp; ret 0xf748; 
0x000000000047475a: add byte ptr [rdi], cl; xchg eax, esp; ret 0xc283; 
0x000000000046be1f: add byte ptr [rdx + 0x10], bh; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x00000000004003ff: add byte ptr [rdx + 0x1d], bh; mov esi, 0x4a2a86; mov rdi, rbx; mov eax, 1; syscall; 
0x000000000043f677: add byte ptr [rdx + 0x1f], bh; mov rsi, rbp; mov rdi, r8; mov eax, r9d; syscall; 
0x000000000042712e: add byte ptr [rdx + 0x430630], bh; cmove rax, rdx; ret; 
0x000000000043b89f: add byte ptr [rdx + 0x48028801], cl; lea eax, dword ptr [rdx]; ret; 
0x000000000043a0ef: add byte ptr [rdx + 0x48028801], cl; mov eax, edi; ret; 
0x0000000000440a1b: add byte ptr [rdx + 0x48], dh; mov ebx, edi; xor esi, esi; mov r12d, edx; mov rbp, rax; call rax; 
0x00000000004431c5: add byte ptr [rdx + 0x64], bh; test eax, eax; cmove eax, edx; ret; 
0x0000000000440248: add byte ptr [rdx + 0x80000], bh; mov esi, 0x4a5790; mov rdi, -0x64; mov eax, 0x101; syscall; 
0x000000000044044d: add byte ptr [rdx + 0x80000], bh; mov esi, 0x4a5790; movsxd rdi, dword ptr [rsp + 0x10]; mov eax, 0x101; syscall; 
0x0000000000472fbf: add byte ptr [rdx + 0x90800], bh; movsxd rdi, edi; mov eax, ecx; sub rsp, 0x98; syscall; 
0x00000000004bff64: add byte ptr [rdx + 0xe], cl; adc byte ptr [rbx + 0xe490202], al; nop; add dword ptr [rsi + rcx + 0x10], ecx; je 0xbff7e; ret; 
0x00000000004bff63: add byte ptr [rdx + 0xe], r9b; adc byte ptr [rbx + 0xe490202], al; nop; add dword ptr [rsi + rcx + 0x10], ecx; je 0xbff7e; ret; 
0x0000000000441d19: add byte ptr [rdx + 1], bh; je 0x42260; xor esi, esi; mov rdi, r12; call rbx; 
0x00000000004417ec: add byte ptr [rdx + 1], bh; je 0x42280; xor esi, esi; mov rdi, r12; call rbx; 
0x000000000044330c: add byte ptr [rdx + 1], bh; mov eax, 0xca; syscall; 
0x0000000000441a8f: add byte ptr [rdx + 2], bh; je 0x422b8; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441d3e: add byte ptr [rdx + 2], bh; je 0x422d8; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441811: add byte ptr [rdx + 2], bh; je 0x422f8; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441835: add byte ptr [rdx + 3], bh; je 0x42338; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441bd8: add byte ptr [rdx + 3], bh; je 0x42358; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441ab3: add byte ptr [rdx + 3], bh; je 0x42378; xor esi, esi; mov rdi, r14; call rbx; 
0x000000000044195a: add byte ptr [rdx + 3], bh; je 0x42398; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442105: add byte ptr [rdx + 3], bh; je 0x423b8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441fe0: add byte ptr [rdx + 3], bh; je 0x423d8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441d62: add byte ptr [rdx + 3], bh; je 0x42418; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441dfb: add byte ptr [rdx + 4], bh; je 0x42438; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441d82: add byte ptr [rdx + 4], bh; je 0x42458; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044219e: add byte ptr [rdx + 4], bh; je 0x42478; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442079: add byte ptr [rdx + 4], bh; je 0x424b8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442000: add byte ptr [rdx + 4], bh; je 0x424d8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441f20: add byte ptr [rdx + 4], bh; je 0x424f8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441c71: add byte ptr [rdx + 4], bh; je 0x42538; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441bf8: add byte ptr [rdx + 4], bh; je 0x42558; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441855: add byte ptr [rdx + 4], bh; je 0x42578; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441ad3: add byte ptr [rdx + 4], bh; je 0x425b8; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004418ce: add byte ptr [rdx + 4], bh; je 0x425d8; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004419f3: add byte ptr [rdx + 4], bh; je 0x425f8; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044197a: add byte ptr [rdx + 4], bh; je 0x42618; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044560f: add byte ptr [rdx + 8], bh; mov eax, edx; ret; 
0x00000000004c32cb: add byte ptr [rdx + rax*2], cl; add al, dl; fdivr st(7), st(0); call qword ptr [rbx + 3]; 
0x00000000004c72a3: add byte ptr [rdx + rax*4], ah; add byte ptr [rax], al; pop rax; cli; cli; jmp rdi; 
0x000000000049cd96: add byte ptr [rdx + rbp*2 + 0x48], dh; add esp, 0x18; ret; 
0x00000000004c58d3: add byte ptr [rdx + rbx*2], dh; add byte ptr [rax + 0x5c], bl; cli; jmp qword ptr [rdx + 1]; 
0x00000000004aea77: add byte ptr [rdx + rcx + 0xabf0000], bh; add byte ptr [rax], al; ret 0xa; 
0x0000000000444dd3: add byte ptr [rdx + rcx - 0x77], dh; adc eax, 0x2861bc; pop rbx; ret; 
0x00000000004c3abb: add byte ptr [rdx + rcx*2], bh; add byte ptr [rax], al; and byte ptr [rax + rdi*8], bl; jmp qword ptr [rdx]; 
0x00000000004c7a93: add byte ptr [rdx + rcx*4], dl; add byte ptr [rax], al; cmp byte ptr [rdi - 5], dl; call rsi; 
0x00000000004c8283: add byte ptr [rdx + rdx*4], al; add byte ptr [rax], al; js 0xc821b; sti; call qword ptr [rdx]; 
0x00000000004c82b3: add byte ptr [rdx + rdx*4], dh; add byte ptr [rax], al; js 0xc824b; sti; call qword ptr [rdx]; 
0x00000000004c6313: add byte ptr [rdx + rsi*2 + 0x7ea80000], dl; cli; jmp rdx; 
0x0000000000401bb6: add byte ptr [rdx - 0x73], cl; xor al, 0x39; mov qword ptr [rsi + 8], 0x6d63f0; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000004c28e0: add byte ptr [rdx - 0xa], dh; call qword ptr [rax]; 
0x00000000004a49e0: add byte ptr [rdx - 7], bh; call qword ptr [rax]; 
0x0000000000478e6d: add byte ptr [rdx], 0; add byte ptr [rbx + 0x25d9e115], cl; add bh, dh; ret 0x804; 
0x0000000000481935: add byte ptr [rdx], ah; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x00000000004241f0: add byte ptr [rdx], al; add byte ptr [rax], al; je 0x241fd; lea rax, qword ptr [rip + 0x14853]; ret; 
0x0000000000427720: add byte ptr [rdx], al; add byte ptr [rax], al; je 0x2772d; lea rax, qword ptr [rip + 0x12ad3]; ret; 
0x0000000000421fd0: add byte ptr [rdx], al; add byte ptr [rax], al; jne 0x21fdd; lea rax, qword ptr [rip + 3]; ret; 
0x0000000000426b76: add byte ptr [rdx], al; add byte ptr [rax], al; jne 0x26b84; lea rax, qword ptr [rip + 0x1d]; ret; 
0x000000000042783c: add byte ptr [rdx], al; add byte ptr [rax], al; jne 0x27849; lea rax, qword ptr [rip + 0x67]; ret; 
0x000000000042788f: add byte ptr [rdx], al; add byte ptr [rax], al; jne 0x2789c; lea rax, qword ptr [rip + 4]; ret; 
0x000000000048cbec: add byte ptr [rdx], al; add byte ptr [rax], al; jne 0x8cbf9; lea rax, qword ptr [rip + 0x67]; ret; 
0x000000000048cc3f: add byte ptr [rdx], al; add byte ptr [rax], al; jne 0x8cc4c; lea rax, qword ptr [rip + 4]; ret; 
0x000000000045025d: add byte ptr [rdx], al; add byte ptr [rax], al; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000400462: add byte ptr [rdx], al; add byte ptr [rax], al; mov rdi, r8; mov eax, ebp; syscall; 
0x000000000040049e: add byte ptr [rdx], al; add byte ptr [rax], al; mov rdi, rbx; mov eax, r10d; syscall; 
0x0000000000401938: add byte ptr [rdx], al; add byte ptr [rdi + 0x4a1e23], bh; mov eax, 2; syscall; 
0x00000000004019a9: add byte ptr [rdx], al; add byte ptr [rdi + 0x4a1e2d], bh; mov eax, 2; syscall; 
0x000000000042716d: add byte ptr [rdx], al; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0x17647]; ret; 
0x0000000000421d58: add byte ptr [rdx], bh; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x000000000043060f: add byte ptr [rip + 0xff], ah; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000043060e: add byte ptr [rip + 0xff], spl; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000042fd42: add byte ptr [rip + 0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000045c3e7: add byte ptr [rip - 0x2fd17], ch; jmp qword ptr [rsi - 0x70]; 
0x00000000004593b3: add byte ptr [rip - 0x42117], ch; jmp qword ptr [rsi + 0xf]; 
0x000000000045bf97: add byte ptr [rip - 0xa8d17], ch; jmp qword ptr [rsi - 0x70]; 
0x000000000042d865: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; bsf eax, eax; lea rax, qword ptr [rax + rdi - 0x10]; ret; 
0x000000000043bd75: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000417205: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x0000000000435925: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004501c5: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x00000000004501e5: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x0000000000450325: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, 0xf; syscall; 
0x000000000046d725: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000417245: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000049cf25: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000415bf5: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0xd8]; mov rax, qword ptr [rax + 0x40]; jmp rax; 
0x0000000000417225: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x2b3e89]; ret; 
0x0000000000435ab5: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000435a35: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000043e605: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000401305: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000042d864: add byte ptr [rsi + 0x2e], spl; nop dword ptr [rax + rax]; bsf eax, eax; lea rax, qword ptr [rax + rdi - 0x10]; ret; 
0x0000000000417224: add byte ptr [rsi + 0x2e], spl; nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x2b3e89]; ret; 
0x000000000043e604: add byte ptr [rsi + 0x2e], spl; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x000000000044639b: add byte ptr [rsi + 0x447090], bh; mov edi, 0x6cd6d8; call rax; 
0x000000000048c56c: add byte ptr [rsi + 0x48c500], bh; mov edi, 0x6cd9c0; call rax; 
0x000000000048c82e: add byte ptr [rsi + 0x48c740], bh; mov edi, 0x6cd9c4; call rdx; 
0x00000000004003cc: add byte ptr [rsi + 0x4a2a68], bh; mov rdi, rbx; mov eax, 1; syscall; 
0x0000000000400404: add byte ptr [rsi + 0x4a2a86], bh; mov rdi, rbx; mov eax, 1; syscall; 
0x000000000044024d: add byte ptr [rsi + 0x4a5790], bh; mov rdi, -0x64; mov eax, 0x101; syscall; 
0x0000000000440452: add byte ptr [rsi + 0x4a5790], bh; movsxd rdi, dword ptr [rsp + 0x10]; mov eax, 0x101; syscall; 
0x00000000004a67bf: add byte ptr [rsi + 0x4a61], al; add byte ptr [rax], al; add byte ptr [rax], dl; ret 0x44; 
0x000000000046fd9d: add byte ptr [rsi + 0x4b5f34], bh; mov edi, 0x4b5e18; call 0x1f50; nop dword ptr [rax]; mov eax, 0xc9; syscall; 
0x0000000000442edc: add byte ptr [rsi + 0x80000], bh; mov edi, 0x4a58c8; mov eax, ebx; syscall; 
0x000000000044ffdf: add byte ptr [rsi + 0x80000], bh; mov edi, 0x4a7820; mov eax, ecx; syscall; 
0x00000000004432da: add byte ptr [rsi + 0x80], bh; cmp eax, edx; jne 0x432ec; nop; mov eax, 0xca; syscall; 
0x00000000004433c7: add byte ptr [rsi + 0x80], bh; syscall; 
0x00000000004796e0: add byte ptr [rsi + 0x81], bh; add rdi, 0x1c; mov eax, 0xca; syscall; 
0x0000000000443307: add byte ptr [rsi + 0x81], bh; mov edx, 1; mov eax, 0xca; syscall; 
0x00000000004120af: add byte ptr [rsi + 0x902], bh; mov edi, 0x4a2ac7; mov eax, 2; syscall; 
0x000000000047312f: add byte ptr [rsi + 0x90800], bh; mov eax, ecx; sub rsp, 0x98; syscall; 
0x000000000049cc1c: add byte ptr [rsi + 0xa], bh; mov edi, 1; call rax; 
0x00000000004c0a00: add byte ptr [rsi + 0xe], cl; adc byte ptr [rdx + rax - 0x79e7f1bf], cl; add eax, dword ptr [rsi + rcx + 0x20]; add dword ptr [rdx + rax], -0xc; ret; 
0x000000000042f304: add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000458a33: add byte ptr [rsi + 0xf], ah; ror byte ptr cs:[rdi], 0x8a; ret 8; 
0x0000000000426a04: add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x0000000000441885: add byte ptr [rsi + 1], bh; call rbx; 
0x000000000049d166: add byte ptr [rsi + 1], bh; mov edi, 1; call rax; 
0x0000000000441a72: add byte ptr [rsi + 1], bh; mov rdi, r12; call rbx; 
0x000000000044193e: add byte ptr [rsi + 1], bh; mov rdi, r13; call rbx; 
0x00000000004418b6: add byte ptr [rsi + 1], bh; mov rdi, r14; call rbx; 
0x0000000000441cf0: add byte ptr [rsi + 2], bh; mov rdi, r12; call rbx; 
0x0000000000441a63: add byte ptr [rsi + 2], bh; mov rdi, r13; call rbx; 
0x000000000044192f: add byte ptr [rsi + 2], bh; mov rdi, r14; call rbx; 
0x00000000004418a7: add byte ptr [rsi + 2], bh; mov rdi, r15; call rbx; 
0x00000000004bf713: add byte ptr [rsi + rax + 0x5d880000], dl; hlt; call qword ptr [rax]; 
0x000000000048bf70: add byte ptr [rsi + rax - 0x39], dh; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x000000000049f307: add byte ptr [rsi + rax - 0xd], dh; ret; 
0x00000000004c76d3: add byte ptr [rsi + rax*4], dl; add al, ch; sti; jmp qword ptr [rbp + 1]; 
0x00000000004c1f03: add byte ptr [rsi + rbp - 0x32e80000], al; cmc; jmp rdx; 
0x00000000004c0f33: add byte ptr [rsi + rbx + 0x4fe80000], dh; cmc; call qword ptr [rcx]; 
0x00000000004ca0a0: add byte ptr [rsi + rcx + 0x10], bh; add dword ptr [rdx], 0x69; ret; 
0x00000000004c7dd8: add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x1370303; ret; 
0x00000000004c7d68: add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x34b0303; ret; 
0x00000000004c7da0: add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x35b0303; ret; 
0x00000000004c6f03: add byte ptr [rsi + rdi*2 - 0x35780000], al; cli; call qword ptr [rcx]; 
0x00000000004c6e8b: add byte ptr [rsi + rdi*2], cl; add byte ptr [rax], al; jo 0xc6e5b; cli; call qword ptr [rcx]; 
0x00000000004c070b: add byte ptr [rsi + rdx + 0x28d00000], cl; cmc; call qword ptr [rax]; 
0x00000000004c671b: add byte ptr [rsi + rsi*2 - 0x6cc00000], bl; cli; jmp qword ptr [rax]; 
0x00000000004af26f: add byte ptr [rsi - 0x46fffff0], dh; adc byte ptr [rax], al; add byte ptr [rax + rdx + 0x10bf0000], bh; add byte ptr [rax], al; ret 0x10; 
0x00000000004aea6f: add byte ptr [rsi - 0x46fffff6], dh; or al, byte ptr [rax]; add byte ptr [rdx + rcx + 0xabf0000], bh; add byte ptr [rax], al; ret 0xa; 
0x00000000004737fd: add byte ptr [rsi - 0x70], ah; cmp dword ptr [rip + 0x263015], 0; jne 0x7381d; mov eax, 3; syscall; 
0x000000000044e8ed: add byte ptr [rsi - 0x70], ah; mov eax, 0; test rax, rax; je 0x4e908; mov edi, 0x6cd720; call rax; 
0x00000000004737dd: add byte ptr [rsi - 0x70], ah; mov eax, 0x15; syscall; 
0x00000000004737dd: add byte ptr [rsi - 0x70], ah; mov eax, 0x15; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x00000000004409ed: add byte ptr [rsi - 0x70], ah; mov eax, 0x1c; syscall; 
0x00000000004409ed: add byte ptr [rsi - 0x70], ah; mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x00000000004736ed: add byte ptr [rsi - 0x70], ah; mov eax, 0x66; syscall; 
0x00000000004736ed: add byte ptr [rsi - 0x70], ah; mov eax, 0x66; syscall; ret; 
0x00000000004409cd: add byte ptr [rsi - 0x70], ah; mov eax, 0xa; syscall; 
0x00000000004409cd: add byte ptr [rsi - 0x70], ah; mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x000000000044324d: add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0x19; syscall; 
0x000000000045059d: add byte ptr [rsi - 0x70], ah; mov r10d, 8; movsxd rdi, edi; mov eax, 0xe; syscall; 
0x0000000000426b6d: add byte ptr [rsi - 0x70], ah; test dword ptr [rip + 0x2a6b16], 0x200; jne 0x26b84; lea rax, qword ptr [rip + 0x1d]; ret; 
0x000000000043a0ff: add byte ptr [rsi - 0x75], ah; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000043a10f: add byte ptr [rsi - 0x75], ah; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rdx + 0x42880241]; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x0000000000410bfb: add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x0000000000416606: add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x30]; 
0x0000000000416606: add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x30]; cmp eax, -1; jne 0x165fa; pop rbx; ret; 
0x000000000046d176: add byte ptr [rsi - 1], bh; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x00000000004137a6: add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004136fe: add byte ptr [rsi - 1], bh; mov rdi, rbx; mov rbp, r12; call qword ptr [rax + 0x18]; 
0x00000000004a4044: add byte ptr [rsi - 8], dl; call qword ptr [rax]; 
0x0000000000479e47: add byte ptr [rsi*2 + 0x158f8015], al; add eax, dword ptr [rax]; add byte ptr [rax + rcx*2], al; add esp, 8; ret; 
0x000000000043fdc1: add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000004bf533: add byte ptr [rsp + rax + 0x32280000], dh; hlt; call qword ptr [rdx]; 
0x00000000004b2917: add byte ptr [rsp + rax + 0x4be0000], bh; add byte ptr [rax], al; rol byte ptr [rax + rax], 0; ret 4; 
0x000000000043f37f: add byte ptr [rsp + rax - 0x7d], dh; adc byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004c7513: add byte ptr [rsp + rax*4 + 0x23580000], dl; sti; jmp qword ptr [rdi]; 
0x00000000004a66b7: add byte ptr [rsp + rax], al; add al, 4; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x4a60; 
0x00000000004c9d2b: add byte ptr [rsp + rbp*4 + 0x3a100000], ch; std; jmp qword ptr [rdi]; 
0x00000000004c5b13: add byte ptr [rsp + rbx*2 + 0x63680000], dh; cli; jmp qword ptr [rsi + 1]; 
0x00000000004c4d23: add byte ptr [rsp + rbx*2 - 0x4a380000], ah; clc; jmp qword ptr [rsi]; 
0x00000000004c4cc3: add byte ptr [rsp + rbx*2], al; add byte ptr [rax], ch; mov ch, 0xf8; call qword ptr [rcx]; 
0x00000000004c4cdb: add byte ptr [rsp + rbx*2], bl; add byte ptr [rax], dh; mov ch, 0xf8; call qword ptr [rsi]; 
0x00000000004c8cfb: add byte ptr [rsp + rbx*4], bh; add byte ptr [rax], dh; cmp al, 0xfc; jmp qword ptr [rdx]; 
0x00000000004c8cb3: add byte ptr [rsp + rbx*4], dh; add byte ptr [rax], al; or byte ptr [rcx - 0xd], bh; jmp qword ptr [rsi]; 
0x00000000004bfd0b: add byte ptr [rsp + rcx - 0x8b00000], cl; hlt; call qword ptr [rdx]; 
0x00000000004bfcf3: add byte ptr [rsp + rcx], dh; add byte ptr [rax - 9], bl; hlt; call qword ptr [rax]; 
0x00000000004c6d23: add byte ptr [rsp + rdi*2 - 0x38280000], ah; cli; call qword ptr [rbx]; 
0x00000000004c0513: add byte ptr [rsp + rdx + 0x1ff80000], dl; cmc; call qword ptr [rbx]; 
0x0000000000417361: add byte ptr [rsp + rdx + 0x48], dh; mov eax, dword ptr [rdi + 8]; cmp rax, rcx; jae 0x17390; movzx eax, byte ptr [rax]; ret; 
0x00000000004c44e3: add byte ptr [rsp + rdx*2], ah; add byte ptr [rax], cl; jne 0xc44e3; call qword ptr [rcx]; 
0x00000000004c94e3: add byte ptr [rsp], ah; add byte ptr [rax + 0xe], bh; std; jmp qword ptr [rax]; 
0x000000000045d486: add byte ptr cs:[rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004c1f05: add byte ptr cs:[rax], al; sbb ch, cl; cmc; jmp rdx; 
0x00000000004a1c61: add byte ptr cs:[rdi + 0x4a2e50], dil; call 0x17a80; add byte ptr [rax], al; sub rsp, 8; add rsp, 8; ret; 
0x0000000000473804: add byte ptr es:[rax], al; jne 0x7381d; mov eax, 3; syscall; 
0x0000000000473994: add byte ptr es:[rax], al; jne 0x739ad; mov eax, 0x14; syscall; 
0x00000000004c170d: add byte ptr es:[rax], al; ret; 
0x000000000047154c: add byte ptr es:[rbp - 0x16738a40], al; imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x00000000004c5a40: add byte ptr fs:[rax], al; add ah, al; imul eax, dword ptr [rax], 0xfa61b800; jmp qword ptr [rdi + 1]; 
0x00000000004c8100: add byte ptr fs:[rax], al; add byte ptr [rax + rdx*4 - 0x6bf80000], al; std; call rcx; 
0x00000000004267b8: add byte ptr fs:[rax], al; add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x00000000004c6610: add byte ptr fs:[rax], al; add byte ptr [rbp + rsi*2 - 0x70e80000], dl; cli; jmp rdx; 
0x00000000004431c7: add byte ptr fs:[rax], al; add byte ptr [rbp - 0x3dbbf040], al; ret; 
0x00000000004c6808: add byte ptr fs:[rax], al; add byte ptr [rdi + rsi*2 - 0x67500000], cl; cli; jmp qword ptr [rax + 1]; 
0x00000000004bf530: add byte ptr fs:[rax], al; add byte ptr [rsp + rax + 0x32280000], dh; hlt; call qword ptr [rdx]; 
0x00000000004c54c5: add byte ptr fs:[rax], al; cwde; jp 0xc54c4; call rdi; 
0x0000000000413e00: add byte ptr gs:[rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000004468a4: add byte ptr gs:[rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x0000000000412563: add byte ptr gs:[rbx + 0x5d], bl; pop r12; ret; 
0x0000000000413de9: add byte ptr gs:[rcx - 0x7874b7f9], cl; fadd dword ptr [rax]; add byte ptr [rax], al; call qword ptr [rax + 0x48]; 
0x000000000042712c: add byte ptr ss:[r10 + 0x430630], dil; cmove rax, rdx; ret; 
0x000000000048c56e: add ch, al; add byte ptr [rdi + 0x6cd9c0], dil; call rax; 
0x000000000043e6ef: add ch, al; cli; jg 0x3e6fb; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000045934f: add ch, bl; fmul dword ptr [rax - 0x39]; ret 0xfff0; 
0x00000000004bd07c: add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x00000000004bd07d: add ch, byte ptr [rbp + rbp*2 + 0x5b]; ret 0x6f9; 
0x0000000000426b86: add ch, byte ptr [rbx + 0x2a]; add byte ptr [rax], al; add byte ptr [rax], cl; add byte ptr [rax + rcx + 0x48], dh; lea eax, dword ptr [rip + 0x8449]; ret; 
0x000000000045df70: add ch, byte ptr [rbx]; add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x57; or al, 0x83; ret; 
0x000000000046ff7b: add ch, byte ptr [rcx]; ret 0x48d; 
0x000000000045dfb0: add ch, byte ptr [rip - 0x7d000000]; ret; 
0x00000000004409a0: add ch, cl; imul edi, edi, -1; jmp qword ptr [rsi + 0x2e]; 
0x000000000041b80d: add ch, cl; paddd mm7, mm7; dec dword ptr [rax - 0x39]; ret 0xffd0; 
0x000000000047b0e8: add ch, cl; ret 0xfffd; 
0x00000000004799a3: add cl, al; insb byte ptr [rdi], dx; add byte ptr [rbx + 0x5d], bl; jmp rax; 
0x000000000043a117: add cl, byte ptr [r8 - 0x76b7fdbe]; clc; ret; 
0x0000000000481fd4: add cl, byte ptr [rax + 0x29]; ret 0x8949; 
0x0000000000481ffd: add cl, byte ptr [rax + 0x29]; ret 0x8d48; 
0x000000000045e8ae: add cl, byte ptr [rax + 0x29]; ret; 
0x0000000000427271: add cl, byte ptr [rax + 0x2c2f60f]; je 0x271e4; mov word ptr [rax + rdx - 2], cx; ret; 
0x00000000004784db: add cl, byte ptr [rax + 0x39]; ret 0x860f; 
0x000000000044a5f3: add cl, byte ptr [rax + 0x39]; ret; 
0x0000000000411039: add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x2948; 
0x000000000044dc63: add cl, byte ptr [rax + 1]; ret 0x394c; 
0x00000000004668d5: add cl, byte ptr [rax + 1]; ret; 
0x000000000043b9b5: add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; lea rax, qword ptr [rdx + 0xc]; ret; 
0x000000000043a1a5: add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; mov rax, rdi; ret; 
0x000000000043a0d5: add cl, byte ptr [rax - 0x75]; or byte ptr [r8 - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000043a118: add cl, byte ptr [rax - 0x76b7fdbe]; clc; ret; 
0x0000000000411446: add cl, byte ptr [rax - 0x77]; and al, 0x20; call qword ptr [rbx + 0x30]; 
0x000000000043a085: add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000044d08b: add cl, byte ptr [rax - 0x77]; ror byte ptr [rdi], 1; test byte ptr [rdi - 0x16000003], dl; cmp ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000416f02: add cl, byte ptr [rax - 0x7b]; sal byte ptr [rbp - 0x10], 0xf3; ret; 
0x0000000000473d99: add cl, byte ptr [rax - 0x7d]; mov dword ptr [rcx], 0x8348c889; ret 0x8401; 
0x000000000048b2cc: add cl, byte ptr [rax - 0x7d]; ret 0x4101; 
0x0000000000424250: add cl, byte ptr [rax - 0x7d]; ret 0x4808; 
0x0000000000449204: add cl, byte ptr [rax - 0x7d]; ret 0x4901; 
0x00000000004242b3: add cl, byte ptr [rax - 0x7d]; ret 0xe908; 
0x000000000046cbc1: add cl, byte ptr [rax - 9]; fiadd dword ptr [rbx + 0x394803e2]; ret 0xf48; 
0x00000000004c0b08: add cl, byte ptr [rbp + 0xa]; ret; 
0x00000000004829c3: add cl, byte ptr [rbp - 0x57f2faf]; or cl, byte ptr [rdi]; xchg eax, edx; ret 0xb60f; 
0x0000000000435f72: add cl, byte ptr [rbx + 0x257890e]; mov dword ptr [rdi], ecx; ret; 
0x000000000043a153: add cl, byte ptr [rbx + 0x42890341]; add ecx, dword ptr [rax - 0x77]; clc; ret; 
0x000000000043b935: add cl, byte ptr [rbx + 0x42890541]; add eax, 0x8428d48; ret; 
0x000000000043a195: add cl, byte ptr [rbx + 0x42890841]; or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000041caad: add cl, byte ptr [rcx + 0x548d48d0]; ret; 
0x00000000004c93b9: add cl, byte ptr [rcx + 0xe]; adc byte ptr [rdx + rax - 0x79e7f1bf], cl; add eax, dword ptr [rcx + 0xe]; and byte ptr [rbx + 0x1890304], al; ret; 
0x00000000004bff6a: add cl, byte ptr [rcx + 0xe]; nop; add dword ptr [rsi + rcx + 0x10], ecx; je 0xbff7e; ret; 
0x0000000000460166: add cl, byte ptr [rcx + rcx*4 - 6]; call qword ptr [rax + 0x38]; 
0x000000000046063c: add cl, byte ptr [rcx + rcx*4 - 9]; mov rdx, rax; mov rax, qword ptr [r14 + 0xd8]; call qword ptr [rax + 0x38]; 
0x00000000004975c4: add cl, byte ptr [rcx - 0x73]; jl 0x9758e; adc byte ptr [rax - 0x77], cl; retf 0x8b48; xor cl, byte ptr [rax - 0x7d]; ret 0xf08; 
0x000000000049cb37: add cl, byte ptr [rcx - 0x75]; adc al, 0x24; mov edi, 1; call rax; 
0x00000000004120b1: add cl, byte ptr [rcx]; add byte ptr [rax], al; mov edi, 0x4a2ac7; mov eax, 2; syscall; 
0x0000000000400601: add cl, byte ptr [rdi]; test byte ptr [rdi], al; add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000041be38: add cl, byte ptr [rdi]; test dword ptr [rcx], edi; add dword ptr [rax], eax; add byte ptr [rbp + 0x39], cl; ret 0x976; 
0x000000000046b435: add cl, byte ptr [rdi]; xchg eax, ebp; ret 0x5389; 
0x000000000043ec0d: add cl, byte ptr [rdi]; xchg eax, esp; ret 0x8444; 
0x000000000043a115: add cl, byte ptr [rdx + 0x42880241]; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000043b8f3: add cl, byte ptr [rdx + 0x42880441]; add al, 0x48; lea eax, dword ptr [rdx + 4]; ret; 
0x000000000043a133: add cl, byte ptr [rdx + 0x42880441]; add al, 0x48; mov eax, edi; ret; 
0x00000000004c92f7: add cl, byte ptr [rdx]; ret; 
0x0000000000465fdc: add cl, ch; int 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000047f1fd: add cl, ch; mov esi, 0x89fffffe; ret 0x758b; 
0x00000000004646d8: add cl, ch; out 0xff, al; jmp qword ptr [rsi - 0x70]; 
0x0000000000408e08: add cl, ch; ret 0xffe2; 
0x000000000047b014: add cl, ch; ret 0xfffd; 
0x000000000044a657: add cl, ch; ret; 
0x0000000000436d7a: add cl, ch; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x000000000040afb4: add cl, ch; sar cl, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000416e10: add cl, ch; sar ebp, -1; jmp qword ptr [rsi + 0x2e]; 
0x000000000047a9d4: add cl, ch; xlatb; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000041acc1: add cl, ch; xlatb; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x00000000004138e7: add cl, ch; xor eax, 0x48ffffff; mov eax, dword ptr [rbx + 0xd8]; or esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000401084: add cl, cl; ret; 
0x00000000004a43b0: add cl, dl; clc; call qword ptr [rax - 0x2e]; 
0x00000000004c0a10: add dh, ah; ret; 
0x000000000046df43: add dh, al; and al, 0x14; add al, ch; ret 0xfe4d; 
0x00000000004738fc: add dh, al; or al, 0; add rsp, 0x30; mov eax, ebx; pop rbx; ret; 
0x00000000004bf6d9: add dh, bh; call rdi; 
0x00000000004b1f77: add dh, bh; xlatb; add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; call rdi; 
0x0000000000436123: add dh, bl; movq qword ptr [rdi], mm1; ret; 
0x000000000044089b: add dh, bl; ret; 
0x0000000000461795: add dh, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rax - 0x16000006], ebp; ret 0xffef; 
0x000000000043e267: add dh, byte ptr [rbp + 0x16]; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x3e260; ret; 
0x000000000043e317: add dh, byte ptr [rbp + 0x16]; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x3e310; ret; 
0x00000000004c090e: add dh, byte ptr [rbp + 0x41180e0a]; ret; 
0x000000000049f312: add dh, byte ptr [rbp + 6]; mov eax, 8; ret; 
0x0000000000413cd2: add dh, byte ptr [rbx + rbp*2 + 0x48]; movsxd rdx, ecx; mov eax, 2; syscall; 
0x0000000000400427: add dh, byte ptr [rcx]; idiv byte ptr [rdi + 0x4a2aa4]; mov eax, 2; syscall; 
0x0000000000436318: add dh, byte ptr [rdx + 0x10]; mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000043e722: add dh, byte ptr [rdx + 0xb]; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x000000000043e89f: add dh, byte ptr [rdx + 8]; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x00000000004267ff: add dh, dh; add eax, 0x2a6ec1; adc byte ptr [rdx + 0x426230], bh; mov eax, 0x43e180; cmove rax, rdx; ret; 
0x000000000041361f: add dh, dh; je 0x13626; je 0x13658; movsxd rdi, dword ptr [rdi + 0x70]; xor eax, eax; syscall; 
0x0000000000447c25: add dh, dh; ret 0x4801; 
0x00000000004272c8: add dh, dh; ret 0x7404; 
0x00000000004015fe: add dh, dh; ret 0x7420; 
0x000000000043c7c7: add dh, dh; ret 0x7501; 
0x000000000043c7d4: add dh, dh; ret 0x7502; 
0x000000000043c7e1: add dh, dh; ret 0x7504; 
0x000000000043c799: add dh, dh; ret 0x7510; 
0x000000000043c7a6: add dh, dh; ret 0x7520; 
0x000000000043c7b3: add dh, dh; ret 0x7540; 
0x000000000041be35: add dh, dh; ret 0xf02; 
0x00000000004794ea: add dh, dh; ret 0xf08; 
0x0000000000417f3a: add dh, dh; ret; 
0x000000000047f4ef: add dh, dh; xchg dword ptr [rbx + rax], edx; add byte ptr [rax], al; or byte ptr [rsp + 0x5b], dh; ret; 
0x00000000004a4278: add dl, ah; clc; jmp rax; 
0x00000000004bb45a: add dl, byte ptr [rax + 0x38]; xor esi, dword ptr [rcx]; xchg eax, edi; call qword ptr [rbx + 0x7c]; 
0x0000000000475acb: add dl, byte ptr [rax]; add byte ptr [rax], al; mov eax, 0x9e; syscall; 
0x00000000004be42c: add dl, dh; cld; call qword ptr [rax - 0xc]; 
0x00000000004ca316: add dword ptr [0xfffffffff501c501], ecx; add al, byte ptr [rax]; ret; 
0x00000000004c2984: add dword ptr [r14], 3; mov byte ptr [rcx], al; ret; 
0x000000000044a936: add dword ptr [r8 + 0x39], r9d; ret; 
0x000000000041022a: add dword ptr [r8 + 4], 1; mov rax, qword ptr [rdx + 0xd8]; mov rbx, rdx; mov rdi, rdx; call qword ptr [rax + 0x60]; 
0x000000000046ab6e: add dword ptr [r8 - 0x7d], ecx; ret 0x4502; 
0x000000000046b2c2: add dword ptr [r8 - 0x7d], ecx; ret 0x8508; 
0x000000000043f382: add dword ptr [rax + 0x10], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000449fa0: add dword ptr [rax + 0x19], ecx; ror byte ptr [rax - 0x7d], cl; ret 0x4906; 
0x000000000043b8a1: add dword ptr [rax + 0x28d4802], ecx; ret; 
0x000000000047d379: add dword ptr [rax + 0x39], ecx; ret 0x1272; 
0x000000000047d38b: add dword ptr [rax + 0x39], ecx; ret 0x674; 
0x000000000048b460: add dword ptr [rax + 0x39], ecx; ret 0x8948; 
0x000000000045a3ad: add dword ptr [rax + 0x39], ecx; ret 0x8d0f; 
0x0000000000415b81: add dword ptr [rax + 0x39], ecx; ret; 
0x000000000049d6e9: add dword ptr [rax + 0x63], ecx; ret; 
0x0000000000416643: add dword ptr [rax + 0xf740a39], eax; cmp rsi, rcx; jne 0x16640; lea eax, dword ptr [rdx + rdi]; ret; 
0x0000000000464f43: add dword ptr [rax + 1], ecx; ret; 
0x000000000040e356: add dword ptr [rax + 1], ecx; ror byte ptr [rax - 0x77], 1; ret 0xe281; 
0x000000000041022b: add dword ptr [rax + 4], 1; mov rax, qword ptr [rdx + 0xd8]; mov rbx, rdx; mov rdi, rdx; call qword ptr [rax + 0x60]; 
0x0000000000473888: add dword ptr [rax + rax], edx; mov eax, 0x10; sub rsp, 0x30; mov rdx, rsp; syscall; 
0x00000000004c5e6e: add dword ptr [rax + rbp*2], 0xa; ret; 
0x0000000000458e96: add dword ptr [rax - 0x39], ecx; ret 0xfff0; 
0x0000000000403043: add dword ptr [rax - 0x6bf0d006], eax; ret 0xb60f; 
0x000000000049c04a: add dword ptr [rax - 0x73], ecx; push rdi; add ecx, dword ptr [rax + 0x63]; ret; 
0x0000000000400b6c: add dword ptr [rax - 0x75], ecx; clc; mov qword ptr [rax], rdx; nop; leave; ret; 
0x000000000043a0f1: add dword ptr [rax - 0x776b7fe], ecx; ret; 
0x000000000047d21d: add dword ptr [rax - 0x77], ecx; adc byte ptr [r11 + 0x5d], bl; pop r12; ret; 
0x000000000043b9b2: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; lea rax, qword ptr [rdx + 0xc]; ret; 
0x000000000043a1a2: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; mov rax, rdi; ret; 
0x000000000043a0d2: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; or byte ptr [r8 - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000043a082: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000043b932: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rbx + 0x42890541]; add eax, 0x8428d48; ret; 
0x000000000043a192: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rbx + 0x42890841]; or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000047cae7: add dword ptr [rax - 0x77], ecx; add eax, 0x2598e1; add rsp, 8; ret; 
0x00000000004689c9: add dword ptr [rax - 0x77], ecx; lea esi, dword ptr [rax - 0x77000005]; adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000415983: add dword ptr [rax - 0x77], ecx; or byte ptr [r15], cl; mov dh, 2; pop rbx; ret; 
0x00000000004191fe: add dword ptr [rax - 0x77], ecx; pop r8; mov dword ptr [rdi + 4], eax; ret; 
0x0000000000415b1a: add dword ptr [rax - 0x77], ecx; push rbx; or byte ptr [rdi], cl; mov dh, 0; pop rbx; ret; 
0x000000000045c3e1: add dword ptr [rax - 0x77], ecx; push rbx; sub dh, al; add byte ptr [rip - 0x2fd17], ch; jmp qword ptr [rsi - 0x70]; 
0x00000000004593ad: add dword ptr [rax - 0x77], ecx; push rbx; sub dh, al; add byte ptr [rip - 0x42117], ch; jmp qword ptr [rsi + 0xf]; 
0x000000000045bf91: add dword ptr [rax - 0x77], ecx; push rbx; sub dh, al; add byte ptr [rip - 0xa8d17], ch; jmp qword ptr [rsi - 0x70]; 
0x000000000047a867: add dword ptr [rax - 0x77], ecx; ret 0x8348; 
0x000000000041386f: add dword ptr [rax - 0x77], ecx; ret 0x850f; 
0x000000000046dde1: add dword ptr [rax - 0x77], ecx; ret; 
0x000000000047857b: add dword ptr [rax - 0x7b], ecx; sal byte ptr [rcx + rdx + 0x4c], cl; mov dword ptr [rsp], eax; lea rdi, qword ptr [rax + 0x6cc1e0]; call rdx; 
0x000000000047c434: add dword ptr [rax - 0x7d], ecx; ret 0x4101; 
0x000000000046ab6f: add dword ptr [rax - 0x7d], ecx; ret 0x4502; 
0x00000000004511f9: add dword ptr [rax - 0x7d], ecx; ret 0x4801; 
0x000000000041b9f6: add dword ptr [rax - 0x7d], ecx; ret 0x4810; 
0x00000000004451ec: add dword ptr [rax - 0x7d], ecx; ret 0x4830; 
0x00000000004536d3: add dword ptr [rax - 0x7d], ecx; ret 0x4910; 
0x00000000004478fe: add dword ptr [rax - 0x7d], ecx; ret 0x4d02; 
0x00000000004828b4: add dword ptr [rax - 0x7d], ecx; ret 0x6610; 
0x00000000004976f3: add dword ptr [rax - 0x7d], ecx; ret 0x8008; 
0x000000000046b2c3: add dword ptr [rax - 0x7d], ecx; ret 0x8508; 
0x0000000000463d3a: add dword ptr [rax - 0x7d], ecx; ret 0xf01; 
0x0000000000426272: add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000443309: add dword ptr [rax], 0x1ba0000; add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; 
0x00000000004c71cd: add dword ptr [rax], 0xfaf38000; jmp qword ptr [rbx + 5]; 
0x0000000000413174: add dword ptr [rax], eax; add al, al; sub dword ptr [rdx], ecx; mov rax, qword ptr [rbp + 0xd8]; call qword ptr [rax + 0x40]; 
0x0000000000413b37: add dword ptr [rax], eax; add al, al; sub dword ptr [rdx], ecx; mov rax, qword ptr [rbx + 0xd8]; call qword ptr [rax + 0x20]; 
0x0000000000401937: add dword ptr [rax], eax; add al, byte ptr [rax]; mov edi, 0x4a1e23; mov eax, 2; syscall; 
0x000000000049b893: add dword ptr [rax], eax; add bl, ch; xchg eax, ebx; nop dword ptr [rax + rax]; mov eax, 5; ret; 
0x0000000000410336: add dword ptr [rax], eax; add bl, dh; ret; 
0x000000000044ce46: add dword ptr [rax], eax; add byte ptr [rax + 0x29], cl; ret 0x349; 
0x000000000044bfbe: add dword ptr [rax], eax; add byte ptr [rax + 0x29], cl; ret 0xe183; 
0x000000000047c544: add dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; ret 0xf48; 
0x000000000046e213: add dword ptr [rax], eax; add byte ptr [rax + 0xf], cl; mov ebp, 0xf80148c0; ret; 
0x0000000000498d17: add dword ptr [rax], eax; add byte ptr [rax + 1], cl; ret; 
0x0000000000421b19: add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret 0xffdf; 
0x00000000004689c3: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add qword ptr [rax - 0x77], rcx; lea esi, dword ptr [rax - 0x77000005]; adc byte ptr [rax - 0x7d], cl; ret; 
0x000000000041bbab: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; push rax; adc dh, dh; ret 0xf0f; 
0x00000000004187fa: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; add eax, 0x2b4ddc; test rax, rax; je 0x1880b; call rax; 
0x00000000004104e0: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000041f10e: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; pop r12; ret; 
0x000000000044fd55: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8b41; 
0x000000000049ca85: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000411f26: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x000000000046d218: add dword ptr [rax], eax; add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rdi*4 - 0xa]; ret 0x7508; 
0x000000000041f026: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x000000000041f150: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x000000000040f56d: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000042403d: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044a3f4: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x8901; 
0x000000000042604e: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000042cabf: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000423f91: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000406227: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000044d1a2: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; rol byte ptr [rcx + rcx*2], 0x39; ret; 
0x000000000046c7a0: add dword ptr [rax], eax; add byte ptr [rax - 1], bh; pop rbx; ret; 
0x0000000000445671: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000004b1f7a: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; call rdi; 
0x00000000004b112a: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; call rsp; 
0x00000000004b0f4a: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x1d4; 
0x00000000004b16e2: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x1d5; 
0x00000000004b0f52: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000043f3f5: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000046b6f6: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000401e38: add dword ptr [rax], eax; add byte ptr [rax], al; call rax; 
0x0000000000441887: add dword ptr [rax], eax; add byte ptr [rax], al; call rbx; 
0x0000000000441d1b: add dword ptr [rax], eax; add byte ptr [rax], al; je 0x42260; xor esi, esi; mov rdi, r12; call rbx; 
0x00000000004417ee: add dword ptr [rax], eax; add byte ptr [rax], al; je 0x42280; xor esi, esi; mov rdi, r12; call rbx; 
0x0000000000444dd0: add dword ptr [rax], eax; add byte ptr [rax], al; je 0x44de0; mov dword ptr [rip + 0x2861bc], edx; pop rbx; ret; 
0x000000000049d4ed: add dword ptr [rax], eax; add byte ptr [rax], al; jmp rax; 
0x000000000041b5f4: add dword ptr [rax], eax; add byte ptr [rax], al; lea rsi, qword ptr [rsp + 0x30]; mov rdi, r9; mov eax, r8d; syscall; 
0x00000000004620e6: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rbp - 0x1070], 0; mov rax, qword ptr [rax*8 + 0x4b44a0]; jmp rax; 
0x0000000000462193: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rbp - 0x1070], 1; mov rax, qword ptr [rax*8 + 0x4b44a0]; jmp rax; 
0x0000000000462612: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rbp - 0x1088], 0; mov rax, qword ptr [rax*8 + 0x4b44a0]; jmp rax; 
0x000000000044330e: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xca; syscall; 
0x000000000043f713: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xe5; syscall; 
0x000000000044f8e1: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 3; syscall; 
0x000000000049d168: add dword ptr [rax], eax; add byte ptr [rax], al; mov edi, 1; call rax; 
0x00000000004796dd: add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 0x81; add rdi, 0x1c; mov eax, 0xca; syscall; 
0x0000000000441a6f: add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 1; mov rdi, r12; call rbx; 
0x0000000000441ced: add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 2; mov rdi, r12; call rbx; 
0x000000000044f82b: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rdi + 0x10], 0; mov rdi, qword ptr [rdi]; syscall; 
0x000000000048bf0e: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rdi], rsi; ret; 
0x000000000044f8db: add dword ptr [rax], eax; add byte ptr [rax], al; mov r13d, 1; mov eax, 3; syscall; 
0x0000000000460dcc: add dword ptr [rax], eax; add byte ptr [rax], al; mov rax, qword ptr [rax*8 + 0x4b43a0]; jmp rax; 
0x000000000046219d: add dword ptr [rax], eax; add byte ptr [rax], al; mov rax, qword ptr [rax*8 + 0x4b44a0]; jmp rax; 
0x00000000004625d4: add dword ptr [rax], eax; add byte ptr [rax], al; mov rax, qword ptr [rax*8 + 0x4b45a0]; jmp rax; 
0x0000000000460e62: add dword ptr [rax], eax; add byte ptr [rax], al; mov rax, qword ptr [rax*8 + 0x4b48a0]; jmp rax; 
0x0000000000441a74: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, r12; call rbx; 
0x0000000000441940: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, r13; call rbx; 
0x00000000004418b8: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, r14; call rbx; 
0x0000000000441cfe: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbp; call rbx; 
0x000000000046a899: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x0000000000412139: add dword ptr [rax], eax; add byte ptr [rax], al; mov rsi, rbx; mov rdi, r12; mov eax, r9d; syscall; 
0x000000000045d0fb: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; pop r12; pop r13; ret; 
0x0000000000415f83: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000043f48c: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x0000000000444d97: add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000049d5ad: add dword ptr [rax], eax; add byte ptr [rax], al; sbb eax, eax; cmp qword ptr [rsi + 8], rcx; cmova eax, edx; ret; 
0x00000000004126a6: add dword ptr [rax], eax; add byte ptr [rax], al; sub dword ptr [rdx], ecx; pop rbx; ret; 
0x00000000004003d6: add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x000000000043feea: add dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x000000000047d91d: add dword ptr [rax], eax; add byte ptr [rax], bh; test rax, rax; je 0x7d931; mov edi, 0x6cc140; call rax; 
0x00000000004408d3: add dword ptr [rax], eax; add byte ptr [rbp + 0x14490fc0], al; and al, 0x48; add esp, 0x18; mov eax, edx; ret; 
0x000000000041be3c: add dword ptr [rax], eax; add byte ptr [rbp + 0x39], cl; ret 0x976; 
0x000000000041c78d: add dword ptr [rax], eax; add byte ptr [rbx + 0x488d2404], cl; add dword ptr [rcx], eax; ror byte ptr [rax - 0x73], 0x54; ret; 
0x000000000049ca5e: add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000400605: add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000444e83: add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004706c8: add dword ptr [rax], eax; add byte ptr [rbx - 0x38b7cf18], al; ret; 
0x0000000000410e52: add dword ptr [rax], eax; add byte ptr [rbx - 0x7af0fd03], al; ret 0; 
0x000000000046b262: add dword ptr [rax], eax; add byte ptr [rbx - 0x7bf0fd1e], al; ret 1; 
0x0000000000443a7e: add dword ptr [rax], eax; add byte ptr [rbx - 0x7cbefe39], al; ret 0x4901; 
0x00000000004040f1: add dword ptr [rax], eax; add byte ptr [rcx + 0x63], cl; cld; mov eax, 3; syscall; 
0x000000000049e8d1: add dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; jbe 0x9e8e0; mov rdx, qword ptr [r15]; mov rdi, rbp; call rbx; 
0x00000000004671ca: add dword ptr [rax], eax; add byte ptr [rcx - 0x7afcb730], cl; push -0x7c000006; ret 0x8908; 
0x000000000042084e: add dword ptr [rax], eax; add byte ptr [rcx - 0x7d], cl; ret 0xe96e; 
0x0000000000446a6c: add dword ptr [rax], eax; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000041db6b: add dword ptr [rax], eax; add byte ptr [rcx - 0xa], al; ret 0xf01; 
0x000000000041abc1: add dword ptr [rax], eax; add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x000000000044a06e: add dword ptr [rax], eax; add byte ptr [rcx - 0xa], al; ret; 
0x0000000000470ce7: add dword ptr [rax], eax; add byte ptr [rcx], bh; ror dword ptr [rdi], -0x6c; ret; 
0x00000000004142b8: add dword ptr [rax], eax; add byte ptr [rcx], cl; ret 0x8948; 
0x000000000049a540: add dword ptr [rax], eax; add byte ptr [rcx], dh; ror byte ptr [rax], cl; leave; cmove rax, rdx; ret; 
0x0000000000447a15: add dword ptr [rax], eax; add byte ptr [rcx], dh; ror byte ptr [rcx + 0x39], cl; ret 0x2176; 
0x000000000049bd42: add dword ptr [rax], eax; add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x00000000004bf1bd: add dword ptr [rax], eax; add byte ptr [rdi], cl; sbb esi, esp; call qword ptr [rdx]; 
0x000000000044044b: add dword ptr [rax], eax; add byte ptr [rdx + 0x80000], bh; mov esi, 0x4a5790; movsxd rdi, dword ptr [rsp + 0x10]; mov eax, 0x101; syscall; 
0x0000000000472fbd: add dword ptr [rax], eax; add byte ptr [rdx + 0x90800], bh; movsxd rdi, edi; mov eax, ecx; sub rsp, 0x98; syscall; 
0x0000000000446498: add dword ptr [rax], eax; add byte ptr [rsi + 0x447090], bh; mov edi, 0x6cd6d8; call rax; 
0x000000000048c56a: add dword ptr [rax], eax; add byte ptr [rsi + 0x48c500], bh; mov edi, 0x6cd9c0; call rax; 
0x00000000004120ad: add dword ptr [rax], eax; add byte ptr [rsi + 0x902], bh; mov edi, 0x4a2ac7; mov eax, 2; syscall; 
0x000000000046d30c: add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x000000000046d174: add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x000000000046c884: add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000043c7c5: add dword ptr [rax], eax; add dh, dh; ret 0x7501; 
0x000000000043c7d2: add dword ptr [rax], eax; add dh, dh; ret 0x7502; 
0x000000000043c7df: add dword ptr [rax], eax; add dh, dh; ret 0x7504; 
0x000000000043c797: add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x000000000043c7a4: add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x000000000043c7b1: add dword ptr [rax], eax; add dh, dh; ret 0x7540; 
0x0000000000401190: add dword ptr [rax], eax; jne 0x11b5; nop dword ptr [rax]; call qword ptr [rbx + 0x10]; 
0x000000000048f571: add dword ptr [rax], eax; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000048f266: add dword ptr [rax], eax; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000421d57: add dword ptr [rax], eax; mov edx, 0; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x0000000000491202: add dword ptr [rax], eax; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000421d88: add dword ptr [rax], eax; ret; 
0x0000000000426671: add dword ptr [rax], edi; ret; 
0x000000000044e776: add dword ptr [rax], edi; test rax, rax; je 0x4e788; mov edi, 0x6cd720; call rax; 
0x000000000041f10d: add dword ptr [rax], r8d; add byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; pop r12; ret; 
0x000000000043e5d7: add dword ptr [rbp + 0x16], esi; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x3e5d0; sub rax, 1; ret; 
0x000000000043e487: add dword ptr [rbp + 0x16], esi; movzx edx, byte ptr [rsi + rax + 3]; test dl, dl; jne 0x3e480; lea rax, qword ptr [rcx - 1]; ret; 
0x000000000043ec47: add dword ptr [rbp + 0x41], ebx; pop rsp; pop r13; ret; 
0x000000000046b2bc: add dword ptr [rbp + 0xf48ff70], ecx; add dword ptr [r8 - 0x7d], ecx; ret 0x8508; 
0x000000000046b40b: add dword ptr [rbp + 0xf48ff78], ecx; add dword ptr [r8 - 0x7d], ecx; ret 0x8508; 
0x000000000046ab67: add dword ptr [rbp + rcx*4 + 0x46], eax; dec dword ptr [rax + 0xf]; add dword ptr [r8 - 0x7d], ecx; ret 0x4502; 
0x000000000046acf3: add dword ptr [rbp + rcx*4 + 0x4f], eax; dec dword ptr [rax + 0xf]; add dword ptr [r8 - 0x7d], ecx; ret 0x4502; 
0x00000000004983d2: add dword ptr [rbp + rcx*4 + 0x74], ecx; ret; 
0x00000000004829a3: add dword ptr [rbp - 0x57f2faf], ecx; or cl, byte ptr [rdi]; xchg eax, edx; ret 0xb60f; 
0x0000000000468907: add dword ptr [rbp - 0x7b], eax; in al, 0xf; lahf; ret 0x2941; 
0x0000000000443139: add dword ptr [rbp - 0xc], esi; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x0000000000435fe2: add dword ptr [rbx + 0x157890e], ecx; mov dword ptr [rdi], ecx; ret; 
0x000000000049562a: add dword ptr [rbx + 0x41], ebx; mov dword ptr [rdx + 0xc], edi; pop rbp; pop r12; pop r14; ret; 
0x00000000004767a5: add dword ptr [rbx - 0x77], eax; je 0x7672e; sub byte ptr [rax + 0x39], cl; ret 0x1376; 
0x000000000040dd8d: add dword ptr [rbx - 0x7cb70030], eax; ret; 
0x0000000000468569: add dword ptr [rbx - 0x7cf0f706], eax; xchg eax, edx; add byte ptr [rax], al; add dh, dh; ret 0x7504; 
0x00000000004ca361: add dword ptr [rbx], eax; cmc; add al, byte ptr [rax]; ret; 
0x000000000041b5ca: add dword ptr [rbx], ebp; add byte ptr [rbp + 0x64], dh; mov esi, 0x80000; mov edi, 0x4a34a0; mov eax, 2; syscall; 
0x000000000041b626: add dword ptr [rbx], ebp; add byte ptr [rcx + rcx*4 - 0x31], cl; mov eax, 3; syscall; 
0x00000000004ca35e: add dword ptr [rbx], ecx; fadd dword ptr [rcx]; add esi, ebp; add al, byte ptr [rax]; ret; 
0x000000000043b921: add dword ptr [rcx + 0x3418b02], ecx; mov dword ptr [rdx + 3], eax; lea rax, qword ptr [rdx + 6]; ret; 
0x000000000043a151: add dword ptr [rcx + 0x3418b02], ecx; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x0000000000472cb9: add dword ptr [rcx + 0x39], ecx; ret 0x850f; 
0x0000000000447a3a: add dword ptr [rcx + 0x39], ecx; ret 0xe077; 
0x0000000000447ec8: add dword ptr [rcx + 0x39], ecx; ret 0xe277; 
0x000000000043b901: add dword ptr [rcx + 0x418b6602], ecx; add al, 0x66; mov dword ptr [rdx + 4], eax; lea rax, qword ptr [rdx + 5]; ret; 
0x000000000043a141: add dword ptr [rcx + 0x418b6602], ecx; add al, 0x66; mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x000000000043b8f1: add dword ptr [rcx + 0x4418a02], ecx; mov byte ptr [rdx + 4], al; lea rax, qword ptr [rdx + 4]; ret; 
0x000000000043a131: add dword ptr [rcx + 0x4418a02], ecx; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x000000000043fdd2: add dword ptr [rcx + 0x483177f0], ecx; movsxd rdi, eax; mov rsi, rdx; mov eax, 5; syscall; 
0x0000000000442e5e: add dword ptr [rcx + rdi - 0xe], ecx; jne 0x42e50; movsxd rdi, dword ptr [rbp - 0x58]; mov eax, 3; syscall; 
0x000000000041c483: add dword ptr [rcx - 0x75], ecx; push rax; or dh, dh; ret 0xf04; 
0x000000000043a121: add dword ptr [rcx - 0x776b7fe], ecx; ret; 
0x000000000046a680: add dword ptr [rcx - 0x77], eax; ret 0xe883; 
0x0000000000443a83: add dword ptr [rcx - 0x7d], eax; ret 0x4901; 
0x0000000000446a1d: add dword ptr [rcx - 0x7d], ecx; ret 0x4101; 
0x0000000000404a7d: add dword ptr [rcx - 0x7d], ecx; ret 0x4804; 
0x000000000045954b: add dword ptr [rcx - 0x7f], ecx; jmp qword ptr [rax - 0x67]; 
0x0000000000426067: add dword ptr [rcx], 0; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x0000000000412272: add dword ptr [rcx], 0x2be0000; or dword ptr [rax], eax; add byte ptr [rdi + 0x4a2ac7], bh; mov eax, 2; syscall; 
0x000000000044025b: add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000041c795: add dword ptr [rcx], eax; ror byte ptr [rax - 0x73], 0x54; ret; 
0x000000000045b80d: add dword ptr [rcx], ebx; jmp qword ptr [rsi - 0x3f]; 
0x000000000046f5df: add dword ptr [rcx], esi; leave; xor edx, edx; lea r9, qword ptr [rsp + 0x20]; lea rsi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000004c7ddd: add dword ptr [rdi], 0x48; or eax, 0x1370303; ret; 
0x00000000004c7d6d: add dword ptr [rdi], 0x48; or eax, 0x34b0303; ret; 
0x00000000004c7da5: add dword ptr [rdi], 0x48; or eax, 0x35b0303; ret; 
0x00000000004c7d7e: add dword ptr [rdi], 0xd; add eax, dword ptr [rbx]; or al, byte ptr [rcx]; ret; 
0x00000000004c7db6: add dword ptr [rdi], 0xd; add eax, dword ptr [rdx]; cld; ret; 
0x00000000004c7dee: add dword ptr [rdi], 0xd; add eax, dword ptr [rdx]; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004c3875: add dword ptr [rdi], 3; mov bh, 1; ret; 
0x00000000004c7673: add dword ptr [rdi], 3; mov bl, 2; ret; 
0x00000000004c92f3: add dword ptr [rdi], 3; pop rbx; add cl, byte ptr [rdx]; ret; 
0x00000000004c9242: add dword ptr [rdi], 3; test byte ptr [rcx], al; ret; 
0x000000000043eca8: add dword ptr [rdi], ecx; scasd eax, dword ptr [rdi]; ret 0x72e9; 
0x000000000043ec93: add dword ptr [rdi], ecx; scasd eax, dword ptr [rdi]; ret 0xaf0f; 
0x000000000045c8e1: add dword ptr [rdi], ecx; test bl, dl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000041a5f5: add dword ptr [rdi], ecx; test dword ptr [rax + rax - 0x74b80000], ecx; add ecx, dword ptr [rax + 0x29]; ret; 
0x0000000000418d5e: add dword ptr [rdi], ecx; test dword ptr [rbx], ecx; add eax, dword ptr [rax]; add byte ptr [rcx - 0xa], al; ret; 
0x000000000041b0dd: add dword ptr [rdi], ecx; test ebx, esi; add al, byte ptr [rax]; add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x000000000041db71: add dword ptr [rdi], ecx; test edx, esp; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x000000000047d597: add dword ptr [rdi], ecx; xchg eax, edx; ret 0x8348; 
0x000000000047de04: add dword ptr [rdi], ecx; xchg eax, edx; ret 0xb60f; 
0x000000000043eb6d: add dword ptr [rdi], ecx; xchg eax, esp; ret 0x8341; 
0x000000000043e732: add dword ptr [rdx + 2], esi; mov byte ptr [rdi], cl; ret; 
0x000000000043632d: add dword ptr [rdx + 4], esi; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000049a59b: add dword ptr [rdx + rax*2], 1; ret; 
0x00000000004c0a0e: add dword ptr [rdx + rax], -0xc; ret; 
0x00000000004764c7: add dword ptr [rdx + rdx*8 - 0x7cb7eb8c], eax; ret; 
0x0000000000436286: add dword ptr [rdx - 0x2f], esp; jl 0x362d3; adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000043e843: add dword ptr [rdx - 0xf], esp; jl 0x3e890; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043e983: add dword ptr [rdx - 0xf], esp; jl 0x3e9d0; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x00000000004c1c5d: add dword ptr [rdx], 0x43; ret; 
0x00000000004c7b65: add dword ptr [rdx], 0x48; ret; 
0x00000000004ca0dc: add dword ptr [rdx], 0x54; ret; 
0x00000000004c7624: add dword ptr [rdx], 0x55; ret; 
0x00000000004c7b5c: add dword ptr [rdx], 0x5b; ret; 
0x00000000004ca084: add dword ptr [rdx], 0x69; ret; 
0x00000000004c5fbc: add dword ptr [rdx], 2; pop rsi; ret; 
0x00000000004c5d94: add dword ptr [rdx], 2; push rsi; ret; 
0x000000000046f680: add dword ptr [rdx], ebp; lea rcx, qword ptr [rax + 4]; lea r9, qword ptr [rsp + 0x20]; lea rdx, qword ptr [rsp + 0x28]; lea rsi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000004c0b1a: add dword ptr [rdx], ecx; ret; 
0x00000000004bfc33: add dword ptr [rip + 0x14300e4c], 0; add byte ptr [rax], al; mov esp, 0xc000000b; cmc; hlt; call qword ptr [rbx]; 
0x00000000004172c8: add dword ptr [rip + 0x2b62d5], 1; ret; 
0x0000000000433364: add dword ptr [rsi + 0x11], esi; mov cx, word ptr [rsi + rdx - 2]; mov si, word ptr [rsi]; mov word ptr [rdi], si; mov word ptr [rdi + rdx - 2], cx; ret; 
0x00000000004bff6e: add dword ptr [rsi + rcx + 0x10], ecx; je 0xbff7e; ret; 
0x00000000004c0624: add dword ptr [rsi + rcx + 0x20], ecx; add byte ptr [rax], r8b; add byte ptr [rbp + rdx + 0x23100000], ch; cmc; call qword ptr [rsi + 4]; 
0x00000000004c5a3b: add dword ptr [rsi + rcx + 0x60], ecx; add byte ptr [rax + rax], ah; add ah, al; imul eax, dword ptr [rax], 0xfa61b800; jmp qword ptr [rdi + 1]; 
0x00000000004c0bec: add dword ptr [rsi + rcx + 8], ecx; add byte ptr [rax], r8b; add byte ptr [rbx + rbx], dh; add byte ptr [rax + 0x42], bl; cmc; call qword ptr [rcx + 2]; 
0x000000000043a102: add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000043a112: add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rdx + 0x42880241]; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x0000000000497788: add dword ptr [rsi - 0x77], esp; xor byte ptr [rbx - 0xbf7b], cl; jmp qword ptr [rsi - 0x77]; 
0x00000000004c0e1e: add dword ptr [rsi], 0xa; ret; 
0x00000000004c0e90: add dword ptr [rsi], 2; xchg eax, ebp; ret; 
0x00000000004c2985: add dword ptr [rsi], 3; mov byte ptr [rcx], al; ret; 
0x000000000040138d: add dword ptr [rsi], edx; and eax, 0xf; mov dword ptr [r8], eax; pop rbx; ret; 
0x00000000004c3366: add dword ptr [rsp + rbp*2], 0xa; ret; 
0x00000000004187f9: add dword ptr cs:[rax], eax; add byte ptr [rax - 0x75], cl; add eax, 0x2b4ddc; test rax, rax; je 0x1880b; call rax; 
0x0000000000492ac7: add dword ptr es:[rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004120ac: add dword ptr es:[rax], eax; add byte ptr [rsi + 0x902], bh; mov edi, 0x4a2ac7; mov eax, 2; syscall; 
0x00000000004c930a: add dword ptr es:[rdx], ecx; ret; 
0x00000000004447f0: add dword ptr fs:[rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000427728: add eax, 0x12ad3; ret; 
0x00000000004bfc34: add eax, 0x14300e4c; add byte ptr [rax], al; add byte ptr [rbx + rcx - 0xa400000], bh; hlt; call qword ptr [rbx]; 
0x00000000004241f8: add eax, 0x14853; ret; 
0x0000000000426b9a: add eax, 0x15e71; ret; 
0x0000000000427174: add eax, 0x17647; ret; 
0x0000000000421d85: add eax, 0x1a966; ret; 
0x0000000000426b7e: add eax, 0x1d; ret; 
0x000000000045025c: add eax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x00000000004a0b57: add eax, 0x22cbb0; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000049ed82: add eax, 0x22efc9; mov qword ptr [rip + 0x22efc2], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000049ec2a: add eax, 0x22f121; mov qword ptr [rip + 0x22f11a], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x00000000004c24cc: add eax, 0x2300e4a; ret; 
0x000000000049a58c: add eax, 0x23359f; jae 0x9a59f; mov rdx, qword ptr [rip + 0x23359e]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000049a7a1: add eax, 0x23c11a; ret; 
0x000000000048cc3a: add eax, 0x240a4d; add byte ptr [rdx], al; add byte ptr [rax], al; jne 0x8cc4c; lea rax, qword ptr [rip + 4]; ret; 
0x000000000048cbe7: add eax, 0x240aa0; add byte ptr [rdx], al; add byte ptr [rax], al; jne 0x8cbf9; lea rax, qword ptr [rip + 0x67]; ret; 
0x0000000000480bda: add eax, 0x24cdbd; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000047cc22: add eax, 0x24e469; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x259797]; mov qword ptr [rsi], rax; ret; 
0x000000000047cc2c: add eax, 0x259797; mov qword ptr [rsi], rax; ret; 
0x000000000047cbcb: add eax, 0x259800; ret; 
0x000000000047caea: add eax, 0x2598e1; add rsp, 8; ret; 
0x0000000000470a57: add eax, 0x265f7c; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044d84c: add eax, 0x27feab; add byte ptr [rax], al; add byte ptr [rax], al; movsxd rdi, ebx; mov eax, 3; syscall; 
0x000000000044d672: add eax, 0x280089; ret; 
0x0000000000446302: add eax, 0x290621; ret; 
0x0000000000444db1: add eax, 0x291b5a; test eax, eax; je 0x44dc0; ret; 
0x00000000004431c1: add eax, 0x2936fa; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000426b85: add eax, 0x2a6b02; add byte ptr [rax], al; or byte ptr [rax], al; je 0x26b98; lea rax, qword ptr [rip + 0x8449]; ret; 
0x0000000000426b71: add eax, 0x2a6b16; add byte ptr [rdx], al; add byte ptr [rax], al; jne 0x26b84; lea rax, qword ptr [rip + 0x1d]; ret; 
0x0000000000426801: add eax, 0x2a6ec1; adc byte ptr [rdx + 0x426230], bh; mov eax, 0x43e180; cmove rax, rdx; ret; 
0x0000000000421fcb: add eax, 0x2ab6bc; add byte ptr [rdx], al; add byte ptr [rax], al; jne 0x21fdd; lea rax, qword ptr [rip + 3]; ret; 
0x0000000000421d78: add eax, 0x2ab947; add al, 0; add byte ptr [rax], al; je 0x21d8a; lea rax, qword ptr [rip + 0x1a966]; ret; 
0x000000000041fa80: add eax, 0x2adb6b; test rax, rax; je 0x1fa8c; call rax; 
0x000000000041e6a9: add eax, 0x2aef56; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000041b624: add eax, 0x2b0137; mov rdi, r9; mov eax, 3; syscall; 
0x0000000000417232: add eax, 0x2b3e89; ret; 
0x00000000004187ff: add eax, 0x2b4ddc; test rax, rax; je 0x1880b; call rax; 
0x0000000000417336: add eax, 0x2b6269; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000401d1b: add eax, 0x2c9370; xor eax, eax; ret; 
0x0000000000400706: add eax, 0x2cb9a5; pop rbp; pop r12; ret; 
0x0000000000400965: add eax, 0x2cc1f5; add ebx, esi; ret; 
0x0000000000400cc7: add eax, 0x2cd6e4; nop; leave; ret; 
0x00000000004c2983: add eax, 0x3068345; mov byte ptr [rcx], al; ret; 
0x00000000004bf59d: add eax, 0x3de00000; hlt; call qword ptr [rbp + 9]; 
0x000000000040107f: add eax, 0x4273be8; add cl, cl; ret; 
0x000000000049c623: add eax, 0x438b5877; or byte ptr [rcx + 0x63], cl; add al, 0x86; add rax, r14; jmp rax; 
0x000000000043b938: add eax, 0x48054289; lea eax, dword ptr [rdx + 8]; ret; 
0x000000000043a168: add eax, 0x48054289; mov eax, edi; ret; 
0x0000000000435c63: add eax, 0x480e8b48; mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000043c496: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; lea rax, qword ptr [rdi + 0xc]; ret; 
0x000000000043be36: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; ret; 
0x00000000004365eb: add eax, 0x487c5162; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000043ea20: add eax, 0x487cf162; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000043b9b9: add eax, 0x5428948; lea rax, qword ptr [rdx + 0xc]; ret; 
0x000000000043a1a9: add eax, 0x5428948; mov rax, rdi; ret; 
0x000000000044345b: add eax, 0x5b000000; pop r12; pop r13; pop rbp; ret; 
0x000000000048c3c6: add eax, 0x5b000000; ret; 
0x00000000004b2b11: add eax, 0x5ba0000; add byte ptr [rax], al; mov esp, 0xbe000005; add eax, 0x5c00000; add byte ptr [rax], al; ret 5; 
0x00000000004b2b1d: add eax, 0x5c00000; add byte ptr [rax], al; ret 5; 
0x00000000004195f5: add eax, 0x5c415d5b; ret; 
0x0000000000423906: add eax, 0x633a0f66; add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000433eb7: add eax, 0x63490007; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000427844: add eax, 0x67; ret; 
0x00000000004009e1: add eax, 0x6cdd60; mov qword ptr [rbp - 8], rax; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000046d3b5: add eax, 0x74fc7239; sbb eax, 0xd8938b48; add byte ptr [rax], al; add byte ptr [rcx - 0x2076b73a], cl; call qword ptr [rdx + 0x30]; 
0x000000000043ec05: add eax, 0x75e48445; adc byte ptr [rbx - 0x6bf0fd06], al; ret 0x8444; 
0x0000000000482a23: add eax, 0x80d0518d; cli; or cl, byte ptr [rdi]; xchg eax, edx; ret 0xb60f; 
0x000000000043eb67: add eax, 0x8307e083; clc; add dword ptr [rdi], ecx; xchg eax, esp; ret 0x8341; 
0x0000000000423c2d: add eax, 0x83480000; ret 0x4910; 
0x000000000042b0b1: add eax, 0x83480000; ret 0xe910; 
0x0000000000423b81: add eax, 0x83480000; ret 0xeb10; 
0x0000000000473706: add eax, 0x841f0fc3; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; 
0x00000000004736f6: add eax, 0x841f0fc3; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; 
0x0000000000473716: add eax, 0x841f0fc3; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; 
0x000000000043b93b: add eax, 0x8428d48; ret; 
0x0000000000426b92: add eax, 0x8449; ret; 
0x000000000046814a: add eax, 0x89000001; ret 0x348; 
0x000000000044a5ed: add eax, 0x8d480000; add cl, byte ptr [rax + 0x39]; ret; 
0x000000000044a94e: add eax, 0x8d490000; add r9b, byte ptr [r8 + 0x39]; ret; 
0x000000000044a96b: add eax, 0x8d490000; add r9d, dword ptr [r8 + 0x39]; ret; 
0x0000000000401d14: add eax, 0x900; mov qword ptr [rip + 0x2c9370], rax; xor eax, eax; ret; 
0x000000000043003a: add eax, 0xc0310000; ret; 
0x000000000043b9bd: add eax, 0xc428d48; ret; 
0x000000000043c49d: add eax, 0xc478d48; ret; 
0x000000000044d732: add eax, 0xc63d8b48; jmp qword ptr [rdi]; 
0x000000000040f1d7: add eax, 0xc8c14818; adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x000000000049697e: add eax, 0xdc75d285; mov dword ptr fs:[0x2d0], eax; ret; 
0x0000000000435fca: add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000041b07b: add eax, 0xf05f883; test al, dh; add eax, 0xf6410000; ret 0xf01; 
0x0000000000419b1f: add eax, 0xf05f883; test bh, dl; add al, 0; add dh, dh; ret; 
0x0000000000417f31: add eax, 0xf05f883; test byte ptr [rbp - 0xa000000], ah; ret; 
0x000000000041eb62: add eax, 0xf05f883; test byte ptr [rbx - 0xa000000], cl; ret; 
0x00000000004189c2: add eax, 0xf05f883; test byte ptr [rdi - 0xa000000], cl; ret; 
0x000000000041db64: add eax, 0xf05f883; test dl, cl; add dword ptr [rax], eax; add byte ptr [rcx - 0xa], al; ret 0xf01; 
0x000000000041b14c: add eax, 0xf05fa83; test cl, bh; add eax, 0xf6410000; ret 0xf01; 
0x0000000000441d22: add eax, 0xf6310000; mov rdi, r12; call rbx; 
0x0000000000441d47: add eax, 0xf6310000; mov rdi, r13; call rbx; 
0x0000000000441e90: add eax, 0xf6310000; mov rdi, r14; call rbx; 
0x0000000000441f29: add eax, 0xf6310000; mov rdi, r15; call rbx; 
0x000000000041abb7: add eax, 0xf6410000; ret 0xf01; 
0x0000000000435fd3: add eax, 0xf7f0ff3; ret; 
0x00000000004a0c8c: add eax, 0xfaeefee8; dec dword ptr [rax - 0x75]; cmp ecx, dword ptr [rax - 0x75]; imul ebx, dword ptr [rax], -0x18; ret 0xf7dd; 
0x000000000047c42f: add eax, 0xfffffbd8; add dword ptr [rax - 0x7d], ecx; ret 0x4101; 
0x000000000048135a: add eax, 0xfffffff8; ret; 
0x000000000047d21b: add eax, 1; mov qword ptr [rbx + 0x10], rax; pop rbx; pop rbp; pop r12; ret; 
0x000000000047cae5: add eax, 1; mov qword ptr [rip + 0x2598e1], rax; add rsp, 8; ret; 
0x000000000043ec45: add eax, 1; pop rbp; pop r12; pop r13; ret; 
0x000000000046f051: add eax, 1; ret; 
0x0000000000445655: add eax, 2; push rax; call rbx; 
0x000000000046f048: add eax, 2; ret; 
0x0000000000421fd8: add eax, 3; ret; 
0x0000000000427897: add eax, 4; ret; 
0x00000000004501b9: add eax, dword ptr [0]; ret; 
0x000000000049ce44: add eax, dword ptr [rax + 0xd0]; add rsp, 0x18; ret; 
0x000000000045b92e: add eax, dword ptr [rax]; add al, ch; fisubr dword ptr [rdx]; sti; jmp qword ptr [rsi + 0x2e]; 
0x00000000004798f8: add eax, dword ptr [rax]; add bl, dh; ret; 
0x0000000000419793: add eax, dword ptr [rax]; add byte ptr [rax + 0x29], cl; ret 0x8d48; 
0x000000000041825b: add eax, dword ptr [rax]; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x0000000000479e4e: add eax, dword ptr [rax]; add byte ptr [rax + rcx*2], al; add esp, 8; ret; 
0x00000000004798b9: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; add al, 0x90; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x000000000044e878: add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000423dcd: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b251: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000423df1: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000478833: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000410249: add eax, dword ptr [rax]; add byte ptr [rax], 0; je 0x10258; mov eax, edx; pop rbx; ret; 
0x000000000048c245: add eax, dword ptr [rax]; add byte ptr [rax], 0; je 0x8c250; mov eax, edx; pop rbx; ret; 
0x00000000004462a6: add eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000047d524: add eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rbx + 0x24ec400d], al; add byte ptr [rcx], al; pop rbx; ret; 
0x0000000000441837: add eax, dword ptr [rax]; add byte ptr [rax], al; je 0x42338; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441bda: add eax, dword ptr [rax]; add byte ptr [rax], al; je 0x42358; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441ab5: add eax, dword ptr [rax]; add byte ptr [rax], al; je 0x42378; xor esi, esi; mov rdi, r14; call rbx; 
0x000000000044195c: add eax, dword ptr [rax]; add byte ptr [rax], al; je 0x42398; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442107: add eax, dword ptr [rax]; add byte ptr [rax], al; je 0x423b8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441fe2: add eax, dword ptr [rax]; add byte ptr [rax], al; je 0x423d8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441d64: add eax, dword ptr [rax]; add byte ptr [rax], al; je 0x42418; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000440a8c: add eax, dword ptr [rax]; add byte ptr [rax], al; jmp rax; 
0x00000000004418b3: add eax, dword ptr [rax]; add byte ptr [rax], al; mov esi, 1; mov rdi, r14; call rbx; 
0x000000000044192c: add eax, dword ptr [rax]; add byte ptr [rax], al; mov esi, 2; mov rdi, r14; call rbx; 
0x0000000000473103: add eax, dword ptr [rax]; add byte ptr [rax], al; mov esi, dword ptr fs:[rdx]; syscall; 
0x000000000044226d: add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r12; call rbx; 
0x00000000004422c4: add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r13; call rbx; 
0x0000000000442344: add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r14; call rbx; 
0x0000000000442444: add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r15; call rbx; 
0x0000000000412dc5: add eax, dword ptr [rax]; add byte ptr [rax], al; movsxd rdi, dword ptr [rbx + 0x70]; syscall; 
0x0000000000421fd9: add eax, dword ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000040048a: add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000047380a: add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x00000000004bf385: add eax, dword ptr [rax]; add byte ptr [rax], bh; sub esp, esi; jmp qword ptr [rbx]; 
0x0000000000498849: add eax, dword ptr [rax]; add byte ptr [rax], bh; test rax, rax; je 0x9885d; mov edi, 0x6cc140; call rax; 
0x000000000047f4f3: add eax, dword ptr [rax]; add byte ptr [rax], cl; je 0x7f55d; pop rbx; ret; 
0x000000000044333c: add eax, dword ptr [rax]; add byte ptr [rbp - 0x19], dh; and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x4334c; ret; 
0x0000000000478e66: add eax, dword ptr [rax]; add byte ptr [rbp - 0x7f7bf037], al; add al, byte ptr [rax]; add byte ptr [rbx + 0x25d9e115], cl; add bh, dh; ret 0x804; 
0x000000000043eca3: add eax, dword ptr [rax]; add byte ptr [rbx - 0x50f0fe40], al; ret 0x72e9; 
0x000000000047d58f: add eax, dword ptr [rax]; add byte ptr [rbx - 0x57fef1e], al; add dword ptr [rdi], ecx; xchg eax, edx; ret 0x8348; 
0x000000000047ddfc: add eax, dword ptr [rax]; add byte ptr [rbx - 0x57ffb1e], al; add dword ptr [rdi], ecx; xchg eax, edx; ret 0xb60f; 
0x00000000004984dc: add eax, dword ptr [rax]; add byte ptr [rcx + 0x3c8b48d8], cl; ret 0x87f6; 
0x0000000000443325: add eax, dword ptr [rax]; add byte ptr [rcx - 0x77], al; ret; 
0x0000000000418d62: add eax, dword ptr [rax]; add byte ptr [rcx - 0xa], al; ret; 
0x00000000004433c5: add eax, dword ptr [rax]; add byte ptr [rsi + 0x80], bh; syscall; 
0x000000000047a9d2: add eax, dword ptr [rax]; add cl, ch; xlatb; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x00000000004794e8: add eax, dword ptr [rax]; add dh, dh; ret 0xf08; 
0x000000000040fd98: add eax, dword ptr [rax]; add rsp, 0x80; add rsp, 0xd0; mov eax, esi; pop rbx; ret; 
0x000000000041028e: add eax, dword ptr [rax]; add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x0000000000401913: add eax, dword ptr [rax]; cmp eax, -1; je 0x1a03; add rsp, 0x98; ret; 
0x000000000044e09e: add eax, dword ptr [rax]; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000445f91: add eax, dword ptr [rax]; mov rdi, r12; mov rax, qword ptr [rbp - 0x58]; call rax; 
0x0000000000400f63: add eax, dword ptr [rax]; nop; pop rbp; ret; 
0x000000000043eec0: add eax, dword ptr [rax]; pop rbx; ret; 
0x000000000043eee0: add eax, dword ptr [rax]; ret; 
0x000000000043f729: add eax, dword ptr [rax]; sub rax, 1; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000004404d3: add eax, dword ptr [rax]; test r13b, r13b; je 0x404e6; movsxd rdi, dword ptr [rsp + 0x10]; mov eax, 3; syscall; 
0x00000000004c297d: add eax, dword ptr [rbp - 0x73]; add al, 0x45; mov word ptr [rip + 0x3068345], es; mov byte ptr [rcx], al; ret; 
0x00000000004983cb: add eax, dword ptr [rbp - 0x7cdc8b40]; call 0x7496cfd7; ret; 
0x00000000004c6ffb: add eax, dword ptr [rbx + 0xaf10204]; ret; 
0x00000000004c0b02: add eax, dword ptr [rbx + 0xe]; and byte ptr [rbx + 0xa4d0204], al; ret; 
0x000000000040058d: add eax, dword ptr [rbx - 0x7cb70038]; rol dword ptr [rbx + rbp*8], -0x34; mov qword ptr [rdi], rcx; ret; 
0x0000000000498b01: add eax, dword ptr [rbx]; call rax; 
0x000000000049839e: add eax, dword ptr [rbx]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call rax; 
0x00000000004c7d81: add eax, dword ptr [rbx]; or al, byte ptr [rcx]; ret; 
0x0000000000411cc4: add eax, dword ptr [rcx + 0x39]; fadd dword ptr [rdi + rcx + 0x47]; ret; 
0x0000000000496d8d: add eax, dword ptr [rcx + 0x5d]; pop r14; pop r15; ret; 
0x00000000004c93c3: add eax, dword ptr [rcx + 0xe]; and byte ptr [rbx + 0x1890304], al; ret; 
0x00000000004c052a: add eax, dword ptr [rcx + 0xe]; and byte ptr [rbx + 0xa470204], al; ret; 
0x0000000000473aba: add eax, dword ptr [rcx + rdx]; ret; 
0x0000000000434037: add eax, dword ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000047a715: add eax, dword ptr [rdi]; call rax; 
0x0000000000481104: add eax, dword ptr [rdx + 8]; add rsp, 0x48; ret; 
0x000000000047ea59: add eax, dword ptr [rdx + 8]; call rax; 
0x0000000000481318: add eax, dword ptr [rdx + 8]; je 0x81324; mov qword ptr [rax], 0x6ccac0; add rsp, 0x48; ret; 
0x00000000004c7db9: add eax, dword ptr [rdx]; cld; ret; 
0x00000000004c7df1: add eax, dword ptr [rdx]; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004c0a0a: add eax, dword ptr [rsi + rcx + 0x20]; add dword ptr [rdx + rax], -0xc; ret; 
0x00000000004c3362: add eax, dword ptr [rsi + rcx + 0x20]; add dword ptr [rsp + rbp*2], 0xa; ret; 
0x000000000047a27b: add eax, dword ptr [rsp]; call rax; 
0x000000000047b156: add eax, dword ptr [rsp]; mov qword ptr [rbp - 0xc8], r11; mov qword ptr [rbp - 0xa8], r10; call rax; 
0x000000000047a915: add eax, dword ptr [rsp]; mov qword ptr [rbp - 0xd0], r11; mov qword ptr [rbp - 0xc8], r10; call rax; 
0x00000000004404d2: add eax, dword ptr cs:[rax]; test r13b, r13b; je 0x404e6; movsxd rdi, dword ptr [rsp + 0x10]; mov eax, 3; syscall; 
0x000000000043ef88: add eax, eax; div ecx; pop rbx; mov eax, eax; ret; 
0x000000000049c0a6: add eax, eax; jmp rax; 
0x000000000045b048: add eax, eax; ret; 
0x00000000004267b6: add eax, ebp; add byte ptr fs:[rax], al; add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x000000000049bd4e: add eax, ebp; jmp rax; 
0x000000000040f1af: add eax, ebp; mov rdx, qword ptr [rax + 0x18]; mov rdi, qword ptr [rax + 0x20]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000040f187: add eax, ebp; mov rdx, qword ptr [rax + 0x18]; mov rsi, qword ptr [rax + 0x20]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000405d86: add eax, ebp; movsb byte ptr [rdi], byte ptr [rsi]; in eax, 1; add byte ptr [rax + 0x29], cl; ret; 
0x0000000000458738: add eax, ebp; ret 0xfd45; 
0x0000000000452e60: add eax, ebx; add rsp, 0x20; mov rax, r8; pop rbx; ret; 
0x000000000049a588: add eax, ecx; cmp rax, qword ptr [rip + 0x23359f]; jae 0x9a59f; mov rdx, qword ptr [rip + 0x23359e]; add word ptr [rdx + rax*2], 1; ret; 
0x00000000004268ba: add eax, ecx; ret; 
0x00000000004268b7: add eax, edi; add rax, rcx; ret; 
0x00000000004a3ec5: add eax, edi; call qword ptr [rax]; 
0x000000000046fddc: add eax, edi; cmp esi, 0x3b; cmova esi, edx; imul esi, esi, 0x3c; add eax, esi; ret; 
0x0000000000426af4: add eax, edi; ret; 
0x00000000004244c6: add eax, edx; sub rax, rdi; ret; 
0x000000000049c62e: add eax, esi; jmp rax; 
0x000000000046fde7: add eax, esi; ret; 
0x000000000045b047: add eax, r8d; ret; 
0x000000000045854f: add ebp, 0x30; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000458588: add ebp, 0x30; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000041bcbf: add ebp, dword ptr [rbx]; add byte ptr [rbp + 0x39], cl; ret 0x8948; 
0x00000000004957cd: add ebp, dword ptr [rcx]; ret 0x48d; 
0x00000000004ca319: add ebp, eax; add ebp, esi; add al, byte ptr [rax]; ret; 
0x00000000004ca31b: add ebp, esi; add al, byte ptr [rax]; ret; 
0x000000000047a277: add ebx, 0x18; add rax, qword ptr [r12]; call rax; 
0x000000000049a7da: add ebx, dword ptr [rax + 0x5a]; pop rbx; ret; 
0x00000000004c7daa: add ebx, dword ptr [rbx + 3]; ret; 
0x0000000000479f03: add ebx, dword ptr [rbx - 0xd]; ret; 
0x00000000004c0b18: add ebx, dword ptr [rdi]; add dword ptr [rdx], ecx; ret; 
0x0000000000498281: add ebx, dword ptr [rdx]; and eax, 0xf; cmp al, 0xa; jne 0x9823d; nop word ptr [rax + rax]; call rbx; 
0x0000000000467eca: add ebx, ebp; ret 0x8d48; 
0x0000000000436193: add ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x000000000040096a: add ebx, esi; ret; 
0x000000000043a155: add ecx, dword ptr [r9 - 0x76b7fcbe]; clc; ret; 
0x0000000000418bc9: add ecx, dword ptr [rax + 0x29]; ret; 
0x000000000046cbc7: add ecx, dword ptr [rax + 0x39]; ret 0xf48; 
0x000000000044a60f: add ecx, dword ptr [rax + 0x39]; ret; 
0x000000000043346a: add ecx, dword ptr [rax + 0x39]; retf 0x1073; mov rcx, rdx; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000049c04e: add ecx, dword ptr [rax + 0x63]; ret; 
0x000000000048c7f3: add ecx, dword ptr [rax - 0x75]; sbb byte ptr [r9], sil; ror byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x000000000043a159: add ecx, dword ptr [rax - 0x77]; clc; ret; 
0x0000000000497d48: add ecx, dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000041de9d: add ecx, dword ptr [rax - 0x77]; ret 0xce31; 
0x00000000004196b8: add ecx, dword ptr [rax - 0x77]; ret 0xcf31; 
0x0000000000447e35: add ecx, dword ptr [rax - 0x7d]; mov byte ptr [rax + rcx*2], 0x83; ret; 
0x000000000040e8a7: add ecx, dword ptr [rax - 0x7d]; ret 0x4801; 
0x000000000040e7cd: add ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000412457: add ecx, dword ptr [rax - 9]; fmul dword ptr [rcx + 0x21]; ret; 
0x00000000004829e3: add ecx, dword ptr [rbp - 0x57f2faf]; or cl, byte ptr [rdi]; xchg eax, edx; ret 0xb60f; 
0x0000000000435f02: add ecx, dword ptr [rbx + 0x357890e]; mov dword ptr [rdi], ecx; ret; 
0x00000000004c7d72: add ecx, dword ptr [rbx + 3]; ret; 
0x000000000043c404: add ecx, dword ptr [rcx + 0x357890f]; lea rax, qword ptr [rdi + 6]; ret; 
0x000000000043bdd4: add ecx, dword ptr [rcx + 0x357890f]; ret; 
0x00000000004100cd: add ecx, dword ptr [rcx + rcx*4 + 0x42]; or byte ptr [rbx - 0x76fefbbe], al; ret 0xe281; 
0x000000000049839f: add ecx, dword ptr [rcx + rcx*4 - 0x16]; mov rsi, r12; mov edi, ebp; call rax; 
0x000000000043a156: add ecx, dword ptr [rcx - 0x76b7fcbe]; clc; ret; 
0x00000000004c63e0: add ecx, dword ptr [rdi + 0x80e6a02]; ret; 
0x00000000004742fd: add ecx, dword ptr [rdi]; xchg eax, ebp; ret 0xc084; 
0x00000000004c08fa: add ecx, dword ptr [rdx + 0xe]; mov al, 1; add ah, byte ptr [rbx + 0x41180e0a]; ret; 
0x0000000000452c1c: add ecx, ebp; ret; 
0x00000000004145a4: add ecx, ebp; sar ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000042f002: add ecx, ebx; jmp rcx; 
0x000000000049ada6: add ecx, esi; jmp rcx; 
0x000000000043bcb5: add edi, 0x10; bsf rdx, rdx; lea r11, qword ptr [rip + 0x68c8d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043c33d: add edi, 0x10; lea r11, qword ptr [rip + 0x68689]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bd1d: add edi, 0x10; lea r11, qword ptr [rip + 0x68c29]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000004796e7: add edi, 0x1c; mov eax, 0xca; syscall; 
0x00000000004433c2: add edi, 0x308; mov esi, 0x80; syscall; 
0x000000000043c23f: add edi, 0x30; lea r11, qword ptr [rip + 0x68787]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bc1f: add edi, 0x30; lea r11, qword ptr [rip + 0x68d27]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000049cd8a: add edi, 0x40000000; jne 0x9cdd8; cmp qword ptr [r9 + 0x38], 0; je 0x9ce03; add rsp, 0x18; ret; 
0x000000000043f640: add edi, dword ptr [rdi + 0x4a4fa0]; jne 0x3f6d8; xor esi, esi; mov eax, 2; syscall; 
0x0000000000434e71: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x6f7d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434cf1: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x6f953]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434b71: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x6fad3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004349f2: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x6fc52]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434871: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x6fdd3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004346f1: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x6ff53]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434571: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x700d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004343f1: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x70253]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434271: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x703d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004340f1: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x70553]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433f71: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x706d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433df1: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x70853]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433c71: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x709d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433af1: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x70b53]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433971: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x70cd3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430927: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x7391d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004350dc: add edi, edx; lea r11, qword ptr [rip + 0x6f56b]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433837: add edi, edx; lea r11, qword ptr [rip + 0x70e10]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004336db: add edi, edx; lea r11, qword ptr [rip + 0x70f6c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000432fda: add edi, edx; lea r11, qword ptr [rip + 0x7126d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043083b: add edi, edx; lea r11, qword ptr [rip + 0x73a0c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430776: add edi, edx; lea r11, qword ptr [rip + 0x73ad1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000042fa51: add edi, edx; lea r11, qword ptr [rip + 0x746b6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f9d7: add edi, edx; lea r11, qword ptr [rip + 0x74730]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f948: add edi, edx; lea r11, qword ptr [rip + 0x747bf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f73d: add edi, edx; lea r11, qword ptr [rip + 0x749ca]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f60b: add edi, edx; lea r11, qword ptr [rip + 0x74afc]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f545: add edi, edx; lea r11, qword ptr [rip + 0x74bc2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f4c7: add edi, edx; lea r11, qword ptr [rip + 0x74c40]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f430: add edi, edx; lea r11, qword ptr [rip + 0x74cd7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f234: add edi, edx; lea r11, qword ptr [rip + 0x74ed3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f103: add edi, edx; lea r11, qword ptr [rip + 0x75004]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042eff4: add edi, edx; lea r11, qword ptr [rip + 0x75113]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000431520: add edi, edx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x72d22]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000432f0c: add edi, edx; sfence; lea r11, qword ptr [rip + 0x71338]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004befd1: add edi, esi; call rax; 
0x00000000004befcd: add edi, esi; ljmp ptr [rax]; add edi, esi; call rax; 
0x00000000004befc9: add edi, esi; ljmp ptr [rax]; add edi, esi; ljmp ptr [rax]; add edi, esi; call rax; 
0x000000000043c2f8: add edx, 0x10; sub rdx, rcx; lea r11, qword ptr [rip + 0x686cb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bcd8: add edx, 0x10; sub rdx, rcx; lea r11, qword ptr [rip + 0x68c6b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000044771e: add edx, 0x4a6680; movsx edx, byte ptr [rdx + 0x1b]; mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x000000000047d1c0: add edx, 1; shl rdx, 4; cmp r8, qword ptr [rsi + rdx]; jae 0x7d171; xor eax, eax; ret; 
0x000000000047b24c: add edx, dword ptr [rax]; mov rax, rdx; call rax; 
0x00000000004c6c42: add edx, dword ptr [rbx + 0xe]; mov al, 1; add bl, byte ptr [rax + 0x41180e0a]; ret; 
0x00000000004ca27b: add edx, dword ptr [rcx + rax + 0x41380e0a]; ret; 
0x00000000004c6bfa: add edx, dword ptr [rsi + 0xe]; mov al, 1; add bl, byte ptr [rax + 0x41180e0a]; ret; 
0x0000000000400aca: add edx, eax; mov rax, qword ptr [rbp - 0x10]; mov qword ptr [rax], rdx; nop; leave; ret; 
0x000000000048af22: add edx, eax; mov rax, rdx; pop rbx; ret; 
0x000000000043c339: add esi, 0x10; add rdi, 0x10; lea r11, qword ptr [rip + 0x68689]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bd19: add esi, 0x10; add rdi, 0x10; lea r11, qword ptr [rip + 0x68c29]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043c23b: add esi, 0x30; add rdi, 0x30; lea r11, qword ptr [rip + 0x68787]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bc1b: add esi, 0x30; add rdi, 0x30; lea r11, qword ptr [rip + 0x68d27]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000442e5c: add esi, 1; cmp rdx, r14; jne 0x42e50; movsxd rdi, dword ptr [rbp - 0x58]; mov eax, 3; syscall; 
0x0000000000480356: add esi, 1; test al, al; jne 0x802a8; movsx eax, dl; neg eax; ret; 
0x000000000049d758: add esi, dword ptr [rbp + 0x40]; cmp bh, 4; jne 0x9d775; mov eax, 8; add rsp, 8; ret; 
0x0000000000444e7c: add esi, dword ptr [rbp - 0x57]; add rsp, 0x1d8; pop rbx; pop rbp; ret; 
0x00000000004c03d2: add esi, dword ptr [rbx + 0x47380e01]; ret; 
0x00000000004c345a: add esi, dword ptr [rsi + 0x44380e04]; ret; 
0x000000000044e067: add esi, dword ptr [rsi + rax + 0x5b]; ret; 
0x00000000004ca362: add esi, ebp; add al, byte ptr [rax]; ret; 
0x00000000004360b3: add esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x000000000043fd9c: add esi, ebx; ret; 
0x000000000043c2b1: add esi, ecx; bsf rdx, rdx; lea r11, qword ptr [rip + 0x68712]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043c294: add esi, ecx; bsf rdx, rdx; lea r11, qword ptr [rip + 0x6872f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bc91: add esi, ecx; bsf rdx, rdx; lea r11, qword ptr [rip + 0x68cb2]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043ef70: add esi, edi; int1; pop rbx; mov eax, eax; ret; 
0x00000000004350d9: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x6f56b]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433834: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x70e10]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004336d8: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x70f6c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000432fd7: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x7126d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430838: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x73a0c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430773: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x73ad1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000042fa4e: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x746b6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f9d4: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x74730]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f945: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x747bf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f73a: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x749ca]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f608: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x74afc]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f542: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x74bc2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f4c4: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x74c40]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f42d: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x74cd7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f231: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x74ed3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f100: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x75004]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042eff1: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x75113]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000434e74: add esi, edx; lea r11, qword ptr [rip + 0x6f7d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434cf4: add esi, edx; lea r11, qword ptr [rip + 0x6f953]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434b74: add esi, edx; lea r11, qword ptr [rip + 0x6fad3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004349f5: add esi, edx; lea r11, qword ptr [rip + 0x6fc52]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434874: add esi, edx; lea r11, qword ptr [rip + 0x6fdd3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004346f4: add esi, edx; lea r11, qword ptr [rip + 0x6ff53]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434574: add esi, edx; lea r11, qword ptr [rip + 0x700d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004343f4: add esi, edx; lea r11, qword ptr [rip + 0x70253]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434274: add esi, edx; lea r11, qword ptr [rip + 0x703d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004340f4: add esi, edx; lea r11, qword ptr [rip + 0x70553]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433f74: add esi, edx; lea r11, qword ptr [rip + 0x706d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433df4: add esi, edx; lea r11, qword ptr [rip + 0x70853]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433c74: add esi, edx; lea r11, qword ptr [rip + 0x709d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433af4: add esi, edx; lea r11, qword ptr [rip + 0x70b53]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433974: add esi, edx; lea r11, qword ptr [rip + 0x70cd3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431e50: add esi, edx; lea r11, qword ptr [rip + 0x723f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431d00: add esi, edx; lea r11, qword ptr [rip + 0x72547]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431bb0: add esi, edx; lea r11, qword ptr [rip + 0x72697]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431a60: add esi, edx; lea r11, qword ptr [rip + 0x727e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431910: add esi, edx; lea r11, qword ptr [rip + 0x72937]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004317c0: add esi, edx; lea r11, qword ptr [rip + 0x72a87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431670: add esi, edx; lea r11, qword ptr [rip + 0x72bd7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004313d0: add esi, edx; lea r11, qword ptr [rip + 0x72e77]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431280: add esi, edx; lea r11, qword ptr [rip + 0x72fc7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431130: add esi, edx; lea r11, qword ptr [rip + 0x73117]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430fe0: add esi, edx; lea r11, qword ptr [rip + 0x73267]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430e90: add esi, edx; lea r11, qword ptr [rip + 0x733b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430d40: add esi, edx; lea r11, qword ptr [rip + 0x73507]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430bf0: add esi, edx; lea r11, qword ptr [rip + 0x73657]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043092a: add esi, edx; lea r11, qword ptr [rip + 0x7391d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000046b988: add esi, esi; ret 0x7420; 
0x000000000049a53d: add esp, 0x100; xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x000000000046a8de: add esp, 0x10; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000049a164: add esp, 0x10; mov rax, rsi; pop rbx; pop rbp; pop r12; ret; 
0x0000000000420541: add esp, 0x10; mov rsi, r12; pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000049a017: add esp, 0x10; pop rbx; jmp rax; 
0x0000000000410731: add esp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000043f0c9: add esp, 0x10; pop rbx; ret; 
0x0000000000420f27: add esp, 0x10; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000043f0b1: add esp, 0x10; xor eax, eax; pop rbx; ret; 
0x00000000004014bb: add esp, 0x110; pop rbx; pop rbp; pop r12; ret; 
0x000000000047c172: add esp, 0x140; mov eax, ebx; pop rbx; ret; 
0x000000000047c154: add esp, 0x140; pop rbx; ret; 
0x000000000043f488: add esp, 0x18; mov eax, 1; pop rbx; pop rbp; ret; 
0x00000000004408dd: add esp, 0x18; mov eax, edx; ret; 
0x0000000000417721: add esp, 0x18; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004115b7: add esp, 0x18; pop rbx; pop rbp; ret; 
0x000000000043fd70: add esp, 0x18; ret; 
0x000000000049ca5b: add esp, 0x198; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000444e80: add esp, 0x1d8; pop rbx; pop rbp; ret; 
0x0000000000452e63: add esp, 0x20; mov rax, r8; pop rbx; ret; 
0x000000000049a3ec: add esp, 0x20; mov rax, rbx; pop rbx; ret; 
0x00000000004463c1: add esp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000415a2f: add esp, 0x20; pop rbx; ret; 
0x000000000049d0d3: add esp, 0x278; mov rax, rbp; pop rbx; pop rbp; ret; 
0x000000000049d0e0: add esp, 0x278; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000048ca59: add esp, 0x28; movzx eax, al; neg eax; ret; 
0x000000000040e328: add esp, 0x28; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004162c4: add esp, 0x28; pop rbx; pop rbp; ret; 
0x000000000049a341: add esp, 0x28; ret; 
0x0000000000473902: add esp, 0x30; mov eax, ebx; pop rbx; ret; 
0x00000000004213f6: add esp, 0x30; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000480fe9: add esp, 0x30; pop rbx; ret; 
0x000000000043f730: add esp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000481076: add esp, 0x38; ret; 
0x0000000000480efc: add esp, 0x48; jmp qword ptr [rax]; 
0x0000000000473872: add esp, 0x48; movzx eax, al; ret; 
0x0000000000481108: add esp, 0x48; ret; 
0x0000000000480e8a: add esp, 0x50; jmp qword ptr [rax]; 
0x000000000049a494: add esp, 0x50; mov rax, rbx; pop rbx; ret; 
0x00000000004004ca: add esp, 0x608; pop rbx; pop rbp; ret; 
0x000000000046f648: add esp, 0x60; mov rax, -1; pop rbx; pop rbp; pop r12; ret; 
0x0000000000440020: add esp, 0x60; pop rbx; ret; 
0x000000000046f6c6: add esp, 0x60; pop rbx; sub rax, rbp; pop rbp; pop r12; ret; 
0x00000000004811f2: add esp, 0x68; ret; 
0x000000000044313d: add esp, 0x78; pop rbx; pop rbp; ret; 
0x000000000040fd9b: add esp, 0x80; add rsp, 0xd0; mov eax, esi; pop rbx; ret; 
0x000000000041f8c1: add esp, 0x80; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000040f349: add esp, 0x80; add rsp, 8; mov rax, rsi; pop rbx; pop rbp; ret; 
0x000000000047150e: add esp, 0x80; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041871c: add esp, 0x80; call 0x17dc0; test rax, rax; je 0x1872e; pop rbx; ret; 
0x00000000004186cd: add esp, 0x80; mov eax, 0x6cb800; ret; 
0x0000000000410654: add esp, 0x80; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000410291: add esp, 0x80; mov eax, edx; pop rbx; ret; 
0x00000000004172bb: add esp, 0x80; mov qword ptr [rip + 0x2b62e0], rdx; add dword ptr [rip + 0x2b62d5], 1; ret; 
0x0000000000417eda: add esp, 0x80; mov qword ptr fs:[r9], rdx; mov rax, rdx; add rsp, 8; ret; 
0x000000000041ea4e: add esp, 0x80; mov rax, rbx; pop rbx; ret; 
0x000000000046b633: add esp, 0x80; pop rbx; mov eax, edx; pop rbp; pop r12; ret; 
0x000000000045b0f8: add esp, 0x80; pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000046bf89: add esp, 0x80; pop rbx; pop rbp; pop r12; ret; 
0x000000000047358b: add esp, 0x80; pop rbx; ret; 
0x00000000004527f3: add esp, 0x80; xor eax, eax; add rsp, 8; ret; 
0x00000000004209e6: add esp, 0x80; xor eax, eax; pop rbx; ret; 
0x000000000046b4c9: add esp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x0000000000473689: add esp, 0x90; pop rbx; ret; 
0x00000000004736a7: add esp, 0x90; xor eax, eax; pop rbx; ret; 
0x0000000000412edd: add esp, 0x98; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000041398d: add esp, 0x98; pop rbx; pop rbp; ret; 
0x000000000040191f: add esp, 0x98; ret; 
0x00000000004730a1: add esp, 0x98; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000049a731: add esp, 0xc8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000040fda2: add esp, 0xd0; mov eax, esi; pop rbx; ret; 
0x0000000000450519: add esp, 0xd0; ret; 
0x000000000040fba7: add esp, 0xd8; ret; 
0x000000000048c183: add esp, 0xf0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000411fe0: add esp, 0xf8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000458585: add esp, 8; add ebp, 0x30; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000043fe61: add esp, 8; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x0000000000480dc5: add esp, 8; jmp rax; 
0x0000000000411946: add esp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000047e659: add esp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000411963: add esp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000041f8c8: add esp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000047999f: add esp, 8; mov edi, 0x6cc100; pop rbx; pop rbp; jmp rax; 
0x000000000044083a: add esp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000004182c8: add esp, 8; mov rax, rdx; pop rbx; pop rbp; ret; 
0x000000000040f350: add esp, 8; mov rax, rsi; pop rbx; pop rbp; ret; 
0x000000000041fea3: add esp, 8; mov rdi, rbp; pop rbx; pop rbp; jmp rax; 
0x000000000049a377: add esp, 8; movzx eax, al; neg eax; ret; 
0x000000000041e81e: add esp, 8; pop rbx; pop rbp; jmp rax; 
0x0000000000406171: add esp, 8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000401ff3: add esp, 8; pop rbx; pop rbp; ret; 
0x00000000004135d8: add esp, 8; pop rbx; pop rbp; sub rax, rdx; ret; 
0x00000000004002de: add esp, 8; ret; 
0x0000000000424319: add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000047ca41: add esp, 8; xor edx, edx; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000418309: add esp, 8; xor edx, edx; mov rax, rdx; pop rbx; pop rbp; ret; 
0x00000000004c2979: add esp, dword ptr [rcx + rax - 0x72bafc72]; add al, 0x45; mov word ptr [rip + 0x3068345], es; mov byte ptr [rcx], al; ret; 
0x00000000004c9309: add esp, dword ptr [rsi]; add dword ptr [rdx], ecx; ret; 
0x0000000000442db3: add esp, ebp; mov qword ptr [rbp - 0x48], r12; mov qword ptr [rbp - 0x40], r12; syscall; 
0x0000000000436285: add qword ptr [r10 - 0x2f], r12; jl 0x362d3; adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000004c7672: add qword ptr [r15], 3; mov bl, 2; ret; 
0x00000000004689c8: add qword ptr [rax - 0x77], rcx; lea esi, dword ptr [rax - 0x77000005]; adc byte ptr [rax - 0x7d], cl; ret; 
0x00000000004478fd: add qword ptr [rax - 0x7d], r9; ret 0x4d02; 
0x00000000004c71cc: add qword ptr [rax], -0x50c8000; jmp qword ptr [rbx + 5]; 
0x00000000004241fa: add qword ptr [rax], rax; ret; 
0x00000000004829a2: add qword ptr [rbp - 0x57f2faf], rcx; or cl, byte ptr [rdi]; xchg eax, edx; ret 0xb60f; 
0x000000000041c794: add qword ptr [rcx], rax; ror byte ptr [rax - 0x73], 0x54; ret; 
0x00000000004c92f2: add qword ptr [rdi], 3; pop rbx; add cl, byte ptr [rdx]; ret; 
0x000000000042713c: add r11b, sil; ret; 
0x0000000000436192: add r11d, r14d; movq qword ptr [rdi], mm1; ret; 
0x0000000000442db2: add r12, r13; mov qword ptr [rbp - 0x48], r12; mov qword ptr [rbp - 0x40], r12; syscall; 
0x0000000000442e5b: add r14, 1; cmp rdx, r14; jne 0x42e50; movsxd rdi, dword ptr [rbp - 0x58]; mov eax, 3; syscall; 
0x0000000000436122: add r14b, r11b; movq qword ptr [rdi], mm1; ret; 
0x00000000004360b2: add r14d, r11d; movq qword ptr [rdi], mm1; ret; 
0x00000000004603cd: add r15b, al; test dword ptr [rdi + rbp*8 - 1], edx; jmp qword ptr [rax]; 
0x000000000040095f: add r15b, dil; rcr byte ptr [rbp - 0x3a], 1; add eax, 0x2cc1f5; add ebx, esi; ret; 
0x0000000000490ef0: add r8, qword ptr [r8]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000452e5f: add r8, rbx; add rsp, 0x20; mov rax, r8; pop rbx; ret; 
0x000000000047e913: add r8b, bpl; clc; jmp qword ptr [rsi + 0xf]; 
0x000000000047e507: add r8b, bpl; cmp dil, al; jmp qword ptr [rsi - 0x70]; 
0x000000000047e56b: add r8b, bpl; fidivr word ptr [rcx]; clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000047f56f: add r8b, bpl; fisubr dword ptr [rcx]; clc; jmp qword ptr [rsi + 0x2e]; 
0x00000000004541cf: add r8b, bpl; jp 0x541b1; cli; jmp qword ptr [rsi + 0x2e]; 
0x0000000000475ccf: add r8b, bpl; jp 0x75c96; clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000047e3bf: add r8b, bpl; mov bh, byte ptr [rbx]; clc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000466697: add r8b, bpl; mov dl, 0xb8; stc; jmp qword ptr [rsi - 0x70]; 
0x0000000000481707: add r8b, bpl; or al, dil; jmp qword ptr [rsi - 0x70]; 
0x000000000045d8ef: add r8b, bpl; pop rdx; cli; jmp qword ptr [rsi + 0x2e]; 
0x0000000000487487: add r8b, bpl; ret 0xf7aa; 
0x0000000000484587: add r8b, bpl; ret 0xf7d9; 
0x0000000000477987: add r8b, bpl; ret 0xf8a5; 
0x000000000047db16: add r8b, bpl; ret; 
0x0000000000474030: add r8b, bpl; stc; ret 0xfff8; 
0x000000000045dda3: add r8b, bpl; sti; jmp qword ptr [rsi + 0xf]; 
0x000000000046f61b: add r8b, bpl; sub ecx, edi; jmp qword ptr [rsi + 0xf]; 
0x000000000048a0c3: add r8b, bpl; xchg byte ptr [rsi - 9], bh; jmp qword ptr [rsi + 0xf]; 
0x000000000041ff0f: add r8b, byte ptr [r8]; add byte ptr [rbp - 0x7b], cl; in al, 0xf; xchg eax, esp; ret 0x8548; 
0x000000000044a953: add r9b, byte ptr [r8 + 0x39]; ret; 
0x000000000044a970: add r9d, dword ptr [r8 + 0x39]; ret; 
0x00000000004926a2: add rax, -0x7cb80000; ret 0xe910; 
0x0000000000482a22: add rax, -0x7f2fae73; cli; or cl, byte ptr [rdi]; xchg eax, edx; ret 0xb60f; 
0x0000000000481359: add rax, -8; ret; 
0x000000000045025b: add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x00000000004009e0: add rax, 0x6cdd60; mov qword ptr [rbp - 8], rax; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000401d13: add rax, 0x900; mov qword ptr [rip + 0x2c9370], rax; xor eax, eax; ret; 
0x000000000047d21a: add rax, 1; mov qword ptr [rbx + 0x10], rax; pop rbx; pop rbp; pop r12; ret; 
0x000000000047cae4: add rax, 1; mov qword ptr [rip + 0x2598e1], rax; add rsp, 8; ret; 
0x000000000043ec44: add rax, 1; pop rbp; pop r12; pop r13; ret; 
0x000000000046f050: add rax, 1; ret; 
0x000000000046f047: add rax, 2; ret; 
0x000000000046f060: add rax, 3; ret; 
0x00000000004501b8: add rax, qword ptr [0]; ret; 
0x000000000047a27a: add rax, qword ptr [r12]; call rax; 
0x000000000047b155: add rax, qword ptr [r12]; mov qword ptr [rbp - 0xc8], r11; mov qword ptr [rbp - 0xa8], r10; call rax; 
0x000000000047a914: add rax, qword ptr [r12]; mov qword ptr [rbp - 0xd0], r11; mov qword ptr [rbp - 0xc8], r10; call rax; 
0x000000000047a714: add rax, qword ptr [r15]; call rax; 
0x000000000049ce43: add rax, qword ptr [r8 + 0xd0]; add rsp, 0x18; ret; 
0x0000000000498b00: add rax, qword ptr [rbx]; call rax; 
0x000000000049839d: add rax, qword ptr [rbx]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000481103: add rax, qword ptr [rdx + 8]; add rsp, 0x48; ret; 
0x000000000047ea58: add rax, qword ptr [rdx + 8]; call rax; 
0x0000000000481317: add rax, qword ptr [rdx + 8]; je 0x81324; mov qword ptr [rax], 0x6ccac0; add rsp, 0x48; ret; 
0x00000000004501b7: add rax, qword ptr fs:[0]; ret; 
0x000000000040f1ae: add rax, r13; mov rdx, qword ptr [rax + 0x18]; mov rdi, qword ptr [rax + 0x20]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000040f186: add rax, r13; mov rdx, qword ptr [rax + 0x18]; mov rsi, qword ptr [rax + 0x20]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000049c62d: add rax, r14; jmp rax; 
0x000000000049c0a5: add rax, r8; jmp rax; 
0x000000000049bd4d: add rax, rbp; jmp rax; 
0x000000000049a587: add rax, rcx; cmp rax, qword ptr [rip + 0x23359f]; jae 0x9a59f; mov rdx, qword ptr [rip + 0x23359e]; add word ptr [rdx + rax*2], 1; ret; 
0x00000000004268b9: add rax, rcx; ret; 
0x00000000004268b6: add rax, rdi; add rax, rcx; ret; 
0x0000000000426af3: add rax, rdi; ret; 
0x00000000004244c5: add rax, rdx; sub rax, rdi; ret; 
0x000000000047a276: add rbx, 0x18; add rax, qword ptr [r12]; call rax; 
0x0000000000498280: add rbx, qword ptr [r10]; and eax, 0xf; cmp al, 0xa; jne 0x9823d; nop word ptr [rax + rax]; call rbx; 
0x00000000004829e2: add rcx, qword ptr [rbp - 0x57f2faf]; or cl, byte ptr [rdi]; xchg eax, edx; ret 0xb60f; 
0x000000000042f001: add rcx, r11; jmp rcx; 
0x000000000049ada5: add rcx, r14; jmp rcx; 
0x000000000043bcb4: add rdi, 0x10; bsf rdx, rdx; lea r11, qword ptr [rip + 0x68c8d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043c33c: add rdi, 0x10; lea r11, qword ptr [rip + 0x68689]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bd1c: add rdi, 0x10; lea r11, qword ptr [rip + 0x68c29]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000004796e6: add rdi, 0x1c; mov eax, 0xca; syscall; 
0x00000000004433c1: add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000043c23e: add rdi, 0x30; lea r11, qword ptr [rip + 0x68787]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bc1e: add rdi, 0x30; lea r11, qword ptr [rip + 0x68d27]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000434e70: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x6f7d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434cf0: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x6f953]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434b70: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x6fad3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004349f1: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x6fc52]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434870: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x6fdd3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004346f0: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x6ff53]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434570: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x700d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004343f0: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x70253]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434270: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x703d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004340f0: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x70553]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433f70: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x706d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433df0: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x70853]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433c70: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x709d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433af0: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x70b53]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433970: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x70cd3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430926: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x7391d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004350db: add rdi, rdx; lea r11, qword ptr [rip + 0x6f56b]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433836: add rdi, rdx; lea r11, qword ptr [rip + 0x70e10]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004336da: add rdi, rdx; lea r11, qword ptr [rip + 0x70f6c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000432fd9: add rdi, rdx; lea r11, qword ptr [rip + 0x7126d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043083a: add rdi, rdx; lea r11, qword ptr [rip + 0x73a0c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430775: add rdi, rdx; lea r11, qword ptr [rip + 0x73ad1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000042fa50: add rdi, rdx; lea r11, qword ptr [rip + 0x746b6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f9d6: add rdi, rdx; lea r11, qword ptr [rip + 0x74730]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f947: add rdi, rdx; lea r11, qword ptr [rip + 0x747bf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f73c: add rdi, rdx; lea r11, qword ptr [rip + 0x749ca]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f60a: add rdi, rdx; lea r11, qword ptr [rip + 0x74afc]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f544: add rdi, rdx; lea r11, qword ptr [rip + 0x74bc2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f4c6: add rdi, rdx; lea r11, qword ptr [rip + 0x74c40]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f42f: add rdi, rdx; lea r11, qword ptr [rip + 0x74cd7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f233: add rdi, rdx; lea r11, qword ptr [rip + 0x74ed3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f102: add rdi, rdx; lea r11, qword ptr [rip + 0x75004]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042eff3: add rdi, rdx; lea r11, qword ptr [rip + 0x75113]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043151f: add rdi, rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x72d22]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000432f0b: add rdi, rdx; sfence; lea r11, qword ptr [rip + 0x71338]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043c2f7: add rdx, 0x10; sub rdx, rcx; lea r11, qword ptr [rip + 0x686cb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bcd7: add rdx, 0x10; sub rdx, rcx; lea r11, qword ptr [rip + 0x68c6b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000044771d: add rdx, 0x4a6680; movsx edx, byte ptr [rdx + 0x1b]; mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x000000000047d1bf: add rdx, 1; shl rdx, 4; cmp r8, qword ptr [rsi + rdx]; jae 0x7d171; xor eax, eax; ret; 
0x000000000047b24b: add rdx, qword ptr [rax]; mov rax, rdx; call rax; 
0x000000000048af21: add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000000400ac9: add rdx, rax; mov rax, qword ptr [rbp - 0x10]; mov qword ptr [rax], rdx; nop; leave; ret; 
0x000000000043c338: add rsi, 0x10; add rdi, 0x10; lea r11, qword ptr [rip + 0x68689]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bd18: add rsi, 0x10; add rdi, 0x10; lea r11, qword ptr [rip + 0x68c29]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043c23a: add rsi, 0x30; add rdi, 0x30; lea r11, qword ptr [rip + 0x68787]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bc1a: add rsi, 0x30; add rdi, 0x30; lea r11, qword ptr [rip + 0x68d27]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000480355: add rsi, 1; test al, al; jne 0x802a8; movsx eax, dl; neg eax; ret; 
0x000000000043c2b0: add rsi, rcx; bsf rdx, rdx; lea r11, qword ptr [rip + 0x68712]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043c293: add rsi, rcx; bsf rdx, rdx; lea r11, qword ptr [rip + 0x6872f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bc90: add rsi, rcx; bsf rdx, rdx; lea r11, qword ptr [rip + 0x68cb2]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000004350d8: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x6f56b]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433833: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x70e10]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004336d7: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x70f6c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000432fd6: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x7126d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430837: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x73a0c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430772: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x73ad1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000042fa4d: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x746b6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f9d3: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x74730]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f944: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x747bf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f739: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x749ca]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f607: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x74afc]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f541: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x74bc2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f4c3: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x74c40]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f42c: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x74cd7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f230: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x74ed3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f0ff: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x75004]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042eff0: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x75113]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000434e73: add rsi, rdx; lea r11, qword ptr [rip + 0x6f7d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434cf3: add rsi, rdx; lea r11, qword ptr [rip + 0x6f953]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434b73: add rsi, rdx; lea r11, qword ptr [rip + 0x6fad3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004349f4: add rsi, rdx; lea r11, qword ptr [rip + 0x6fc52]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434873: add rsi, rdx; lea r11, qword ptr [rip + 0x6fdd3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004346f3: add rsi, rdx; lea r11, qword ptr [rip + 0x6ff53]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434573: add rsi, rdx; lea r11, qword ptr [rip + 0x700d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004343f3: add rsi, rdx; lea r11, qword ptr [rip + 0x70253]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434273: add rsi, rdx; lea r11, qword ptr [rip + 0x703d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004340f3: add rsi, rdx; lea r11, qword ptr [rip + 0x70553]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433f73: add rsi, rdx; lea r11, qword ptr [rip + 0x706d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433df3: add rsi, rdx; lea r11, qword ptr [rip + 0x70853]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433c73: add rsi, rdx; lea r11, qword ptr [rip + 0x709d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433af3: add rsi, rdx; lea r11, qword ptr [rip + 0x70b53]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433973: add rsi, rdx; lea r11, qword ptr [rip + 0x70cd3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431e4f: add rsi, rdx; lea r11, qword ptr [rip + 0x723f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431cff: add rsi, rdx; lea r11, qword ptr [rip + 0x72547]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431baf: add rsi, rdx; lea r11, qword ptr [rip + 0x72697]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431a5f: add rsi, rdx; lea r11, qword ptr [rip + 0x727e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043190f: add rsi, rdx; lea r11, qword ptr [rip + 0x72937]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004317bf: add rsi, rdx; lea r11, qword ptr [rip + 0x72a87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043166f: add rsi, rdx; lea r11, qword ptr [rip + 0x72bd7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004313cf: add rsi, rdx; lea r11, qword ptr [rip + 0x72e77]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043127f: add rsi, rdx; lea r11, qword ptr [rip + 0x72fc7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043112f: add rsi, rdx; lea r11, qword ptr [rip + 0x73117]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430fdf: add rsi, rdx; lea r11, qword ptr [rip + 0x73267]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430e8f: add rsi, rdx; lea r11, qword ptr [rip + 0x733b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430d3f: add rsi, rdx; lea r11, qword ptr [rip + 0x73507]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430bef: add rsi, rdx; lea r11, qword ptr [rip + 0x73657]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430929: add rsi, rdx; lea r11, qword ptr [rip + 0x7391d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000049a53c: add rsp, 0x100; xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x000000000046a8dd: add rsp, 0x10; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000049a163: add rsp, 0x10; mov rax, rsi; pop rbx; pop rbp; pop r12; ret; 
0x0000000000420540: add rsp, 0x10; mov rsi, r12; pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000049a016: add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000410730: add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000043f0c8: add rsp, 0x10; pop rbx; ret; 
0x0000000000420f26: add rsp, 0x10; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000043f0b0: add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x00000000004014ba: add rsp, 0x110; pop rbx; pop rbp; pop r12; ret; 
0x000000000047c171: add rsp, 0x140; mov eax, ebx; pop rbx; ret; 
0x000000000047c153: add rsp, 0x140; pop rbx; ret; 
0x000000000043f487: add rsp, 0x18; mov eax, 1; pop rbx; pop rbp; ret; 
0x00000000004408dc: add rsp, 0x18; mov eax, edx; ret; 
0x0000000000417720: add rsp, 0x18; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004115b6: add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000043fd6f: add rsp, 0x18; ret; 
0x000000000049ca5a: add rsp, 0x198; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000444e7f: add rsp, 0x1d8; pop rbx; pop rbp; ret; 
0x0000000000452e62: add rsp, 0x20; mov rax, r8; pop rbx; ret; 
0x000000000049a3eb: add rsp, 0x20; mov rax, rbx; pop rbx; ret; 
0x00000000004463c0: add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000415a2e: add rsp, 0x20; pop rbx; ret; 
0x000000000049d0d2: add rsp, 0x278; mov rax, rbp; pop rbx; pop rbp; ret; 
0x000000000049d0df: add rsp, 0x278; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000048ca58: add rsp, 0x28; movzx eax, al; neg eax; ret; 
0x000000000040e327: add rsp, 0x28; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004162c3: add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000049a340: add rsp, 0x28; ret; 
0x0000000000473901: add rsp, 0x30; mov eax, ebx; pop rbx; ret; 
0x00000000004213f5: add rsp, 0x30; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000480fe8: add rsp, 0x30; pop rbx; ret; 
0x000000000043f72f: add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000481075: add rsp, 0x38; ret; 
0x0000000000480efb: add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000473871: add rsp, 0x48; movzx eax, al; ret; 
0x0000000000481107: add rsp, 0x48; ret; 
0x0000000000480e89: add rsp, 0x50; jmp qword ptr [rax]; 
0x000000000049a493: add rsp, 0x50; mov rax, rbx; pop rbx; ret; 
0x00000000004004c9: add rsp, 0x608; pop rbx; pop rbp; ret; 
0x000000000046f647: add rsp, 0x60; mov rax, -1; pop rbx; pop rbp; pop r12; ret; 
0x000000000044001f: add rsp, 0x60; pop rbx; ret; 
0x000000000046f6c5: add rsp, 0x60; pop rbx; sub rax, rbp; pop rbp; pop r12; ret; 
0x00000000004811f1: add rsp, 0x68; ret; 
0x000000000044313c: add rsp, 0x78; pop rbx; pop rbp; ret; 
0x000000000040fd9a: add rsp, 0x80; add rsp, 0xd0; mov eax, esi; pop rbx; ret; 
0x000000000041f8c0: add rsp, 0x80; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000040f348: add rsp, 0x80; add rsp, 8; mov rax, rsi; pop rbx; pop rbp; ret; 
0x000000000047150d: add rsp, 0x80; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041871b: add rsp, 0x80; call 0x17dc0; test rax, rax; je 0x1872e; pop rbx; ret; 
0x00000000004186cc: add rsp, 0x80; mov eax, 0x6cb800; ret; 
0x0000000000410653: add rsp, 0x80; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000410290: add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x00000000004172ba: add rsp, 0x80; mov qword ptr [rip + 0x2b62e0], rdx; add dword ptr [rip + 0x2b62d5], 1; ret; 
0x0000000000417ed9: add rsp, 0x80; mov qword ptr fs:[r9], rdx; mov rax, rdx; add rsp, 8; ret; 
0x000000000041ea4d: add rsp, 0x80; mov rax, rbx; pop rbx; ret; 
0x000000000046b632: add rsp, 0x80; pop rbx; mov eax, edx; pop rbp; pop r12; ret; 
0x000000000045b0f7: add rsp, 0x80; pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000046bf88: add rsp, 0x80; pop rbx; pop rbp; pop r12; ret; 
0x000000000047358a: add rsp, 0x80; pop rbx; ret; 
0x00000000004527f2: add rsp, 0x80; xor eax, eax; add rsp, 8; ret; 
0x00000000004209e5: add rsp, 0x80; xor eax, eax; pop rbx; ret; 
0x000000000046b4c8: add rsp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x0000000000473688: add rsp, 0x90; pop rbx; ret; 
0x00000000004736a6: add rsp, 0x90; xor eax, eax; pop rbx; ret; 
0x0000000000412edc: add rsp, 0x98; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000041398c: add rsp, 0x98; pop rbx; pop rbp; ret; 
0x000000000040191e: add rsp, 0x98; ret; 
0x00000000004730a0: add rsp, 0x98; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000049a730: add rsp, 0xc8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000040fda1: add rsp, 0xd0; mov eax, esi; pop rbx; ret; 
0x0000000000450518: add rsp, 0xd0; ret; 
0x000000000040fba6: add rsp, 0xd8; ret; 
0x000000000048c182: add rsp, 0xf0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000411fdf: add rsp, 0xf8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000458584: add rsp, 8; add ebp, 0x30; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000043fe60: add rsp, 8; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x0000000000480dc4: add rsp, 8; jmp rax; 
0x0000000000411945: add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000047e658: add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000411962: add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000041f8c7: add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000047999e: add rsp, 8; mov edi, 0x6cc100; pop rbx; pop rbp; jmp rax; 
0x0000000000440839: add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000004182c7: add rsp, 8; mov rax, rdx; pop rbx; pop rbp; ret; 
0x000000000040f34f: add rsp, 8; mov rax, rsi; pop rbx; pop rbp; ret; 
0x000000000041fea2: add rsp, 8; mov rdi, rbp; pop rbx; pop rbp; jmp rax; 
0x000000000049a376: add rsp, 8; movzx eax, al; neg eax; ret; 
0x000000000041e81d: add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x0000000000406170: add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000401ff2: add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004135d7: add rsp, 8; pop rbx; pop rbp; sub rax, rdx; ret; 
0x00000000004002dd: add rsp, 8; ret; 
0x0000000000424318: add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000047ca40: add rsp, 8; xor edx, edx; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000418308: add rsp, 8; xor edx, edx; mov rax, rdx; pop rbx; pop rbp; ret; 
0x000000000042cd2e: add sil, sil; ret 0x7404; 
0x000000000049a59a: add word ptr [rdx + rax*2], 1; ret; 
0x00000000004bf2b1: and ah, dh; call rdi; 
0x00000000004bf291: and ah, dh; jmp qword ptr [rdi]; 
0x000000000040049d: and al, 0; add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; fild word ptr [rcx + rcx*4 - 0x30]; syscall; 
0x0000000000400461: and al, 0; add al, byte ptr [rax]; add byte ptr [rcx + rcx*4 - 0x39], cl; mov eax, ebp; syscall; 
0x0000000000480bdd: and al, 0; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000048cbea: and al, 0; add byte ptr [rdx], al; add byte ptr [rax], al; jne 0x8cbf9; lea rax, qword ptr [rip + 0x67]; ret; 
0x000000000048cc3d: and al, 0; add byte ptr [rdx], al; add byte ptr [rax], al; jne 0x8cc4c; lea rax, qword ptr [rip + 4]; ret; 
0x000000000048c8bc: and al, 0; call rax; 
0x000000000048c77f: and al, 0; jmp rax; 
0x0000000000480bb5: and al, 0; lea rax, qword ptr [rdi - 1]; cmp rax, -3; jbe 0x80bc8; ret; 
0x000000000047cc25: and al, 0; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x259797]; mov qword ptr [rsi], rax; ret; 
0x000000000049ab08: and al, 0x10; add byte ptr [rax], al; add byte ptr [rax], al; call 0x9a7e0; add rsp, 0x28; ret; 
0x00000000004811ea: and al, 0x10; add byte ptr [rbp + 0x39], dh; xor eax, eax; add rsp, 0x68; ret; 
0x000000000049cfa8: and al, 0x10; add rsp, 0x28; ret; 
0x0000000000480fdd: and al, 0x10; call 0x78cf0; mov qword ptr [rbx + 0x10], rax; add rsp, 0x30; pop rbx; ret; 
0x000000000049a331: and al, 0x10; call 0x8c900; mov rdx, qword ptr [rsp + 0x10]; mov rax, rdx; add rsp, 0x28; ret; 
0x000000000041bfed: and al, 0x10; call rax; 
0x000000000046d7a9: and al, 0x10; call rbx; 
0x00000000004114bb: and al, 0x10; lea r8, qword ptr [rsp + 0x30]; lea rsi, qword ptr [rsp + 0x20]; call qword ptr [rbx + 8]; 
0x000000000044045b: and al, 0x10; mov eax, 0x101; syscall; 
0x00000000004404dd: and al, 0x10; mov eax, 3; syscall; 
0x000000000043f710: and al, 0x10; mov edi, 1; mov eax, 0xe5; syscall; 
0x00000000004012c9: and al, 0x10; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000044002b: and al, 0x10; mov esi, 0x10; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x000000000041c09f: and al, 0x10; mov qword ptr [rsp + 8], r8; mov qword ptr [rsp], rcx; call rdx; 
0x000000000049a3b0: and al, 0x10; mov qword ptr [rsp], rdi; mov qword ptr [rsp + 8], rsi; je 0x9a3c4; mov edi, 0x6cc140; call rax; 
0x0000000000441021: and al, 0x10; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000447f97: and al, 0x10; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004488fa: and al, 0x10; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000049a33b: and al, 0x10; mov rax, rdx; add rsp, 0x28; ret; 
0x000000000049a455: and al, 0x10; movaps xmmword ptr [rsp + 0x20], xmm1; movaps xmmword ptr [rsp + 0x30], xmm0; je 0x9a46a; mov edi, 0x6cc140; call rax; 
0x000000000046df46: and al, 0x14; add al, ch; ret 0xfe4d; 
0x0000000000419626: and al, 0x14; pop r12; ret; 
0x000000000044a068: and al, 0x18; add byte ptr [rdi], cl; test byte ptr [rbx], cl; add dword ptr [rax], eax; add byte ptr [rcx - 0xa], al; ret; 
0x000000000041fea0: and al, 0x18; add rsp, 8; mov rdi, rbp; pop rbx; pop rbp; jmp rax; 
0x000000000041e81b: and al, 0x18; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x000000000040fc30: and al, 0x18; call 0x11f00; add rsp, 0xd8; ret; 
0x000000000048133a: and al, 0x18; call 0x1ea60; add rsp, 0x48; ret; 
0x000000000040fb9f: and al, 0x18; call 0x55730; add rsp, 0xd8; ret; 
0x000000000047c873: and al, 0x18; call 0x7c1e0; add rsp, 0xd8; ret; 
0x000000000048c110: and al, 0x18; call 0x8c120; add rsp, 0xd8; ret; 
0x000000000048cb16: and al, 0x18; call 0x8c900; mov rdx, qword ptr [rsp + 0x18]; mov rax, rdx; add rsp, 0x38; ret; 
0x000000000041077d: and al, 0x18; call qword ptr [rbp + 0x18]; 
0x00000000004012d2: and al, 0x18; call rax; 
0x0000000000411701: and al, 0x18; lea r8, qword ptr [rsp + 0x20]; mov rdi, rax; call qword ptr [rax + 8]; 
0x000000000046d7a4: and al, 0x18; lea r9, qword ptr [rsp + 0x10]; call rbx; 
0x0000000000447f8d: and al, 0x18; lea rdx, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004488f0: and al, 0x18; lea rdx, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000444c27: and al, 0x18; mov eax, 0; test rax, rax; je 0x44c3a; mov edi, 0x6cc140; call rax; 
0x000000000049a3d8: and al, 0x18; mov eax, 0; test rax, rax; je 0x9a3eb; mov edi, 0x6cc140; call rax; 
0x000000000041bfe8: and al, 0x18; mov qword ptr [rsp + 0x10], r10; call rax; 
0x00000000004114b6: and al, 0x18; mov qword ptr [rsp + 0x10], r10; lea r8, qword ptr [rsp + 0x30]; lea rsi, qword ptr [rsp + 0x20]; call qword ptr [rbx + 8]; 
0x00000000004455c8: and al, 0x18; mov r9, r14; call rbx; 
0x0000000000448ce0: and al, 0x18; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000048cb20: and al, 0x18; mov rax, rdx; add rsp, 0x38; ret; 
0x000000000046d882: and al, 0x18; mov rdi, r12; call rbx; 
0x000000000046fce7: and al, 0x18; xor r8d, r8d; mov rsi, r14; lea rdx, qword ptr [rsp + 0x48]; mov rdi, r12; call rbx; 
0x00000000004195f2: and al, 0x1c; je 0x195fb; pop rbx; pop rbp; pop r12; ret; 
0x000000000041144a: and al, 0x20; call qword ptr [rbx + 0x30]; 
0x00000000004114c5: and al, 0x20; call qword ptr [rbx + 8]; 
0x0000000000447f9c: and al, 0x20; call rax; 
0x000000000046f8fd: and al, 0x20; lea r9, qword ptr [rsp + 0x28]; lea rsi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000046f2a3: and al, 0x20; lea r9, qword ptr [rsp + 0x28]; lea rsi, qword ptr [rsp + 0x30]; lea rcx, qword ptr [rax + 1]; call rbx; 
0x000000000046f68a: and al, 0x20; lea rdx, qword ptr [rsp + 0x28]; lea rsi, qword ptr [rsp + 0x40]; call rbx; 
0x0000000000448cd6: and al, 0x20; lea rdx, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000044b68c: and al, 0x20; lea rdx, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000046f5e7: and al, 0x20; lea rsi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000041bfe3: and al, 0x20; mov qword ptr [rsp + 0x18], r8; mov qword ptr [rsp + 0x10], r10; call rax; 
0x000000000041143d: and al, 0x20; mov rax, qword ptr [rax + 0x60]; sar r8, 2; mov qword ptr [rsp + 0x20], rax; call qword ptr [rbx + 0x30]; 
0x000000000040e864: and al, 0x20; mov rax, qword ptr [rsp + 0x30]; lea r15, qword ptr [rbx + r14]; call rax; 
0x0000000000411706: and al, 0x20; mov rdi, rax; call qword ptr [rax + 8]; 
0x000000000049a45a: and al, 0x20; movaps xmmword ptr [rsp + 0x30], xmm0; je 0x9a46a; mov edi, 0x6cc140; call rax; 
0x000000000049b67c: and al, 0x23; add byte ptr [rax], cl; mov byte ptr [rip + 0x2324d9], 8; ret; 
0x000000000049b675: and al, 0x23; add byte ptr [rax], cl; mov byte ptr [rip + 0x2324df], 8; mov byte ptr [rip + 0x2324d9], 8; ret; 
0x000000000049b66e: and al, 0x23; add byte ptr [rax], cl; mov byte ptr [rip + 0x2324e5], 8; mov byte ptr [rip + 0x2324df], 8; mov byte ptr [rip + 0x2324d9], 8; ret; 
0x000000000049b683: and al, 0x23; add byte ptr [rax], cl; ret; 
0x0000000000419620: and al, 0x24; pop rbp; mov dword ptr [r12 + 0x14], eax; pop r12; ret; 
0x00000000004bb1c4: and al, 0x26; outsd dx, dword ptr [rsi]; ret 0x5ae4; 
0x0000000000481070: and al, 0x28; add byte ptr [rbp + 0xb], dh; add rsp, 0x38; ret; 
0x00000000004824db: and al, 0x28; add byte ptr [rcx + 0x39], cl; ret 0x87e; 
0x00000000004488ff: and al, 0x28; call rax; 
0x00000000004484cb: and al, 0x28; call rbx; 
0x000000000046f902: and al, 0x28; lea rsi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000046f2a8: and al, 0x28; lea rsi, qword ptr [rsp + 0x30]; lea rcx, qword ptr [rax + 1]; call rbx; 
0x000000000046f68f: and al, 0x28; lea rsi, qword ptr [rsp + 0x40]; call rbx; 
0x0000000000480eea: and al, 0x28; mov r11, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000480e78: and al, 0x28; mov r11, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x50; jmp qword ptr [rax]; 
0x000000000041f543: and al, 0x28; mov rdi, rbp; call rax; 
0x000000000044a340: and al, 0x28; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000048856f: and al, 0x30; add byte ptr [rcx + 0x39], cl; ret 0x87e; 
0x000000000044a34a: and al, 0x30; call rbx; 
0x000000000049a45f: and al, 0x30; je 0x9a46a; mov edi, 0x6cc140; call rax; 
0x000000000040e869: and al, 0x30; lea r15, qword ptr [rbx + r14]; call rax; 
0x000000000046f2ad: and al, 0x30; lea rcx, qword ptr [rax + 1]; call rbx; 
0x00000000004114c0: and al, 0x30; lea rsi, qword ptr [rsp + 0x20]; call qword ptr [rbx + 8]; 
0x000000000044a78a: and al, 0x30; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004484c6: and al, 0x30; mov rdi, qword ptr [rsp + 0x28]; call rbx; 
0x000000000041b5fb: and al, 0x30; mov rdi, r9; mov eax, r8d; syscall; 
0x0000000000480eef: and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000480e7d: and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x50; jmp qword ptr [rax]; 
0x0000000000464bbf: and al, 0x31; rol byte ptr [rbp - 0x3f60f025], 0x29; ret; 
0x00000000004b9bfc: and al, 0x36; adc eax, 0x42d35a1d; cmp al, 0xe; push rsp; jmp qword ptr [rbx - 0x40]; 
0x0000000000485712: and al, 0x38; add byte ptr [rcx + 0x39], cl; ret 0x87e; 
0x0000000000481101: and al, 0x38; add rax, qword ptr [rdx + 8]; add rsp, 0x48; ret; 
0x0000000000481315: and al, 0x38; add rax, qword ptr [rdx + 8]; je 0x81324; mov qword ptr [rax], 0x6ccac0; add rsp, 0x48; ret; 
0x000000000048121e: and al, 0x38; add rsp, 0x68; ret; 
0x0000000000481214: and al, 0x38; call 0x8c900; mov rax, qword ptr [rsp + 0x38]; add rsp, 0x68; ret; 
0x000000000044a780: and al, 0x38; lea rdx, qword ptr [rsp + 0x60]; mov rdi, qword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000045050f: and al, 0x38; mov qword ptr [r8 + 0x90], rdx; add rsp, 0xd0; ret; 
0x0000000000480ef4: and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000480e82: and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x50; jmp qword ptr [rax]; 
0x000000000044a345: and al, 0x38; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x00000000004484c1: and al, 0x38; mov rsi, qword ptr [rsp + 0x30]; mov rdi, qword ptr [rsp + 0x28]; call rbx; 
0x0000000000480ef9: and al, 0x40; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000480e87: and al, 0x40; add rsp, 0x50; jmp qword ptr [rax]; 
0x000000000046f5ec: and al, 0x40; call rbx; 
0x000000000049a480: and al, 0x40; mov eax, 0; test rax, rax; je 0x9a493; mov edi, 0x6cc140; call rax; 
0x0000000000449a71: and al, 0x40; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004408db: and al, 0x48; add esp, 0x18; mov eax, edx; ret; 
0x000000000043fd6e: and al, 0x48; add esp, 0x18; ret; 
0x000000000041eb43: and al, 0x48; call rax; 
0x0000000000478584: and al, 0x48; lea edi, dword ptr [rax + 0x6cc1e0]; call rdx; 
0x000000000049a3b5: and al, 0x48; mov dword ptr [rsp + 8], esi; je 0x9a3c4; mov edi, 0x6cc140; call rax; 
0x000000000044ecd0: and al, 0x48; mov eax, dword ptr [rbp*8 + 0x4a6e00]; test rax, rax; je 0x4ece0; call rax; 
0x000000000049acc6: and al, 0x48; mov eax, dword ptr [rsi + 0xb0]; add rsp, 8; ret; 
0x0000000000442c7d: and al, 0x48; mov edx, eax; mov eax, r12d; syscall; 
0x0000000000447f92: and al, 0x48; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004488f5: and al, 0x48; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000448cdb: and al, 0x48; mov rdi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000046fcf2: and al, 0x48; mov rdi, r12; call rbx; 
0x00000000004110c6: and al, 0x49; mov ebx, dword ptr [rdi + 0x98]; mov rdi, rbx; call qword ptr [rbx + 0x20]; 
0x000000000049eadc: and al, 0x49; mov esi, dword ptr [rdi + rbp*8 + 0x10]; call rbx; 
0x000000000047b158: and al, 0x4c; mov dword ptr [rbp - 0xc8], ebx; mov qword ptr [rbp - 0xa8], r10; call rax; 
0x000000000047a917: and al, 0x4c; mov dword ptr [rbp - 0xd0], ebx; mov qword ptr [rbp - 0xc8], r10; call rax; 
0x0000000000442cbb: and al, 0x4c; mov esi, esi; mov rdi, qword ptr [rsp + 8]; xor eax, eax; syscall; 
0x000000000047c16c: and al, 0x4c; mov qword ptr [rax], rcx; add rsp, 0x140; mov eax, ebx; pop rbx; ret; 
0x000000000044b691: and al, 0x50; mov rdi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000419621: and al, 0x5d; mov dword ptr [r12 + 0x14], eax; pop r12; ret; 
0x000000000046f800: and al, 0x60; lea rsi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000044a785: and al, 0x60; mov rdi, qword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000041ee63: and al, 0x68; call rax; 
0x000000000042015b: and al, 0x68; mov rsi, r12; mov rdi, rbx; call rax; 
0x0000000000411ffe: and al, 0x74; ret 0x8b4c; 
0x000000000047b7ba: and al, 0x75; ret; 
0x0000000000449a69: and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; jl 0x49a96; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004840cf: and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000496594: and al, 0x80; add byte ptr [rax], al; add byte ptr [rcx], bh; ret; 
0x00000000004497ba: and al, 0x80; add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x4a; dec dword ptr [rax - 0x7d]; ret 0x4801; 
0x0000000000447c21: and al, 0x80; add byte ptr [rax], al; add dh, dh; ret 0x4801; 
0x00000000004c72a4: and al, 0x82; add byte ptr [rax], al; pop rax; cli; cli; jmp rdi; 
0x000000000041c816: and al, 0x89; ret 0xb48b; 
0x000000000041c792: and al, 0x8d; add qword ptr [rcx], rax; ror byte ptr [rax - 0x73], 0x54; ret; 
0x00000000004958e6: and al, 0x90; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; jl 0x95913; js 0x95932; call rsp; 
0x0000000000495bfb: and al, 0x90; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; jl 0x95c28; js 0x95c47; call rsp; 
0x0000000000495fc2: and al, 0x90; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; jl 0x95fef; js 0x9600e; call rsp; 
0x0000000000495c2d: and al, 0x90; add byte ptr [rax], al; add byte ptr [rbx + 0x3950245c], cl; ret; 
0x000000000043ff83: and al, 0xa8; mov esi, 0x10; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x000000000043ff9d: and al, 0xac; mov edx, eax; neg edx; cmp dword ptr [rsp - 0x58], 2; cmove eax, edx; ret; 
0x00000000004739b9: and al, 0xb8; adc al, 0; add byte ptr [rax], al; syscall; 
0x000000000043fe49: and al, 0xb8; add al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000047dd6b: and al, 0xb8; add al, byte ptr [rax]; add byte ptr [rcx + 0x48b48d8], cl; ret 0x8b48; 
0x000000000043fea9: and al, 0xb8; add byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x000000000043ff09: and al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000473829: and al, 0xb8; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000049cb3b: and al, 0xbf; add dword ptr [rax], eax; add byte ptr [rax], al; call rax; 
0x000000000043ff62: and al, 0xc0; je 0x3ff80; movsxd rsi, esi; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x000000000045e157: and al, 0xc5; movabs al, byte ptr [0x8348001f0f004b42]; ret 0x481e; 
0x000000000043ef29: and al, 0xc5; push -0x47ffb5b5; or byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004463be: and al, 0xc; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000048109f: and al, 0xc; add rsp, 0x38; ret; 
0x000000000049a144: and al, 0xc; mov rax, qword ptr [rbx + 0xd8]; mov ecx, ebp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x00000000004012cd: and al, 0xc; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000495b6a: and al, 0xd8; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000046be4f: and al, 0xd8; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ror dword ptr [rcx + rcx*4 - 0x12], cl; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000046be1b: and al, 0xd8; add byte ptr [rax], al; add byte ptr [rdx + 0x10], bh; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000040901b: and al, 0xe8; call rbx; 
0x000000000040a174: and al, 0xe8; cmpsb byte ptr [rsi], byte ptr [rdi]; ret 0xffff; 
0x000000000040a18a: and al, 0xe8; nop; ret 0xffff; 
0x000000000040a12b: and al, 0xe8; out dx, eax; ret 0xffff; 
0x000000000040a1ac: and al, 0xe8; outsb dx, byte ptr [rsi]; ret 0xffff; 
0x000000000040a1c2: and al, 0xe8; pop rax; ret 0xffff; 
0x000000000040b298: and al, 0xe8; ret 0x137; 
0x000000000040a798: and al, 0xe8; ret 0x142; 
0x000000000040c497: and al, 0xe8; ret; 
0x000000000048c080: and al, 0xe8; shr rax, 0x20; mov dword ptr [rsp - 0x14], eax; fld xword ptr [rsp - 0x18]; ret; 
0x000000000040afaf: and al, 0xe8; stosd dword ptr [rdi], eax; cmp al, byte ptr [rcx]; add cl, ch; sar cl, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000040a083: and al, 0xe8; xchg eax, edi; ret; 
0x000000000048c088: and al, 0xec; fld xword ptr [rsp - 0x18]; ret; 
0x000000000048c07c: and al, 0xf0; mov dword ptr [rsp - 0x18], eax; shr rax, 0x20; mov dword ptr [rsp - 0x14], eax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000004276de: and al, 0xf0; mov r14, qword ptr [rsp - 8]; and edx, 0x7f; jne 0x272a6; mov rax, rdi; ret; 
0x000000000049bf54: and al, 0xf7; jmp qword ptr [rsi + 0xf]; 
0x00000000004276e3: and al, 0xf8; and edx, 0x7f; jne 0x272a6; mov rax, rdi; ret; 
0x000000000048c041: and al, 0xf8; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x000000000048c047: and al, 0xf8; ret; 
0x0000000000481112: and al, 0xf; add byte ptr [rbp + 9], dh; xor eax, eax; add rsp, 0x48; ret; 
0x0000000000481332: and al, 0xf; add byte ptr [rbp + rbp*8 + 0x48], dh; mov edi, dword ptr [rsp + 0x18]; call 0x1ea60; add rsp, 0x48; ret; 
0x0000000000442dac: and al, 0xf; and r13, 0xfffffffffffffff0; add r12, r13; mov qword ptr [rbp - 0x48], r12; mov qword ptr [rbp - 0x40], r12; syscall; 
0x000000000048bca3: and al, 0xf; and r8, 0xfffffffffffffff0; call 0x8b0c0; leave; ret; 
0x000000000048bce1: and al, 0xf; and rcx, 0xfffffffffffffff0; call 0x8b7a0; leave; ret; 
0x000000000040da25: and al, 0xf; test byte ptr [rbx + rdx*8 - 0x76bb0001], dh; and byte ptr [rcx - 0x5416fb90], cl; sar edi, cl; jmp qword ptr [rsi + 0xf]; 
0x000000000045faeb: and al, 0xfa; jmp qword ptr [rsi - 0x70]; 
0x000000000048bffb: and al, 0xfc; movss xmm0, dword ptr [rsp - 4]; ret; 
0x000000000048c001: and al, 0xfc; ret; 
0x00000000004be3c9: and al, 0xfd; push qword ptr [rax + 0x26]; std; call qword ptr [rax + 0x28]; 
0x0000000000450287: and al, 0xfe; fldcw word ptr [rsp - 2]; ret; 
0x000000000045028b: and al, 0xfe; ret; 
0x000000000049a36e: and al, 0xff; inc dword ptr [rbp - 0x3f6af040]; add rsp, 8; movzx eax, al; neg eax; ret; 
0x0000000000472ba6: and al, 1; add byte ptr [rax], al; add bl, ch; ret 0x1f0f; 
0x0000000000431da4: and al, 7; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000441d17: and al, 8; add byte ptr [rdx + 1], bh; je 0x42260; xor esi, esi; mov rdi, r12; call rbx; 
0x00000000004417ea: and al, 8; add byte ptr [rdx + 1], bh; je 0x42280; xor esi, esi; mov rdi, r12; call rbx; 
0x000000000043f0c6: and al, 8; add rsp, 0x10; pop rbx; ret; 
0x000000000048c5d2: and al, 8; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000440f26: and al, 8; call 0x40aa0; mov rax, qword ptr [rsp + 8]; mov rdi, qword ptr [rax]; mov qword ptr [rsp + 8], rax; call rbx; 
0x000000000043f0a9: and al, 8; call 0x46750; add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x0000000000440f38: and al, 8; call rbx; 
0x000000000049a3b9: and al, 8; je 0x9a3c4; mov edi, 0x6cc140; call rax; 
0x0000000000440155: and al, 8; mov eax, 0x4f; syscall; 
0x0000000000480c30: and al, 8; mov edi, 0x6cc140; call rax; 
0x00000000004110c1: and al, 8; mov qword ptr [rsp], rax; mov rbx, qword ptr [r15 + 0x98]; mov rdi, rbx; call qword ptr [rbx + 0x20]; 
0x000000000041c0a4: and al, 8; mov qword ptr [rsp], rcx; call rdx; 
0x0000000000440087: and al, 8; mov r8d, eax; mov esi, 7; movsxd rdi, ebx; mov eax, 0x48; syscall; 
0x0000000000440f30: and al, 8; mov rdi, qword ptr [rax]; mov qword ptr [rsp + 8], rax; call rbx; 
0x0000000000440150: and al, 8; mov rdi, qword ptr [rsp + 8]; mov eax, 0x4f; syscall; 
0x0000000000440f3f: and al, 8; mov rdi, rax; call 0x1ea60; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442beb: and al, 8; mov rdi, rax; sub rdx, rsi; mov eax, r12d; syscall; 
0x000000000040e85c: and al, 8; mov rsi, rbp; mov rdi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x30]; lea r15, qword ptr [rbx + r14]; call rax; 
0x0000000000442cc2: and al, 8; xor eax, eax; syscall; 
0x00000000004a0b5a: and al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000004a1508: and al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000411656: and al, byte ptr [rax]; add byte ptr [rbx + 0x275fff8], al; pop rbx; ret; 
0x000000000049f873: and al, byte ptr [rax]; jne 0x9f858; pop rbx; ret; 
0x000000000049ed85: and al, byte ptr [rax]; mov qword ptr [rip + 0x22efc2], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000049ec2d: and al, byte ptr [rax]; mov qword ptr [rip + 0x22f11a], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000049ec34: and al, byte ptr [rax]; mov qword ptr [rsi + 0x28], rax; ret; 
0x00000000004242ca: and al, byte ptr [rsp - 0xb7f68c]; ret 0xc148; 
0x000000000045027e: and ax, 0xf0c0; or edi, eax; mov word ptr [rsp - 2], di; fldcw word ptr [rsp - 2]; ret; 
0x000000000045dfae: and bh, al; add ch, byte ptr [rip - 0x7d000000]; ret; 
0x0000000000461793: and bh, al; add dh, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rax - 0x16000006], ebp; ret 0xffef; 
0x00000000004ba1a5: and bh, byte ptr [rsi - 0x5e0466e]; xchg dword ptr [rsp + rax + 0x6fa9ce9d], esp; ret; 
0x00000000004be3c5: and bh, ch; call qword ptr [rax + 0x70fffd24]; std; call qword ptr [rax + 0x28]; 
0x000000000046d52a: and bl, bpl; fbld dword ptr [rsi - 0x70]; mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004bad43: and bl, byte ptr [rdx + 0x7a]; pop rcx; cmp byte ptr [rbx + rdi*2], bh; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x000000000046d52b: and bl, ch; fbld dword ptr [rsi - 0x70]; mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000040e3cf: and bl, dh; ret; 
0x000000000047001e: and byte ptr [r11 + 0x5d], r11b; pop r12; pop r13; ret; 
0x000000000044fb93: and byte ptr [r8 - 0x77], r9b; sti; test rax, rax; je 0x4fb9f; call rax; 
0x0000000000415654: and byte ptr [r9 + 0x5bc03113], cl; ret; 
0x000000000041a8f9: and byte ptr [rax + 0x39], cl; ret 0x820f; 
0x000000000049f4d4: and byte ptr [rax + 0x39], cl; ret; 
0x000000000046245b: and byte ptr [rax + 0x4a], 0x4b; add bh, al; test dword ptr [rdi + rbp*8 - 1], edx; jmp qword ptr [rax]; 
0x000000000040f154: and byte ptr [rax + 0x4bf038], bh; cmp rax, 0x4bf040; jae 0xf175; mov rbp, rax; call qword ptr [rbp]; 
0x000000000045343e: and byte ptr [rax + 1], cl; ret; 
0x00000000004244bd: and byte ptr [rax + 9], cl; retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x00000000004c0627: and byte ptr [rax + rax], al; add byte ptr [rbp + rdx + 0x23100000], ch; cmc; call qword ptr [rsi + 4]; 
0x00000000004c3ac0: and byte ptr [rax + rdi*8], bl; jmp qword ptr [rdx]; 
0x000000000040f190: and byte ptr [rax - 0x3f], cl; retf 0x6411; xor rdx, qword ptr [0x30]; call rdx; 
0x0000000000455f77: and byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rax + 0x4b40e0]; mov rax, qword ptr [rax*8 + 0x4b3a20]; jmp rax; 
0x0000000000455fc8: and byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rax + 0x4b40e0]; mov rax, qword ptr [rax*8 + 0x4b3b20]; jmp rax; 
0x00000000004580b8: and byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rax + 0x4b40e0]; mov rax, qword ptr [rax*8 + 0x4b3c20]; jmp rax; 
0x0000000000456beb: and byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rax + 0x4b40e0]; mov rax, qword ptr [rax*8 + 0x4b3f20]; jmp rax; 
0x000000000046f68b: and byte ptr [rax - 0x73], cl; push rsp; and al, 0x28; lea rsi, qword ptr [rsp + 0x40]; call rbx; 
0x0000000000448cd7: and byte ptr [rax - 0x73], cl; push rsp; and al, 0x48; mov rdi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000044b68d: and byte ptr [rax - 0x73], cl; push rsp; and al, 0x50; mov rdi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000048b459: and byte ptr [rax - 0x75], cl; adc dword ptr [rax - 0x73], ecx; add dword ptr [rax + 0x39], ecx; ret 0x8948; 
0x000000000040e865: and byte ptr [rax - 0x75], cl; and al, 0x30; lea r15, qword ptr [rbx + r14]; call rax; 
0x000000000041c523: and byte ptr [rax - 0x75], cl; push rax; or dh, dh; ret 0xf04; 
0x000000000045dc82: and byte ptr [rax - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; sar rdx, 2; call qword ptr [rax + 0x38]; 
0x00000000004539f6: and byte ptr [rax - 0x77], cl; fisttp word ptr [rax - 0x75]; sbb eax, 0; add byte ptr [rax], al; sub rdx, rsi; call qword ptr [rax + 0x38]; 
0x0000000000472534: and byte ptr [rax - 0x77], cl; ret 0x4eb; 
0x00000000004469f4: and byte ptr [rax - 0x77], cl; ret 0xee75; 
0x000000000040f4d3: and byte ptr [rax - 0x77], cl; ret; 
0x0000000000410eed: and byte ptr [rax - 0x77], cl; sbb byte ptr [rax - 0x77], cl; sub byte ptr [rax - 0x77], cl; ret 0x9e9; 
0x000000000044fb94: and byte ptr [rax - 0x77], cl; sti; test rax, rax; je 0x4fb9f; call rax; 
0x000000000049dcab: and byte ptr [rax - 0x7b], cl; ret 0x840f; 
0x000000000044688e: and byte ptr [rax - 0x7d], cl; ret; 
0x00000000004115b0: and byte ptr [rax - 1], bh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000412e52: and byte ptr [rax - 1], bh; pop rbx; ret; 
0x00000000004c7870: and byte ptr [rax - 5], dl; jmp qword ptr [rdx]; 
0x000000000048c193: and byte ptr [rax], al; add byte ptr [rax + rdx - 0x75], dh; jo 0x8c121; sar byte ptr [rax + 9], 0xf3; ret; 
0x000000000044059f: and byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000462466: and byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rbp - 0x1098], 1; mov rax, qword ptr [rax*8 + 0x4b48a0]; jmp rax; 
0x000000000043ef53: and byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004c117d: and byte ptr [rax], al; add byte ptr [rax], dh; pop rdx; cmc; jmp qword ptr [rsi + 2]; 
0x000000000043f107: and byte ptr [rax], bh; test rax, rax; je 0x3f119; mov edi, 0x6cd720; call rax; 
0x000000000047f6b8: and byte ptr [rbp + rcx*4 + 0x43], cl; adc al, ch; mov r8b, byte ptr [rcx]; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000046f8fe: and byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x28; lea rsi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000046f2a4: and byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x28; lea rsi, qword ptr [rsp + 0x30]; lea rcx, qword ptr [rax + 1]; call rbx; 
0x00000000004be480: and byte ptr [rbp - 3], bl; jmp qword ptr [rax + 0x5f]; 
0x00000000004a4990: and byte ptr [rbp - 7], dh; push qword ptr [rax]; jne 0xa4990; call qword ptr [rax + 0x75]; 
0x00000000004a4990: and byte ptr [rbp - 7], dh; push qword ptr [rax]; jne 0xa4990; call qword ptr [rax + 0x75]; stc; jmp qword ptr [rax + 0x75]; 
0x00000000004c93c6: and byte ptr [rbx + 0x1890304], al; ret; 
0x0000000000406378: and byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x000000000047001f: and byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000004463c3: and byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000004c052d: and byte ptr [rbx + 0xa470204], al; ret; 
0x00000000004c0b05: and byte ptr [rbx + 0xa4d0204], al; ret; 
0x0000000000427643: and byte ptr [rbx + rcx*4 + 0x66], cl; sub byte ptr [rbx + rcx*4 + 0x6e], cl; xor byte ptr [rbx + rcx*4 + 0x76], cl; cmp byte ptr [rax + 0xf], cl; ret; 
0x00000000004813a2: and byte ptr [rbx + rcx*4 + 0x7f], cl; sub byte ptr [rcx - 0x3b76b310], cl; mov rbp, r9; nop; jmp rdx; 
0x000000000046110e: and byte ptr [rbx - 0x106f43], al; call qword ptr [rax]; 
0x0000000000456170: and byte ptr [rbx - 0x4ef43], al; call qword ptr [rax]; 
0x000000000046b5d9: and byte ptr [rbx - 0x77], bl; rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x00000000004be460: and byte ptr [rbx - 3], cl; jmp qword ptr [rax + 0x4d]; 
0x00000000004a4a0c: and byte ptr [rbx - 7], bh; push qword ptr [rax]; jnp 0xa4a0c; inc dword ptr [rax + 0x7b]; stc; jmp qword ptr [rax + 0x7b]; 
0x0000000000415655: and byte ptr [rcx + 0x5bc03113], cl; ret; 
0x00000000004c537e: and byte ptr [rcx + 0xa], al; ret; 
0x0000000000414aa9: and byte ptr [rcx + 0xc7640f], cl; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000411860: and byte ptr [rcx + 0xc76417], cl; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000041bfe4: and byte ptr [rcx + rcx*4 + 0x44], cl; and al, 0x18; mov qword ptr [rsp + 0x10], r10; call rax; 
0x0000000000452e65: and byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; ret; 
0x00000000004a4a30: and byte ptr [rcx + rdi*8 - 1], bh; jl 0xa4a30; jmp qword ptr [rax + 0x7c]; 
0x00000000004a4950: and byte ptr [rcx + rdi*8 - 1], dh; xor byte ptr [rcx + rdi*8 - 1], dh; je 0xa4954; call qword ptr [rax + 0x74]; 
0x000000000048c085: and byte ptr [rcx - 0x2413dbbc], cl; insb byte ptr [rdi], dx; and al, 0xe8; ret; 
0x000000000040da2e: and byte ptr [rcx - 0x5416fb90], cl; sar edi, cl; jmp qword ptr [rsi + 0xf]; 
0x000000000049d15c: and byte ptr [rcx - 0x77], cl; fmul dword ptr [rcx + rcx*4 - 0x17]; mov rdx, qword ptr [r13]; mov esi, 1; mov edi, 1; call rax; 
0x000000000044697c: and byte ptr [rcx - 0x77], cl; ret 0xee75; 
0x00000000004c1420: and byte ptr [rdi - 0xb], bl; call qword ptr [rsi]; 
0x000000000049a45b: and byte ptr [rdi], cl; sub dword ptr [rsp + 0x30], eax; je 0x9a46a; mov edi, 0x6cc140; call rax; 
0x0000000000443a7a: and byte ptr [rdi], cl; test bh, cl; add dword ptr [rax], eax; add byte ptr [rbx - 0x7cbefe39], al; ret 0x4901; 
0x0000000000446969: and byte ptr [rdi], cl; test cl, bh; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000043c8bd: and byte ptr [rdi], cl; test dword ptr [rax + rax + 0x40a80000], edi; jne 0x3c990; lea rax, qword ptr [rdi + 7]; ret; 
0x000000000043c7a0: and byte ptr [rdi], cl; test ecx, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x000000000049acec: and byte ptr [rdi], dh; idiv edi; mov rax, qword ptr [rsi + 0xb8]; add rsp, 8; ret; 
0x00000000004362c6: and byte ptr [rdx + 0x14], dh; vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000043e868: and byte ptr [rdx + 0xa], dh; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x00000000004a3fd4: and byte ptr [rdx - 8], bh; push qword ptr [rax + 0x7b]; clc; inc eax; jl 0xa3fd7; call qword ptr [rax]; 
0x00000000004a4630: and byte ptr [rdx], bl; stc; push qword ptr [rax + 0x40fff919]; sbb ecx, edi; call rax; 
0x00000000004a4418: and byte ptr [rip + 0x1cb0fff9], bl; stc; inc dword ptr [rax + 0x1c]; stc; call rax; 
0x00000000004167c1: and byte ptr [rsi + 0x1d], dh; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004167c0: and byte ptr [rsi + 0x1d], sil; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000447720: and byte ptr [rsi + 0x4a], 0; movsx edx, byte ptr [rdx + 0x1b]; mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x000000000042f09a: and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042f095: and byte ptr [rsi + 0xf], ah; out dx, eax; push rsi; and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004be490: and byte ptr [rsi - 3], ah; jmp qword ptr [rax + 0x68]; 
0x00000000004a3fb8: and byte ptr [rsi - 8], ch; inc eax; outsd dx, dword ptr [rsi]; clc; jmp qword ptr [rax + 0x71]; 
0x00000000004a42c0: and ch, 0xf8; jmp qword ptr [rax - 0x19]; 
0x000000000046f042: and ch, 0xf; je 0x6f060; add rax, 2; ret; 
0x00000000004be3c1: and ch, bh; push qword ptr [rax - 0x6f0002de]; and al, 0xfd; push qword ptr [rax + 0x26]; std; call qword ptr [rax + 0x28]; 
0x000000000043152a: and ch, byte ptr [rip + 0x63490007]; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004441ca: and ch, byte ptr [rsi - 0x7a450004]; jle 0x4421d; add byte ptr [rax - 0x7b], cl; ror byte ptr [rax + 0xf], 0x44; ret 0x3880; 
0x00000000004c0571: and ch, dh; jmp qword ptr [rsi]; 
0x000000000046f02d: and cl, 0xf; je 0x6f050; ret; 
0x0000000000498a43: and cl, byte ptr [rax + 0x29]; fmul dword ptr [rax + 0x39]; ret 0x860f; 
0x0000000000426c7d: and cl, byte ptr [rcx - 0x77]; ret; 
0x000000000046d198: and cl, ch; sar dh, 0xff; jmp qword ptr [rsi - 0x70]; 
0x00000000004a42b0: and dh, bl; clc; jmp rax; 
0x0000000000427267: and dh, dh; ret 0x7504; 
0x0000000000450279: and di, 0xf3f; and ax, 0xf0c0; or edi, eax; mov word ptr [rsp - 2], di; fldcw word ptr [rsp - 2]; ret; 
0x000000000045dfad: and dil, al; add ch, byte ptr [rip - 0x7d000000]; ret; 
0x0000000000461792: and dil, al; add dh, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rax - 0x16000006], ebp; ret 0xffef; 
0x00000000004a437c: and dl, ah; clc; call qword ptr [rax]; 
0x00000000004a437c: and dl, ah; clc; call qword ptr [rax]; in al, 0xf8; jmp rax; 
0x0000000000411662: and dword ptr [rax + 0x48000000], 0xffffff89; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x00000000004c1255: and dword ptr [rax], eax; add byte ptr [rax], cl; pop rbp; cmc; call qword ptr [rsi]; 
0x00000000004583e9: and dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000004bcce2: and dword ptr [rax], edx; jmp qword ptr [rdi]; 
0x000000000047cbc2: and dword ptr [rbp + 0x8750000], ebx; mov rax, qword ptr [rip + 0x259800]; ret; 
0x00000000004165bc: and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x00000000004105f9: and dword ptr [rcx + 0x415d5bd8], ecx; pop rsp; ret; 
0x00000000004767a1: and dword ptr [rcx - 0x73], ecx; add dword ptr [rbx - 0x77], eax; je 0x7672e; sub byte ptr [rax + 0x39], cl; ret 0x1376; 
0x000000000048771c: and dword ptr [rcx], esi; ror byte ptr [rax + 1], cl; ret 0x9e74; 
0x00000000004b9d99: and dword ptr [rsi + rbp*2 - 0x7a], edi; lahf; ret 0x871e; 
0x0000000000446303: and dword ptr [rsi], eax; sub dword ptr [rax], eax; ret; 
0x00000000004bcce1: and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x0000000000481354: and eax, 0; add rax, -8; ret; 
0x00000000004501bb: and eax, 0; ret; 
0x000000000049d7ca: and eax, 0x10468b48; add rsp, 8; ret; 
0x0000000000401079: and eax, 0x28; je 0x1085; call 0x437c0; leave; ret; 
0x0000000000496986: and eax, 0x2d0; ret; 
0x000000000040f1e1: and eax, 0x30; call rax; 
0x000000000040f199: and eax, 0x30; call rdx; 
0x00000000004707f8: and eax, 0x3d894800; scasd eax, dword ptr [rdi]; ret 0x25; 
0x000000000043eebd: and eax, 0x3fc00; pop rbx; ret; 
0x000000000043eedd: and eax, 0x3fc00; ret; 
0x000000000043ef83: and eax, 0x3ffc0000; add eax, eax; div ecx; pop rbx; mov eax, eax; ret; 
0x000000000043ef6c: and eax, 0x3fffc00; div ecx; pop rbx; mov eax, eax; ret; 
0x000000000043ee9c: and eax, 0x3fffc00; pop rbx; ret; 
0x000000000049cab9: and eax, 0x48128b48; mov dword ptr [rbx + 0x98], edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000479da0: and eax, 0x48c03100; add esp, 8; ret; 
0x000000000049d75a: and eax, 0x4ff8040; jne 0x9d775; mov eax, 8; add rsp, 8; ret; 
0x000000000043fecb: and eax, 0x50; add byte ptr [rax], al; ret; 
0x00000000004714ce: and eax, 0x58b4800; stc; ret; 
0x00000000004c158d: and eax, 0x63100000; cmc; call qword ptr [rsi]; 
0x0000000000431c54: and eax, 0x63490007; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004c163d: and eax, 0x64200000; cmc; call qword ptr [rdx]; 
0x000000000047cc2f: and eax, 0x6894800; ret; 
0x000000000045b339: and eax, 0x76b80100; add byte ptr [r15 + r9 + 0x45], cl; ret 0xf4c; 
0x000000000045c34d: and eax, 0x7eb80100; add byte ptr [r15 + r9 + 0x44], cl; ret 0xf4c; 
0x000000000043ef10: and eax, 0x7ff80000; ret; 
0x000000000048bff0: and eax, 0x7fffff; or edx, esi; or edx, eax; mov dword ptr [rsp - 4], edx; movss xmm0, dword ptr [rsp - 4]; ret; 
0x000000000047cbc4: and eax, 0x8750000; mov rax, qword ptr [rip + 0x259800]; ret; 
0x000000000049a335: and eax, 0x8b48ffff; push rsp; and al, 0x10; mov rax, rdx; add rsp, 0x28; ret; 
0x000000000047a26c: and eax, 0x8b4cf175; cmp ecx, dword ptr [rax - 0x75]; adc byte ptr [r8 - 0x7d], cl; ret; 
0x000000000041b8f6: and eax, 0x950f4100; ret; 
0x00000000004723e2: and eax, 0x96830f00; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fmul dword ptr [rax - 0x7d]; ret; 
0x000000000047cae2: and eax, 0xc0834800; add dword ptr [rax - 0x77], ecx; add eax, 0x2598e1; add rsp, 8; ret; 
0x000000000045027f: and eax, 0xc709f0c0; mov word ptr [rsp - 2], di; fldcw word ptr [rsp - 2]; ret; 
0x000000000047252f: and eax, 0xc8d4a00; and byte ptr [rax - 0x77], cl; ret 0x4eb; 
0x00000000004433a7: and eax, 0xc; cmp eax, 4; je 0x433b0; ret; 
0x0000000000470a00: and eax, 0xec814800; add byte ptr [rax], 0; add al, ch; ret 0xfd28; 
0x0000000000498283: and eax, 0xf; cmp al, 0xa; jne 0x9823d; nop word ptr [rax + rax]; call rbx; 
0x000000000040138f: and eax, 0xf; mov dword ptr [r8], eax; pop rbx; ret; 
0x0000000000430610: and eax, 0xff; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000042fd43: and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000401d10: and eax, 0xffffffc0; add rax, 0x900; mov qword ptr [rip + 0x2c9370], rax; xor eax, eax; ret; 
0x0000000000424404: and eax, 0xffffffc0; sar rdx, cl; test rdx, rdx; je 0x24420; bsf rax, rdx; ret; 
0x00000000004243a3: and eax, 0xffffffc0; sar rdx, cl; test rdx, rdx; je 0x24430; bsf rax, rdx; ret; 
0x0000000000444fb6: and eax, 0xffffffd0; or rax, 0xffffffffffffffff; ret; 
0x000000000048bca6: and eax, 0xfffffff0; call 0x8b0c0; leave; ret; 
0x000000000049ac85: and eax, 0xfffffff8; mov r8, qword ptr [rax]; lea rax, qword ptr [rax + 8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x000000000048a38c: and eax, 2; sub eax, 1; ret; 
0x00000000004c1435: and eax, dword ptr [rax]; add byte ptr [rax + 0x5f], ch; cmc; jmp qword ptr [rdi + 1]; 
0x00000000004c141d: and eax, dword ptr [rax]; add byte ptr [rax], ah; pop rdi; cmc; call qword ptr [rsi]; 
0x00000000004c1405: and eax, dword ptr [rax]; add byte ptr [rax], bl; pop rdi; cmc; jmp qword ptr [rax]; 
0x000000000049a598: and eax, dword ptr [rax]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000049a58f: and eax, dword ptr [rax]; jae 0x9a59f; mov rdx, qword ptr [rip + 0x23359e]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000049c969: and eax, dword ptr [rax]; or byte ptr [rdi], cl; test byte ptr [rbx - 0x18000000], bl; cdq; sbb dh, bh; jmp qword ptr [rsi + 0xf]; 
0x000000000049a7a4: and eax, dword ptr [rax]; ret; 
0x0000000000431e56: and eax, dword ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000046e20e: and eax, ecx; je 0x6e3d0; bsr rax, rax; add rax, rdi; ret; 
0x000000000048c036: and eax, edi; or rdx, rcx; or rdx, rax; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000442daf: and ebp, 0xfffffff0; add r12, r13; mov qword ptr [rbp - 0x48], r12; mov qword ptr [rbp - 0x40], r12; syscall; 
0x00000000004165bd: and ebp, edi; pop rbx; ret; 
0x0000000000443342: and ebx, 0xffffffbb; cmp r11d, 0xa; je 0x4334c; ret; 
0x000000000040193c: and ebx, dword ptr [rsi]; add byte ptr [rax + 2], dil; syscall; 
0x000000000047afa4: and ecx, 0xf; cmp cl, 0xa; je 0x7b551; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r15]; call rax; 
0x0000000000430615: and ecx, 0xff; sub eax, ecx; ret; 
0x000000000042fd48: and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000048bce4: and ecx, 0xfffffff0; call 0x8b7a0; leave; ret; 
0x000000000041a97b: and ecx, dword ptr [rax + 0x39]; ret; 
0x000000000042081c: and ecx, dword ptr [rcx - 0x7d]; ret 0xeb5b; 
0x000000000041736c: and ecx, dword ptr [rdi]; mov dh, 0; ret; 
0x0000000000473ab3: and ecx, dword ptr [rsi + 0x10]; lea rcx, qword ptr [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x00000000004a494d: and ecx, edi; jmp qword ptr [rax]; 
0x000000000049ec2b: and ecx, esi; and al, byte ptr [rax]; mov qword ptr [rip + 0x22f11a], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x00000000004c7519: and edi, ebx; jmp qword ptr [rdi]; 
0x00000000004273c0: and edx, 0x1f; jne 0x272a6; mov rax, rdi; ret; 
0x00000000004275e6: and edx, 0x3f; jne 0x272a6; mov rax, rdi; ret; 
0x00000000004276e5: and edx, 0x7f; jne 0x272a6; mov rax, rdi; ret; 
0x000000000045b806: and edx, 0x83667ff0; cli; add dword ptr [rcx], ebx; jmp qword ptr [rsi - 0x3f]; 
0x0000000000427127: and edx, 2; mov eax, 0x4336a0; mov edx, 0x430630; cmove rax, rdx; ret; 
0x00000000004273fc: and edx, 7; jne 0x272a6; mov rax, rdi; ret; 
0x000000000046e39e: and edx, eax; cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, qword ptr [rcx + rsi]; ret; 
0x000000000048c05e: and esi, 0xe0837fff; jg 0x8c06f; ret 0x5488; 
0x000000000049f310: and esi, 2; jne 0x9f31b; mov eax, 8; ret; 
0x000000000046e492: and esi, eax; je 0x6e3d0; bsr rax, rsi; add rax, rdi; ret; 
0x00000000004c0631: and esi, ebp; call qword ptr [rsi + 4]; 
0x000000000046e29c: and esi, ecx; je 0x6e3d0; bsr rsi, rsi; lea rax, qword ptr [rdi + rsi]; ret; 
0x0000000000479d9f: and esp, dword ptr [rip + 0x48c03100]; add esp, 8; ret; 
0x000000000043f4fe: and esp, esi; mov rdi, rdx; mov eax, r8d; syscall; 
0x0000000000443341: and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x4334c; ret; 
0x0000000000442dae: and r13, 0xfffffffffffffff0; add r12, r13; mov qword ptr [rbp - 0x48], r12; mov qword ptr [rbp - 0x40], r12; syscall; 
0x000000000048bca5: and r8, 0xfffffffffffffff0; call 0x8b0c0; leave; ret; 
0x0000000000401d0f: and rax, 0xffffffffffffffc0; add rax, 0x900; mov qword ptr [rip + 0x2c9370], rax; xor eax, eax; ret; 
0x0000000000424403: and rax, 0xffffffffffffffc0; sar rdx, cl; test rdx, rdx; je 0x24420; bsf rax, rdx; ret; 
0x00000000004243a2: and rax, 0xffffffffffffffc0; sar rdx, cl; test rdx, rdx; je 0x24430; bsf rax, rdx; ret; 
0x000000000049ac84: and rax, 0xfffffffffffffff8; mov r8, qword ptr [rax]; lea rax, qword ptr [rax + 8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x000000000046e20d: and rax, rcx; je 0x6e3d0; bsr rax, rax; add rax, rdi; ret; 
0x000000000048c035: and rax, rdi; or rdx, rcx; or rdx, rax; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x000000000048bce3: and rcx, 0xfffffffffffffff0; call 0x8b7a0; leave; ret; 
0x000000000046e39d: and rdx, r8; cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, qword ptr [rcx + rsi]; ret; 
0x000000000046e491: and rsi, rax; je 0x6e3d0; bsr rax, rsi; add rax, rdi; ret; 
0x000000000046e29b: and rsi, rcx; je 0x6e3d0; bsr rsi, rsi; lea rax, qword ptr [rdi + rsi]; ret; 
0x0000000000453a03: bnd call qword ptr [rax + 0x38]; 
0x000000000041092b: bnd call qword ptr [rax + 0x70]; 
0x0000000000442e61: bnd jne 0x42e50; movsxd rdi, dword ptr [rbp - 0x58]; mov eax, 3; syscall; 
0x000000000042d70a: bsf eax, eax; add rax, rdi; add rax, rcx; ret; 
0x0000000000426af0: bsf eax, eax; add rax, rdi; ret; 
0x0000000000426b00: bsf eax, eax; lea rax, qword ptr [rax + rdi + 0x10]; ret; 
0x0000000000426b10: bsf eax, eax; lea rax, qword ptr [rax + rdi + 0x20]; ret; 
0x0000000000426ae0: bsf eax, eax; lea rax, qword ptr [rax + rdi - 0x10]; ret; 
0x0000000000426a2f: bsf eax, eax; lea rax, qword ptr [rdi + rax + 0x30]; ret; 
0x000000000042d903: bsf eax, eax; lea rax, qword ptr [rdi + rax]; ret; 
0x0000000000421dd3: bsf eax, eax; mov edx, 0; lea rax, qword ptr [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000004268aa: bsf eax, eax; sub rdx, rax; jbe 0x26b60; add rax, rdi; add rax, rcx; ret; 
0x0000000000426b20: bsf eax, eax; sub rdx, rax; jbe 0x26b60; add rax, rdi; ret; 
0x0000000000426b30: bsf eax, eax; sub rdx, rax; jbe 0x26b60; lea rax, qword ptr [rdi + rax + 0x10]; ret; 
0x0000000000426b40: bsf eax, eax; sub rdx, rax; jbe 0x26b60; lea rax, qword ptr [rdi + rax + 0x20]; ret; 
0x0000000000426b50: bsf eax, eax; sub rdx, rax; jbe 0x26b60; lea rax, qword ptr [rdi + rax + 0x30]; ret; 
0x0000000000424366: bsf eax, edx; ret; 
0x000000000042eeda: bsf ecx, ecx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000042efa0: bsf ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000042ed6c: bsf edx, eax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x00000000004244c2: bsf edx, edx; add rax, rdx; sub rax, rdi; ret; 
0x000000000043c311: bsf edx, edx; lea r11, qword ptr [rip + 0x686b5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043c2b4: bsf edx, edx; lea r11, qword ptr [rip + 0x68712]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043c297: bsf edx, edx; lea r11, qword ptr [rip + 0x6872f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bcb9: bsf edx, edx; lea r11, qword ptr [rip + 0x68c8d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bc94: bsf edx, edx; lea r11, qword ptr [rip + 0x68cb2]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000004233f1: bsf edx, edx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042da20: bsf rax, rax; lea rax, qword ptr [rdi + rax]; ret; 
0x0000000000421ef0: bsf rax, rax; mov edx, 0; lea rax, qword ptr [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000004243b2: bsf rax, rdx; ret; 
0x000000000042eed9: bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000042ef9f: bsf rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000042ed6b: bsf rdx, rax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x00000000004244c1: bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000043c310: bsf rdx, rdx; lea r11, qword ptr [rip + 0x686b5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043c2b3: bsf rdx, rdx; lea r11, qword ptr [rip + 0x68712]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043c296: bsf rdx, rdx; lea r11, qword ptr [rip + 0x6872f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bcb8: bsf rdx, rdx; lea r11, qword ptr [rip + 0x68c8d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bc93: bsf rdx, rdx; lea r11, qword ptr [rip + 0x68cb2]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000004233f0: bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000046e217: bsr eax, eax; add rax, rdi; ret; 
0x000000000046e49b: bsr eax, esi; add rax, rdi; ret; 
0x000000000046e3a9: bsr esi, esi; lea rax, qword ptr [rcx + rsi]; ret; 
0x000000000046e2a5: bsr esi, esi; lea rax, qword ptr [rdi + rsi]; ret; 
0x000000000046e216: bsr rax, rax; add rax, rdi; ret; 
0x000000000046e49a: bsr rax, rsi; add rax, rdi; ret; 
0x000000000046e3a8: bsr rsi, rsi; lea rax, qword ptr [rcx + rsi]; ret; 
0x000000000046e2a4: bsr rsi, rsi; lea rax, qword ptr [rdi + rsi]; ret; 
0x000000000046e153: bts edx, ebx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000046e0b4: bts edx, esi; sar rdx, cl; test rdx, rdx; je 0x6e0d0; bsf rax, rdx; ret; 
0x000000000046e152: bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000046e0b3: bts rdx, rsi; sar rdx, cl; test rdx, rdx; je 0x6e0d0; bsf rax, rdx; ret; 
0x000000000040fc32: call 0x11f00; add rsp, 0xd8; ret; 
0x0000000000411654: call 0x13920; cmp eax, -1; jne 0x11660; pop rbx; ret; 
0x0000000000415d00: call 0x14bc0; test eax, eax; jne 0x15d39; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x0000000000413cad: call 0x15350; mov dword ptr [rbx + 0x70], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004a1c69: call 0x17a80; add byte ptr [rax], al; sub rsp, 8; add rsp, 8; ret; 
0x0000000000418722: call 0x17dc0; test rax, rax; je 0x1872e; pop rbx; ret; 
0x000000000040f188: call 0x18517cd5; mov rsi, qword ptr [rax + 0x20]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000040f1b0: call 0x18517cfd; mov rdi, qword ptr [rax + 0x20]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000401c4b: call 0x1e0a; add byte ptr [rax + 0xf], cl; scasd eax, dword ptr [rdi]; ret 0x8b48; 
0x000000000048133c: call 0x1ea60; add rsp, 0x48; ret; 
0x000000000041005e: call 0x1ea60; mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000440f7a: call 0x1ea60; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000440b84: call 0x1ea60; mov rdi, qword ptr [r13]; call rbx; 
0x0000000000440b77: call 0x1ea60; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000440f44: call 0x1ea60; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000440cb9: call 0x1ea60; mov rdi, qword ptr [rbp]; call rbx; 
0x00000000004733a8: call 0x1ea60; movsxd rdi, ebx; mov eax, 3; syscall; 
0x000000000049f6fa: call 0x1ea60; test rbx, rbx; mov rdi, rbx; jne 0x9f6f0; pop rbx; ret; 
0x000000000047d435: call 0x1ea60; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000046fda8: call 0x1f50; nop dword ptr [rax]; mov eax, 0xc9; syscall; 
0x000000000046fda8: call 0x1f50; nop dword ptr [rax]; mov eax, 0xc9; syscall; ret; 
0x0000000000420aad: call 0x1f9b0; cmp qword ptr [rbx], 0x444c4541; je 0x205db; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000443135: call 0x1feb482; jne 0x43130; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x00000000004431a5: call 0x1feb4f2; jne 0x431a0; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x000000000048c081: call 0x20f181ce; mov dword ptr [rsp - 0x14], eax; fld xword ptr [rsp - 0x18]; ret; 
0x000000000048c084: call 0x244d49a9; in al, dx; fld xword ptr [rsp - 0x18]; ret; 
0x000000000044f9d6: call 0x272a0; mov esi, 0x80000; mov rdi, r13; mov eax, r15d; syscall; 
0x000000000044642b: call 0x360; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x00000000004009db: call 0x3e0cb28; add rax, 0x6cdd60; mov qword ptr [rbp - 8], rax; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000043f742: call 0x3efb0; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000400f60: call 0x3fe80; nop; pop rbp; ret; 
0x0000000000401910: call 0x3ffd0; cmp eax, -1; je 0x1a03; add rsp, 0x98; ret; 
0x000000000043fd5c: call 0x407d0; test eax, eax; mov rax, -1; cmove rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000421d54: call 0x407f0; mov edx, 0; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x00000000004500bf: call 0x409b0; movsxd rdi, r15d; mov eax, 3; syscall; 
0x000000000044189e: call 0x40a10; mov edx, 4; mov esi, 2; mov rdi, r15; call rbx; 
0x0000000000441879: call 0x40a10; mov rdi, r15; mov edx, 4; mov esi, 1; call rbx; 
0x0000000000440f28: call 0x40aa0; mov rax, qword ptr [rsp + 8]; mov rdi, qword ptr [rax]; mov qword ptr [rsp + 8], rax; call rbx; 
0x0000000000440af1: call 0x40aa0; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000440b32: call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x000000000040ff13: call 0x415d4073; pop rbp; pop rbp; ret; 
0x000000000040ff35: call 0x415d4095; pop rbp; pop rbp; ret; 
0x000000000041454a: call 0x415d86ac; pop rbp; pop r14; pop r15; ret; 
0x0000000000415bde: call 0x415d9d40; pop rbp; pop r14; ret; 
0x000000000041f63a: call 0x415f514f; pop rsp; pop r13; ret; 
0x000000000043f11c: call 0x4160327c; pop rbp; pop rbp; ret; 
0x000000000046b81c: call 0x4162f97e; pop rbp; pop r14; ret; 
0x000000000046be6a: call 0x4162ffcc; pop rbp; ret; 
0x000000000046c0aa: call 0x4163020c; pop rbp; ret; 
0x000000000047064a: call 0x416347ac; pop rbp; pop r14; ret; 
0x0000000000440959: call 0x41de92a6; or edx, 0x40; xor edi, edi; mov eax, 9; movsxd r10, r10d; syscall; 
0x0000000000442f47: call 0x42b30; test rax, rax; jne 0x42f18; movsxd rdi, dword ptr [rbp - 0x68]; mov eax, 3; syscall; 
0x00000000004186c7: call 0x432d0; add rsp, 0x80; mov eax, 0x6cb800; ret; 
0x00000000004172b5: call 0x432d0; add rsp, 0x80; mov qword ptr [rip + 0x2b62e0], rdx; add dword ptr [rip + 0x2b62d5], 1; ret; 
0x0000000000417ed4: call 0x432d0; add rsp, 0x80; mov qword ptr fs:[r9], rdx; mov rax, rdx; add rsp, 8; ret; 
0x000000000040fd95: call 0x43300; add rsp, 0x80; add rsp, 0xd0; mov eax, esi; pop rbx; ret; 
0x0000000000471508: call 0x43300; add rsp, 0x80; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041028b: call 0x43300; add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x000000000041ea48: call 0x43300; add rsp, 0x80; mov rax, rbx; pop rbx; ret; 
0x000000000046bf83: call 0x43300; add rsp, 0x80; pop rbx; pop rbp; pop r12; ret; 
0x0000000000473585: call 0x43300; add rsp, 0x80; pop rbx; ret; 
0x00000000004527ed: call 0x43300; add rsp, 0x80; xor eax, eax; add rsp, 8; ret; 
0x00000000004209e0: call 0x43300; add rsp, 0x80; xor eax, eax; pop rbx; ret; 
0x000000000043fea1: call 0x43320; mov qword ptr [rsp], rax; mov eax, 0; syscall; 
0x00000000004739b1: call 0x43320; mov qword ptr [rsp], rax; mov eax, 0x14; syscall; 
0x000000000043ff01: call 0x43320; mov qword ptr [rsp], rax; mov eax, 1; syscall; 
0x000000000043fe41: call 0x43320; mov qword ptr [rsp], rax; mov eax, 2; syscall; 
0x000000000043fe58: call 0x43380; mov rax, rdx; add rsp, 8; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x0000000000401080: call 0x437c0; leave; ret; 
0x000000000043f0ab: call 0x46750; add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x000000000049cf49: call 0x4810588d; mov eax, dword ptr [rdi + 0x98]; ret; 
0x0000000000440916: call 0x48da6c68; mov edx, ebx; mov rsi, r13; mov rdi, r12; mov eax, 9; syscall; 
0x00000000004242d4: call 0x48eb2de9; mov eax, edi; ret; 
0x0000000000427804: call 0x48eb6319; mov eax, edx; ret; 
0x0000000000442170: call 0x4bf2174; add byte ptr [rax], al; add byte ptr [rsi + 2], bh; mov rdi, r15; call rbx; 
0x00000000004421e9: call 0x4bf21ed; add byte ptr [rax], al; add byte ptr [rsi + 2], bh; mov rdi, r15; call rbx; 
0x00000000004042c1: call 0x4cd2740b; mov edx, eax; mov rsi, r9; mov rdi, r12; mov eax, r10d; syscall; 
0x000000000044635d: call 0x4e2d0; mov qword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000430115: call 0x4e72110d; call 0xf69e9d1; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000435710: call 0x4ef36707; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000040fba1: call 0x55730; add rsp, 0xd8; ret; 
0x0000000000400cc3: call 0x58954d0; in al, 0xd6; sub al, 0; nop; leave; ret; 
0x000000000047cfcf: call 0x59b; xor eax, eax; ret; 
0x00000000004006ff: call 0x5bf8d84c; mov qword ptr [rip + 0x2cb9a5], rax; pop rbp; pop r12; ret; 
0x0000000000401dbf: call 0x5c417b1f; pop r13; pop r14; ret; 
0x0000000000410064: call 0x5c425dc4; ret; 
0x0000000000412a28: call 0x5c428788; pop r13; pop r14; ret; 
0x0000000000416b6a: call 0x5c42c8ca; pop r13; pop r14; ret; 
0x0000000000440a6c: call 0x5c4567cc; mov esi, 2; jmp rax; 
0x000000000046be3d: call 0x5c481b9d; pop r13; ret; 
0x000000000046c07d: call 0x5c481ddd; pop r13; ret; 
0x000000000047c7b4: call 0x5c492514; pop r13; ret; 
0x000000000047d3a3: call 0x5c493103; ret; 
0x000000000047d3c0: call 0x5c493120; ret; 
0x000000000047d3fd: call 0x5c49315d; ret; 
0x00000000004994dc: call 0x5c4af23c; pop r13; ret; 
0x000000000048c17d: call 0x62ad0; add rsp, 0xf0; pop rbx; pop rbp; pop r12; ret; 
0x000000000045016e: call 0x65050172; mov qword ptr [rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x00000000004501d3: call 0x650501d7; add rax, qword ptr [0]; ret; 
0x000000000046c955: call 0x6da80; cmp eax, 1; je 0x6ca90; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000046cb35: call 0x6da80; mov rax, qword ptr [r13 + 0xd8]; mov esi, ebx; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000473683: call 0x73290; add rsp, 0x90; pop rbx; ret; 
0x00000000004983d1: call 0x7496cfd7; ret; 
0x000000000046f025: call 0x74d9742c; adc eax, 0xe180d188; pcmpeqb mm3, qword ptr [rsi]; ret; 
0x00000000004305f8: call 0x75cb3e0d; adc ah, byte ptr [rip + 0xffff]; and ecx, 0xffff; sub eax, ecx; ret; 
0x00000000004969bd: call 0x76ff0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x0000000000480fdf: call 0x78cf0; mov qword ptr [rbx + 0x10], rax; add rsp, 0x30; pop rbx; ret; 
0x0000000000481018: call 0x78cf0; mov qword ptr [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000049a7d3: call 0x78cf0; mov qword ptr [rbx], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000047c875: call 0x7c1e0; add rsp, 0xd8; ret; 
0x000000000049a2c2: call 0x7d840; mov qword ptr [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000480f7d: call 0x7d840; mov qword ptr [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000445f8e: call 0x80f20; mov rdi, r12; mov rax, qword ptr [rbp - 0x58]; call rax; 
0x000000000044e09b: call 0x81040; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000044e0b5: call 0x84869bb; pop rbx; ret; 
0x000000000048bcb0: call 0x8af30; leave; ret; 
0x000000000048bca9: call 0x8b0c0; leave; ret; 
0x000000000048bcc9: call 0x8b620; leave; ret; 
0x000000000048bce7: call 0x8b7a0; leave; ret; 
0x000000000040094d: call 0x8c0; mov eax, 0x49ef00; test rax, rax; je 0x963; mov edi, 0x4bf080; call rax; 
0x000000000048c112: call 0x8c120; add rsp, 0xd8; ret; 
0x00000000004135ab: call 0x8c5b8f8; pop rbx; pop rbp; ret; 
0x0000000000481216: call 0x8c900; mov rax, qword ptr [rsp + 0x38]; add rsp, 0x68; ret; 
0x000000000049a333: call 0x8c900; mov rdx, qword ptr [rsp + 0x10]; mov rax, rdx; add rsp, 0x28; ret; 
0x000000000048cb18: call 0x8c900; mov rdx, qword ptr [rsp + 0x18]; mov rax, rdx; add rsp, 0x38; ret; 
0x000000000045d2ce: call 0x8ca561b; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000049ab0e: call 0x9a7e0; add rsp, 0x28; ret; 
0x000000000049a413: call 0x9aa60; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000049a38f: call 0x9ab20; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x000000000049cf9b: call 0x9ef40; test rax, rax; je 0x9cfb0; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000049aceb: call 0xe410; mov rax, qword ptr [rsi + 0xb8]; add rsp, 8; ret; 
0x0000000000444fa4: call 0xe410; nop dword ptr [rax]; neg rax; mov dword ptr fs:[0xffffffffffffffd0], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000049d775: call 0xe410; nop word ptr [rax + rax]; mov eax, 4; add rsp, 8; ret; 
0x000000000043011a: call 0xf69e9d1; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000400d19: call 0xfb10; nop; pop rbp; ret; 
0x00000000004494e2: call 0xffffffff834d6718; ret 0xf01; 
0x000000000044c0f9: call 0xffffffff834d932f; ret 0xf01; 
0x000000000044cf83: call 0xffffffff834da1b9; ret 0xf01; 
0x000000000045a2bc: call 0xffffffff894aa2c0; ret 0x894c; 
0x000000000041f621: call 0xffffffffc4853e2e; sub byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000043f72d: call 0xffffffffc4873f33; cmp byte ptr [rbx + 0x5d], bl; ret; 
0x000000000049a585: call 0xffffffffc80aed9a; cmp rax, qword ptr [rip + 0x23359f]; jae 0x9a59f; mov rdx, qword ptr [rip + 0x23359e]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000047a9d1: call 0xffffffffe907a9d9; xlatb; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000432073: call 0xfffffffff061abc4; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000431f43: call 0xfffffffff062a894; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000431f81: call 0xfffffffff062a8d2; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000431fb9: call 0xfffffffff062a90a; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000431ff7: call 0xfffffffff062a948; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043202f: call 0xfffffffff062a980; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432057: call 0xfffffffff062a9a8; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043207f: call 0xfffffffff062a9d0; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000049d1a8: call 0xfffffffff07f5cf9; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049d240: call 0xfffffffff07f5d91; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049d2d4: call 0xfffffffff07f5e25; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049d320: call 0xfffffffff07f5e71; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049d3e9: call 0xfffffffff07f5f3a; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049d478: call 0xfffffffff07f5fc9; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049d4c9: call 0xfffffffff07f601a; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000043ee9a: call 0xfffffffffc0413a5; inc dword ptr [rbx]; pop rbx; ret; 
0x000000000043eebb: call 0xfffffffffc0413ce; add eax, dword ptr [rax]; pop rbx; ret; 
0x0000000000416478: call 0xffffffffffc00000; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000004002d8: call 0xffffffffffc00000; add rsp, 8; ret; 
0x000000000048c518: call 0xffffffffffc00000; test eax, eax; je 0x8c52c; mov qword ptr [rip + 0x24149c], 0x6cd9e0; add rsp, 8; ret; 
0x000000000040ff9c: call qword ptr [rax + 0x10]; 
0x00000000004a4947: call qword ptr [rax + 0x10fff93e]; and ecx, edi; jmp qword ptr [rax]; 
0x0000000000410c01: call qword ptr [rax + 0x18]; 
0x00000000004a4443: call qword ptr [rax + 0x18]; stc; jmp rax; 
0x00000000004be3af: call qword ptr [rax + 0x19]; 
0x00000000004be3af: call qword ptr [rax + 0x19]; std; push qword ptr [rax]; sbb edi, ebp; call qword ptr [rax]; 
0x00000000004a461b: call qword ptr [rax + 0x1c]; 
0x00000000004a461b: call qword ptr [rax + 0x1c]; stc; jmp rax; 
0x0000000000413989: call qword ptr [rax + 0x20]; 
0x0000000000413989: call qword ptr [rax + 0x20]; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x00000000004a42ab: call qword ptr [rax + 0x20fff8eb]; fdivp st(0); jmp rax; 
0x00000000004a462b: call qword ptr [rax + 0x20fff91a]; sbb bh, cl; push qword ptr [rax + 0x40fff919]; sbb ecx, edi; call rax; 
0x00000000004a4413: call qword ptr [rax + 0x20fff91d]; sbb eax, 0x1cb0fff9; stc; inc dword ptr [rax + 0x1c]; stc; call rax; 
0x000000000041f53e: call qword ptr [rax + 0x24748b48]; sub byte ptr [rax - 0x77], cl; out dx, eax; call rax; 
0x00000000004be3cf: call qword ptr [rax + 0x28]; 
0x00000000004be3cf: call qword ptr [rax + 0x28]; std; push qword ptr [rax]; sub bh, ch; call qword ptr [rax]; 
0x00000000004165b4: call qword ptr [rax + 0x30]; 
0x00000000004165b4: call qword ptr [rax + 0x30]; cmp eax, -1; je 0x165bf; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x000000000041660c: call qword ptr [rax + 0x30]; cmp eax, -1; jne 0x165fa; pop rbx; ret; 
0x00000000004105b5: call qword ptr [rax + 0x38]; 
0x00000000004a4017: call qword ptr [rax + 0x3f]; 
0x00000000004a4017: call qword ptr [rax + 0x3f]; clc; jmp qword ptr [rax + 0x41]; 
0x0000000000412ed9: call qword ptr [rax + 0x40]; 
0x0000000000413df4: call qword ptr [rax + 0x48]; 
0x000000000049ab56: call qword ptr [rax + 0x49]; 
0x0000000000414f6c: call qword ptr [rax + 0x58]; 
0x000000000041023c: call qword ptr [rax + 0x60]; 
0x0000000000415a91: call qword ptr [rax + 0x68]; 
0x000000000041092c: call qword ptr [rax + 0x70]; 
0x00000000004be3c7: call qword ptr [rax + 0x70fffd24]; std; call qword ptr [rax + 0x28]; 
0x000000000049acbd: call qword ptr [rax + 0x74]; 
0x00000000004a495b: call qword ptr [rax + 0x74]; stc; jmp qword ptr [rax + 0x74]; 
0x000000000049d7f2: call qword ptr [rax + 0x75]; 
0x000000000049d7f2: call qword ptr [rax + 0x75]; in eax, dx; xor eax, eax; add rsp, 8; ret; 
0x00000000004a4997: call qword ptr [rax + 0x75]; stc; jmp qword ptr [rax + 0x75]; 
0x00000000004a49bb: call qword ptr [rax + 0x76]; 
0x0000000000413807: call qword ptr [rax + 0x78]; 
0x00000000004a49ef: call qword ptr [rax + 0x7a]; 
0x00000000004a49ef: call qword ptr [rax + 0x7a]; stc; jmp qword ptr [rax + 0x7a]; 
0x00000000004a4887: call qword ptr [rax + 0xd]; 
0x00000000004a4887: call qword ptr [rax + 0xd]; stc; inc eax; or al, 0xf9; jmp qword ptr [rax]; 
0x00000000004a4683: call qword ptr [rax + 0xe]; 
0x00000000004c88e3: call qword ptr [rax + 1]; 
0x00000000004c2253: call qword ptr [rax + 2]; 
0x000000000041170b: call qword ptr [rax + 8]; 
0x000000000044645e: call qword ptr [rax - 0x142076b8]; ret; 
0x00000000004a42df: call qword ptr [rax - 0x1b]; 
0x00000000004a4407: call qword ptr [rax - 0x27]; 
0x00000000004a43b3: call qword ptr [rax - 0x2e]; 
0x00000000004bef23: call qword ptr [rax - 0x31]; 
0x00000000004bead7: call qword ptr [rax - 0x38]; 
0x00000000004beaab: call qword ptr [rax - 0x3b]; 
0x00000000004a420f: call qword ptr [rax - 0x3c]; 
0x00000000004a420f: call qword ptr [rax - 0x3c]; clc; jmp rax; 
0x00000000004a423b: call qword ptr [rax - 0x3f]; 
0x00000000004a423b: call qword ptr [rax - 0x3f]; clc; jmp rax; 
0x00000000004a4147: call qword ptr [rax - 0x44]; 
0x00000000004a49c3: call qword ptr [rax - 0x4f00068a]; jbe 0xa49c4; call rax; 
0x00000000004a49a3: call qword ptr [rax - 0x4f00068b]; jne 0xa49a4; call rax; 
0x00000000004a40fb: call qword ptr [rax - 0x4f000759]; test al, 0xf8; call rax; 
0x00000000004a40db: call qword ptr [rax - 0x4f000762]; lahf; clc; call rax; 
0x00000000004a40f3: call qword ptr [rax - 0x5b]; 
0x00000000004bea67: call qword ptr [rax - 0x5f00023f]; sar ebp, -1; sub cl, al; std; lcall ptr [rax]; ret 0xfffd; 
0x00000000004a496b: call qword ptr [rax - 0x5f00068c]; je 0xa496c; push qword ptr [rax - 0x3f00068c]; je 0xa4974; call rax; 
0x00000000004a4027: call qword ptr [rax - 0x5f0007b9]; clc; push qword ptr [rax - 0x3f0007b5]; clc; call rax; 
0x00000000004a40d3: call qword ptr [rax - 0x64]; 
0x00000000004a4943: call qword ptr [rax - 0x6f0006c4]; stc; call qword ptr [rax]; 
0x00000000004a4943: call qword ptr [rax - 0x6f0006c4]; stc; call qword ptr [rax]; and ecx, edi; jmp qword ptr [rax]; 
0x00000000004a493b: call qword ptr [rax - 0x6f0006c8]; cmp bh, cl; call qword ptr [rax - 0x6f0006c4]; stc; call qword ptr [rax]; 
0x000000000046031b: call qword ptr [rax - 0x75]; 
0x00000000004a3fef: call qword ptr [rax - 0x7d]; 
0x00000000004be42f: call qword ptr [rax - 0xc]; 
0x000000000040fe8e: call qword ptr [rax]; 
0x000000000045fd8d: call qword ptr [rax]; add byte ptr [rax], al; add cl, ch; ret; 
0x00000000004a494b: call qword ptr [rax]; and ecx, edi; jmp qword ptr [rax]; 
0x00000000004a437f: call qword ptr [rax]; in al, 0xf8; jmp rax; 
0x00000000004a43a3: call qword ptr [rax]; int 0xf8; jmp qword ptr [rax - 0x32]; 
0x00000000004a49b3: call qword ptr [rax]; jbe 0xa49b0; push qword ptr [rax]; jbe 0xa49b4; call qword ptr [rax + 0x76]; 
0x000000000049ace7: call qword ptr [rax]; je 0x9acd8; call 0xe410; mov rax, qword ptr [rsi + 0xb8]; add rsp, 8; ret; 
0x00000000004a3fdf: call qword ptr [rax]; jle 0xa3fdb; jmp qword ptr [rax + 0x7f]; 
0x00000000004a498b: call qword ptr [rax]; jne 0xa4988; jmp qword ptr [rax]; 
0x00000000004a4247: call qword ptr [rax]; ret; 
0x00000000004be3b7: call qword ptr [rax]; sbb eax, 0x1ef0fffd; std; call rax; 
0x000000000041077f: call qword ptr [rbp + 0x18]; 
0x00000000004106f8: call qword ptr [rbp + 0x20]; 
0x00000000004113c1: call qword ptr [rbp + 0x30]; 
0x00000000004054af: call qword ptr [rbp + 0x48]; 
0x000000000043f60f: call qword ptr [rbp + 0x53]; 
0x00000000004c8933: call qword ptr [rbp + 5]; 
0x00000000004bf5a3: call qword ptr [rbp + 9]; 
0x000000000040f165: call qword ptr [rbp]; 
0x0000000000401198: call qword ptr [rbx + 0x10]; 
0x00000000004110d1: call qword ptr [rbx + 0x20]; 
0x000000000041144c: call qword ptr [rbx + 0x30]; 
0x000000000047b69e: call qword ptr [rbx + 0x48]; 
0x000000000049d512: call qword ptr [rbx + 0x49]; 
0x000000000049d112: call qword ptr [rbx + 0x52]; 
0x00000000004bb460: call qword ptr [rbx + 0x7c]; 
0x000000000045eb54: call qword ptr [rbx + 0xf]; 
0x00000000004c93b3: call qword ptr [rbx + 2]; 
0x00000000004c32d3: call qword ptr [rbx + 3]; 
0x00000000004c2c2b: call qword ptr [rbx + 4]; 
0x00000000004c4033: call qword ptr [rbx + 5]; 
0x00000000004114c7: call qword ptr [rbx + 8]; 
0x000000000045d46e: call qword ptr [rbx - 0x41]; 
0x000000000041588f: call qword ptr [rbx - 0x75]; 
0x000000000041487f: call qword ptr [rbx - 0x7d]; 
0x000000000047f46f: call qword ptr [rbx - 0xa]; 
0x0000000000438c2d: call qword ptr [rbx]; 
0x00000000004c4e3b: call qword ptr [rcx + 0x1c]; 
0x00000000004c9b63: call qword ptr [rcx + 1]; 
0x00000000004c0bfb: call qword ptr [rcx + 2]; 
0x00000000004c17fb: call qword ptr [rcx + 5]; 
0x00000000004a45b7: call qword ptr [rcx + rbx - 7]; jmp rsp; 
0x00000000004bad4d: call qword ptr [rcx - 0x66]; 
0x000000000049b29e: call qword ptr [rcx]; 
0x0000000000478e04: call qword ptr [rdi + 0x48]; 
0x00000000004c9003: call qword ptr [rdi + 9]; 
0x00000000004a47bb: call qword ptr [rdi + rcx]; stc; call qword ptr [rsi + rcx + 0xe04fff9]; stc; push qword ptr [rbp + rcx - 7]; jmp rsp; 
0x00000000004bef43: call qword ptr [rdi - 0x2b]; 
0x00000000004c3603: call qword ptr [rdi]; 
0x00000000004a44ef: call qword ptr [rdx + 0x1a]; 
0x00000000004a44ef: call qword ptr [rdx + 0x1a]; stc; jmp rdx; 
0x000000000046d3c7: call qword ptr [rdx + 0x30]; 
0x000000000046d3c7: call qword ptr [rdx + 0x30]; cmp eax, -1; je 0x6d3d2; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x00000000004c33cb: call qword ptr [rdx + 0xe]; 
0x00000000004c2843: call qword ptr [rdx + 4]; 
0x00000000004011ed: call qword ptr [rdx]; 
0x00000000004a413b: call qword ptr [rdx]; mov ebp, 0xbab0fff8; clc; jmp qword ptr [rax - 0x45]; 
0x0000000000479d9c: call qword ptr [rip + 0x2523e6]; xor eax, eax; add rsp, 8; ret; 
0x00000000004c292b: call qword ptr [rsi + 0x16]; 
0x00000000004a448b: call qword ptr [rsi + 0x17]; 
0x00000000004a445b: call qword ptr [rsi + 0x26fff91c]; sbb al, 0xf9; push qword ptr [rsi + 0x46fff91b]; sbb edi, ecx; call rsi; 
0x00000000004c51d3: call qword ptr [rsi + 0x2b]; 
0x00000000004bca9f: call qword ptr [rsi + 0x30]; 
0x00000000004c3c63: call qword ptr [rsi + 0xb]; 
0x00000000004c2a03: call qword ptr [rsi + 1]; 
0x00000000004c0633: call qword ptr [rsi + 4]; 
0x00000000004a47bf: call qword ptr [rsi + rcx + 0xe04fff9]; stc; push qword ptr [rbp + rcx - 7]; jmp rsp; 
0x000000000048db32: call qword ptr [rsi]; 
0x00000000004a41bf: call qword ptr [rsi]; ret 0xfff8; 
0x0000000000400961: call rax; 
0x000000000049a3e9: call rax; add rsp, 0x20; mov rax, rbx; pop rbx; ret; 
0x0000000000480c55: call rax; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000049a491: call rax; add rsp, 0x50; mov rax, rbx; pop rbx; ret; 
0x00000000004a4037: call rax; clc; jmp rax; 
0x00000000004a497b: call rax; je 0xa4978; jmp rax; 
0x00000000004a49ab: call rax; jne 0xa49a8; push rax; jne 0xa49ac; call qword ptr [rax]; 
0x00000000004a49d3: call rax; jns 0xa49d0; jmp rax; 
0x00000000004a3fcf: call rax; js 0xa3fcb; jmp qword ptr [rax]; 
0x00000000004a484b: call rax; or al, 0xf9; jmp qword ptr [rax + 0xc]; 
0x00000000004a463b: call rax; sbb cl, bh; jmp qword ptr [rax + 0x18]; 
0x00000000004a4423: call rax; sbb edi, ecx; jmp qword ptr [rax + 0x1b]; 
0x00000000004033fd: call rbx; 
0x0000000000405d1a: call rcx; 
0x0000000000403d52: call rdi; 
0x000000000040f19e: call rdx; 
0x000000000040e7f1: call rsi; 
0x00000000004a446b: call rsi; sbb bh, cl; jmp qword ptr [rsi + 0x1a]; 
0x000000000040127c: call rsp; 
0x000000000044fd54: cdq; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8b41; 
0x00000000004bc540: cdq; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x00000000004bc53b: cdq; mov edi, 0x99b51319; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x000000000049a796: cdq; nop word ptr [rax + rax]; mov eax, dword ptr [rip + 0x23c11a]; ret; 
0x000000000049c973: cdq; sbb dh, bh; jmp qword ptr [rsi + 0xf]; 
0x00000000004319b3: cdq; sub byte ptr [rdi], al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000455f78: cdqe; movzx eax, byte ptr [rax + 0x4b40e0]; mov rax, qword ptr [rax*8 + 0x4b3a20]; jmp rax; 
0x0000000000455fc9: cdqe; movzx eax, byte ptr [rax + 0x4b40e0]; mov rax, qword ptr [rax*8 + 0x4b3b20]; jmp rax; 
0x00000000004580b9: cdqe; movzx eax, byte ptr [rax + 0x4b40e0]; mov rax, qword ptr [rax*8 + 0x4b3c20]; jmp rax; 
0x0000000000456bec: cdqe; movzx eax, byte ptr [rax + 0x4b40e0]; mov rax, qword ptr [rax*8 + 0x4b3f20]; jmp rax; 
0x00000000004686ce: clc; adc byte ptr [rax - 0x77], cl; ret 0x860f; 
0x000000000041c813: clc; add al, 0x74; and al, 0x89; ret 0xb48b; 
0x0000000000411fe2: clc; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000045e8ad: clc; add cl, byte ptr [rax + 0x29]; ret; 
0x0000000000411445: clc; add cl, byte ptr [rax - 0x77]; and al, 0x20; call qword ptr [rbx + 0x30]; 
0x000000000046063b: clc; add cl, byte ptr [rcx + rcx*4 - 9]; mov rdx, rax; mov rax, qword ptr [r14 + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000040dd8c: clc; add dword ptr [rbx - 0x7cb70030], eax; ret; 
0x000000000043eb6c: clc; add dword ptr [rdi], ecx; xchg eax, esp; ret 0x8341; 
0x0000000000496d8c: clc; add eax, dword ptr [rcx + 0x5d]; pop r14; pop r15; ret; 
0x0000000000444e7b: clc; add esi, dword ptr [rbp - 0x57]; add rsp, 0x1d8; pop rbx; pop rbp; ret; 
0x00000000004268b8: clc; add rax, rcx; ret; 
0x00000000004276e4: clc; and edx, 0x7f; jne 0x272a6; mov rax, rdi; ret; 
0x00000000004a42aa: clc; call qword ptr [rax + 0x20fff8eb]; fdivp st(0); jmp rax; 
0x00000000004a4016: clc; call qword ptr [rax + 0x3f]; 
0x00000000004a4016: clc; call qword ptr [rax + 0x3f]; clc; jmp qword ptr [rax + 0x41]; 
0x00000000004a42de: clc; call qword ptr [rax - 0x1b]; 
0x00000000004a4406: clc; call qword ptr [rax - 0x27]; 
0x00000000004a43b2: clc; call qword ptr [rax - 0x2e]; 
0x00000000004a420e: clc; call qword ptr [rax - 0x3c]; 
0x00000000004a420e: clc; call qword ptr [rax - 0x3c]; clc; jmp rax; 
0x00000000004a423a: clc; call qword ptr [rax - 0x3f]; 
0x00000000004a423a: clc; call qword ptr [rax - 0x3f]; clc; jmp rax; 
0x00000000004a4146: clc; call qword ptr [rax - 0x44]; 
0x00000000004a40fa: clc; call qword ptr [rax - 0x4f000759]; test al, 0xf8; call rax; 
0x00000000004a40da: clc; call qword ptr [rax - 0x4f000762]; lahf; clc; call rax; 
0x00000000004a40f2: clc; call qword ptr [rax - 0x5b]; 
0x00000000004a4026: clc; call qword ptr [rax - 0x5f0007b9]; clc; push qword ptr [rax - 0x3f0007b5]; clc; call rax; 
0x00000000004a40d2: clc; call qword ptr [rax - 0x64]; 
0x00000000004a3fee: clc; call qword ptr [rax - 0x7d]; 
0x00000000004a3ec6: clc; call qword ptr [rax]; 
0x00000000004a437e: clc; call qword ptr [rax]; in al, 0xf8; jmp rax; 
0x00000000004a43a2: clc; call qword ptr [rax]; int 0xf8; jmp qword ptr [rax - 0x32]; 
0x00000000004a3fde: clc; call qword ptr [rax]; jle 0xa3fdb; jmp qword ptr [rax + 0x7f]; 
0x00000000004a4246: clc; call qword ptr [rax]; ret; 
0x00000000004c4032: clc; call qword ptr [rbx + 5]; 
0x00000000004c4fca: clc; call qword ptr [rbx]; 
0x00000000004c4e3a: clc; call qword ptr [rcx + 0x1c]; 
0x00000000004a4176: clc; call qword ptr [rcx]; 
0x00000000004c4bea: clc; call qword ptr [rdi]; 
0x00000000004a4136: clc; call qword ptr [rdx]; 
0x00000000004a413a: clc; call qword ptr [rdx]; mov ebp, 0xbab0fff8; clc; jmp qword ptr [rax - 0x45]; 
0x00000000004c3c62: clc; call qword ptr [rsi + 0xb]; 
0x00000000004a4192: clc; call qword ptr [rsi]; 
0x00000000004a41be: clc; call qword ptr [rsi]; ret 0xfff8; 
0x00000000004a3fce: clc; call rax; 
0x00000000004a4036: clc; call rax; clc; jmp rax; 
0x00000000004a3fce: clc; call rax; js 0xa3fcb; jmp qword ptr [rax]; 
0x000000000046fddd: clc; cmp esi, 0x3b; cmova esi, edx; imul esi, esi, 0x3c; add eax, esi; ret; 
0x000000000042fbad: clc; cmp rcx, rax; jne 0x305e3; xor eax, eax; ret; 
0x000000000048c4e2: clc; dec dword ptr [rax + 0x39]; ret; 
0x0000000000401eeb: clc; dec dword ptr [rax - 0x77]; ret; 
0x00000000004a4202: clc; dec dword ptr [rbx + 0x2bfff8c2]; ret; 
0x00000000004996bb: clc; dec dword ptr [rbx + rcx*4 + 0x3d]; movsb byte ptr [rdi], byte ptr [rsi]; shl dword ptr [rbx], 1; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000457252: clc; dec dword ptr [rcx - 0x77]; ret 0x8b4c; 
0x0000000000455c2b: clc; dec dword ptr [rcx - 0x77]; ret; 
0x0000000000411110: clc; dec dword ptr [rdi]; test al, ah; add al, byte ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x000000000048c23d: clc; dec dword ptr [rdi]; xchg eax, esp; ret 0xdaf7; 
0x00000000004a420a: clc; dec ebx; ret; 
0x00000000004a4012: clc; inc dword ptr [rax + 0x3d]; clc; call qword ptr [rax + 0x3f]; 
0x00000000004a4012: clc; inc dword ptr [rax + 0x3d]; clc; call qword ptr [rax + 0x3f]; clc; jmp qword ptr [rax + 0x41]; 
0x00000000004a42f2: clc; inc dword ptr [rax + 0x60fff8df]; loope 0xa42f3; inc dword ptr [rax - 0x1d]; clc; jmp qword ptr [rax]; 
0x00000000004a3faa: clc; inc dword ptr [rax + 0x69]; clc; jmp rax; 
0x00000000004a3ec2: clc; inc dword ptr [rax + 1]; clc; call qword ptr [rax]; 
0x00000000004a42fa: clc; inc dword ptr [rax - 0x1d]; clc; jmp qword ptr [rax]; 
0x00000000004a4376: clc; inc dword ptr [rax - 0x20]; clc; jmp qword ptr [rax]; 
0x00000000004a4312: clc; inc dword ptr [rax - 0x21]; clc; jmp qword ptr [rax]; 
0x00000000004a4402: clc; inc dword ptr [rax]; fdivr st(0); call qword ptr [rax - 0x27]; 
0x00000000004a4042: clc; inc dword ptr [rax]; push rsi; clc; call qword ptr [rax]; 
0x00000000004a43ae: clc; inc dword ptr [rax]; sar eax, 1; call qword ptr [rax - 0x2e]; 
0x000000000044eff9: clc; inc dword ptr [rcx - 0x77]; ret; 
0x00000000004a4132: clc; inc dword ptr [rdx - 0x45]; clc; call qword ptr [rdx]; 
0x00000000004a41ba: clc; inc dword ptr [rsi + 0x16fff8c1]; ret 0xfff8; 
0x00000000004a41c6: clc; inc dword ptr [rsi - 0x3d]; clc; jmp rsi; 
0x00000000004a4032: clc; inc eax; clc; call rax; 
0x00000000004a4032: clc; inc eax; clc; call rax; clc; jmp rax; 
0x00000000004a3fda: clc; inc eax; jl 0xa3fd7; call qword ptr [rax]; 
0x00000000004a3fda: clc; inc eax; jl 0xa3fd7; call qword ptr [rax]; jle 0xa3fdb; jmp qword ptr [rax + 0x7f]; 
0x00000000004a3fba: clc; inc eax; outsd dx, dword ptr [rsi]; clc; jmp qword ptr [rax + 0x71]; 
0x00000000004a439e: clc; inc eax; retf; clc; call qword ptr [rax]; 
0x00000000004a43f2: clc; inc eax; sar al, cl; call qword ptr [rax]; 
0x00000000004a4182: clc; inc ecx; ret 0xfff8; 
0x00000000004c9000: clc; iretd; cld; call qword ptr [rdi + 9]; 
0x00000000004005a2: clc; jb 0x5f0; add byte ptr [rcx], dh; shr al, 0x93; ret; 
0x000000000047e505: clc; jbe 0x7e553; add al, ch; cmp dil, al; jmp qword ptr [rsi - 0x70]; 
0x000000000044a7de: clc; jg 0x4a76a; ret 0x5c77; 
0x00000000004a401a: clc; jmp qword ptr [rax + 0x41]; 
0x00000000004a3f9e: clc; jmp qword ptr [rax + 0x64]; 
0x00000000004a3fbe: clc; jmp qword ptr [rax + 0x71]; 
0x00000000004a3fe2: clc; jmp qword ptr [rax + 0x7f]; 
0x00000000004a42ca: clc; jmp qword ptr [rax - 0x15]; 
0x00000000004a42c6: clc; jmp qword ptr [rax - 0x17]; 
0x00000000004a42c2: clc; jmp qword ptr [rax - 0x19]; 
0x00000000004a435e: clc; jmp qword ptr [rax - 0x1c]; 
0x00000000004a42f6: clc; jmp qword ptr [rax - 0x1f]; 
0x00000000004a426e: clc; jmp qword ptr [rax - 0x22]; 
0x00000000004a43fa: clc; jmp qword ptr [rax - 0x2b]; 
0x00000000004a43a6: clc; jmp qword ptr [rax - 0x32]; 
0x00000000004a4142: clc; jmp qword ptr [rax - 0x45]; 
0x00000000004a3f96: clc; jmp qword ptr [rax]; 
0x00000000004a4186: clc; jmp qword ptr [rcx - 0x3d]; 
0x00000000004a41ce: clc; jmp qword ptr [rdi - 0x3c]; 
0x00000000004c3ac2: clc; jmp qword ptr [rdx]; 
0x0000000000475cd4: clc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000479915: clc; jmp qword ptr [rsi + 0xf]; 
0x00000000004a41b2: clc; jmp qword ptr [rsi - 0x40]; 
0x00000000004a41aa: clc; jmp qword ptr [rsi - 0x41]; 
0x00000000004a41a2: clc; jmp qword ptr [rsi - 0x42]; 
0x000000000047817c: clc; jmp qword ptr [rsi - 0x70]; 
0x00000000004c4d2a: clc; jmp qword ptr [rsi]; 
0x00000000004a3fae: clc; jmp rax; 
0x00000000004c496a: clc; jmp rbx; 
0x00000000004a4196: clc; jmp rsi; 
0x00000000004c3eba: clc; jmp rsp; 
0x00000000004330c6: clc; lea r11, qword ptr [rip + 0x71182]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000432f10: clc; lea r11, qword ptr [rip + 0x71338]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000049d1b0: clc; leave; ret; 
0x00000000004a4206: clc; ljmp ptr [rbx]; ret; 
0x00000000004bb1a2: clc; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x0000000000400b70: clc; mov qword ptr [rax], rdx; nop; leave; ret; 
0x0000000000432097: clc; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004329eb: clc; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432beb: clc; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432deb: clc; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043207b: clc; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004329bf: clc; mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432bbf: clc; mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432dbf: clc; mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043204f: clc; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432a07: clc; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004354a7: clc; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000432c07: clc; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435417: clc; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000432e07: clc; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435387: clc; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000004320b3: clc; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004362fc: clc; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000049ac87: clc; mov r8, qword ptr [rax]; lea rax, qword ptr [rax + 8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x00000000004009e9: clc; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000043012f: clc; mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x305e3; xor eax, eax; ret; 
0x000000000049d248: clc; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000042fba9: clc; mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x305e3; xor eax, eax; ret; 
0x0000000000400c61: clc; mov rdx, qword ptr [rdx]; mov qword ptr [rax], rdx; nop; leave; ret; 
0x0000000000433339: clc; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x000000000043fdd9: clc; mov rsi, rdx; mov eax, 5; syscall; 
0x000000000048c042: clc; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x000000000047378c: clc; movsxd r10, r8d; mov rdx, rcx; mov eax, 0x106; syscall; 
0x0000000000426c92: clc; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x0000000000400d4b: clc; or dword ptr [rdi], ecx; xchg dword ptr [rdi + 0x48000001], esp; mov eax, dword ptr [rax*8 + 0x4a1ca8]; jmp rax; 
0x000000000048c037: clc; or rdx, rcx; or rdx, rax; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x00000000004009ed: clc; pop rbp; ret; 
0x0000000000400702: clc; pop rbx; mov qword ptr [rip + 0x2cb9a5], rax; pop rbp; pop r12; ret; 
0x00000000004a422e: clc; push qword ptr [rax + 0x30fff8bf]; sar al, 0xff; rol al, 0xf8; call qword ptr [rax - 0x3f]; 
0x00000000004a3fca: clc; push qword ptr [rax + 0x5c]; clc; call rax; 
0x00000000004a3fca: clc; push qword ptr [rax + 0x5c]; clc; call rax; js 0xa3fcb; jmp qword ptr [rax]; 
0x00000000004a3fd6: clc; push qword ptr [rax + 0x7b]; clc; inc eax; jl 0xa3fd7; call qword ptr [rax]; 
0x00000000004a43aa: clc; push qword ptr [rax + 0xfff8cf]; sar eax, 1; call qword ptr [rax - 0x2e]; 
0x00000000004a43fe: clc; push qword ptr [rax + 0xfff8d6]; fdivr st(0); call qword ptr [rax - 0x27]; 
0x00000000004a42da: clc; push qword ptr [rax - 0x1d]; clc; call qword ptr [rax - 0x1b]; 
0x00000000004a435a: clc; push qword ptr [rax - 0x1e]; clc; jmp qword ptr [rax - 0x1c]; 
0x00000000004a4372: clc; push qword ptr [rax - 0x22]; clc; inc dword ptr [rax - 0x20]; clc; jmp qword ptr [rax]; 
0x00000000004a43ee: clc; push qword ptr [rax - 0x2f]; clc; inc eax; sar al, cl; call qword ptr [rax]; 
0x00000000004a4242: clc; push qword ptr [rax - 0x3e]; clc; call qword ptr [rax]; 
0x00000000004a4242: clc; push qword ptr [rax - 0x3e]; clc; call qword ptr [rax]; ret; 
0x00000000004a402e: clc; push qword ptr [rax - 0x3f0007b5]; clc; call rax; 
0x00000000004a40f6: clc; push qword ptr [rax - 0x5a]; clc; call qword ptr [rax - 0x4f000759]; test al, 0xf8; call rax; 
0x00000000004a42d2: clc; push qword ptr [rax - 0x6f000721]; loope 0xa42d3; push qword ptr [rax - 0x1d]; clc; call qword ptr [rax - 0x1b]; 
0x00000000004a400e: clc; push qword ptr [rax]; cmp edi, eax; inc dword ptr [rax + 0x3d]; clc; call qword ptr [rax + 0x3f]; 
0x00000000004a40ee: clc; push qword ptr [rax]; movsb byte ptr [rdi], byte ptr [rsi]; clc; call qword ptr [rax - 0x5b]; 
0x00000000004a4232: clc; push qword ptr [rax]; sar al, 0xff; rol al, 0xf8; call qword ptr [rax - 0x3f]; 
0x000000000041165a: clc; push qword ptr [rbp + 2]; pop rbx; ret; 
0x0000000000416610: clc; push qword ptr [rbp - 0x1a]; pop rbx; ret; 
0x00000000004434c1: clc; push qword ptr [rbp - 0xd]; xor eax, eax; leave; ret; 
0x00000000004165b8: clc; push qword ptr [rbx + rax - 0x7d]; and ebp, edi; pop rbx; ret; 
0x00000000004a417e: clc; push qword ptr [rcx]; ret 0xfff8; 
0x0000000000415a95: clc; push qword ptr [rdi + rax + 0x5b]; pop rbp; pop r12; ret; 
0x000000000047366c: clc; push qword ptr [rsi + rsi - 0x77]; ret 0xe283; 
0x00000000004a40e6: clc; push rax; movabs eax, dword ptr [0xa430fff8a310fff8]; clc; call qword ptr [rax - 0x5b]; 
0x00000000004a41b6: clc; push rsi; sar al, 0xff; xchg cl, al; clc; call qword ptr [rsi]; 
0x0000000000417262: clc; ret; 
0x000000000048a8ea: clc; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000480bbd: clc; std; jbe 0x80bc8; ret; 
0x00000000004c7638: clc; sub bl, bh; call rdx; 
0x000000000044f9e5: clc; syscall; 
0x00000000004bccd8: cld; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000044a5d0: cld; add al, 0; add byte ptr [rax - 0x73], cl; add dword ptr [rax + 0x39], ecx; ret; 
0x000000000043eebf: cld; add eax, dword ptr [rax]; pop rbx; ret; 
0x000000000043eedf: cld; add eax, dword ptr [rax]; ret; 
0x00000000004c117c: cld; and byte ptr [rax], al; add byte ptr [rax], dh; pop rdx; cmc; jmp qword ptr [rsi + 2]; 
0x00000000004c88e2: cld; call qword ptr [rax + 1]; 
0x00000000004be42e: cld; call qword ptr [rax - 0xc]; 
0x00000000004c8e2a: cld; call qword ptr [rax]; 
0x00000000004c8932: cld; call qword ptr [rbp + 5]; 
0x00000000004c9002: cld; call qword ptr [rdi + 9]; 
0x00000000004c89c2: cld; call rsp; 
0x000000000046d40d: cld; cmp eax, -1; je 0x6d416; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x000000000043df41: cld; cmp eax, ecx; jne 0x3e150; xor eax, eax; ret; 
0x000000000042fbd6: cld; cmp ecx, eax; jne 0x305ef; xor eax, eax; ret; 
0x000000000045d4fb: cld; dec dword ptr [rax - 0x39]; ret 0xffb0; 
0x00000000004739b4: cld; dec dword ptr [rax - 0x77]; add al, 0x24; mov eax, 0x14; syscall; 
0x0000000000473824: cld; dec dword ptr [rax - 0x77]; add al, 0x24; mov eax, 3; syscall; 
0x00000000004be42a: cld; inc dword ptr [rax]; cld; call qword ptr [rax - 0xc]; 
0x000000000047d51c: cld; inc dword ptr [rbp + 0x481e75c0]; mov dword ptr [rbx], 0; or dword ptr [rip + 0x24ec40], 1; pop rbx; ret; 
0x000000000043ef6e: cld; inc dword ptr [rbx]; div ecx; pop rbx; mov eax, eax; ret; 
0x000000000043ee9e: cld; inc dword ptr [rbx]; pop rbx; ret; 
0x000000000046d3b8: cld; je 0x6d3d8; mov rdx, qword ptr [rbx + 0xd8]; mov esi, eax; mov rdi, rbx; call qword ptr [rdx + 0x30]; 
0x00000000004be422: cld; jmp qword ptr [rax - 0x13]; 
0x00000000004be45e: cld; jmp qword ptr [rax]; 
0x00000000004c8d72: cld; jmp qword ptr [rcx]; 
0x00000000004c8d02: cld; jmp qword ptr [rdx]; 
0x0000000000452fa4: cld; jmp qword ptr [rsi + 0x2e]; 
0x000000000043ecf8: cld; jmp qword ptr [rsi + 0xf]; 
0x00000000004be442: cld; jmp rax; 
0x00000000004c7e7c: cld; lea eax, dword ptr [rax]; add byte ptr [rax], dl; test bl, bh; jmp rsi; 
0x0000000000432822: cld; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432a25: cld; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432c25: cld; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432e25: cld; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043630e: cld; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x00000000004040f6: cld; mov eax, 3; syscall; 
0x000000000042fbd3: cld; mov eax, dword ptr [rdi - 4]; cmp ecx, eax; jne 0x305ef; xor eax, eax; ret; 
0x000000000043df3e: cld; mov ecx, dword ptr [rsi - 4]; cmp eax, ecx; jne 0x3e150; xor eax, eax; ret; 
0x000000000042fe35: cld; mov ecx, dword ptr [rsi - 4]; cmp ecx, eax; jne 0x305ef; xor eax, eax; ret; 
0x0000000000433358: cld; mov esi, dword ptr [rsi]; mov dword ptr [rdi], esi; mov dword ptr [rdi + rdx - 4], ecx; ret; 
0x000000000043225a: cld; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043243a: cld; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043261a: cld; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004327fa: cld; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043241e: cld; mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004325fe: cld; mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004327de: cld; mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432456: cld; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435636: cld; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432636: cld; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004355b6: cld; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432816: cld; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435536: cld; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432276: cld; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004356b6: cld; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000048bffc: cld; movss xmm0, dword ptr [rsp - 4]; ret; 
0x00000000004be426: cld; push qword ptr [rax + 0xfffcef]; cld; call qword ptr [rax - 0xc]; 
0x0000000000410a00: cld; ret 1; 
0x0000000000427288: cld; ret; 
0x00000000004beb98: cld; salc; std; call rsp; 
0x00000000004c1b7c: cld; sub al, byte ptr [rax]; add byte ptr [rax], ah; cmpsb byte ptr [rsi], byte ptr [rdi]; cmc; call rsp; 
0x00000000004ba656: cld; test al, 0x97; xchg eax, esp; ret; 
0x000000000043647d: cld; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000436243: cld; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000043673f: cld; vmovups zmmword ptr [rdi - 0x140], zmm12; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000043e81b: cld; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000420819: cli; adc al, 0x77; and ecx, dword ptr [rcx - 0x7d]; ret 0xeb5b; 
0x00000000004209f9: cli; add al, 0x77; or dword ptr [rcx - 0x7d], ecx; ret 0xe977; 
0x0000000000496959: cli; add byte ptr [rcx - 0xcf68130], cl; ret; 
0x000000000046ff7a: cli; add ch, byte ptr [rcx]; ret 0x48d; 
0x0000000000481fd3: cli; add cl, byte ptr [rax + 0x29]; ret 0x8949; 
0x0000000000481ffc: cli; add cl, byte ptr [rax + 0x29]; ret 0x8d48; 
0x0000000000411038: cli; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x2948; 
0x000000000043ec0c: cli; add cl, byte ptr [rdi]; xchg eax, esp; ret 0x8444; 
0x000000000043e721: cli; add dh, byte ptr [rdx + 0xb]; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x000000000043e89e: cli; add dh, byte ptr [rdx + 8]; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x0000000000449f9f: cli; add dword ptr [rax + 0x19], ecx; ror byte ptr [rax - 0x7d], cl; ret 0x4906; 
0x0000000000443138: cli; add dword ptr [rbp - 0xc], esi; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x000000000045b80c: cli; add dword ptr [rcx], ebx; jmp qword ptr [rsi - 0x3f]; 
0x000000000047d596: cli; add dword ptr [rdi], ecx; xchg eax, edx; ret 0x8348; 
0x000000000047de03: cli; add dword ptr [rdi], ecx; xchg eax, edx; ret 0xb60f; 
0x000000000043e731: cli; add dword ptr [rdx + 2], esi; mov byte ptr [rdi], cl; ret; 
0x000000000043632c: cli; add dword ptr [rdx + 4], esi; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000004957cc: cli; add ebp, dword ptr [rcx]; ret 0x48d; 
0x0000000000443a79: cli; and byte ptr [rdi], cl; test bh, cl; add dword ptr [rax], eax; add byte ptr [rbx - 0x7cbefe39], al; ret 0x4901; 
0x000000000043e867: cli; and byte ptr [rdx + 0xa], dh; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000460169: cli; call qword ptr [rax + 0x38]; 
0x00000000004c6d2a: cli; call qword ptr [rbx]; 
0x00000000004c6e92: cli; call qword ptr [rcx]; 
0x00000000004c5bc2: cli; call qword ptr [rsi]; 
0x00000000004c61a2: cli; call rsi; 
0x0000000000473823: cli; cld; dec dword ptr [rax - 0x77]; add al, 0x24; mov eax, 3; syscall; 
0x00000000004c72a9: cli; cli; jmp rdi; 
0x0000000000473d0d: cli; cmp dh, byte ptr [rbp + 4]; test ecx, ecx; jne 0x73cc1; xor eax, eax; ret; 
0x00000000004733ab: cli; dec dword ptr [rax + 0x63]; sti; mov eax, 3; syscall; 
0x000000000047d374: cli; dec dword ptr [rax - 0x73]; push rbp; add dword ptr [rax + 0x39], ecx; ret 0x1272; 
0x00000000004a0c90: cli; dec dword ptr [rax - 0x75]; cmp ecx, dword ptr [rax - 0x75]; imul ebx, dword ptr [rax], -0x18; ret 0xf7dd; 
0x000000000046edd5: cli; dec dword ptr [rax - 0x77]; ret 0x8949; 
0x000000000043e854: cli; jb 0x3e866; vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000046c999: cli; jbe 0x6c907; mov eax, dword ptr [rsi]; pop rbx; ret; 
0x00000000004332fb: cli; jg 0x33305; vmovdqu xmmword ptr [rdi + 0x10], xmm1; vmovdqu xmmword ptr [rdi + rdx - 0x20], xmm6; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x000000000043331b: cli; jg 0x33325; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x00000000004362e7: cli; jg 0x362f1; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x000000000043e6d6: cli; jg 0x3e6e0; vmovdqu xmmword ptr [rdi + 0x10], xmm0; vmovdqu xmmword ptr [rsi - 0x20], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000043e6f1: cli; jg 0x3e6fb; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000043e876: cli; jg 0x3e880; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x00000000004c6812: cli; jmp qword ptr [rax + 1]; 
0x00000000004c6722: cli; jmp qword ptr [rax]; 
0x00000000004c6a22: cli; jmp qword ptr [rbx + 2]; 
0x00000000004c71d2: cli; jmp qword ptr [rbx + 5]; 
0x00000000004c5a4a: cli; jmp qword ptr [rdi + 1]; 
0x00000000004c58da: cli; jmp qword ptr [rdx + 1]; 
0x00000000004c61e2: cli; jmp qword ptr [rdx]; 
0x0000000000453674: cli; jmp qword ptr [rsi + 0x2e]; 
0x00000000004c5b1a: cli; jmp qword ptr [rsi + 1]; 
0x000000000045faec: cli; jmp qword ptr [rsi - 0x70]; 
0x00000000004c6492: cli; jmp qword ptr [rsi]; 
0x00000000004c58a2: cli; jmp rax; 
0x00000000004c68fa: cli; jmp rdi; 
0x00000000004c631a: cli; jmp rdx; 
0x00000000004c6fd2: cli; jmp rsp; 
0x0000000000432c28: cli; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432c22: cli; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000426c98: cli; movzx edx, dl; sub eax, edx; ret; 
0x000000000049cea1: cli; or byte ptr [rbp - 0x12], dh; mov rax, qword ptr [rax]; add rsp, 8; ret; 
0x000000000043e880: cli; or byte ptr [rdx + 0xa], dh; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x000000000043e701: cli; or byte ptr [rdx + 0xb], dh; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x00000000004952b6: cli; or cl, byte ptr [rax + 0x29]; ret 0x8941; 
0x0000000000482988: cli; or cl, byte ptr [rdi]; xchg eax, edx; ret 0xb60f; 
0x00000000004bcac1: cli; push 0x6e; ja 0xbca49; ret 0x48f; 
0x000000000047ccd6: cli; push qword ptr [rcx]; fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000047d438: cli; push qword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000047149e: cli; ret; 
0x00000000004432cb: cli; setae al; ret; 
0x000000000046dc52: cli; stc; jmp qword ptr [rsi + 0x2e]; 
0x00000000004431c2: cli; sub dword ptr ss:[rax], eax; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000424409: cli; test rdx, rdx; je 0x24420; bsf rax, rdx; ret; 
0x00000000004243a8: cli; test rdx, rdx; je 0x24430; bsf rax, rdx; ret; 
0x000000000046e0a8: cli; test rdx, rdx; je 0x6e0d0; bsf rax, rdx; ret; 
0x000000000046e038: cli; test rdx, rdx; je 0x6e0e0; bsf rax, rdx; ret; 
0x000000000043674d: cli; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000004ba1aa: cli; xchg dword ptr [rsp + rax + 0x6fa9ce9d], esp; ret; 
0x00000000004ca31c: cmc; add al, byte ptr [rax]; ret; 
0x0000000000491148: cmc; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000041e860: cmc; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000446497: cmc; add dword ptr [rax], eax; add byte ptr [rsi + 0x447090], bh; mov edi, 0x6cd6d8; call rax; 
0x0000000000466695: cmc; add r8b, bpl; mov dl, 0xb8; stc; jmp qword ptr [rsi - 0x70]; 
0x000000000046f041: cmc; and ch, 0xf; je 0x6f060; add rax, 2; ret; 
0x00000000004c2252: cmc; call qword ptr [rax + 2]; 
0x00000000004c0712: cmc; call qword ptr [rax]; 
0x00000000004c1e1a: cmc; call qword ptr [rbx]; 
0x00000000004c0bfa: cmc; call qword ptr [rcx + 2]; 
0x00000000004c17fa: cmc; call qword ptr [rcx + 5]; 
0x00000000004c0f3a: cmc; call qword ptr [rcx]; 
0x00000000004c1642: cmc; call qword ptr [rdx]; 
0x00000000004c0632: cmc; call qword ptr [rsi + 4]; 
0x00000000004c155a: cmc; call qword ptr [rsi]; 
0x00000000004c1b82: cmc; call rsp; 
0x00000000004bfc41: cmc; hlt; call qword ptr [rbx]; 
0x000000000043fe22: cmc; imul ebp, dword ptr [rcx], 0x14750000; mov eax, 2; syscall; 
0x00000000004c140a: cmc; jmp qword ptr [rax]; 
0x00000000004c0f9a: cmc; jmp qword ptr [rbx]; 
0x00000000004c0d6a: cmc; jmp qword ptr [rcx]; 
0x00000000004c143a: cmc; jmp qword ptr [rdi + 1]; 
0x00000000004c20c2: cmc; jmp qword ptr [rdi + 3]; 
0x000000000049dd57: cmc; jmp qword ptr [rdx]; 
0x00000000004c1182: cmc; jmp qword ptr [rsi + 2]; 
0x00000000004c0572: cmc; jmp qword ptr [rsi]; 
0x00000000004c1f0a: cmc; jmp rdx; 
0x00000000004bcee9: cmc; mov ch, 0xab; ret; 
0x00000000004355ba: cmc; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004324ae: cmc; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004355b3: cmc; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432617: cmc; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432633: cmc; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043dc83: cmc; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x00000000004b9d97: cmc; pop rbx; and dword ptr [rsi + rbp*2 - 0x7a], edi; lahf; ret 0x871e; 
0x000000000048c4ed: cmc; pop rbx; pop rbp; pop r12; ret; 
0x000000000043dc87: cmc; sub eax, edx; ret; 
0x00000000004bc525: cmc; xlatb; ret 0x4e27; 
0x000000000049d5b7: cmova eax, edx; ret; 
0x000000000046fde1: cmova esi, edx; imul esi, esi, 0x3c; add eax, esi; ret; 
0x0000000000417a69: cmovae eax, dword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000417a68: cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000043fd6b: cmove eax, dword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000046d711: cmove eax, ecx; ret; 
0x0000000000440050: cmove eax, edx; add rsp, 0x60; pop rbx; ret; 
0x0000000000421d63: cmove eax, edx; add rsp, 8; ret; 
0x0000000000426812: cmove eax, edx; ret; 
0x00000000004969ba: cmove edx, eax; call 0x76ff0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x00000000004432c4: cmove edx, eax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x000000000046d710: cmove r8, rcx; ret; 
0x000000000043fd6a: cmove rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000473d40: cmove rax, r9; ret; 
0x0000000000421d62: cmove rax, rdx; add rsp, 8; ret; 
0x0000000000426811: cmove rax, rdx; ret; 
0x00000000004432c3: cmove rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x000000000045007f: cmovl eax, edx; cmp r12, rax; jb 0x500b9; movsxd rdi, r15d; mov eax, 3; syscall; 
0x000000000045007e: cmovl rax, rdx; cmp r12, rax; jb 0x500b9; movsxd rdi, r15d; mov eax, 3; syscall; 
0x000000000046c3d1: cmovne eax, edx; mov dword ptr [rbx + 0x74], eax; add rsp, 0x20; pop rbx; ret; 
0x0000000000415a29: cmovne eax, edx; mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x0000000000421de3: cmovne eax, edx; ret; 
0x000000000046bf08: cmovne ebp, edx; mov rdi, rbx; mov rdx, rbp; call qword ptr [rax + 0x58]; 
0x000000000046e3a1: cmovne ecx, edi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, qword ptr [rcx + rsi]; ret; 
0x000000000046e3a5: cmovne esi, edx; bsr rsi, rsi; lea rax, qword ptr [rcx + rsi]; ret; 
0x0000000000421de2: cmovne rax, rdx; ret; 
0x000000000046bf07: cmovne rbp, rdx; mov rdi, rbx; mov rdx, rbp; call qword ptr [rax + 0x58]; 
0x000000000046e3a0: cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, qword ptr [rcx + rsi]; ret; 
0x000000000046e3a4: cmovne rsi, rdx; bsr rsi, rsi; lea rax, qword ptr [rcx + rsi]; ret; 
0x0000000000442dad: cmovns eax, dword ptr [rbx + 0x14df0e5]; in al, dx; mov qword ptr [rbp - 0x48], r12; mov qword ptr [rbp - 0x40], r12; syscall; 
0x00000000004408d8: cmovns edx, dword ptr [rsp]; add rsp, 0x18; mov eax, edx; ret; 
0x0000000000476ef1: cmovs eax, dword ptr [rbx + 0x5e8f0e7]; pop rsi; sti; dec dword ptr [rax - 0x77]; ret; 
0x000000000045721d: cmovs eax, dword ptr [rbx - 0x76b60f20]; ret; 
0x00000000004477ec: cmovs eax, edx; ret; 
0x000000000041a7a0: cmovs ebp, dword ptr [rcx]; ret 0x14c; 
0x00000000004362f5: cmovs ecx, dword ptr [rbx + 0x498b4836]; clc; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000049d4e8: cmovs ecx, dword ptr [rcx + 0x1bffe]; add byte ptr [rax], al; jmp rax; 
0x000000000042aa2a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042b58a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042ad6a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000042a54a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x000000000042b0aa: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042a88a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042a06a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000042b24a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x000000000042a3aa: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042a4e0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b1e0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042ad00: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b520: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a820: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x000000000042a340: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b040: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x00000000004c3ab8: cmp al, 0; add byte ptr [rax], al; cmp al, 0x4a; add byte ptr [rax], al; and byte ptr [rax + rdi*8], bl; jmp qword ptr [rdx]; 
0x0000000000401302: cmp al, 0; add byte ptr [rax], al; nop word ptr cs:[rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x00000000004c1588: cmp al, 0; add byte ptr [rax], al; or al, 0x25; add byte ptr [rax], al; adc byte ptr [rbx - 0xb], ah; call qword ptr [rsi]; 
0x0000000000499d73: cmp al, 0x23; add byte ptr [rbx + 0x233cc405], cl; add byte ptr [rcx - 0x75], al; adc bh, byte ptr [rcx]; ret 0x850f; 
0x0000000000499d79: cmp al, 0x23; add byte ptr [rcx - 0x75], al; adc bh, byte ptr [rcx]; ret 0x850f; 
0x0000000000440f81: cmp al, 0x24; call rbx; 
0x000000000049a3b4: cmp al, 0x24; mov qword ptr [rsp + 8], rsi; je 0x9a3c4; mov edi, 0x6cc140; call rax; 
0x000000000049eadb: cmp al, 0x24; mov rsi, qword ptr [r15 + rbp*8 + 0x10]; call rbx; 
0x000000000040e86d: cmp al, 0x33; call rax; 
0x00000000004bb1a0: cmp al, 0x46; clc; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x00000000004c3abc: cmp al, 0x4a; add byte ptr [rax], al; and byte ptr [rax + rdi*8], bl; jmp qword ptr [rdx]; 
0x00000000004c5bbc: cmp al, 0x6b; add byte ptr [rax], al; add byte ptr [rbp - 6], ah; call qword ptr [rsi]; 
0x00000000004bad48: cmp al, 0x7b; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x0000000000498286: cmp al, 0xa; jne 0x9823d; nop word ptr [rax + rax]; call rbx; 
0x00000000004bccd5: cmp al, 0xaa; xchg esp, edi; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x00000000004b9c03: cmp al, 0xe; push rsp; jmp qword ptr [rbx - 0x40]; 
0x00000000004a4945: cmp al, 0xf9; call qword ptr [rax + 0x10fff93e]; and ecx, edi; jmp qword ptr [rax]; 
0x00000000004c8d01: cmp al, 0xfc; jmp qword ptr [rdx]; 
0x00000000004c3f49: cmp al, bh; call qword ptr [rax]; 
0x000000000047e6b3: cmp al, bh; jmp qword ptr [rsi + 0x2e]; 
0x00000000004c4fc8: cmp al, bl; clc; call qword ptr [rbx]; 
0x00000000004c4ff8: cmp al, bl; clc; call qword ptr [rdx]; 
0x000000000040afb2: cmp al, byte ptr [rcx]; add cl, ch; sar cl, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000043077c: cmp al, byte ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043dfee: cmp al, byte ptr [rsi - 1]; jne 0x3e165; xor eax, eax; ret; 
0x0000000000481215: cmp al, ch; in eax, 0xb6; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x38]; add rsp, 0x68; ret; 
0x000000000042fd3b: cmp al, cl; jne 0x30610; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000043e0a2: cmp al, cl; jne 0x3e165; cmp eax, ecx; jne 0x3e165; xor eax, eax; ret; 
0x000000000043e15f: cmp al, cl; jne 0x3e165; cmp eax, ecx; sbb eax, eax; sbb eax, -1; ret; 
0x000000000040f156: cmp al, dh; add byte ptr [r8 + 0x3d], cl; lock add byte ptr [r11 + 0x13], sil; mov rbp, rax; call qword ptr [rbp]; 
0x0000000000426ae6: cmp al, dh; ret; 
0x0000000000426ae5: cmp al, r14b; ret; 
0x000000000049ace6: cmp bh, 0x10; je 0x9acd8; call 0xe410; mov rax, qword ptr [rsi + 0xb8]; add rsp, 8; ret; 
0x000000000049acc2: cmp bh, 0x30; jne 0x9aceb; mov rax, qword ptr [rsi + 0xb0]; add rsp, 8; ret; 
0x000000000049d7c6: cmp bh, 0x30; jne 0x9d7f0; mov rax, qword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x000000000049d826: cmp bh, 0x30; jne 0x9d850; mov rax, qword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x000000000049d7f1: cmp bh, 0x50; jne 0x9d7e3; xor eax, eax; add rsp, 8; ret; 
0x000000000049d851: cmp bh, 0x50; jne 0x9d843; xor eax, eax; add rsp, 8; ret; 
0x000000000049d75c: cmp bh, 4; jne 0x9d775; mov eax, 8; add rsp, 8; ret; 
0x000000000047e50b: cmp bh, al; jmp qword ptr [rsi - 0x70]; 
0x00000000004c9d31: cmp bh, ch; jmp qword ptr [rdi]; 
0x00000000004a4941: cmp bh, cl; call qword ptr [rax - 0x6f0006c4]; stc; call qword ptr [rax]; 
0x00000000004a4941: cmp bh, cl; call qword ptr [rax - 0x6f0006c4]; stc; call qword ptr [rax]; and ecx, edi; jmp qword ptr [rax]; 
0x0000000000453d23: cmp bl, 0xff; dec dword ptr [rax - 0x7d]; ret 0xe920; 
0x0000000000454126: cmp bl, 0xff; dec dword ptr [rcx + rcx*4 - 0x22]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000462d1f: cmp bl, bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000413d86: cmp bl, byte ptr [rip + 0x63488a74]; std; mov eax, 3; syscall; 
0x0000000000469ba9: cmp bl, ch; ret 0x8148; 
0x000000000042d543: cmp bl, dh; ret; 
0x0000000000410cdb: cmp byte ptr [r8 - 0x77], cl; ret 0x2b48; 
0x0000000000412dbe: cmp byte ptr [r8], al; add byte ptr [rax], al; add byte ptr [rax + 3], bh; movsxd rdi, dword ptr [rbx + 0x70]; syscall; 
0x000000000049cdd8: cmp byte ptr [r9 + 0xdf], 0; je 0x9cd92; add rsp, 0x18; ret; 
0x0000000000401ae3: cmp byte ptr [rax + 0x39], cl; ret 0x2773; 
0x00000000004105b7: cmp byte ptr [rax + 0x39], cl; ret; 
0x000000000042764f: cmp byte ptr [rax + 0xf], cl; ret; 
0x0000000000426b27: cmp byte ptr [rax + 1], cl; clc; ret; 
0x0000000000481316: cmp byte ptr [rax + 3], cl; or byte ptr [rdi + r8 + 0x48], sil; mov dword ptr [rax], 0x6ccac0; add rsp, 0x48; ret; 
0x000000000041e624: cmp byte ptr [rax + 8], 0; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x1be; 
0x0000000000443882: cmp byte ptr [rax + rax + 0x48], al; mov dword ptr [rax + 8], edx; ret; 
0x00000000004a4128: cmp byte ptr [rax + rdi*8 - 0x7428f01], 0xff; xchg eax, esi; mov edx, 0xbb42fff8; clc; call qword ptr [rdx]; 
0x000000000044a781: cmp byte ptr [rax - 0x73], cl; push rsp; and al, 0x60; mov rdi, qword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000480ef5: cmp byte ptr [rax - 0x75], cl; and al, 0x40; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000480e83: cmp byte ptr [rax - 0x75], cl; and al, 0x40; add rsp, 0x50; jmp qword ptr [rax]; 
0x0000000000440667: cmp byte ptr [rax - 0x75], cl; jl 0x40690; or byte ptr [rax + 0x29], cl; ret; 
0x0000000000440f34: cmp byte ptr [rax - 0x77], cl; and al, 8; call rbx; 
0x0000000000411579: cmp byte ptr [rax - 0x77], cl; out dx, eax; lea r8, qword ptr [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x0000000000410772: cmp byte ptr [rax - 0x77], cl; out dx, eax; mov r9, qword ptr [rax + 0x10]; lea r8, qword ptr [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x0000000000410cdc: cmp byte ptr [rax - 0x77], cl; ret 0x2b48; 
0x0000000000452dcf: cmp byte ptr [rax - 0x77], cl; xlatb; mov byte ptr [rsi], al; jne 0x52db0; mov rax, rsi; ret; 
0x0000000000465bb7: cmp byte ptr [rax - 0x7d], cl; ret; 
0x0000000000426b16: cmp byte ptr [rax], ah; ret; 
0x0000000000412dbf: cmp byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 3], bh; movsxd rdi, dword ptr [rbx + 0x70]; syscall; 
0x00000000004c28dd: cmp byte ptr [rax], al; add byte ptr [rax], al; jb 0xc28d9; call qword ptr [rax]; 
0x0000000000415a63: cmp byte ptr [rax], al; je 0x15a70; ret; 
0x000000000049cd95: cmp byte ptr [rax], al; je 0x9ce03; add rsp, 0x18; ret; 
0x0000000000421de0: cmp byte ptr [rax], dh; cmovne rax, rdx; ret; 
0x0000000000426b06: cmp byte ptr [rax], dl; ret; 
0x0000000000426b05: cmp byte ptr [rax], r10b; ret; 
0x0000000000426b15: cmp byte ptr [rax], r12b; ret; 
0x0000000000421ddf: cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000004c3874: cmp byte ptr [rbx + 0x1b70307], al; ret; 
0x00000000004c7db5: cmp byte ptr [rbx + 0x2030d07], al; cld; ret; 
0x00000000004c7ded: cmp byte ptr [rbx + 0x2030d07], al; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004c7d7d: cmp byte ptr [rbx + 0x3030d07], al; or al, byte ptr [rcx]; ret; 
0x00000000004c3454: cmp byte ptr [rbx + 0x400e4a07], al; add esi, dword ptr [rsi + 0x44380e04]; ret; 
0x000000000043f732: cmp byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004c03cc: cmp byte ptr [rbx + 0x600e4a07], al; add esi, dword ptr [rbx + 0x47380e01]; ret; 
0x00000000004c7ddb: cmp byte ptr [rbx + rax*4 + 7], al; or rax, 0x1370303; ret; 
0x00000000004c7d6b: cmp byte ptr [rbx + rax*4 + 7], al; or rax, 0x34b0303; ret; 
0x00000000004c7da3: cmp byte ptr [rbx + rax*4 + 7], al; or rax, 0x35b0303; ret; 
0x00000000004bad47: cmp byte ptr [rbx + rdi*2], bh; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x000000000046d1e7: cmp byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x000000000049cdd9: cmp byte ptr [rcx + 0xdf], 0; je 0x9cd92; add rsp, 0x18; ret; 
0x00000000004a4a3c: cmp byte ptr [rcx + rdi*8 - 1], 0xa0; jl 0xa4a3c; inc eax; jl 0xa4a40; jmp rax; 
0x000000000047f8e6: cmp byte ptr [rcx - 0x7d], cl; ret 0x4908; 
0x0000000000416644: cmp byte ptr [rcx], 0xa; je 0x16658; cmp rsi, rcx; jne 0x16640; lea eax, dword ptr [rdx + rdi]; ret; 
0x00000000004bf388: cmp byte ptr [rcx], ch; hlt; jmp qword ptr [rbx]; 
0x00000000004c7a98: cmp byte ptr [rdi - 5], dl; call rsi; 
0x000000000043099a: cmp byte ptr [rdi], al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004305a0: cmp byte ptr [rdi], dl; ret 0x2373; 
0x0000000000430589: cmp byte ptr [rdi], dl; ret 0x3a73; 
0x0000000000430572: cmp byte ptr [rdi], dl; ret 0x5173; 
0x000000000042f02e: cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042fa8d: cmp byte ptr [rdi], dl; ret; 
0x00000000004951c4: cmp byte ptr [rdx], dh; add dword ptr [rax], eax; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000047cbc0: cmp byte ptr [rip + 0x259c21], 0; jne 0x7cbd1; mov rax, qword ptr [rip + 0x259800]; ret; 
0x0000000000473d3c: cmp byte ptr [rsi - 2], 0x3a; cmove rax, r9; ret; 
0x000000000044a653: cmp byte ptr [rsi], al; add byte ptr [rax], al; add cl, ch; ret; 
0x00000000004811e8: cmp byte ptr [rsp + 0x10], 0; jne 0x81228; xor eax, eax; add rsp, 0x68; ret; 
0x0000000000481330: cmp byte ptr [rsp + 0xf], 0; je 0x81324; mov rdi, qword ptr [rsp + 0x18]; call 0x1ea60; add rsp, 0x48; ret; 
0x0000000000481110: cmp byte ptr [rsp + 0xf], 0; jne 0x81120; xor eax, eax; add rsp, 0x48; ret; 
0x00000000004812a0: cmp byte ptr [rsp + 0xf], 0; jne 0x812b0; xor eax, eax; add rsp, 0x48; ret; 
0x0000000000430a7a: cmp ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000004c9c51: cmp ch, bh; call qword ptr [rdi]; 
0x0000000000417d29: cmp ch, byte ptr [rbx]; add byte ptr [rax + 0x39], cl; ret; 
0x000000000047afa7: cmp cl, 0xa; je 0x7b551; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r15]; call rax; 
0x000000000046433e: cmp cl, 0xff; jmp qword ptr [rbp]; 
0x000000000043e264: cmp cl, byte ptr [rax + rdx + 2]; jne 0x3e280; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x3e260; ret; 
0x000000000043e314: cmp cl, byte ptr [rax + rdx + 2]; jne 0x3e330; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x3e310; ret; 
0x000000000041b2a0: cmp cl, byte ptr [rax - 0x77]; ret 0x8948; 
0x000000000046489b: cmp cl, byte ptr [rax - 0x77]; ret 0x8d4a; 
0x0000000000410130: cmp cl, byte ptr [rax - 0x7f]; in al, dx; add byte ptr [rax], 0; add al, ch; ret; 
0x0000000000455f86: cmp cl, byte ptr [rbx]; jmp rax; 
0x0000000000482096: cmp cl, ch; ret; 
0x000000000049ad98: cmp dh, 0x2f; ja 0x9b5ee; movsxd rcx, dword ptr [r14 + rsi*4]; add rcx, r14; jmp rcx; 
0x000000000047e1ae: cmp dh, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000473d0e: cmp dh, byte ptr [rbp + 4]; test ecx, ecx; jne 0x73cc1; xor eax, eax; ret; 
0x000000000049ace5: cmp dil, 0x10; je 0x9acd8; call 0xe410; mov rax, qword ptr [rsi + 0xb8]; add rsp, 8; ret; 
0x000000000049acc1: cmp dil, 0x30; jne 0x9aceb; mov rax, qword ptr [rsi + 0xb0]; add rsp, 8; ret; 
0x000000000049d7c5: cmp dil, 0x30; jne 0x9d7f0; mov rax, qword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x000000000049d825: cmp dil, 0x30; jne 0x9d850; mov rax, qword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x000000000049d7f0: cmp dil, 0x50; jne 0x9d7e3; xor eax, eax; add rsp, 8; ret; 
0x000000000049d850: cmp dil, 0x50; jne 0x9d843; xor eax, eax; add rsp, 8; ret; 
0x000000000049d75b: cmp dil, 4; jne 0x9d775; mov eax, 8; add rsp, 8; ret; 
0x000000000047e50a: cmp dil, al; jmp qword ptr [rsi - 0x70]; 
0x000000000043e866: cmp dl, 0x20; jb 0x3e875; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000473d0c: cmp dl, 0x3a; jne 0x73d15; test ecx, ecx; jne 0x73cc1; xor eax, eax; ret; 
0x000000000043e853: cmp dl, 0x40; jb 0x3e866; vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043632b: cmp dl, 1; jb 0x36334; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000043e730: cmp dl, 1; jb 0x3e737; mov byte ptr [rdi], cl; ret; 
0x000000000043e8aa: cmp dl, 1; jb 0x3e8b1; mov byte ptr [rdi], cl; ret; 
0x000000000043e720: cmp dl, 2; jb 0x3e730; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x000000000043e89d: cmp dl, 2; jb 0x3e8aa; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x000000000043e714: cmp dl, 4; jb 0x3e720; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x000000000043e892: cmp dl, 4; jb 0x3e89d; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x000000000043e700: cmp dl, 8; jb 0x3e710; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x000000000043e87f: cmp dl, 8; jb 0x3e88e; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x00000000004167bf: cmp dword ptr [rax + 0x20], ecx; jbe 0x167e1; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000416a72: cmp dword ptr [rax + 0x20], ecx; jbe 0x16a94; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000046d1b8: cmp dword ptr [rax + 0x30], 0; je 0x6d1c0; ret; 
0x0000000000414ba8: cmp dword ptr [rax], 0x1d; je 0x14b49; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000004c29c5: cmp dword ptr [rax], eax; add al, bl; test al, 0xf6; jmp qword ptr [rsi]; 
0x00000000004c29c4: cmp dword ptr [rax], r8d; add al, bl; test al, 0xf6; jmp qword ptr [rsi]; 
0x00000000004422f9: cmp dword ptr [rbp + 0x10], 0; jne 0x4181d; mov esi, 3; mov rdi, r13; call rbx; 
0x00000000004422b9: cmp dword ptr [rbp + 0x10], 0; jne 0x41a9b; mov esi, 3; mov rdi, r13; call rbx; 
0x00000000004422d9: cmp dword ptr [rbp + 0x10], 0; jne 0x41d4a; mov esi, 3; mov rdi, r13; call rbx; 
0x0000000000441a8c: cmp dword ptr [rbp + 8], 0; mov edx, 2; je 0x422b8; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441d3b: cmp dword ptr [rbp + 8], 0; mov edx, 2; je 0x422d8; xor esi, esi; mov rdi, r13; call rbx; 
0x000000000044180e: cmp dword ptr [rbp + 8], 0; mov edx, 2; je 0x422f8; xor esi, esi; mov rdi, r13; call rbx; 
0x000000000049c620: cmp dword ptr [rbx + 8], 5; ja 0x9c67e; mov eax, dword ptr [rbx + 8]; movsxd rax, dword ptr [r14 + rax*4]; add rax, r14; jmp rax; 
0x00000000004350cc: cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x0000000000420ab3: cmp dword ptr [rbx], 0x444c4541; je 0x205db; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000049cd93: cmp dword ptr [rcx + 0x38], 0; je 0x9ce03; add rsp, 0x18; ret; 
0x000000000045159e: cmp dword ptr [rcx - 0x7d], ecx; ret 0xf301; 
0x000000000046d464: cmp dword ptr [rcx], 0xa; je 0x6d478; cmp rsi, rcx; jb 0x6d460; lea eax, dword ptr [rdx + rdi]; ret; 
0x0000000000442579: cmp dword ptr [rdi + 0x10], 0; jne 0x41861; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004425d9: cmp dword ptr [rdi + 0x10], 0; jne 0x418da; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442619: cmp dword ptr [rdi + 0x10], 0; jne 0x41986; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004425f9: cmp dword ptr [rdi + 0x10], 0; jne 0x419ff; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004425b9: cmp dword ptr [rdi + 0x10], 0; jne 0x41adf; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442539: cmp dword ptr [rdi + 0x10], 0; jne 0x41c7d; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442459: cmp dword ptr [rdi + 0x10], 0; jne 0x41d8e; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442439: cmp dword ptr [rdi + 0x10], 0; jne 0x41e07; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004424f9: cmp dword ptr [rdi + 0x10], 0; jne 0x41f2c; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004424d9: cmp dword ptr [rdi + 0x10], 0; jne 0x4200c; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004424b9: cmp dword ptr [rdi + 0x10], 0; jne 0x42085; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442479: cmp dword ptr [rdi + 0x10], 0; jne 0x421aa; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000417a65: cmp dword ptr [rdi + 0x10], eax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000415a61: cmp dword ptr [rdi + 0x38], 0; je 0x15a70; ret; 
0x0000000000441df8: cmp dword ptr [rdi + 8], 0; mov edx, 4; je 0x42438; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441d7f: cmp dword ptr [rdi + 8], 0; mov edx, 4; je 0x42458; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044219b: cmp dword ptr [rdi + 8], 0; mov edx, 4; je 0x42478; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442076: cmp dword ptr [rdi + 8], 0; mov edx, 4; je 0x424b8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441ffd: cmp dword ptr [rdi + 8], 0; mov edx, 4; je 0x424d8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441f1d: cmp dword ptr [rdi + 8], 0; mov edx, 4; je 0x424f8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441c6e: cmp dword ptr [rdi + 8], 0; mov edx, 4; je 0x42538; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441bf5: cmp dword ptr [rdi + 8], 0; mov edx, 4; je 0x42558; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441852: cmp dword ptr [rdi + 8], 0; mov edx, 4; je 0x42578; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441ad0: cmp dword ptr [rdi + 8], 0; mov edx, 4; je 0x425b8; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004418cb: cmp dword ptr [rdi + 8], 0; mov edx, 4; je 0x425d8; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004419f0: cmp dword ptr [rdi + 8], 0; mov edx, 4; je 0x425f8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441977: cmp dword ptr [rdi + 8], 0; mov edx, 4; je 0x42618; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000430930: cmp dword ptr [rdi], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004434b0: cmp dword ptr [rdx + rcx*8 - 8], 1; sbb eax, 0; leave; ret; 
0x000000000046d3b6: cmp dword ptr [rdx - 4], esi; je 0x6d3d8; mov rdx, qword ptr [rbx + 0xd8]; mov esi, eax; mov rdi, rbx; call qword ptr [rdx + 0x30]; 
0x0000000000413d85: cmp dword ptr [rdx], 0x1d; je 0x13d14; movsxd rdi, ebp; mov eax, 3; syscall; 
0x0000000000416645: cmp dword ptr [rdx], ecx; je 0x16658; cmp rsi, rcx; jne 0x16640; lea eax, dword ptr [rdx + rdi]; ret; 
0x000000000046d465: cmp dword ptr [rdx], ecx; je 0x6d478; cmp rsi, rcx; jb 0x6d460; lea eax, dword ptr [rdx + rdi]; ret; 
0x0000000000473990: cmp dword ptr [rip + 0x262e85], 0; jne 0x739ad; mov eax, 0x14; syscall; 
0x0000000000473800: cmp dword ptr [rip + 0x263015], 0; jne 0x7381d; mov eax, 3; syscall; 
0x000000000043fee0: cmp dword ptr [rip + 0x296935], 0; jne 0x3fefd; mov eax, 1; syscall; 
0x000000000043fe80: cmp dword ptr [rip + 0x296995], 0; jne 0x3fe9d; mov eax, 0; syscall; 
0x000000000043fe20: cmp dword ptr [rip + 0x2969f5], 0; jne 0x3fe3d; mov eax, 2; syscall; 
0x0000000000401180: cmp dword ptr [rip - 0xfa7], 0x25; mov rbp, qword ptr [rip - 0xfb6]; mov ebx, 0x4001d8; jne 0x11b5; nop dword ptr [rax]; call qword ptr [rbx + 0x10]; 
0x0000000000442339: cmp dword ptr [rsi + 0x10], 0; jne 0x41841; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442399: cmp dword ptr [rsi + 0x10], 0; jne 0x41966; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442379: cmp dword ptr [rsi + 0x10], 0; jne 0x41abf; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442419: cmp dword ptr [rsi + 0x10], 0; jne 0x41d6e; mov esi, 3; mov rdi, r14; call rbx; 
0x00000000004423d9: cmp dword ptr [rsi + 0x10], 0; jne 0x41fec; mov esi, 3; mov rdi, r14; call rbx; 
0x00000000004423b9: cmp dword ptr [rsi + 0x10], 0; jne 0x42111; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000441832: cmp dword ptr [rsi + 8], 0; mov edx, 3; je 0x42338; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441bd5: cmp dword ptr [rsi + 8], 0; mov edx, 3; je 0x42358; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441ab0: cmp dword ptr [rsi + 8], 0; mov edx, 3; je 0x42378; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441957: cmp dword ptr [rsi + 8], 0; mov edx, 3; je 0x42398; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442102: cmp dword ptr [rsi + 8], 0; mov edx, 3; je 0x423b8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441fdd: cmp dword ptr [rsi + 8], 0; mov edx, 3; je 0x423d8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441d5f: cmp dword ptr [rsi + 8], 0; mov edx, 3; je 0x42418; xor esi, esi; mov rdi, r14; call rbx; 
0x000000000049d5b4: cmp dword ptr [rsi + 8], ecx; cmova eax, edx; ret; 
0x0000000000442281: cmp dword ptr [rsp + 0x10], 0; jne 0x417f8; mov esi, 3; mov rdi, r12; call rbx; 
0x000000000044004b: cmp dword ptr [rsp + 0x10], 2; cmove eax, edx; add rsp, 0x60; pop rbx; ret; 
0x000000000048106e: cmp dword ptr [rsp + 0x28], 0; jne 0x81080; add rsp, 0x38; ret; 
0x000000000043ffa3: cmp dword ptr [rsp - 0x58], 2; cmove eax, edx; ret; 
0x0000000000414ba7: cmp dword ptr fs:[rax], 0x1d; je 0x14b49; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000413d84: cmp dword ptr fs:[rdx], 0x1d; je 0x13d14; movsxd rdi, ebp; mov eax, 3; syscall; 
0x0000000000421d5f: cmp eax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x000000000047d17f: cmp eax, -1; cmove rax, rdx; ret; 
0x0000000000415780: cmp eax, -1; je 0x15735; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000004158f0: cmp eax, -1; je 0x158a5; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000415a94: cmp eax, -1; je 0x15aa0; pop rbx; pop rbp; pop r12; ret; 
0x00000000004165b7: cmp eax, -1; je 0x165bf; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x0000000000401915: cmp eax, -1; je 0x1a03; add rsp, 0x98; ret; 
0x000000000046d3ca: cmp eax, -1; je 0x6d3d2; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x000000000046d40e: cmp eax, -1; je 0x6d416; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x0000000000411659: cmp eax, -1; jne 0x11660; pop rbx; ret; 
0x000000000041660f: cmp eax, -1; jne 0x165fa; pop rbx; ret; 
0x00000000004434c0: cmp eax, -1; jne 0x434b8; xor eax, eax; leave; ret; 
0x00000000004040e8: cmp eax, -1; mov r15, rax; je 0x42a5; movsxd rdi, r12d; mov eax, 3; syscall; 
0x0000000000480bbc: cmp eax, -3; jbe 0x80bc8; ret; 
0x000000000049c966: cmp eax, 0x2311eb; or byte ptr [rdi], cl; test byte ptr [rbx - 0x18000000], bl; cdq; sbb dh, bh; jmp qword ptr [rsi + 0xf]; 
0x000000000048c8b9: cmp eax, 0x241106; call rax; 
0x000000000048c77c: cmp eax, 0x241243; jmp rax; 
0x000000000047cbc1: cmp eax, 0x259c21; add byte ptr [rbp + 8], dh; mov rax, qword ptr [rip + 0x259800]; ret; 
0x0000000000473991: cmp eax, 0x262e85; add byte ptr [rbp + 0x14], dh; mov eax, 0x14; syscall; 
0x0000000000473801: cmp eax, 0x263015; add byte ptr [rbp + 0x14], dh; mov eax, 3; syscall; 
0x000000000043fee1: cmp eax, 0x296935; add byte ptr [rbp + 0x14], dh; mov eax, 1; syscall; 
0x000000000043fe81: cmp eax, 0x296995; add byte ptr [rbp + 0x14], dh; mov eax, 0; syscall; 
0x000000000043fe21: cmp eax, 0x2969f5; add byte ptr [rbp + 0x14], dh; mov eax, 2; syscall; 
0x000000000044235f: cmp eax, 0x3beffff; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 9], cl; call rbx; 
0x00000000004a4015: cmp eax, 0x3f50fff8; clc; jmp qword ptr [rax + 0x41]; 
0x000000000040f15b: cmp eax, 0x4bf040; jae 0xf175; mov rbp, rax; call qword ptr [rbp]; 
0x00000000004bb081: cmp eax, 0x7170d773; mov ebp, 0xfb67d10d; ret; 
0x00000000004bb07e: cmp eax, 0x733db8a1; xlatb; jo 0xbb0f7; mov ebp, 0xfb67d10d; ret; 
0x000000000049d7c2: cmp eax, 0x80401376; push qword ptr [rax]; jne 0x9d7f0; mov rax, qword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x000000000049d822: cmp eax, 0x80401376; push qword ptr [rax]; jne 0x9d850; mov rax, qword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x000000000046c925: cmp eax, 0xd8838b48; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x20]; jmp rax; 
0x0000000000400f1c: cmp eax, 0xff; jne 0xd3c; nop; leave; ret; 
0x000000000043f4f8: cmp eax, 0xfffff000; ja 0x3f520; hlt; mov rdi, rdx; mov eax, r8d; syscall; 
0x000000000043f689: cmp eax, 0xfffff000; ja 0x3f788; mov rdx, rax; mov rdi, r8; mov eax, 3; syscall; 
0x0000000000440018: cmp eax, 0xfffff000; ja 0x40060; add rsp, 0x60; pop rbx; ret; 
0x00000000004733b8: cmp eax, 0xfffff000; ja 0x733c8; pop rbx; ret; 
0x000000000043f4b8: cmp eax, 0xfffff001; jae 0x44fb0; ret; 
0x000000000043efb6: cmp eax, 1; je 0x3efd0; cmp eax, 2; je 0x3efc8; xor eax, eax; ret; 
0x000000000046c79a: cmp eax, 1; je 0x6c8b0; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000046c95a: cmp eax, 1; je 0x6ca90; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000043efbb: cmp eax, 2; je 0x3efc8; xor eax, eax; ret; 
0x0000000000444e7a: cmp eax, 3; jne 0x44e28; add rsp, 0x1d8; pop rbx; pop rbp; ret; 
0x00000000004433aa: cmp eax, 4; je 0x433b0; ret; 
0x0000000000400d4a: cmp eax, 9; ja 0xefa; mov rax, qword ptr [rax*8 + 0x4a1ca8]; jmp rax; 
0x0000000000420ab4: cmp eax, dword ptr [rcx + 0x45]; je 0x205db; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000413a95: cmp eax, dword ptr [rdi + 0x10]; jae 0x13aa0; movzx eax, byte ptr [rax]; ret; 
0x000000000049a58b: cmp eax, dword ptr [rip + 0x23359f]; jae 0x9a59f; mov rdx, qword ptr [rip + 0x23359e]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000441d21: cmp eax, dword ptr [rip - 0x9cf0000]; mov rdi, r12; call rbx; 
0x000000000047d1c8: cmp eax, dword ptr [rsi + rdx]; jae 0x7d171; xor eax, eax; ret; 
0x0000000000417369: cmp eax, ecx; jae 0x17390; movzx eax, byte ptr [rax]; ret; 
0x00000000004165a6: cmp eax, ecx; je 0x165c8; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x000000000043df42: cmp eax, ecx; jne 0x3e150; xor eax, eax; ret; 
0x000000000043e0aa: cmp eax, ecx; jne 0x3e165; xor eax, eax; ret; 
0x000000000043e163: cmp eax, ecx; sbb eax, eax; sbb eax, -1; ret; 
0x000000000047e56f: cmp eax, edi; jmp qword ptr [rsi + 0x2e]; 
0x00000000004432e0: cmp eax, edx; jne 0x432ec; nop; mov eax, 0xca; syscall; 
0x0000000000480d94: cmp eax, esi; je 0x80da0; ret; 
0x00000000004c9ce9: cmp ebp, edi; jmp qword ptr [rdx]; 
0x0000000000443346: cmp ebx, 0xa; je 0x4334c; ret; 
0x000000000043f63e: cmp ebx, 3; mov edi, 0x4a4fa0; jne 0x3f6d8; xor esi, esi; mov eax, 2; syscall; 
0x000000000041d4cc: cmp ebx, ecx; jb 0x1d4a8; mov byte ptr [r8 + rbx], r9b; mov rax, r8; pop rbx; ret; 
0x000000000048bcc1: cmp ecx, 0x1f; mov rdx, rcx; jg 0x8bcd0; call 0x8b620; leave; ret; 
0x000000000047a271: cmp ecx, dword ptr [rax - 0x75]; adc byte ptr [r8 - 0x7d], cl; ret; 
0x00000000004a0c94: cmp ecx, dword ptr [rax - 0x75]; imul ebx, dword ptr [rax], -0x18; ret 0xf7dd; 
0x00000000004a108c: cmp ecx, dword ptr [rax - 0x75]; imul ebx, dword ptr [rax], -0x18; retf 0xf7d9; dec dword ptr [rax - 0x77]; fucompi st(0); ret 0xf7d9; 
0x00000000004761ce: cmp ecx, dword ptr [rax - 0x7b]; sal byte ptr [rsp + 0x48], 0x83; ret; 
0x0000000000448899: cmp ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000455fd7: cmp ecx, dword ptr [rbx]; jmp rax; 
0x000000000046fde0: cmp ecx, dword ptr [rdi]; imul esi, esi, 0x3c; add eax, esi; ret; 
0x0000000000444d91: cmp ecx, dword ptr [rdx + 0x28]; jae 0x44d70; mov eax, 1; ret; 
0x000000000046d70e: cmp ecx, dword ptr [rdx + 0x4c]; cmove eax, ecx; ret; 
0x0000000000480329: cmp ecx, eax; je 0x802a0; mov eax, r8d; sub eax, ecx; ret; 
0x00000000004301b5: cmp ecx, eax; jne 0x305e3; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000042fc5b: cmp ecx, eax; jne 0x305e3; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000042fbaf: cmp ecx, eax; jne 0x305e3; xor eax, eax; ret; 
0x000000000042fca6: cmp ecx, eax; jne 0x305ef; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000042fbd7: cmp ecx, eax; jne 0x305ef; xor eax, eax; ret; 
0x000000000042fea8: cmp ecx, eax; jne 0x305fa; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000048a388: cmp ecx, eax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x0000000000480328: cmp ecx, r8d; je 0x802a0; mov eax, r8d; sub eax, ecx; ret; 
0x0000000000442b21: cmp edi, dword ptr [rdi + 0x1f0ffffd]; add bl, dh; ret; 
0x00000000004c4031: cmp edi, eax; call qword ptr [rbx + 5]; 
0x00000000004a4011: cmp edi, eax; inc dword ptr [rax + 0x3d]; clc; call qword ptr [rax + 0x3f]; 
0x00000000004a4011: cmp edi, eax; inc dword ptr [rax + 0x3d]; clc; call qword ptr [rax + 0x3f]; clc; jmp qword ptr [rax + 0x41]; 
0x000000000049e8cc: cmp edi, eax; je 0x9e9d8; mov rsi, qword ptr [r14 + 8]; mov rdx, qword ptr [r15]; mov rdi, rbp; call rbx; 
0x000000000047e3c3: cmp edi, eax; jmp qword ptr [rsi + 0x2e]; 
0x0000000000410be6: cmp edx, 0x280; jne 0x108e0; mov rdi, rbp; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000041283e: cmp edx, 0x280; jne 0x127c0; mov rdi, rbp; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000443137: cmp edx, 1; jne 0x43130; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x00000000004431a7: cmp edx, 1; jne 0x431a0; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x000000000049cea0: cmp edx, 8; jne 0x9ce93; mov rax, qword ptr [rax]; add rsp, 8; ret; 
0x000000000047cab8: cmp edx, eax; jne 0x7ca5b; mov eax, dword ptr [rsi + 4]; ret; 
0x000000000043346c: cmp edx, ecx; jae 0x33480; mov rcx, rdx; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004432ca: cmp edx, edi; setae al; ret; 
0x0000000000442e60: cmp edx, esi; jne 0x42e50; movsxd rdi, dword ptr [rbp - 0x58]; mov eax, 3; syscall; 
0x00000000004173a9: cmp esi, -1; setne al; neg eax; ret; 
0x000000000046fdde: cmp esi, 0x3b; cmova esi, edx; imul esi, esi, 0x3c; add eax, esi; ret; 
0x000000000048bf6b: cmp esi, 0x7fff; je 0x8bf79; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000044e065: cmp esi, 3; je 0x4e070; pop rbx; ret; 
0x0000000000440005: cmp esi, 9; je 0x40028; movsxd rsi, esi; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x00000000004bb338: cmp esi, dword ptr [rsi + 0x33]; movabs byte ptr [0x3246dddda441cb9e], al; mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x00000000004bc524: cmp esi, ebp; xlatb; ret 0x4e27; 
0x000000000046d46a: cmp esi, ecx; jb 0x6d460; lea eax, dword ptr [rdx + rdi]; ret; 
0x000000000041664a: cmp esi, ecx; jne 0x16640; lea eax, dword ptr [rdx + rdi]; ret; 
0x0000000000401081: cmp esp, dword ptr [rdi]; add al, 0; leave; ret; 
0x0000000000450083: cmp esp, eax; jb 0x500b9; movsxd rdi, r15d; mov eax, 3; syscall; 
0x0000000000442280: cmp qword ptr [r12 + 0x10], 0; jne 0x417f8; mov esi, 3; mov rdi, r12; call rbx; 
0x00000000004422f8: cmp qword ptr [r13 + 0x10], 0; jne 0x4181d; mov esi, 3; mov rdi, r13; call rbx; 
0x00000000004422b8: cmp qword ptr [r13 + 0x10], 0; jne 0x41a9b; mov esi, 3; mov rdi, r13; call rbx; 
0x00000000004422d8: cmp qword ptr [r13 + 0x10], 0; jne 0x41d4a; mov esi, 3; mov rdi, r13; call rbx; 
0x0000000000441a8b: cmp qword ptr [r13 + 8], 0; mov edx, 2; je 0x422b8; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441d3a: cmp qword ptr [r13 + 8], 0; mov edx, 2; je 0x422d8; xor esi, esi; mov rdi, r13; call rbx; 
0x000000000044180d: cmp qword ptr [r13 + 8], 0; mov edx, 2; je 0x422f8; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000442338: cmp qword ptr [r14 + 0x10], 0; jne 0x41841; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442398: cmp qword ptr [r14 + 0x10], 0; jne 0x41966; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442378: cmp qword ptr [r14 + 0x10], 0; jne 0x41abf; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442418: cmp qword ptr [r14 + 0x10], 0; jne 0x41d6e; mov esi, 3; mov rdi, r14; call rbx; 
0x00000000004423d8: cmp qword ptr [r14 + 0x10], 0; jne 0x41fec; mov esi, 3; mov rdi, r14; call rbx; 
0x00000000004423b8: cmp qword ptr [r14 + 0x10], 0; jne 0x42111; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000441831: cmp qword ptr [r14 + 8], 0; mov edx, 3; je 0x42338; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441bd4: cmp qword ptr [r14 + 8], 0; mov edx, 3; je 0x42358; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441aaf: cmp qword ptr [r14 + 8], 0; mov edx, 3; je 0x42378; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441956: cmp qword ptr [r14 + 8], 0; mov edx, 3; je 0x42398; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442101: cmp qword ptr [r14 + 8], 0; mov edx, 3; je 0x423b8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441fdc: cmp qword ptr [r14 + 8], 0; mov edx, 3; je 0x423d8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441d5e: cmp qword ptr [r14 + 8], 0; mov edx, 3; je 0x42418; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442578: cmp qword ptr [r15 + 0x10], 0; jne 0x41861; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004425d8: cmp qword ptr [r15 + 0x10], 0; jne 0x418da; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442618: cmp qword ptr [r15 + 0x10], 0; jne 0x41986; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004425f8: cmp qword ptr [r15 + 0x10], 0; jne 0x419ff; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004425b8: cmp qword ptr [r15 + 0x10], 0; jne 0x41adf; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442538: cmp qword ptr [r15 + 0x10], 0; jne 0x41c7d; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442458: cmp qword ptr [r15 + 0x10], 0; jne 0x41d8e; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442438: cmp qword ptr [r15 + 0x10], 0; jne 0x41e07; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004424f8: cmp qword ptr [r15 + 0x10], 0; jne 0x41f2c; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004424d8: cmp qword ptr [r15 + 0x10], 0; jne 0x4200c; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004424b8: cmp qword ptr [r15 + 0x10], 0; jne 0x42085; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442478: cmp qword ptr [r15 + 0x10], 0; jne 0x421aa; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000441df7: cmp qword ptr [r15 + 8], 0; mov edx, 4; je 0x42438; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441d7e: cmp qword ptr [r15 + 8], 0; mov edx, 4; je 0x42458; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044219a: cmp qword ptr [r15 + 8], 0; mov edx, 4; je 0x42478; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442075: cmp qword ptr [r15 + 8], 0; mov edx, 4; je 0x424b8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441ffc: cmp qword ptr [r15 + 8], 0; mov edx, 4; je 0x424d8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441f1c: cmp qword ptr [r15 + 8], 0; mov edx, 4; je 0x424f8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441c6d: cmp qword ptr [r15 + 8], 0; mov edx, 4; je 0x42538; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441bf4: cmp qword ptr [r15 + 8], 0; mov edx, 4; je 0x42558; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441851: cmp qword ptr [r15 + 8], 0; mov edx, 4; je 0x42578; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441acf: cmp qword ptr [r15 + 8], 0; mov edx, 4; je 0x425b8; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004418ca: cmp qword ptr [r15 + 8], 0; mov edx, 4; je 0x425d8; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004419ef: cmp qword ptr [r15 + 8], 0; mov edx, 4; je 0x425f8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441976: cmp qword ptr [r15 + 8], 0; mov edx, 4; je 0x42618; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000049cd92: cmp qword ptr [r9 + 0x38], 0; je 0x9ce03; add rsp, 0x18; ret; 
0x00000000004167be: cmp qword ptr [rax + 0x20], rcx; jbe 0x167e1; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000416a71: cmp qword ptr [rax + 0x20], rcx; jbe 0x16a94; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000046d1b7: cmp qword ptr [rax + 0x30], 0; je 0x6d1c0; ret; 
0x0000000000420ab2: cmp qword ptr [rbx], 0x444c4541; je 0x205db; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000417a64: cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000415a60: cmp qword ptr [rdi + 0x38], 0; je 0x15a70; ret; 
0x00000000004434af: cmp qword ptr [rdx + rcx*8 - 8], 1; sbb eax, 0; leave; ret; 
0x000000000049d5b3: cmp qword ptr [rsi + 8], rcx; cmova eax, edx; ret; 
0x000000000048106d: cmp qword ptr [rsp + 0x28], 0; jne 0x81080; add rsp, 0x38; ret; 
0x0000000000473d0b: cmp r10b, 0x3a; jne 0x73d15; test ecx, ecx; jne 0x73cc1; xor eax, eax; ret; 
0x000000000042d542: cmp r11b, r14b; ret; 
0x0000000000443345: cmp r11d, 0xa; je 0x4334c; ret; 
0x0000000000450082: cmp r12, rax; jb 0x500b9; movsxd rdi, r15d; mov eax, 3; syscall; 
0x000000000049e8cb: cmp r15, rax; je 0x9e9d8; mov rsi, qword ptr [r14 + 8]; mov rdx, qword ptr [r15]; mov rdi, rbp; call rbx; 
0x000000000047d1c7: cmp r8, qword ptr [rsi + rdx]; jae 0x7d171; xor eax, eax; ret; 
0x0000000000444e79: cmp r8d, 3; jne 0x44e28; add rsp, 0x1d8; pop rbx; pop rbp; ret; 
0x000000000043f4f7: cmp rax, -0x1000; ja 0x3f520; hlt; mov rdi, rdx; mov eax, r8d; syscall; 
0x000000000043f688: cmp rax, -0x1000; ja 0x3f788; mov rdx, rax; mov rdi, r8; mov eax, 3; syscall; 
0x0000000000440017: cmp rax, -0x1000; ja 0x40060; add rsp, 0x60; pop rbx; ret; 
0x00000000004733b7: cmp rax, -0x1000; ja 0x733c8; pop rbx; ret; 
0x000000000043f4b7: cmp rax, -0xfff; jae 0x44fb0; ret; 
0x0000000000421d5e: cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x000000000047d17e: cmp rax, -1; cmove rax, rdx; ret; 
0x00000000004040e7: cmp rax, -1; mov r15, rax; je 0x42a5; movsxd rdi, r12d; mov eax, 3; syscall; 
0x0000000000480bbb: cmp rax, -3; jbe 0x80bc8; ret; 
0x000000000040f15a: cmp rax, 0x4bf040; jae 0xf175; mov rbp, rax; call qword ptr [rbp]; 
0x0000000000400f1b: cmp rax, 0xff; jne 0xd3c; nop; leave; ret; 
0x0000000000400d49: cmp rax, 9; ja 0xefa; mov rax, qword ptr [rax*8 + 0x4a1ca8]; jmp rax; 
0x0000000000413a94: cmp rax, qword ptr [rdi + 0x10]; jae 0x13aa0; movzx eax, byte ptr [rax]; ret; 
0x000000000049a58a: cmp rax, qword ptr [rip + 0x23359f]; jae 0x9a59f; mov rdx, qword ptr [rip + 0x23359e]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000417368: cmp rax, rcx; jae 0x17390; movzx eax, byte ptr [rax]; ret; 
0x0000000000480d93: cmp rax, rsi; je 0x80da0; ret; 
0x000000000041d4cb: cmp rbx, rcx; jb 0x1d4a8; mov byte ptr [r8 + rbx], r9b; mov rax, r8; pop rbx; ret; 
0x000000000048bcc0: cmp rcx, 0x1f; mov rdx, rcx; jg 0x8bcd0; call 0x8b620; leave; ret; 
0x0000000000444d90: cmp rcx, qword ptr [rdx + 0x28]; jae 0x44d70; mov eax, 1; ret; 
0x000000000046d70d: cmp rcx, qword ptr [rdx + 0x4c]; cmove eax, ecx; ret; 
0x00000000004301b4: cmp rcx, rax; jne 0x305e3; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000042fc5a: cmp rcx, rax; jne 0x305e3; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000042fbae: cmp rcx, rax; jne 0x305e3; xor eax, eax; ret; 
0x000000000048a387: cmp rcx, rax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x0000000000443136: cmp rdx, 1; jne 0x43130; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x00000000004431a6: cmp rdx, 1; jne 0x431a0; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x0000000000442e5f: cmp rdx, r14; jne 0x42e50; movsxd rdi, dword ptr [rbp - 0x58]; mov eax, 3; syscall; 
0x000000000047cab7: cmp rdx, r8; jne 0x7ca5b; mov eax, dword ptr [rsi + 4]; ret; 
0x000000000043346b: cmp rdx, rcx; jae 0x33480; mov rcx, rdx; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004432c9: cmp rdx, rdi; setae al; ret; 
0x000000000046d469: cmp rsi, rcx; jb 0x6d460; lea eax, dword ptr [rdx + rdi]; ret; 
0x0000000000416649: cmp rsi, rcx; jne 0x16640; lea eax, dword ptr [rdx + rdi]; ret; 
0x000000000049ad97: cmp sil, 0x2f; ja 0x9b5ee; movsxd rcx, dword ptr [r14 + rsi*4]; add rcx, r14; jmp rcx; 
0x0000000000491747: cmpsb byte ptr [rsi], byte ptr [rdi]; adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000491a47: cmpsb byte ptr [rsi], byte ptr [rdi]; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000492947: cmpsb byte ptr [rsi], byte ptr [rdi]; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004265c5: cmpsb byte ptr [rsi], byte ptr [rdi]; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x0000000000492647: cmpsb byte ptr [rsi], byte ptr [rdi]; add eax, 0x83480000; ret 0x4910; 
0x0000000000430039: cmpsb byte ptr [rsi], byte ptr [rdi]; add eax, 0xc0310000; ret; 
0x00000000004a40f9: cmpsb byte ptr [rsi], byte ptr [rdi]; clc; call qword ptr [rax - 0x4f000759]; test al, 0xf8; call rax; 
0x00000000004c1b81: cmpsb byte ptr [rsi], byte ptr [rdi]; cmc; call rsp; 
0x00000000004005da: cmpsb byte ptr [rsi], byte ptr [rdi]; jne 0x5de; ret; 
0x000000000041657d: cmpsb byte ptr [rsi], byte ptr [rdi]; nop; mov rax, -1; ret; 
0x000000000042ab66: cmpsb byte ptr [rsi], byte ptr [rdi]; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000492347: cmpsb byte ptr [rsi], byte ptr [rdi]; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000492047: cmpsb byte ptr [rsi], byte ptr [rdi]; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000429d56: cmpsb byte ptr [rsi], byte ptr [rdi]; out 7, al; add byte ptr [rbx + 0x148b8104], cl; xchg eax, ecx; sub eax, edx; ret; 
0x00000000004a41c4: cmpsb byte ptr [rsi], byte ptr [rdi]; ret 0xfff8; 
0x000000000040a176: cmpsb byte ptr [rsi], byte ptr [rdi]; ret 0xffff; 
0x000000000049a060: cmpsd dword ptr [rsi], dword ptr [rdi]; nop dword ptr [rax]; mov rax, -0x30; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x000000000043f4a1: cmpsd dword ptr [rsi], dword ptr [rdi]; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0x25; syscall; 
0x00000000004bd075: cmpsd dword ptr [rsi], dword ptr [rdi]; xor byte ptr [rsi + 0x4ce2e5dd], 0x67; add ch, byte ptr [rbp + rbp*2 + 0x5b]; ret 0x6f9; 
0x00000000004106f1: cwde; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbp + 0x20]; 
0x0000000000412edf: cwde; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000041398f: cwde; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004c88dd: cwde; add byte ptr [rax], al; push rax; cld; call qword ptr [rax + 1]; 
0x000000000049ca5d: cwde; add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000049c0a4: cwde; add rax, r8; jmp rax; 
0x000000000047cae1: cwde; and eax, 0xc0834800; add dword ptr [rax - 0x77], ecx; add eax, 0x2598e1; add rsp, 8; ret; 
0x00000000004c6811: cwde; cli; jmp qword ptr [rax + 1]; 
0x00000000004c3f48: cwde; cmp al, bh; call qword ptr [rax]; 
0x00000000004c54c8: cwde; jp 0xc54c4; call rdi; 
0x0000000000442f54: cwde; mov eax, 3; syscall; 
0x0000000000455f79: cwde; movzx eax, byte ptr [rax + 0x4b40e0]; mov rax, qword ptr [rax*8 + 0x4b3a20]; jmp rax; 
0x0000000000455fca: cwde; movzx eax, byte ptr [rax + 0x4b40e0]; mov rax, qword ptr [rax*8 + 0x4b3b20]; jmp rax; 
0x00000000004580ba: cwde; movzx eax, byte ptr [rax + 0x4b40e0]; mov rax, qword ptr [rax*8 + 0x4b3c20]; jmp rax; 
0x0000000000456bed: cwde; movzx eax, byte ptr [rax + 0x4b40e0]; mov rax, qword ptr [rax*8 + 0x4b3f20]; jmp rax; 
0x00000000004157bc: cwde; movzx eax, byte ptr [rdx]; pop rbx; ret; 
0x00000000004c9a28: cwde; xor al, 0xfd; jmp qword ptr [rcx]; 
0x0000000000439e61: dec byte ptr [r8 + 0x29]; ret 0x280f; 
0x0000000000439e62: dec byte ptr [rax + 0x29]; ret 0x280f; 
0x000000000048b926: dec byte ptr [rax + 0x29]; ret 0x8d49; 
0x00000000004368a2: dec byte ptr [rax + 0x6f]; pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x0000000000460638: dec byte ptr [rax - 0x3f]; clc; add cl, byte ptr [rcx + rcx*4 - 9]; mov rdx, rax; mov rax, qword ptr [r14 + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000045dc0c: dec byte ptr [rax - 0x75]; mov ebp, 0xfffffb60; call rax; 
0x000000000046df5d: dec byte ptr [rax - 0x77]; ret; 
0x0000000000440006: dec byte ptr [rcx]; je 0x40028; movsxd rsi, esi; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x00000000004709fe: dec dh; and eax, 0xec814800; add byte ptr [rax], 0; add al, ch; ret 0xfd28; 
0x000000000049853d: dec dword ptr [r13 + r9*4 + 0x7c]; ret; 
0x0000000000465a93: dec dword ptr [r8 + 0x39]; ret; 
0x0000000000480bb9: dec dword ptr [r8 - 0x7d]; clc; std; jbe 0x80bc8; ret; 
0x000000000041ba2c: dec dword ptr [r9 - 0x7b]; ret 0x840f; 
0x0000000000439fa2: dec dword ptr [rax + 0x29]; ret 0x280f; 
0x000000000047c6b1: dec dword ptr [rax + 0x29]; ret 0x48e9; 
0x000000000045f276: dec dword ptr [rax + 0x29]; ret 0x8948; 
0x0000000000419b8d: dec dword ptr [rax + 0x29]; ret 0x8d48; 
0x000000000041e244: dec dword ptr [rax + 0x29]; ret 0x8d4c; 
0x0000000000410ff9: dec dword ptr [rax + 0x29]; ret; 
0x000000000046e297: dec dword ptr [rax + 0x31]; ror dword ptr [rax + 0x21], -0x32; je 0x6e3d0; bsr rsi, rsi; lea rax, qword ptr [rdi + rsi]; ret; 
0x000000000046b2b9: dec dword ptr [rax + 0x39]; add dword ptr [rbp + 0xf48ff70], ecx; add dword ptr [r8 - 0x7d], ecx; ret 0x8508; 
0x000000000046b408: dec dword ptr [rax + 0x39]; add dword ptr [rbp + 0xf48ff78], ecx; add dword ptr [r8 - 0x7d], ecx; ret 0x8508; 
0x0000000000463764: dec dword ptr [rax + 0x39]; ret 0x840f; 
0x000000000046855d: dec dword ptr [rax + 0x39]; ret 0x940f; 
0x00000000004793a5: dec dword ptr [rax + 0x39]; ret 0xed75; 
0x0000000000419245: dec dword ptr [rax + 0x39]; ret; 
0x000000000047c312: dec dword ptr [rax + 0x63]; mov ebp, 0xfffffb94; mov eax, 0x14; syscall; 
0x0000000000463517: dec dword ptr [rax + 0x63]; ret; 
0x0000000000473383: dec dword ptr [rax + 0x63]; std; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x00000000004730fe: dec dword ptr [rax + 0x63]; sti; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x00000000004733ac: dec dword ptr [rax + 0x63]; sti; mov eax, 3; syscall; 
0x000000000043fd69: dec dword ptr [rax + 0xf]; add al, 0x24; add rsp, 0x18; ret; 
0x000000000046ab6b: dec dword ptr [rax + 0xf]; add dword ptr [r8 - 0x7d], ecx; ret 0x4502; 
0x000000000046b2bf: dec dword ptr [rax + 0xf]; add dword ptr [r8 - 0x7d], ecx; ret 0x8508; 
0x000000000046e499: dec dword ptr [rax + 0xf]; mov ebp, 0xf80148c6; ret; 
0x0000000000497aa7: dec dword ptr [rax + 1]; ret 0x3948; 
0x000000000041105c: dec dword ptr [rax + 1]; ret; 
0x00000000004a0b54: dec dword ptr [rax - 0x39]; add eax, 0x22cbb0; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000480bd7: dec dword ptr [rax - 0x39]; add eax, 0x24cdbd; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000045d4fc: dec dword ptr [rax - 0x39]; ret 0xffb0; 
0x00000000004121f7: dec dword ptr [rax - 0x39]; ret 0xffd0; 
0x00000000004636ce: dec dword ptr [rax - 0x39]; ret 0xfffe; 
0x000000000043f79c: dec dword ptr [rax - 0x39]; ret 0xffff; 
0x000000000045e1c6: dec dword ptr [rax - 0x39]; ret; 
0x000000000049bae1: dec dword ptr [rax - 0x46]; mov eax, 0xf; syscall; 
0x000000000043ef0a: dec dword ptr [rax - 0x73]; add al, 0x12; pop rbx; and eax, 0x7ff80000; ret; 
0x000000000041597f: dec dword ptr [rax - 0x73]; add dword ptr [rax - 0x77], ecx; or byte ptr [r15], cl; mov dh, 2; pop rbx; ret; 
0x000000000047220e: dec dword ptr [rax - 0x73]; dec dword ptr [rax + 0x39]; ret; 
0x0000000000416577: dec dword ptr [rax - 0x73]; push -0x6f995915; mov rax, -1; ret; 
0x000000000047d375: dec dword ptr [rax - 0x73]; push rbp; add dword ptr [rax + 0x39], ecx; ret 0x1272; 
0x000000000047b150: dec dword ptr [rax - 0x75]; adc byte ptr [r9 + 3], cl; add al, 0x24; mov qword ptr [rbp - 0xc8], r11; mov qword ptr [rbp - 0xa8], r10; call rax; 
0x000000000044e7ba: dec dword ptr [rax - 0x75]; add al, 0xfd; retf 0x6c; ret; 
0x0000000000440f2c: dec dword ptr [rax - 0x75]; and al, 8; mov rdi, qword ptr [rax]; mov qword ptr [rsp + 8], rax; call rbx; 
0x0000000000400b9d: dec dword ptr [rax - 0x75]; clc; mov qword ptr [rax], rdx; nop; leave; ret; 
0x0000000000410cd8: dec dword ptr [rax - 0x75]; cmp byte ptr [r8 - 0x77], cl; ret 0x2b48; 
0x0000000000464898: dec dword ptr [rax - 0x75]; cmp cl, byte ptr [rax - 0x77]; ret 0x8d4a; 
0x00000000004a0c91: dec dword ptr [rax - 0x75]; cmp ecx, dword ptr [rax - 0x75]; imul ebx, dword ptr [rax], -0x18; ret 0xf7dd; 
0x0000000000440cbd: dec dword ptr [rax - 0x75]; jge 0x40cc2; call rbx; 
0x0000000000440f70: dec dword ptr [rax - 0x75]; jge 0x40f75; call rbx; 
0x0000000000442b08: dec dword ptr [rax - 0x75]; jge 0x42b0d; call rbx; 
0x0000000000450256: dec dword ptr [rax - 0x75]; pop rax; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000041c50f: dec dword ptr [rax - 0x75]; push rax; or dh, dh; ret 0x7404; 
0x0000000000414a71: dec dword ptr [rax - 0x75]; push rbx; sub cl, ch; ret 0xfffe; 
0x000000000049a337: dec dword ptr [rax - 0x75]; push rsp; and al, 0x10; mov rax, rdx; add rsp, 0x28; ret; 
0x000000000048cb1c: dec dword ptr [rax - 0x75]; push rsp; and al, 0x18; mov rax, rdx; add rsp, 0x38; ret; 
0x000000000041ee5f: dec dword ptr [rax - 0x75]; push rsp; and al, 0x68; call rax; 
0x00000000004138ec: dec dword ptr [rax - 0x75]; sbb eax, 0; add byte ptr [rax], al; or esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000049acef: dec dword ptr [rax - 0x75]; xchg byte ptr [rax + 0x48000000], bh; add esp, 8; ret; 
0x00000000004105a7: dec dword ptr [rax - 0x75]; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul dword ptr [rcx + rcx*4 - 0x1a]; call qword ptr [rax + 0x38]; 
0x000000000048101c: dec dword ptr [rax - 0x77]; adc byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x00000000004739b5: dec dword ptr [rax - 0x77]; add al, 0x24; mov eax, 0x14; syscall; 
0x0000000000473825: dec dword ptr [rax - 0x77]; add al, 0x24; mov eax, 3; syscall; 
0x00000000004668d2: dec dword ptr [rax - 0x77]; add cl, byte ptr [rax + 1]; ret; 
0x000000000049a7d7: dec dword ptr [rax - 0x77]; add ebx, dword ptr [rax + 0x5a]; pop rbx; ret; 
0x000000000041c09b: dec dword ptr [rax - 0x77]; and al, 0x10; mov qword ptr [rsp + 8], r8; mov qword ptr [rsp], rcx; call rdx; 
0x000000000047d3bd: dec dword ptr [rax - 0x77]; call 0x5c493120; ret; 
0x00000000004273c8: dec dword ptr [rax - 0x77]; clc; ret; 
0x0000000000413703: dec dword ptr [rax - 0x77]; fisttp word ptr [rcx + rcx*4 - 0x1b]; call qword ptr [rax + 0x18]; 
0x00000000004a1095: dec dword ptr [rax - 0x77]; fucompi st(0); ret 0xf7d9; 
0x000000000049f694: dec dword ptr [rax - 0x77]; fucompi st(0); ret; 
0x000000000046d17b: dec dword ptr [rax - 0x77]; out dx, eax; call qword ptr [rax + 0x18]; 
0x0000000000410bf1: dec dword ptr [rax - 0x77]; out dx, eax; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000047393e: dec dword ptr [rax - 0x77]; ret 0x1477; 
0x000000000046691f: dec dword ptr [rax - 0x77]; ret 0x348; 
0x000000000041e801: dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000450432: dec dword ptr [rax - 0x77]; ret 0x870f; 
0x000000000045f23a: dec dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000046edd6: dec dword ptr [rax - 0x77]; ret 0x8949; 
0x00000000004661a9: dec dword ptr [rax - 0x77]; ret 0x89e9; 
0x0000000000455e67: dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000476a10: dec dword ptr [rax - 0x77]; ret 0x8be9; 
0x0000000000460a06: dec dword ptr [rax - 0x77]; ret 0xb848; 
0x00000000004651dd: dec dword ptr [rax - 0x77]; ret 0xc6e9; 
0x0000000000421cde: dec dword ptr [rax - 0x77]; ret 0xc6eb; 
0x0000000000473f03: dec dword ptr [rax - 0x77]; ret 0xf0eb; 
0x0000000000403318: dec dword ptr [rax - 0x77]; ret 0xf4e9; 
0x0000000000401eec: dec dword ptr [rax - 0x77]; ret; 
0x00000000004976e5: dec dword ptr [rax - 0x77]; retf 0x1b8; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; or al, byte ptr [rbx - 0x7cb7fe40]; ret 0x8008; 
0x0000000000480f81: dec dword ptr [rax - 0x77]; sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x000000000049f6fe: dec dword ptr [rax - 0x7b]; fisttp dword ptr [rax - 0x77]; fbstp dword ptr [rbp - 0x17]; pop rbx; ret; 
0x000000000041e85a: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; cmc; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000473af4: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; push rdx; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x000000000046a418: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; ret; 
0x0000000000447269: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; test dword ptr [rdx], 0x83480000; ret; 
0x000000000048c90d: dec dword ptr [rax - 0x7b]; sal byte ptr [rdi + rax + 0x48], 0xc7; add al, ah; retf 0x6c; add rsp, 8; ret; 
0x000000000048cb3e: dec dword ptr [rax - 0x7b]; sal byte ptr [rsp + rcx + 0x5b], 0x5d; pop r12; ret; 
0x00000000004686cb: dec dword ptr [rax - 0x7d]; clc; adc byte ptr [rax - 0x77], cl; ret 0x860f; 
0x0000000000480bba: dec dword ptr [rax - 0x7d]; clc; std; jbe 0x80bc8; ret; 
0x00000000004548e1: dec dword ptr [rax - 0x7d]; jge 0x54916; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000419b3f: dec dword ptr [rax - 0x7d]; ret 0x4007; 
0x00000000004497c2: dec dword ptr [rax - 0x7d]; ret 0x4801; 
0x00000000004797af: dec dword ptr [rax - 0x7d]; ret 0x4808; 
0x000000000047979d: dec dword ptr [rax - 0x7d]; ret 0x4810; 
0x0000000000457c44: dec dword ptr [rax - 0x7d]; ret 0x4820; 
0x0000000000472d16: dec dword ptr [rax - 0x7d]; ret 0x4909; 
0x000000000047983b: dec dword ptr [rax - 0x7d]; ret 0x8908; 
0x00000000004680c2: dec dword ptr [rax - 0x7d]; ret 0xb908; 
0x0000000000453d26: dec dword ptr [rax - 0x7d]; ret 0xe920; 
0x00000000004048dc: dec dword ptr [rax - 0x7d]; ret; 
0x0000000000400590: dec dword ptr [rax - 0x7d]; rol dword ptr [rbx + rbp*8], -0x34; mov qword ptr [rdi], rcx; ret; 
0x0000000000420ab1: dec dword ptr [rax - 0x7f]; cmp eax, dword ptr [rcx + 0x45]; je 0x205db; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000004350d0: dec dword ptr [rax - 0x7f]; ret 0x80; 
0x0000000000475560: dec dword ptr [rax - 9]; fmul dword ptr [rcx + 0x21]; ret; 
0x0000000000412453: dec dword ptr [rbp + rcx*4 + 0x1c]; add ecx, dword ptr [rax - 9]; fmul dword ptr [rcx + 0x21]; ret; 
0x000000000049853e: dec dword ptr [rbp + rcx*4 + 0x7c]; ret; 
0x00000000004840cb: dec dword ptr [rbp + rcx*4 - 0x54]; and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000049c119: dec dword ptr [rbp - 0x75]; adc cl, byte ptr [rcx + 1]; ret 0x3ee9; 
0x000000000044117e: dec dword ptr [rbp - 0x75]; push rbp; add byte ptr [rcx + 0xf], al; lahf; ret; 
0x00000000004042ef: dec dword ptr [rbp - 0x7b]; sal byte ptr [rbp - 0x30], 0x4c; mov edi, esp; mov eax, 3; syscall; 
0x0000000000471547: dec dword ptr [rbx + 0x26549205]; add byte ptr [rbp - 0x16738a40], al; imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000041be2f: dec dword ptr [rbx + 0x2af9ce15]; add dh, dh; ret 0xf02; 
0x00000000004a4203: dec dword ptr [rbx + 0x2bfff8c2]; ret; 
0x000000000048109c: dec dword ptr [rbx + 0x480c2444]; add esp, 0x38; ret; 
0x00000000004996bc: dec dword ptr [rbx + rcx*4 + 0x3d]; movsb byte ptr [rdi], byte ptr [rsi]; shl dword ptr [rbx], 1; add byte ptr [rax - 0x77], cl; ret; 
0x000000000047b6a6: dec dword ptr [rbx + rcx*4 + 5]; ret 0x251f; 
0x0000000000466f66: dec dword ptr [rcx + 0x29]; fmul dword ptr [rax - 0x77]; ret 0x348; 
0x0000000000476751: dec dword ptr [rcx + 0x29]; ret 0x8d49; 
0x0000000000456124: dec dword ptr [rcx + 0x29]; ret; 
0x0000000000475592: dec dword ptr [rcx + 0x39]; ret 0x830f; 
0x0000000000455cb1: dec dword ptr [rcx + 0x39]; ret 0x850f; 
0x000000000047aeda: dec dword ptr [rcx + 0x39]; ret 0x870f; 
0x0000000000455d33: dec dword ptr [rcx + 0x39]; ret; 
0x00000000004004c1: dec dword ptr [rcx + 0x39]; sal dword ptr [rdx + rdx*4 - 0x15], -0x43; add rsp, 0x608; pop rbx; pop rbp; ret; 
0x000000000048c7f1: dec dword ptr [rcx + 0x438b4803]; sbb byte ptr [rcx], dh; ror byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x000000000049e14c: dec dword ptr [rcx + 0x63]; add byte ptr [r8 + 1], r9b; ret; 
0x00000000004721e6: dec dword ptr [rcx + 0x6b]; ret; 
0x000000000043223e: dec dword ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000045efdc: dec dword ptr [rcx + rcx*4 - 0x16]; mov rsi, r12; mov rax, qword ptr [rcx + 0xd8]; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000045ea86: dec dword ptr [rcx + rcx*4 - 0x1a]; mov rax, qword ptr [rdi + 0xd8]; mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x00000000004500b8: dec dword ptr [rcx + rcx*4 - 0x1a]; mov rdi, r14; call 0x409b0; movsxd rdi, r15d; mov eax, 3; syscall; 
0x000000000049ead5: dec dword ptr [rcx + rcx*4 - 0x1e]; mov rdi, qword ptr [rsp]; mov rsi, qword ptr [r15 + rbp*8 + 0x10]; call rbx; 
0x000000000045ec8a: dec dword ptr [rcx + rcx*4 - 0x1e]; mov rsi, r13; mov rax, qword ptr [rcx + 0xd8]; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000045f5f6: dec dword ptr [rcx + rcx*4 - 0x1e]; mov rsi, r13; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000045705c: dec dword ptr [rcx + rcx*4 - 0x22]; mov qword ptr [rbp - 0x4f0], r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000454129: dec dword ptr [rcx + rcx*4 - 0x22]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000455d07: dec dword ptr [rcx + rcx*4 - 0x26]; mov qword ptr [rbp - 0x4f0], r11; mov dword ptr [rbp - 0x500], r9d; mov rdi, rbx; mov rsi, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x000000000044187d: dec dword ptr [rcx + rcx*4 - 1]; mov edx, 4; mov esi, 1; call rbx; 
0x000000000045dc09: dec dword ptr [rcx + rcx*4 - 2]; mov rdi, qword ptr [rbp - 0x4a0]; call rax; 
0x0000000000453989: dec dword ptr [rcx + rcx*4 - 2]; mov rdi, rbx; call rax; 
0x0000000000460635: dec dword ptr [rcx + rcx*4 - 2]; sar rax, 2; mov rdi, r14; mov rdx, rax; mov rax, qword ptr [r14 + 0xd8]; call qword ptr [rax + 0x38]; 
0x0000000000460b9d: dec dword ptr [rcx + rcx*4 - 9]; call qword ptr [rax + 0x38]; 
0x0000000000461313: dec dword ptr [rcx + rcx*4 - 9]; mov rdx, qword ptr [rbp - 0x10b8]; mov rsi, qword ptr [rbp - 0x1090]; call qword ptr [rax + 0x38]; 
0x00000000004637df: dec dword ptr [rcx - 0x60f73]; dec dword ptr [rax + 0x39]; ret 0x840f; 
0x0000000000440f7e: dec dword ptr [rcx - 0x75]; cmp al, 0x24; call rbx; 
0x0000000000440b88: dec dword ptr [rcx - 0x75]; jge 0x40b8d; call rbx; 
0x0000000000440caf: dec dword ptr [rcx - 0x75]; jge 0x40cb4; call rbx; 
0x0000000000440df2: dec dword ptr [rcx - 0x75]; jge 0x40df7; call rbx; 
0x0000000000440f62: dec dword ptr [rcx - 0x75]; jge 0x40f67; call rbx; 
0x0000000000442780: dec dword ptr [rcx - 0x75]; jge 0x42785; call rbx; 
0x00000000004428a8: dec dword ptr [rcx - 0x75]; jge 0x428ad; call rbx; 
0x00000000004429eb: dec dword ptr [rcx - 0x75]; jge 0x429f0; call rbx; 
0x0000000000442aec: dec dword ptr [rcx - 0x75]; jge 0x42af1; call rbx; 
0x0000000000496d4c: dec dword ptr [rcx - 0x77]; imul ecx; ret; 
0x0000000000446c68: dec dword ptr [rcx - 0x77]; ret 0x11e9; 
0x000000000044f4c7: dec dword ptr [rcx - 0x77]; ret 0x87e9; 
0x0000000000456f53: dec dword ptr [rcx - 0x77]; ret 0x8b4c; 
0x0000000000454923: dec dword ptr [rcx - 0x77]; ret; 
0x0000000000452e5b: dec dword ptr [rcx - 0x77]; ror byte ptr [rcx + 1], 0xd8; add rsp, 0x20; mov rax, r8; pop rbx; ret; 
0x0000000000411197: dec dword ptr [rcx - 0x77]; sbb byte ptr [r9 - 0x77], r9b; sub byte ptr [r8 + 1], r9b; ret 0x8949; 
0x000000000041ba2d: dec dword ptr [rcx - 0x7b]; ret 0x840f; 
0x0000000000458734: dec dword ptr [rcx - 0x7d]; in eax, dx; add eax, ebp; ret 0xfd45; 
0x000000000045a78f: dec dword ptr [rcx - 0xef43]; inc dword ptr [rax - 0x12743]; jmp qword ptr [rdi + 0xf]; 
0x000000000043fec9: dec dword ptr [rdi]; and eax, 0x50; add byte ptr [rax], al; ret; 
0x0000000000466c46: dec dword ptr [rdi]; lahf; ret 0xb60f; 
0x00000000004694ff: dec dword ptr [rdi]; lahf; ret 0xd729; 
0x000000000044325f: dec dword ptr [rdi]; or dword ptr [rdx + 0x1d], 0; add bl, al; nop word ptr [rax + rax]; mov eax, 0x63; syscall; 
0x00000000004409dc: dec dword ptr [rdi]; or ebp, 0x45; add byte ptr [rax], al; ret; 
0x00000000004407dc: dec dword ptr [rdi]; or ebp, 0x47; add byte ptr [rax], al; ret; 
0x00000000004409bc: dec dword ptr [rdi]; sub ebp, 0x45; add byte ptr [rax], al; ret; 
0x000000000043f4bc: dec dword ptr [rdi]; sub ebp, 0x5a; add byte ptr [rax], al; ret; 
0x0000000000458b55: dec dword ptr [rdi]; test ah, dh; adc dword ptr [rax], eax; add byte ptr [rax - 0x12743], al; jmp qword ptr [rsi + 0xf]; 
0x0000000000411111: dec dword ptr [rdi]; test al, ah; add al, byte ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x00000000004033f1: dec dword ptr [rdi]; test byte ptr [rbp + 4], ah; add byte ptr [rax], al; mov edi, 0x6cd720; call rbx; 
0x000000000046b402: dec dword ptr [rdi]; test byte ptr [rdi + rdi*8 - 1], bl; dec dword ptr [rax + 0x39]; add dword ptr [rbp + 0xf48ff78], ecx; add dword ptr [r8 - 0x7d], ecx; ret 0x8508; 
0x000000000043dff0: dec dword ptr [rdi]; test dword ptr [rsi + 1], ebp; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000047943c: dec dword ptr [rdi]; xchg eax, ebp; ret 0xdaf7; 
0x00000000004173ab: dec dword ptr [rdi]; xchg eax, ebp; sal bh, 0xd8; ret; 
0x000000000048c23e: dec dword ptr [rdi]; xchg eax, esp; ret 0xdaf7; 
0x000000000045a786: dec dword ptr [rdi]; xchg eax, esp; ret 0xfa80; 
0x000000000046841f: dec dword ptr [rdi]; xchg eax, esp; ret; 
0x000000000043f68d: dec dword ptr [rdi]; xchg esp, esi; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x000000000043fe35: dec dword ptr [rdi]; xor dword ptr [rcx + rdx*2], 0; ret; 
0x00000000004a420b: dec ebx; ret; 
0x000000000048bcad: dec ecx; ret; 
0x0000000000439fa1: dec qword ptr [r8 + 0x29]; ret 0x280f; 
0x000000000046acf6: dec qword ptr [r8 + 0xf]; add dword ptr [r8 - 0x7d], ecx; ret 0x4502; 
0x000000000046e296: dec qword ptr [rax + 0x31]; ror dword ptr [rax + 0x21], -0x32; je 0x6e3d0; bsr rsi, rsi; lea rax, qword ptr [rdi + rsi]; ret; 
0x00000000004497c1: dec qword ptr [rax - 0x7d]; ret 0x4801; 
0x0000000000476750: dec qword ptr [rcx + 0x29]; ret 0x8d49; 
0x000000000040e3a4: div byte ptr [rbp + 0x31]; mov eax, 0xba; syscall; 
0x000000000046dfa2: div byte ptr [rbp + 4]; xor rax, rax; ret; 
0x000000000049cf06: div dword ptr [rbp - 0x16]; mov qword ptr [rcx], rdx; add rsp, 8; ret; 
0x000000000048c4ec: div ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000045b045: div ecx; add eax, r8d; ret; 
0x000000000043ef71: div ecx; pop rbx; mov eax, eax; ret; 
0x00000000004a3e95: div edi; jmp qword ptr [rax - 8]; 
0x000000000046b7d6: div esi; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000004bfcf9: div esp; call qword ptr [rax]; 
0x00000000004bfd11: div esp; call qword ptr [rdx]; 
0x000000000046b7d5: div r14; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000048c4eb: div rbp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000413b41: fadd dword ptr [rax]; add byte ptr [rax], al; call qword ptr [rax + 0x20]; 
0x0000000000452f58: fadd dword ptr [rax]; add byte ptr [rax], al; call qword ptr [rax + 0x38]; 
0x000000000041317e: fadd dword ptr [rax]; add byte ptr [rax], al; call qword ptr [rax + 0x40]; 
0x0000000000413df0: fadd dword ptr [rax]; add byte ptr [rax], al; call qword ptr [rax + 0x48]; 
0x0000000000455e6e: fadd dword ptr [rax]; add byte ptr [rax], al; mov dword ptr [rbp - 0x4d8], r9d; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000049a149: fadd dword ptr [rax]; add byte ptr [rax], al; mov ecx, ebp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x0000000000415f23: fadd dword ptr [rax]; add byte ptr [rax], al; mov ecx, edx; xor edx, edx; mov rax, qword ptr [rax + 0x48]; jmp rax; 
0x000000000046be1c: fadd dword ptr [rax]; add byte ptr [rax], al; mov edx, 0x10; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000410bf8: fadd dword ptr [rax]; add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000416603: fadd dword ptr [rax]; add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x30]; 
0x00000000004137a3: fadd dword ptr [rax]; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004136fb: fadd dword ptr [rax]; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; mov rbp, r12; call qword ptr [rax + 0x18]; 
0x000000000046d3be: fadd dword ptr [rax]; add byte ptr [rax], al; mov esi, eax; mov rdi, rbx; call qword ptr [rdx + 0x30]; 
0x000000000046cb3d: fadd dword ptr [rax]; add byte ptr [rax], al; mov esi, ebx; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000415707: fadd dword ptr [rax]; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x18]; jmp rax; 
0x0000000000415c03: fadd dword ptr [rax]; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x40]; jmp rax; 
0x0000000000413165: fadd dword ptr [rax]; add byte ptr [rax], al; mov rax, qword ptr [rbp + 0xa0]; mov qword ptr [rax + 0x130], 0x4a29c0; mov rax, qword ptr [rbp + 0xd8]; call qword ptr [rax + 0x40]; 
0x0000000000415e5a: fadd dword ptr [rax]; add byte ptr [rax], al; mov rbx, rdi; mov rbp, rdx; call qword ptr [rax + 0x60]; 
0x0000000000410232: fadd dword ptr [rax]; add byte ptr [rax], al; mov rbx, rdx; mov rdi, rdx; call qword ptr [rax + 0x60]; 
0x000000000046d0fc: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000413982: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x00000000004165ad: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x0000000000415a8a: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x0000000000416eb3: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdi, rbx; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000041576f: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x00000000004158df: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x28]; jmp rax; 
0x000000000045ec94: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x0000000000454ddb: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, r12; mov rsi, r8; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000046b5b8: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000412ecc: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000453e3e: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, r13; mov rsi, qword ptr [rbp - 0x4a8]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004137fa: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, r14; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000413e99: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000045ea8d: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x000000000046b7ee: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, rbx; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x00000000004105ab: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, rbx; mov rsi, r12; call qword ptr [rax + 0x38]; 
0x00000000004564b3: fadd dword ptr [rax]; add byte ptr [rax], al; mov rsi, qword ptr [rbp - 0x4e0]; mov rdi, rbx; mov rdx, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x00000000004133ec: fadd dword ptr [rax]; add byte ptr [rax], al; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x000000000041091f: fadd dword ptr [rax]; add byte ptr [rax], al; mov rsi, r14; mov rdi, rbx; sub rdx, r14; call qword ptr [rax + 0x70]; 
0x00000000004583b3: fadd dword ptr [rax]; add byte ptr [rax], al; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000046be50: fadd dword ptr [rax]; add byte ptr [rax], al; movsxd rdx, ebx; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000415b9e: fadd dword ptr [rax]; add byte ptr [rax], al; movzx esi, byte ptr [r14]; mov rdi, r12; lea rbx, qword ptr [r14 + 1]; call qword ptr [rax + 0x18]; 
0x00000000004138f0: fadd dword ptr [rax]; add byte ptr [rax], al; or esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000415b03: fadd dword ptr [rax]; add byte ptr [rax], al; push rbx; mov rbx, rdi; call qword ptr [rax + 0x20]; 
0x000000000040fba9: fadd dword ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000046015f: fadd dword ptr [rax]; add byte ptr [rax], al; sar r15, 2; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x00000000004539fd: fadd dword ptr [rax]; add byte ptr [rax], al; sub rdx, rsi; call qword ptr [rax + 0x38]; 
0x000000000045dc86: fadd dword ptr [rax]; add byte ptr [rax], al; sub rdx, rsi; sar rdx, 2; call qword ptr [rax + 0x38]; 
0x0000000000414f61: fadd dword ptr [rax]; add byte ptr [rax], al; xor edx, edx; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x000000000040ff93: fadd dword ptr [rax]; add byte ptr [rax], al; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x00000000004434b6: fadd dword ptr [rax]; leave; ret; 
0x000000000041d4cf: fadd dword ptr [rbp - 0x78]; or al, 0x18; mov rax, r8; pop rbx; ret; 
0x0000000000412560: fadd dword ptr [rcx + rcx*4 + 0x65]; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000444e82: fadd dword ptr [rcx]; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x000000000040118f: fadd dword ptr [rcx]; add byte ptr [rbp + 0x20], sil; nop dword ptr [rax]; call qword ptr [rbx + 0x10]; 
0x00000000004ca360: fadd dword ptr [rcx]; add esi, ebp; add al, byte ptr [rax]; ret; 
0x0000000000411cc7: fadd dword ptr [rdi + rcx + 0x47]; ret; 
0x000000000048c361: fadd qword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x38b; 
0x00000000004c745c: fadd qword ptr [rbx + 0xd200000]; sti; jmp qword ptr [rbp + 0xb]; 
0x000000000043c7b0: fadd qword ptr [rcx]; add byte ptr [rax], al; test dl, 0x40; jne 0x3c770; lea rax, qword ptr [rdi + 7]; ret; 
0x00000000004beaa8: fadd st(4); std; call qword ptr [rax - 0x3b]; 
0x000000000047c14f: fadd st(6); add al, byte ptr [rax]; add rsp, 0x140; pop rbx; ret; 
0x00000000004c6d28: fadd st(7); cli; call qword ptr [rbx]; 
0x000000000049b67b: fbld dword ptr [rbx]; add byte ptr [rax], cl; mov byte ptr [rip + 0x2324d9], 8; ret; 
0x000000000042fc31: fbld dword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000046d52d: fbld dword ptr [rsi - 0x70]; mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000049f704: fbstp dword ptr [rbp - 0x17]; pop rbx; ret; 
0x000000000042fc2f: fbstp dword ptr [rdx - 0x10f09921]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000044fcce: fcom dword ptr [rax - 0x3ece49f1]; ret 0x4809; 
0x00000000004c0f98: fcom dword ptr [rax - 0xb]; jmp qword ptr [rbx]; 
0x00000000004c7968: fcom dword ptr [rdx - 5]; jmp qword ptr [rdx]; 
0x00000000004c2ac1: fcomi st(6); jmp qword ptr [rdi + 0x2b]; 
0x0000000000471787: fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; pop r14; ret; 
0x00000000004103ca: fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x00000000004104af: fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000044083f: fcomp dword ptr [rbx + 0x5d]; ret; 
0x0000000000473926: fcomp dword ptr [rbx - 0x3d]; nop dword ptr [rax]; mov ecx, 0xc; mov eax, ecx; syscall; 
0x00000000004bd099: fcomp dword ptr [rdx + 0x21]; ret; 
0x00000000004c3351: fcompi st(7); call qword ptr [rbx]; 
0x00000000004a0ac7: fcompi st(7); jmp qword ptr [rsi + 0xf]; 
0x000000000041e7ff: fcos; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000004300ff: fdiv dword ptr [rdx - 0x10f09928]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042feff: fdiv qword ptr [rdx - 0x10f09924]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004a4371: fdiv st(0), st(0); push qword ptr [rax - 0x22]; clc; inc dword ptr [rax - 0x20]; clc; jmp qword ptr [rax]; 
0x0000000000440df0: fdiv st(5), st(0); dec dword ptr [rcx - 0x75]; jge 0x40df7; call rbx; 
0x00000000004c20c1: fdiv st(5); jmp qword ptr [rdi + 3]; 
0x00000000004a4375: fdivp st(0); inc dword ptr [rax - 0x20]; clc; jmp qword ptr [rax]; 
0x00000000004a4271: fdivp st(0); jmp qword ptr [rax]; 
0x00000000004a42b1: fdivp st(0); jmp rax; 
0x0000000000440b86: fdivp st(5); dec dword ptr [rcx - 0x75]; jge 0x40b8d; call rbx; 
0x000000000047e911: fdivr dword ptr [rax + 0x4b]; add al, ch; clc; jmp qword ptr [rsi + 0xf]; 
0x0000000000473918: fdivr dword ptr [rbx - 1]; mov dword ptr fs:[rdx], eax; add rsp, 0x30; mov eax, ebx; pop rbx; ret; 
0x00000000004a4405: fdivr st(0); call qword ptr [rax - 0x27]; 
0x00000000004c4fe1: fdivr st(0); call qword ptr [rax]; 
0x00000000004c4fc9: fdivr st(0); call qword ptr [rbx]; 
0x00000000004c4ff9: fdivr st(0); call qword ptr [rdx]; 
0x00000000004ba655: fdivr st(4); test al, 0x97; xchg eax, esp; ret; 
0x00000000004bef6d: fdivr st(5); ljmp ptr [rdi + rdx*8 - 3]; inc dword ptr [rdi + rdx*8]; std; call rsp; 
0x00000000004c32d1: fdivr st(7), st(0); call qword ptr [rbx + 3]; 
0x00000000004874f7: fdivr st(7); jmp qword ptr [rsi + 0xf]; 
0x000000000043e168: fdivr st(7); ret; 
0x000000000043c912: fiadd dword ptr [rax]; add byte ptr [rax], al; test ah, 0x40; jne 0x3ca00; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000044004a: fiadd dword ptr [rbx + 0x210247c]; cmove eax, edx; add rsp, 0x60; pop rbx; ret; 
0x000000000043ffa2: fiadd dword ptr [rbx + 0x2a8247c]; cmove eax, edx; ret; 
0x000000000046cbc4: fiadd dword ptr [rbx + 0x394803e2]; ret 0xf48; 
0x000000000047c067: fiadd word ptr [rcx + rcx*4 - 0x19]; pop rbx; pop rbp; pop r12; pop r13; jmp rax; 
0x0000000000441339: ficomp word ptr [rbx + 0x31]; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x00000000004bcee6: ficomp word ptr [rdx - 0x19]; cmc; mov ch, 0xab; ret; 
0x000000000043fe42: fidiv dword ptr [rax + rax]; add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 2; syscall; 
0x000000000042ffff: fidiv dword ptr [rdx - 0x10f09926]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042fcff: fidiv word ptr [rdx - 0x10f09922]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000444d95: fidivr dword ptr [rax + 1]; ret; 
0x000000000047e56e: fidivr word ptr [rcx]; clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000043eb8f: fild dword ptr [rcx + 0xf]; xchg eax, esp; ret 0xfe83; 
0x000000000049cddb: fild word ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + rsi*4 + 0x48], dh; add esp, 0x18; ret; 
0x00000000004012da: fild word ptr [rax]; add byte ptr [rcx], bh; ret 0x860f; 
0x00000000004004a4: fild word ptr [rcx + rcx*4 - 0x30]; syscall; 
0x0000000000482f95: fimul dword ptr [rax + 0x39]; ret 0xf48; 
0x000000000046e155: fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x0000000000413025: fimul dword ptr [rax - 0x77]; out dx, al; mov eax, r13d; syscall; 
0x000000000046b7f4: fimul dword ptr [rax - 0x77]; out dx, eax; call qword ptr [rax + 0x38]; 
0x0000000000411100: fimul dword ptr [rax - 0x77]; ror dword ptr [rax + 0x29], cl; ret; 
0x00000000004055d8: fimul dword ptr [rax - 0x7d]; ret; 
0x00000000004273f2: fimul dword ptr [rax - 9]; ret 0xfff8; 
0x000000000044091c: fimul dword ptr [rcx + rcx*4 - 0x12]; mov rdi, r12; mov eax, 9; syscall; 
0x00000000004105b1: fimul dword ptr [rcx + rcx*4 - 0x1a]; call qword ptr [rax + 0x38]; 
0x00000000004a480c: fimul dword ptr [rcx + rdi*8]; ljmp ptr [rdx + 0xc]; stc; call qword ptr [rax]; 
0x000000000049db28: fimul dword ptr [rdi]; mov dh, 1; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004322c1: fimul word ptr [r9 + r9*4 + 0x57]; out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004837b2: fimul word ptr [rax + 0x29]; ret; 
0x00000000004122ee: fimul word ptr [rax - 0x77]; ret; 
0x000000000047bd0a: fimul word ptr [rax - 0x7d]; ret; 
0x000000000044dbe5: fimul word ptr [rcx + 0xf082444]; mov bh, 0x43; add al, 0x29; ret 0x8941; 
0x000000000040f1ad: fimul word ptr [rcx + rax - 0x18]; mov rdx, qword ptr [rax + 0x18]; mov rdi, qword ptr [rax + 0x20]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x00000000004322c2: fimul word ptr [rcx + rcx*4 + 0x57]; out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000046cb42: fimul word ptr [rcx + rcx*4 - 0x11]; call qword ptr [rax + 0x18]; 
0x000000000041213f: fimul word ptr [rcx + rcx*4 - 0x19]; mov eax, r9d; syscall; 
0x00000000004a1093: fincstp; dec dword ptr [rax - 0x77]; fucompi st(0); ret 0xf7d9; 
0x00000000004003d4: fistp qword ptr [rax + 1]; syscall; 
0x0000000000416eb9: fistp qword ptr [rsi - 1]; call qword ptr [rax + 0x18]; 
0x0000000000411669: fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000415775: fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x20]; jmp rax; 
0x00000000004158e5: fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x28]; jmp rax; 
0x0000000000418028: fisttp dword ptr [rax + 0x21]; ret; 
0x0000000000470c02: fisttp dword ptr [rax + 0xf]; fucompp; ret 0xfffe; 
0x000000000049f701: fisttp dword ptr [rax - 0x77]; fbstp dword ptr [rbp - 0x17]; pop rbx; ret; 
0x000000000044e280: fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x000000000047ccd9: fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000048ae81: fisttp dword ptr [rax - 0x77]; ret; 
0x000000000049f86d: fisttp dword ptr [rax - 0x77]; sbb eax, 0x22dd0b; jne 0x9f858; pop rbx; ret; 
0x000000000049c0a0: fisttp dword ptr [rbx + 0x63]; add al, 0x98; add rax, r8; jmp rax; 
0x000000000043ee96: fisttp dword ptr [rcx + 0x6e8c1c8]; and eax, 0x3fffc00; pop rbx; ret; 
0x000000000048ae9b: fisttp dword ptr [rcx - 0x77]; ret 0x8b4a; 
0x0000000000441819: fisttp dword ptr [rdx]; add byte ptr [rax], al; xor esi, esi; mov rdi, r13; call rbx; 
0x00000000004324a1: fisttp qword ptr [r9 + r9*4 + 0x57]; in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000041ee8e: fisttp qword ptr [rax + 0x39]; ret 0x860f; 
0x00000000004324a2: fisttp qword ptr [rcx + rcx*4 + 0x57]; in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004320f1: fisttp word ptr [r9 + r9*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004321ed: fisttp word ptr [r9 + r9*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000432139: fisttp word ptr [r9 + r9*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000041d2a0: fisttp word ptr [rax + 9]; ret 0x8948; 
0x000000000049a011: fisttp word ptr [rax - 0x75]; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000004539f9: fisttp word ptr [rax - 0x75]; sbb eax, 0; add byte ptr [rax], al; sub rdx, rsi; call qword ptr [rax + 0x38]; 
0x0000000000440a69: fisttp word ptr [rax - 0x77]; call 0x5c4567cc; mov esi, 2; jmp rax; 
0x000000000048af1f: fisttp word ptr [rax]; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000040f185: fisttp word ptr [rcx + rax - 0x18]; mov rdx, qword ptr [rax + 0x18]; mov rsi, qword ptr [rax + 0x20]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000410928: fisttp word ptr [rcx + rbp - 0xe]; call qword ptr [rax + 0x70]; 
0x00000000004320f2: fisttp word ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004321ee: fisttp word ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000043213a: fisttp word ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000413706: fisttp word ptr [rcx + rcx*4 - 0x1b]; call qword ptr [rax + 0x18]; 
0x000000000042be9d: fisttp word ptr [rip - 0x7cb80000]; ret 0x4910; 
0x0000000000450550: fisub dword ptr [rcx + rcx*4 + 0x10]; mov eax, 0xffffffff; add rsp, 0xd0; ret; 
0x0000000000430001: fisub dword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043c74f: fisub dword ptr [rsi + 0xf]; xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x000000000042fd01: fisub word ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000047f572: fisubr dword ptr [rcx]; clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000045b932: fisubr dword ptr [rdx]; sti; jmp qword ptr [rsi + 0x2e]; 
0x000000000043c791: fisubr word ptr [rax - 0x297af0f0]; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x00000000004333ec: fisubr word ptr [rcx]; ret 0xfec5; 
0x0000000000497712: fld qword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000004bb341: fld qword ptr [rsi + 0x32]; mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x000000000048c08a: fld xword ptr [rsp - 0x18]; ret; 
0x000000000048c529: fldcw word ptr [rax + rax + 0x48]; add esp, 8; ret; 
0x000000000048c8f5: fldcw word ptr [rax + rax - 0x17]; ret; 
0x00000000004bd071: fldcw word ptr [rcx - 0x7f58d21b]; mov dh, 0xdd; in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x0000000000431473: fldcw word ptr [rip + 0x63490007]; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000450289: fldcw word ptr [rsp - 2]; ret; 
0x000000000049b682: fldenv dword ptr [rbx]; add byte ptr [rax], cl; ret; 
0x0000000000426a19: fldenv dword ptr [rsi + 0xf]; je 0x26a6d; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x000000000042d847: fldenv dword ptr [rsi + 0xf]; je 0x2d89b; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x0000000000430081: fldenv dword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000426911: fldenv dword ptr [rsi + 0xf]; xlatb; ret; 
0x00000000004159dd: fldenv dword ptr [rsi - 0x70]; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000400481: fldenv dword ptr [rsp + rax*2 - 0x77]; or byte ptr [rcx + rcx*4 - 0x39], cl; mov eax, 3; syscall; 
0x000000000048a2fd: fldpi; adc r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000048bd3d: fldpi; sbb r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000048be84: fmul dword ptr [rax + 0x11]; rcr byte ptr [rbp + 0x5b], 1; ret; 
0x0000000000498721: fmul dword ptr [rax + 0x39]; ret 0x4976; 
0x0000000000498a46: fmul dword ptr [rax + 0x39]; ret 0x860f; 
0x00000000004197cf: fmul dword ptr [rax + 0x39]; ret; 
0x0000000000459351: fmul dword ptr [rax - 0x39]; ret 0xfff0; 
0x00000000004879e7: fmul dword ptr [rax - 0x39]; ret; 
0x0000000000466f69: fmul dword ptr [rax - 0x77]; ret 0x348; 
0x0000000000411dc1: fmul dword ptr [rax - 0x77]; ret; 
0x00000000004723ec: fmul dword ptr [rax - 0x7d]; ret; 
0x000000000041245a: fmul dword ptr [rcx + 0x21]; ret; 
0x000000000049b34d: fmul dword ptr [rcx + 9]; ret 0x65e9; 
0x000000000049b5e5: fmul dword ptr [rcx + 9]; ret 0x85e9; 
0x000000000049d15f: fmul dword ptr [rcx + rcx*4 - 0x17]; mov rdx, qword ptr [r13]; mov esi, 1; mov edi, 1; call rax; 
0x000000000049cb31: fmul dword ptr [rcx + rcx*4 - 0x1f]; or esi, 2; mov rdx, qword ptr [r12]; mov edi, 1; call rax; 
0x0000000000432691: fmul qword ptr [r9 + r9*4 + 0x57]; in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000040ff0f: fmul qword ptr [rax - 0x73]; call 0x415d4073; pop rbp; pop rbp; ret; 
0x00000000004c3c5c: fmul qword ptr [rbx]; add byte ptr [rax + 0x1b], al; clc; call qword ptr [rsi + 0xb]; 
0x00000000004836b7: fmul qword ptr [rcx + 0x19]; ret 0x8545; 
0x0000000000482d3c: fmul qword ptr [rcx + 0xf]; mov esi, 0xbe0f2414; ret 0x8349; 
0x0000000000432692: fmul qword ptr [rcx + rcx*4 + 0x57]; in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004221b9: fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x0000000000427c6f: fmul qword ptr [rcx - 0x7d]; ret 0xf10; 
0x00000000004878e2: fmul st(0); ret; 
0x0000000000487860: fmulp st(1); ret; 
0x000000000042fdff: fnsave dword ptr [rdx - 0x10f09923]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043007f: fnstenv dword ptr [rdx - 0x10f09927]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004003c7: fnstsw dword ptr [rdx + 0x1d]; mov esi, 0x4a2a68; mov rdi, rbx; mov eax, 1; syscall; 
0x000000000040e375: fpatan; ret; 
0x000000000049f872: frstor dword ptr [rdx]; add byte ptr [rbp - 0x1f], dh; pop rbx; ret; 
0x000000000042fe01: frstor dword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004bb027: fstp dword ptr [rbx + 0x4a315a58]; ret 0x1b49; 
0x00000000004bb3a0: fstp st(0); ret 0xde5d; 
0x0000000000401d7a: fstp st(0); scasb al, byte ptr [rdi]; insb byte ptr [rdi], dx; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000046be49: fstp xword ptr [rsi - 0x15]; mov rax, qword ptr [r12 + 0xd8]; movsxd rdx, ebx; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000412ddf: fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000040e3f8: fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000442ed4: fsub dword ptr [rcx + rcx*4 + 2]; mov ebx, 2; mov esi, 0x80000; mov edi, 0x4a58c8; mov eax, ebx; syscall; 
0x000000000041363e: fsub dword ptr [rcx + rcx*4 + 2]; mov rax, -1; ret; 
0x0000000000400424: fsub dword ptr [rcx + rcx*4 + 2]; xor esi, esi; mov edi, 0x4a2aa4; mov eax, 2; syscall; 
0x0000000000444fb2: fsub dword ptr [rcx + rcx*4 + 4]; and eax, 0xffffffd0; or rax, 0xffffffffffffffff; ret; 
0x0000000000430101: fsub dword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000438cd4: fsub dword ptr [rsi + 0xf]; xlatb; ret; 
0x0000000000496982: fsub qword ptr [rcx + rcx*4 + 4]; and eax, 0x2d0; ret; 
0x000000000042ff01: fsub qword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000421f4c: fsub qword ptr [rsi + 0xf]; xlatb; ret; 
0x00000000004426db: fsubp st(0); mov edi, 0x49ffffe3; mov edi, dword ptr [rdi]; call rbx; 
0x0000000000441f68: fsubp st(0); movabs byte ptr [0x4baffffea], al; mov esi, 2; mov rdi, r15; call rbx; 
0x0000000000442148: fsubp st(0); ret 0xffe8; 
0x0000000000442048: fsubp st(0); ret 0xffe9; 
0x000000000044ffdd: fsubr dword ptr [rax + rax - 0x42]; add byte ptr [rax], al; or byte ptr [rax], al; mov edi, 0x4a7820; mov eax, ecx; syscall; 
0x0000000000401d7b: fsubr dword ptr [rsi - 0x7cb7ff94]; ret; 
0x00000000004c9b5c: fsubr qword ptr [rdx + 0x35a00000]; std; call qword ptr [rcx + 1]; 
0x00000000004005cd: fsubr st(2), st(0); add byte ptr [r9 + 0xe], dil; mov rsi, rax; repe cmpsb byte ptr [rsi], byte ptr [rdi]; jne 0x5de; ret; 
0x0000000000498ec5: fucomi st(1); ret; 
0x000000000048c35e: fucompi st(0); fadd qword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x38b; 
0x0000000000415cff: fucompi st(0); mov ebx, 0x85ffffee; sal byte ptr [rbp + 0x30], 0x48; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x00000000004a1098: fucompi st(0); ret 0xf7d9; 
0x000000000049f377: fucompi st(0); ret; 
0x00000000004018bf: fucompi st(0); retf; idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x0000000000446462: fucompi st(3); ret; 
0x0000000000470c06: fucompp; ret 0xfffe; 
0x000000000048109a: fyl2xp1; dec dword ptr [rbx + 0x480c2444]; add esp, 0x38; ret; 
0x0000000000458b58: hlt; adc dword ptr [rax], eax; add byte ptr [rax - 0x12743], al; jmp qword ptr [rsi + 0xf]; 
0x000000000043f690: hlt; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x000000000044313b: hlt; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x00000000004bf71a: hlt; call qword ptr [rax]; 
0x00000000004bf5a2: hlt; call qword ptr [rbp + 9]; 
0x00000000004bfc42: hlt; call qword ptr [rbx]; 
0x00000000004bf53a: hlt; call qword ptr [rdx]; 
0x00000000004bf2b2: hlt; call rdi; 
0x00000000004bf38a: hlt; jmp qword ptr [rbx]; 
0x00000000004bf292: hlt; jmp qword ptr [rdi]; 
0x000000000043553a: hlt; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043269e: hlt; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043bd58: hlt; mov eax, dword ptr [rsi]; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000435533: hlt; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004327f7: hlt; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432813: hlt; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043f4ff: hlt; mov rdi, rdx; mov eax, r8d; syscall; 
0x000000000043dc73: hlt; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x0000000000415e55: hlt; push rbx; mov rax, qword ptr [rdi + 0xd8]; mov rbx, rdi; mov rbp, rdx; call qword ptr [rax + 0x60]; 
0x00000000004c0a11: hlt; ret; 
0x000000000043dc77: hlt; sub eax, edx; ret; 
0x00000000004c9974: hlt; test al, 0; add byte ptr [rax + 0x32], cl; std; call rsp; 
0x00000000004423af: idiv bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000407beb: idiv bh; jmp qword ptr [rsi - 0x70]; 
0x00000000004c269a: idiv bh; ret; 
0x000000000043f64d: idiv byte ptr [rax + 2]; syscall; 
0x000000000049f632: idiv byte ptr [rax]; test rax, rax; je 0x9f644; mov edi, 0x6cc100; call rax; 
0x00000000004bb337: idiv byte ptr [rbx]; jbe 0xbb36e; movabs byte ptr [0x3246dddda441cb9e], al; mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x0000000000400429: idiv byte ptr [rdi + 0x4a2aa4]; mov eax, 2; syscall; 
0x000000000044d6af: idiv byte ptr [rdi + 0x4a6d28]; mov eax, ecx; syscall; 
0x0000000000401e36: idiv byte ptr [rdi + 1]; call rax; 
0x00000000004477e6: idiv byte ptr [rdx - 1]; cmovs eax, edx; ret; 
0x000000000048c37f: idiv byte ptr [rsi + 0xe]; test ah, 0x80; je 0x8c440; mov rax, rdx; pop rbx; ret; 
0x0000000000410cd6: idiv dh; dec dword ptr [rax - 0x75]; cmp byte ptr [r8 - 0x77], cl; ret 0x2b48; 
0x000000000045bc16: idiv di; jmp qword ptr [rsi + 0xf]; 
0x00000000004a1c6c: idiv edi; add byte ptr [rax], al; sub rsp, 8; add rsp, 8; ret; 
0x000000000049e14a: idiv edi; dec dword ptr [rcx + 0x63]; add byte ptr [r8 + 1], r9b; ret; 
0x000000000049c5cf: idiv edi; dec dword ptr [rcx - 0x77]; ret; 
0x00000000004018c2: idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x000000000041acc4: idiv edi; jmp qword ptr [rsi + 0xf]; 
0x00000000004a3ebe: idiv edi; jo 0xa3ec2; clc; inc dword ptr [rax + 1]; clc; call qword ptr [rax]; 
0x000000000049acee: idiv edi; mov rax, qword ptr [rsi + 0xb8]; add rsp, 8; ret; 
0x00000000004a3eba: idiv edi; movabs al, byte ptr [0x40fff80070fff7ff]; add eax, edi; call qword ptr [rax]; 
0x000000000049d778: idiv edi; nop word ptr [rax + rax]; mov eax, 4; add rsp, 8; ret; 
0x00000000004a3e92: idiv edi; nop; div edi; jmp qword ptr [rax - 8]; 
0x00000000004a3eb6: idiv edi; sar dh, 1; idiv edi; movabs al, byte ptr [0x40fff80070fff7ff]; add eax, edi; call qword ptr [rax]; 
0x000000000044236a: idiv edi; shr ecx, cl; imul edi, ecx, -1; jmp qword ptr [rsi + 0xf]; 
0x00000000004423aa: idiv edi; shr ecx, cl; lodsd eax, dword ptr [rsi]; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000049f6fd: idiv edi; test rbx, rbx; mov rdi, rbx; jne 0x9f6f0; pop rbx; ret; 
0x0000000000416477: imul al; sbb dword ptr [rbx - 0x7cb70042], -0x3c; sub byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004c5bbd: imul eax, dword ptr [rax], 0; add byte ptr [rbp - 6], ah; call qword ptr [rsi]; 
0x00000000004c5a45: imul eax, dword ptr [rax], 0xfa61b800; jmp qword ptr [rdi + 1]; 
0x000000000044bfbd: imul eax, dword ptr [rcx], 0; add byte ptr [rax + 0x29], cl; ret 0xe183; 
0x000000000043c7d1: imul eax, dword ptr [rcx], 0; add dh, dh; ret 0x7502; 
0x0000000000447e9b: imul eax, dword ptr [rdx], 0; add byte ptr [rcx], dh; ror byte ptr [rcx + 0x39], cl; ret 0x2876; 
0x00000000004365ea: imul eax, dword ptr [rip + 0x487c5162], 0x62067111; push rcx; jl 0x3663f; adc dword ptr [rcx + 7], edi; ret; 
0x0000000000440ded: imul eax; insd dword ptr [rdi], dx; fdiv st(5), st(0); dec dword ptr [rcx - 0x75]; jge 0x40df7; call rbx; 
0x0000000000442ae7: imul eax; jae 0x42aaa; std; dec dword ptr [rcx - 0x75]; jge 0x42af1; call rbx; 
0x00000000004429e6: imul eax; je 0x429aa; std; dec dword ptr [rcx - 0x75]; jge 0x429f0; call rbx; 
0x0000000000440caa: imul eax; mov al, 0xdd; std; dec dword ptr [rcx - 0x75]; jge 0x40cb4; call rbx; 
0x00000000004428a3: imul eax; mov bh, 0xc1; std; dec dword ptr [rcx - 0x75]; jge 0x428ad; call rbx; 
0x0000000000473f38: imul eax; ret 0xfff8; 
0x0000000000440b83: imul eax; xlatb; fdivp st(5); dec dword ptr [rcx - 0x75]; jge 0x40b8d; call rbx; 
0x000000000043fe83: imul ebp, dword ptr [rcx], 0x14750000; mov eax, 0; syscall; 
0x000000000043fee3: imul ebp, dword ptr [rcx], 0x14750000; mov eax, 1; syscall; 
0x000000000043fe23: imul ebp, dword ptr [rcx], 0x14750000; mov eax, 2; syscall; 
0x0000000000426b87: imul ebp, dword ptr [rdx], 0; add byte ptr [rax], al; or byte ptr [rax], al; je 0x26b98; lea rax, qword ptr [rip + 0x8449]; ret; 
0x0000000000426b73: imul ebp, dword ptr [rdx], 0; add byte ptr [rdx], al; add byte ptr [rax], al; jne 0x26b84; lea rax, qword ptr [rip + 0x1d]; ret; 
0x00000000004a0c97: imul ebx, dword ptr [rax], -0x18; ret 0xf7dd; 
0x00000000004a108f: imul ebx, dword ptr [rax], -0x18; retf 0xf7d9; dec dword ptr [rax - 0x77]; fucompi st(0); ret 0xf7d9; 
0x0000000000417b72: imul ebx, dword ptr [rax], -0x70; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000413cd4: imul ecx, dword ptr [rax + 0x63], -0x2f; mov eax, 2; syscall; 
0x0000000000478176: imul ecx, dword ptr [rbx], 0xf89dd2e8; jmp qword ptr [rsi - 0x70]; 
0x0000000000449dfa: imul ecx, dword ptr [rdx], 0xfb814ee8; jmp qword ptr [rsi + 0xf]; 
0x000000000043bce1: imul ecx, dword ptr [rsi + rax + 0xc634900], -0x6d; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000496d4f: imul ecx; ret; 
0x0000000000436483: imul edi, ebp, 0x487c5162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000436249: imul edi, ebp, 0x487cd162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000048c17f: imul edi, ebp, 0xc48148ff; lock add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000004424ee: imul edi, ebx, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000044236e: imul edi, ecx, -1; jmp qword ptr [rsi + 0xf]; 
0x00000000004409a2: imul edi, edi, -1; jmp qword ptr [rsi + 0x2e]; 
0x0000000000471553: imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000044250e: imul edi, edx, -1; jmp qword ptr [rsi + 0xf]; 
0x0000000000481705: imul edx, dword ptr [rdx + 0x42e8004b], 8; clc; jmp qword ptr [rsi - 0x70]; 
0x0000000000430de3: imul esi, dword ptr [rdi + rax], 0x14634900; xchg eax, ebx; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004350e1: imul esi, ebp, 6; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000046fde4: imul esi, esi, 0x3c; add eax, esi; ret; 
0x000000000045d34b: imul esp, dword ptr [rax], 0xffff67e9; jmp qword ptr [rsi + 0xf]; 
0x000000000043bc4c: imul esp, dword ptr [rsi + 0xf], 0x74; ret 0xff3; 
0x000000000048c17e: imul r15, rbp, -0x3b7eb701; lock add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000004c0d64: in al, 0x1c; add byte ptr [rax], al; mov byte ptr [rcx - 0xb], cl; jmp qword ptr [rcx]; 
0x0000000000470fd4: in al, 0x4b; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000432696: in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004040a6: in al, 0x4c; mov edi, esp; mov eax, 3; syscall; 
0x00000000004c4964: in al, 0x58; add byte ptr [rax], al; js 0xc4901; clc; jmp rbx; 
0x000000000040f152: in al, 0x74; and byte ptr [rax + 0x4bf038], bh; cmp rax, 0x4bf040; jae 0xf175; mov rbp, rax; call qword ptr [rbp]; 
0x00000000004242cc: in al, 0x74; or dword ptr [rax - 1], ecx; ret 0xc148; 
0x000000000043ec08: in al, 0x75; adc byte ptr [rbx - 0x6bf0fd06], al; ret 0x8444; 
0x0000000000478dd2: in al, 0x75; or byte ptr [rbp + 0x7b850fc0], al; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004c7964: in al, 0x88; add byte ptr [rax], al; fcom dword ptr [rdx - 5]; jmp qword ptr [rdx]; 
0x000000000046bf01: in al, 0x89; or ecx, dword ptr [rcx + rcx*4 - 0x1a]; cmovne rbp, rdx; mov rdi, rbx; mov rdx, rbp; call qword ptr [rax + 0x58]; 
0x0000000000400cc8: in al, 0xd6; sub al, 0; nop; leave; ret; 
0x000000000043551a: in al, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000042725b: in al, 0xf3; ret; 
0x00000000004a4381: in al, 0xf8; jmp rax; 
0x000000000046890a: in al, 0xf; lahf; ret 0x2941; 
0x00000000004586c8: in al, 0xf; test byte ptr [rcx - 0x77000000], dh; ret 0xe283; 
0x000000000041ff15: in al, 0xf; xchg eax, esp; ret 0x8548; 
0x00000000004548df: in al, 0xff; dec dword ptr [rax - 0x7d]; jge 0x54916; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000045222e: in al, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x000000000045fc47: in al, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000004c056c: in al, dx; adc al, 0; add byte ptr [rax + 0x20], dh; cmc; jmp qword ptr [rsi]; 
0x0000000000401e2e: in al, dx; adc byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx + 0x31], 0xf6; mov edi, 1; call rax; 
0x0000000000470a04: in al, dx; add byte ptr [rax], 0; add al, ch; ret 0xfd28; 
0x0000000000410133: in al, dx; add byte ptr [rax], 0; add al, ch; ret; 
0x000000000047d2c5: in al, dx; add byte ptr [rax], dl; add byte ptr [rax], al; mov rsi, rsp; syscall; 
0x000000000045c8e0: in al, dx; add dword ptr [rdi], ecx; test bl, dl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000423b80: in al, dx; add eax, 0x83480000; ret 0xeb10; 
0x000000000049d774: in al, dx; call 0xe410; nop word ptr [rax + rax]; mov eax, 4; add rsp, 8; ret; 
0x000000000048c089: in al, dx; fld xword ptr [rsp - 0x18]; ret; 
0x00000000004c616c: in al, dx; jo 0xc616f; add byte ptr [rax + 0x78], dh; cli; call qword ptr [rcx]; 
0x0000000000435910: in al, dx; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004433a3: in al, dx; mov eax, r11d; and eax, 0xc; cmp eax, 4; je 0x433b0; ret; 
0x0000000000442db4: in al, dx; mov qword ptr [rbp - 0x48], r12; mov qword ptr [rbp - 0x40], r12; syscall; 
0x000000000043269a: in al, dx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043591a: in al, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000442e63: in al, dx; movsxd rdi, dword ptr [rbp - 0x58]; mov eax, 3; syscall; 
0x000000000046ddd7: in al, dx; or al, ch; ret 1; 
0x0000000000479d9a: in al, dx; or bh, bh; adc eax, 0x2523e6; xor eax, eax; add rsp, 8; ret; 
0x000000000041d507: in al, dx; or byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x000000000049ab52: in al, dx; or byte ptr [rax - 0x80], al; call qword ptr [rax + 0x49]; 
0x0000000000442770: in al, dx; ret 0xfffd; 
0x00000000004beb4c: in al, dx; ret; 
0x0000000000403cfd: in al, dx; test rax, rax; je 0x3d0b; mov edi, 0x6cd0a0; call rax; 
0x000000000049f575: in al, dx; test rax, rax; je 0x9f583; mov edi, 0x6cc100; call rax; 
0x00000000004c786c: in al, dx; xchg dword ptr [rax], eax; add byte ptr [rax], ah; push rax; sti; jmp qword ptr [rdx]; 
0x000000000040191a: in eax, 0; add byte ptr [rax], al; add rsp, 0x98; ret; 
0x0000000000426a27: in eax, 0; add byte ptr [rax], al; pmovmskb eax, xmm1; bsf eax, eax; lea rax, qword ptr [rdi + rax + 0x30]; ret; 
0x000000000043f718: in eax, 0; add byte ptr [rax], al; syscall; 
0x00000000004bb1c3: in eax, 0x24; outsd dx, dword ptr es:[rsi]; ret 0x5ae4; 
0x00000000004bd073: in eax, 0x2d; cmpsd dword ptr [rsi], dword ptr [rdi]; xor byte ptr [rsi + 0x4ce2e5dd], 0x67; add ch, byte ptr [rbp + rbp*2 + 0x5b]; ret 0x6f9; 
0x000000000042731a: in eax, 0x48; mov eax, edi; ret; 
0x0000000000452d52: in eax, 0x48; mov eax, esi; ret; 
0x00000000004324a6: in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004ba459: in eax, 0x6a; mov eax, 0x45155e93; ret 0x591c; 
0x0000000000481217: in eax, 0xb6; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x38]; add rsp, 0x68; ret; 
0x00000000004bd079: in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x000000000045222b: in eax, 0xe9; xchg eax, esp; in al, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x0000000000442db0: in eax, 0xf0; add r12, r13; mov qword ptr [rbp - 0x48], r12; mov qword ptr [rbp - 0x40], r12; syscall; 
0x000000000043559a: in eax, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000042cd7a: in eax, 0xf3; ret; 
0x00000000004a4261: in eax, 0xf8; call rax; 
0x00000000004a42c1: in eax, 0xf8; jmp qword ptr [rax - 0x19]; 
0x00000000004a4385: in eax, 0xf8; jmp rax; 
0x000000000046f043: in eax, 0xf; je 0x6f060; add rax, 2; ret; 
0x000000000049a7d5: in eax, 0xfd; dec dword ptr [rax - 0x77]; add ebx, dword ptr [rax + 0x5a]; pop rbx; ret; 
0x000000000045fbc3: in eax, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x000000000045fb47: in eax, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000004bc541: in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x0000000000405d89: in eax, 1; add byte ptr [rax + 0x29], cl; ret; 
0x00000000004409bf: in eax, dx; add byte ptr [r8], r8b; ret; 
0x0000000000400d1b: in eax, dx; add byte ptr [rax], al; nop; pop rbp; ret; 
0x0000000000458737: in eax, dx; add eax, ebp; ret 0xfd45; 
0x000000000049acea: in eax, dx; call 0xe410; mov rax, qword ptr [rsi + 0xb8]; add rsp, 8; ret; 
0x00000000004be425: in eax, dx; cld; push qword ptr [rax + 0xfffcef]; cld; call qword ptr [rax - 0xc]; 
0x00000000004404d7: in eax, dx; je 0x404e6; movsxd rdi, dword ptr [rsp + 0x10]; mov eax, 3; syscall; 
0x00000000004583ad: in eax, dx; jle 0x583cb; mov rax, qword ptr [rbx + 0xd8]; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004629ad: in eax, dx; jle 0x629cb; mov rax, qword ptr [rbx + 0xd8]; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000049f74f: in eax, dx; jne 0x9f728; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000435990: in eax, dx; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043e492: in eax, dx; lea rax, qword ptr [rcx - 1]; ret; 
0x00000000004324aa: in eax, dx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000045a606: in eax, dx; mov rax, qword ptr [rax + 0x38]; mov rdx, rcx; mov qword ptr [rbp - 0xb8], rcx; mov rdi, rbx; call rax; 
0x0000000000481336: in eax, dx; mov rdi, qword ptr [rsp + 0x18]; call 0x1ea60; add rsp, 0x48; ret; 
0x000000000043599a: in eax, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000490950: in eax, dx; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000048a62b: in eax, dx; or byte ptr [rbp + 0x39], cl; sal dword ptr [rbp + rsi*2 + 0x4c], -0x77; ret 0xf749; 
0x000000000043f4bf: in eax, dx; pop rdx; add byte ptr [rax], al; ret; 
0x000000000043e272: in eax, dx; ret; 
0x000000000043e5e2: in eax, dx; sub rax, 1; ret; 
0x000000000043c2df: in eax, dx; xchg byte ptr [rsi], al; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000049d7f5: in eax, dx; xor eax, eax; add rsp, 8; ret; 
0x000000000044e066: inc byte ptr [rbx]; je 0x4e070; pop rbx; ret; 
0x00000000004a4637: inc dword ptr [rax + 0x19]; stc; call rax; 
0x00000000004a4637: inc dword ptr [rax + 0x19]; stc; call rax; sbb cl, bh; jmp qword ptr [rax + 0x18]; 
0x00000000004a441f: inc dword ptr [rax + 0x1c]; stc; call rax; 
0x00000000004a441f: inc dword ptr [rax + 0x1c]; stc; call rax; sbb edi, ecx; jmp qword ptr [rax + 0x1b]; 
0x00000000004a4013: inc dword ptr [rax + 0x3d]; clc; call qword ptr [rax + 0x3f]; 
0x00000000004a4013: inc dword ptr [rax + 0x3d]; clc; call qword ptr [rax + 0x3f]; clc; jmp qword ptr [rax + 0x41]; 
0x00000000004a42f3: inc dword ptr [rax + 0x60fff8df]; loope 0xa42f3; inc dword ptr [rax - 0x1d]; clc; jmp qword ptr [rax]; 
0x00000000004a3fab: inc dword ptr [rax + 0x69]; clc; jmp rax; 
0x00000000004a4127: inc dword ptr [rax + 0x70fff8bc]; mov ebp, 0xba96fff8; clc; inc dword ptr [rdx - 0x45]; clc; call qword ptr [rdx]; 
0x00000000004a4957: inc dword ptr [rax + 0x74]; stc; call qword ptr [rax + 0x74]; 
0x00000000004a4957: inc dword ptr [rax + 0x74]; stc; call qword ptr [rax + 0x74]; stc; jmp qword ptr [rax + 0x74]; 
0x00000000004a49eb: inc dword ptr [rax + 0x7a]; stc; call qword ptr [rax + 0x7a]; 
0x00000000004a49eb: inc dword ptr [rax + 0x7a]; stc; call qword ptr [rax + 0x7a]; stc; jmp qword ptr [rax + 0x7a]; 
0x00000000004a4a13: inc dword ptr [rax + 0x7b]; stc; jmp qword ptr [rax + 0x7b]; 
0x00000000004a4a33: inc dword ptr [rax + 0x7c]; stc; jmp qword ptr [rax + 0x7c]; 
0x00000000004a3ec3: inc dword ptr [rax + 1]; clc; call qword ptr [rax]; 
0x000000000045a795: inc dword ptr [rax - 0x12743]; jmp qword ptr [rdi + 0xf]; 
0x00000000004a42fb: inc dword ptr [rax - 0x1d]; clc; jmp qword ptr [rax]; 
0x00000000004a4377: inc dword ptr [rax - 0x20]; clc; jmp qword ptr [rax]; 
0x00000000004a4313: inc dword ptr [rax - 0x21]; clc; jmp qword ptr [rax]; 
0x0000000000453ffa: inc dword ptr [rax - 0x4d343]; jmp qword ptr [rax]; 
0x00000000004561ac: inc dword ptr [rax - 0x50f43]; jmp qword ptr [rax]; 
0x00000000004a4a3b: inc dword ptr [rax - 0x5f000684]; jl 0xa4a3c; inc eax; jl 0xa4a40; jmp rax; 
0x00000000004a4a1b: inc dword ptr [rax - 0x5f000685]; jnp 0xa4a1c; inc eax; jnp 0xa4a20; jmp rax; 
0x00000000004a49f7: inc dword ptr [rax - 0x5f000686]; jp 0xa49f8; inc eax; jp 0xa49fc; jmp rax; 
0x00000000004a483f: inc dword ptr [rax - 0xf0006f2]; or eax, 0xd60fff9; stc; call rax; 
0x0000000000460d53: inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000430611: inc dword ptr [rax]; add byte ptr [rax], al; and ecx, 0xff; sub eax, ecx; ret; 
0x0000000000400f1d: inc dword ptr [rax]; add byte ptr [rax], al; jne 0xd3c; nop; leave; ret; 
0x0000000000430617: inc dword ptr [rax]; add byte ptr [rax], al; sub eax, ecx; ret; 
0x00000000004be42b: inc dword ptr [rax]; cld; call qword ptr [rax - 0xc]; 
0x00000000004a4403: inc dword ptr [rax]; fdivr st(0); call qword ptr [rax - 0x27]; 
0x00000000004a4a2b: inc dword ptr [rax]; jl 0xa4a28; jmp qword ptr [rax]; 
0x00000000004a4987: inc dword ptr [rax]; jne 0xa4984; call qword ptr [rax]; 
0x00000000004a4987: inc dword ptr [rax]; jne 0xa4984; call qword ptr [rax]; jne 0xa4988; jmp qword ptr [rax]; 
0x00000000004a4a07: inc dword ptr [rax]; jnp 0xa4a04; jmp qword ptr [rax]; 
0x00000000004a49df: inc dword ptr [rax]; jp 0xa49dc; call qword ptr [rax]; 
0x00000000004a4043: inc dword ptr [rax]; push rsi; clc; call qword ptr [rax]; 
0x00000000004a43af: inc dword ptr [rax]; sar eax, 1; call qword ptr [rax - 0x2e]; 
0x000000000048c51c: inc dword ptr [rbp + 0x480b74c0]; mov dword ptr [rip + 0x24149c], 0x6cd9e0; add rsp, 8; ret; 
0x0000000000481068: inc dword ptr [rbp + 0x481b75c0]; cmp dword ptr [rsp + 0x28], 0; jne 0x81080; add rsp, 0x38; ret; 
0x000000000047d51d: inc dword ptr [rbp + 0x481e75c0]; mov dword ptr [rbx], 0; or dword ptr [rip + 0x24ec40], 1; pop rbx; ret; 
0x0000000000415d04: inc dword ptr [rbp + 0x483075c0]; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x000000000049c09c: inc dword ptr [rbp + 0xf]; mov dh, 0xdb; movsxd rax, dword ptr [r8 + r11*4]; add rax, r8; jmp rax; 
0x00000000004a4593: inc dword ptr [rbp + rbx - 7]; call rsp; 
0x000000000048ca52: inc dword ptr [rbp - 0x3f6af040]; add rsp, 0x28; movzx eax, al; neg eax; ret; 
0x000000000049a370: inc dword ptr [rbp - 0x3f6af040]; add rsp, 8; movzx eax, al; neg eax; ret; 
0x000000000047c110: inc dword ptr [rbp - 0x76b48a40]; ret; 
0x000000000041185d: inc dword ptr [rbx + 0x178920ca]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000413de2: inc dword ptr [rbx + 0x446440c8]; mov esp, dword ptr [rbp]; mov dword ptr [rdi], eax; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x48]; 
0x0000000000414aa6: inc dword ptr [rbx + 0xf8920c9]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000461147: inc dword ptr [rbx - 0x10ab43]; jmp qword ptr [rax]; 
0x000000000040dd8a: inc dword ptr [rbx - 0x2f7cfe08]; dec dword ptr [rax - 0x7d]; ret; 
0x000000000049dc82: inc dword ptr [rbx - 0x38b7f808]; ret 0xffff; 
0x00000000004165f9: inc dword ptr [rbx - 0x3ca410dd]; nop; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x30]; 
0x000000000049c047: inc dword ptr [rbx - 0x72b7fe15]; push rdi; add ecx, dword ptr [rax + 0x63]; ret; 
0x000000000044eff7: inc dword ptr [rbx - 0x76be0008]; ret; 
0x0000000000468144: inc dword ptr [rbx - 0x78f0d008]; add eax, 0x89000001; ret 0x348; 
0x000000000047c53d: inc dword ptr [rbx - 0x7bf00006]; pop rsi; add dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; ret 0xf48; 
0x000000000047124c: inc dword ptr [rbx - 0x7bf0fd08]; ret; 
0x0000000000407e42: inc dword ptr [rbx - 0x7bf0fe08]; ret; 
0x000000000043ef6f: inc dword ptr [rbx]; div ecx; pop rbx; mov eax, eax; ret; 
0x000000000043ee9f: inc dword ptr [rbx]; pop rbx; ret; 
0x000000000045ee19: inc dword ptr [rcx + 0xf]; mov dh, 0x57; or al, 0xf6; ret 0xf08; 
0x0000000000480330: inc dword ptr [rcx + rcx*4 - 0x40]; sub eax, ecx; ret; 
0x0000000000475d6d: inc dword ptr [rcx - 0x47]; ret 0x4b61; 
0x000000000044effa: inc dword ptr [rcx - 0x77]; ret; 
0x000000000040047e: inc dword ptr [rcx - 9]; fldenv dword ptr [rsp + rax*2 - 0x77]; or byte ptr [rcx + rcx*4 - 0x39], cl; mov eax, 3; syscall; 
0x00000000004ca315: inc dword ptr [rcx]; or al, 0xa5; add ebp, eax; add ebp, esi; add al, byte ptr [rax]; ret; 
0x00000000004ca35d: inc dword ptr [rcx]; or ebx, eax; add dword ptr [rbx], eax; cmc; add al, byte ptr [rax]; ret; 
0x00000000004bef73: inc dword ptr [rdi + rdx*8]; std; call rsp; 
0x00000000004a4133: inc dword ptr [rdx - 0x45]; clc; call qword ptr [rdx]; 
0x0000000000460165: inc dword ptr [rdx]; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000042c67d: inc dword ptr [rip - 0x7cb80000]; ret 0x4910; 
0x00000000004a41bb: inc dword ptr [rsi + 0x16fff8c1]; ret 0xfff8; 
0x00000000004a4467: inc dword ptr [rsi + 0x1b]; stc; call rsi; 
0x00000000004a4467: inc dword ptr [rsi + 0x1b]; stc; call rsi; sbb bh, cl; jmp qword ptr [rsi + 0x1a]; 
0x00000000004a47c3: inc dword ptr [rsi + rcx]; stc; push qword ptr [rbp + rcx - 7]; jmp rsp; 
0x00000000004a41c7: inc dword ptr [rsi - 0x3d]; clc; jmp rsi; 
0x000000000049d75d: inc dword ptr [rsi*2 + 0x8b814]; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000004344b7: inc dword ptr [rsi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004a4457: inc dword ptr [rsi]; sbb eax, 0x1c96fff9; stc; jmp qword ptr [rsi]; 
0x00000000004a4033: inc eax; clc; call rax; 
0x00000000004a4033: inc eax; clc; call rax; clc; jmp rax; 
0x00000000004a4977: inc eax; je 0xa4974; call rax; 
0x00000000004a4977: inc eax; je 0xa4974; call rax; je 0xa4978; jmp rax; 
0x00000000004a3fdb: inc eax; jl 0xa3fd7; call qword ptr [rax]; 
0x00000000004a3fdb: inc eax; jl 0xa3fd7; call qword ptr [rax]; jle 0xa3fdb; jmp qword ptr [rax + 0x7f]; 
0x00000000004a4a43: inc eax; jl 0xa4a40; jmp rax; 
0x00000000004a4a23: inc eax; jnp 0xa4a20; jmp rax; 
0x00000000004a49cf: inc eax; jns 0xa49cc; call rax; 
0x00000000004a49cf: inc eax; jns 0xa49cc; call rax; jns 0xa49d0; jmp rax; 
0x00000000004a49ff: inc eax; jp 0xa49fc; jmp rax; 
0x00000000004a488b: inc eax; or al, 0xf9; jmp qword ptr [rax]; 
0x00000000004a3fbb: inc eax; outsd dx, dword ptr [rsi]; clc; jmp qword ptr [rax + 0x71]; 
0x00000000004a439f: inc eax; retf; clc; call qword ptr [rax]; 
0x00000000004a439f: inc eax; retf; clc; call qword ptr [rax]; int 0xf8; jmp qword ptr [rax - 0x32]; 
0x00000000004a43f3: inc eax; sar al, cl; call qword ptr [rax]; 
0x00000000004a4617: inc eax; sbb al, 0xf9; call qword ptr [rax + 0x1c]; 
0x00000000004a4617: inc eax; sbb al, 0xf9; call qword ptr [rax + 0x1c]; stc; jmp rax; 
0x00000000004a443f: inc eax; sbb cl, bh; call qword ptr [rax + 0x18]; 
0x00000000004a443f: inc eax; sbb cl, bh; call qword ptr [rax + 0x18]; stc; jmp rax; 
0x000000000047398a: inc ebx; nop dword ptr [rax]; cmp dword ptr [rip + 0x262e85], 0; jne 0x739ad; mov eax, 0x14; syscall; 
0x000000000043fe1a: inc ebx; nop dword ptr [rax]; cmp dword ptr [rip + 0x2969f5], 0; jne 0x3fe3d; mov eax, 2; syscall; 
0x00000000004737d2: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x15; syscall; 
0x00000000004736e2: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x66; syscall; 
0x00000000004a4183: inc ecx; ret 0xfff8; 
0x0000000000460f02: inc edi; test dword ptr [rdi + rbp*8 - 1], edx; jmp qword ptr [rax]; 
0x00000000004a44eb: inc edx; sbb bh, cl; call qword ptr [rdx + 0x1a]; 
0x00000000004a44eb: inc edx; sbb bh, cl; call qword ptr [rdx + 0x1a]; stc; jmp rdx; 
0x0000000000463d36: inc esi; add al, 1; add dword ptr [rax - 0x7d], ecx; ret 0xf01; 
0x00000000004a45b3: inc esp; sbb ecx, edi; call qword ptr [rcx + rbx - 7]; jmp rsp; 
0x000000000044387b: insb byte ptr [rdi], dx; add byte ptr [rax - 0x39], cl; adc byte ptr [rax], sil; cmp byte ptr [rax + rax + 0x48], al; mov dword ptr [rax + 8], edx; ret; 
0x00000000004009e4: insb byte ptr [rdi], dx; add byte ptr [rax - 0x77], cl; clc; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000401d7d: insb byte ptr [rdi], dx; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000478ae8: insb byte ptr [rdi], dx; add byte ptr [rbp - 0x77], cl; mov bh, 8; ret 0x6c; 
0x00000000004799a5: insb byte ptr [rdi], dx; add byte ptr [rbx + 0x5d], bl; jmp rax; 
0x0000000000478aef: insb byte ptr [rdi], dx; add byte ptr [rcx - 0x39], cl; xchg dword ptr [rax], esp; ret 0x6c; 
0x0000000000421203: insb byte ptr [rdi], dx; add byte ptr [rdi], cl; test cl, dl; add byte ptr [rax], al; add byte ptr [rcx + 9], al; ret; 
0x000000000041ccb1: insb byte ptr [rdi], dx; add byte ptr [rdi], cl; xchg eax, ebp; ret 0x8348; 
0x000000000044ffde: insb byte ptr [rdi], dx; add byte ptr [rsi + 0x80000], bh; mov edi, 0x4a7820; mov eax, ecx; syscall; 
0x000000000048c8f6: insb byte ptr [rdi], dx; add cl, ch; ret; 
0x000000000041961f: insb byte ptr [rdi], dx; and al, 0x24; pop rbp; mov dword ptr [r12 + 0x14], eax; pop r12; ret; 
0x000000000048c08b: insb byte ptr [rdi], dx; and al, 0xe8; ret; 
0x000000000045028a: insb byte ptr [rdi], dx; and al, 0xfe; ret; 
0x00000000004a3fb5: insb byte ptr [rdi], dx; clc; jmp qword ptr [rax]; 
0x00000000004bd07e: insb byte ptr [rdi], dx; insd dword ptr [rdi], dx; pop rbx; ret 0x6f9; 
0x000000000048c7a3: insb byte ptr [rdi], dx; mov esi, 0x48c500; mov edi, 0x6cd9c0; call rax; 
0x00000000004c8eec: insb byte ptr [rdi], dx; sahf; add byte ptr [rax], al; mov al, 0x9d; cld; call qword ptr [rax]; 
0x00000000004336e0: insb byte ptr [rdi], dx; sysret; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004bef70: insb byte ptr [rdi], dx; xlatb; std; inc dword ptr [rdi + rdx*8]; std; call rsp; 
0x0000000000432fdf: insd dword ptr [rdi], dx; adc al, byte ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004901d0: insd dword ptr [rdi], dx; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000401bc1: insd dword ptr [rdi], dx; add byte ptr [rax - 0x77], cl; mov qword ptr ss:[rsi + 0x10], rsi; syscall; 
0x00000000004910d0: insd dword ptr [rdi], dx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000046b261: insd dword ptr [rdi], dx; add dword ptr [rax], eax; add byte ptr [rbx - 0x7bf0fd1e], al; ret 1; 
0x000000000049d1a7: insd dword ptr [rdi], dx; call 0xfffffffff07f5cf9; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049d23f: insd dword ptr [rdi], dx; call 0xfffffffff07f5d91; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049d2d3: insd dword ptr [rdi], dx; call 0xfffffffff07f5e25; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049d31f: insd dword ptr [rdi], dx; call 0xfffffffff07f5e71; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049d3e8: insd dword ptr [rdi], dx; call 0xfffffffff07f5f3a; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049d477: insd dword ptr [rdi], dx; call 0xfffffffff07f5fc9; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049d4c8: insd dword ptr [rdi], dx; call 0xfffffffff07f601a; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049ead4: insd dword ptr [rdi], dx; dec dword ptr [rcx + rcx*4 - 0x1e]; mov rdi, qword ptr [rsp]; mov rsi, qword ptr [r15 + rbp*8 + 0x10]; call rbx; 
0x0000000000440def: insd dword ptr [rdi], dx; fdiv st(5), st(0); dec dword ptr [rcx - 0x75]; jge 0x40df7; call rbx; 
0x00000000004bd07f: insd dword ptr [rdi], dx; pop rbx; ret 0x6f9; 
0x000000000043fd3f: insd dword ptr [rdi], dx; push rdx; add byte ptr [rax], al; ret; 
0x00000000004bb42d: insd dword ptr [rdi], dx; ret 0xb9b9; 
0x00000000004bc33f: insd dword ptr [rdi], dx; test eax, 0x7d4c8c5d; ret 0xd8f; 
0x0000000000470aa2: int 0x25; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004409df: int 0x45; add byte ptr [rax], al; ret; 
0x00000000004407df: int 0x47; add byte ptr [rax], al; ret; 
0x0000000000403976: int 0x48; test eax, eax; je 0x3731; mov edi, 0x6ccfe0; call rax; 
0x00000000004bc7a4: int 0x6b; ret; 
0x000000000043ec03: int 0x74; add eax, 0x75e48445; adc byte ptr [rbx - 0x6bf0fd06], al; ret 0x8444; 
0x000000000040f621: int 0x80; 
0x00000000004813ae: int 0x90; jmp rdx; 
0x00000000004bb1e6: int 0xdd; je 0xbb1af; xor al, 0xd8; ret; 
0x00000000004ba653: int 0xe0; fdivr st(4); test al, 0x97; xchg eax, esp; ret; 
0x00000000004c1f09: int 0xf5; jmp rdx; 
0x00000000004c3059: int 0xf7; call qword ptr [rcx]; 
0x00000000004a43e5: int 0xf8; call rax; 
0x00000000004a43a5: int 0xf8; jmp qword ptr [rax - 0x32]; 
0x0000000000465fdf: int 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000042fd3f: int 8; add byte ptr [rax], al; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000045b046: int1; add eax, r8d; ret; 
0x000000000049ec2c: int1; and al, byte ptr [rax]; mov qword ptr [rip + 0x22f11a], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000049ec33: int1; and al, byte ptr [rax]; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000042eed8: int1; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000004455cc: int1; call rbx; 
0x00000000004368a1: int1; dec byte ptr [rax + 0x6f]; pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x0000000000436281: int1; jl 0x362cc; adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000043e81d: int1; jl 0x3e868; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043e824: int1; jl 0x3e86f; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043e82b: int1; jl 0x3e876; adc dword ptr [rsi - 1], edx; ret; 
0x000000000043e83e: int1; jl 0x3e889; adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043e845: int1; jl 0x3e890; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043e84c: int1; jl 0x3e897; adc dword ptr [rsi - 1], edx; ret; 
0x000000000043e859: int1; jl 0x3e8a4; adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043e85f: int1; jl 0x3e8aa; adc dword ptr [rsi - 1], edx; ret; 
0x000000000043e926: int1; jl 0x3e971; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043e92d: int1; jl 0x3e978; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043e934: int1; jl 0x3e97f; adc dword ptr [rsi - 1], edx; ret; 
0x000000000043e97e: int1; jl 0x3e9c9; adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000043e985: int1; jl 0x3e9d0; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000043e98c: int1; jl 0x3e9d7; adc dword ptr [rsi + 3], edx; ret; 
0x000000000043ea1b: int1; jl 0x3ea66; adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000043ea22: int1; jl 0x3ea6d; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000043ea29: int1; jl 0x3ea74; adc dword ptr [rsi + 7], edx; ret; 
0x000000000049ada7: int1; jmp rcx; 
0x000000000046d799: int1; lea rsi, qword ptr [rbp + 0x50]; mov rdi, r12; lea rdx, qword ptr [rsp + 0x18]; lea r9, qword ptr [rsp + 0x10]; call rbx; 
0x000000000046d955: int1; lea rsi, qword ptr [rbp + 0x90]; mov rdi, r12; lea rdx, qword ptr [rsp + 0x18]; lea r9, qword ptr [rsp + 0x10]; call rbx; 
0x000000000043538b: int1; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000432c6f: int1; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000047a26e: int1; mov r15, qword ptr [rbx]; mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r12]; call rax; 
0x0000000000435383: int1; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000046f8f6: int1; mov rdi, r12; lea rdx, qword ptr [rsp + 0x20]; lea r9, qword ptr [rsp + 0x28]; lea rsi, qword ptr [rsp + 0x30]; call rbx; 
0x0000000000432de7: int1; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432e03: int1; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043dc43: int1; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000043ef72: int1; pop rbx; mov eax, eax; ret; 
0x000000000043dc47: int1; sub eax, edx; ret; 
0x0000000000444d8b: int1; sub rcx, qword ptr [rdx + 0x10]; cmp rcx, qword ptr [rdx + 0x28]; jae 0x44d70; mov eax, 1; ret; 
0x000000000042baad: iretd; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000492b1e: iretd; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000443a7d: iretd; add dword ptr [rax], eax; add byte ptr [rbx - 0x7cbefe39], al; ret 0x4901; 
0x000000000044e09a: iretd; call 0x81040; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000045ec9a: iretd; call qword ptr [rax + 0x38]; 
0x00000000004a43ad: iretd; clc; inc dword ptr [rax]; sar eax, 1; call qword ptr [rax - 0x2e]; 
0x00000000004c9001: iretd; cld; call qword ptr [rdi + 9]; 
0x000000000046e3a3: iretd; cmovne rsi, rdx; bsr rsi, rsi; lea rax, qword ptr [rcx + rsi]; ret; 
0x000000000041b62b: iretd; mov eax, 3; syscall; 
0x000000000041b5ff: iretd; mov eax, r8d; syscall; 
0x000000000043bc7d: iretd; mov word ptr [rsi], es; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000004bb1c1: iretd; movsb byte ptr [rdi], byte ptr [rsi]; in eax, 0x24; outsd dx, dword ptr es:[rsi]; ret 0x5ae4; 
0x000000000042efa2: iretd; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000004bc5cd: iretd; ret 0x8b36; 
0x00000000004bef25: iretd; std; call qword ptr [rax - 0x31]; 
0x00000000004011e8: ja 0x1207; add al, bpl; call qword ptr [rdx]; 
0x000000000042cd08: ja 0x2cd00; ret 0x7401; 
0x0000000000436753: ja 0x3674e; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000043bd97: ja 0x3bd9b; ret; 
0x000000000043bdb3: ja 0x3bdb9; mov dword ptr [rdi], ecx; ret; 
0x000000000043bdf4: ja 0x3bdfe; mov qword ptr [rdi], rcx; ret; 
0x000000000043be79: ja 0x3be8b; ret; 
0x000000000043becf: ja 0x3bee5; ret; 
0x000000000043bf51: ja 0x3bf6b; ret; 
0x000000000043c3b7: ja 0x3c3bb; lea rax, qword ptr [rdi + 2]; ret; 
0x000000000043c3d3: ja 0x3c3d9; mov dword ptr [rdi], ecx; lea rax, qword ptr [rdi + 4]; ret; 
0x000000000043c424: ja 0x3c42e; mov qword ptr [rdi], rcx; lea rax, qword ptr [rdi + 8]; ret; 
0x000000000043c509: ja 0x3c51b; lea rax, qword ptr [rdi + 0x10]; ret; 
0x000000000043c57f: ja 0x3c595; lea rax, qword ptr [rdi + 0x14]; ret; 
0x000000000043c601: ja 0x3c61b; lea rax, qword ptr [rdi + 0x18]; ret; 
0x000000000043f4fd: ja 0x3f520; hlt; mov rdi, rdx; mov eax, r8d; syscall; 
0x000000000043f68e: ja 0x3f788; mov rdx, rax; mov rdi, r8; mov eax, 3; syscall; 
0x000000000043fd86: ja 0x3fdb8; mov rdi, rax; mov rsi, rdx; mov eax, 4; syscall; 
0x000000000043fdd5: ja 0x3fe08; movsxd rdi, eax; mov rsi, rdx; mov eax, 5; syscall; 
0x000000000044001d: ja 0x40060; add rsp, 0x60; pop rbx; ret; 
0x00000000004625c1: ja 0x60750; movzx eax, byte ptr [rax + 0x4b4a60]; mov dword ptr [rbp - 0x1088], 1; mov rax, qword ptr [rax*8 + 0x4b45a0]; jmp rax; 
0x00000000004620d3: ja 0x60750; movzx eax, byte ptr [rax + 0x4b4a60]; mov dword ptr [rbp - 0x1090], 1; mov dword ptr [rbp - 0x1070], 0; mov rax, qword ptr [rax*8 + 0x4b44a0]; jmp rax; 
0x0000000000462180: ja 0x60750; movzx eax, byte ptr [rax + 0x4b4a60]; mov dword ptr [rbp - 0x1090], 1; mov dword ptr [rbp - 0x1070], 1; mov rax, qword ptr [rax*8 + 0x4b44a0]; jmp rax; 
0x0000000000460db9: ja 0x60750; movzx eax, byte ptr [rax + 0x4b4a60]; mov dword ptr [rbp - 0x1090], 1; mov rax, qword ptr [rax*8 + 0x4b43a0]; jmp rax; 
0x0000000000462326: ja 0x60750; movzx eax, byte ptr [rax + 0x4b4a60]; mov dword ptr [rbp - 0x10a0], 1; mov rax, qword ptr [rax*8 + 0x4b48a0]; jmp rax; 
0x00000000004624d9: ja 0x60750; movzx eax, byte ptr [rax + 0x4b4a60]; mov dword ptr [rbp - 0x10a8], 1; mov rax, qword ptr [rax*8 + 0x4b48a0]; jmp rax; 
0x0000000000462453: ja 0x60750; movzx eax, byte ptr [rax + 0x4b4a60]; mov dword ptr [rbp - 0x10ac], 0x20; mov dword ptr [rbp - 0x1098], 1; mov rax, qword ptr [rax*8 + 0x4b48a0]; jmp rax; 
0x000000000046249b: ja 0x60750; movzx eax, byte ptr [rax + 0x4b4a60]; mov dword ptr [rbp - 0x10b0], 1; mov rax, qword ptr [rax*8 + 0x4b48a0]; jmp rax; 
0x0000000000460e4f: ja 0x60750; movzx eax, byte ptr [rax + 0x4b4a60]; mov dword ptr [rbp - 0x10b8], 1; mov rax, qword ptr [rax*8 + 0x4b48a0]; jmp rax; 
0x00000000004625ff: ja 0x60750; movzx eax, byte ptr [rax + 0x4b4a60]; mov dword ptr [rbp - 0x10c0], 1; mov dword ptr [rbp - 0x1088], 0; mov rax, qword ptr [rax*8 + 0x4b44a0]; jmp rax; 
0x0000000000460e8d: ja 0x60750; movzx eax, byte ptr [rax + 0x4b4a60]; mov dword ptr [rbp - 0x10c8], 1; mov rax, qword ptr [rax*8 + 0x4b48a0]; jmp rax; 
0x0000000000467604: ja 0x6758f; ret 0x348; 
0x0000000000469f7b: ja 0x69f06; ret 0x348; 
0x00000000004733bd: ja 0x733c8; pop rbx; ret; 
0x0000000000473736: ja 0x73768; mov rdi, rax; mov rsi, rdx; mov eax, 6; syscall; 
0x0000000000473788: ja 0x737c0; movsxd rdi, eax; movsxd r10, r8d; mov rdx, rcx; mov eax, 0x106; syscall; 
0x000000000048a94e: ja 0x8a999; shr ecx, cl; mov qword ptr [rdi], r9; ret; 
0x000000000049a38a: ja 0x9a394; mov rdi, qword ptr [rdi]; call 0x9ab20; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x000000000049a40e: ja 0x9a418; mov rdi, qword ptr [rdi]; call 0x9aa60; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000049ad9b: ja 0x9b5ee; movsxd rcx, dword ptr [r14 + rsi*4]; add rcx, r14; jmp rcx; 
0x000000000049c097: ja 0x9be60; movzx r11d, r11b; movsxd rax, dword ptr [r8 + r11*4]; add rax, r8; jmp rax; 
0x000000000049c624: ja 0x9c67e; mov eax, dword ptr [rbx + 8]; movsxd rax, dword ptr [r14 + rax*4]; add rax, r14; jmp rax; 
0x00000000004a400d: ja 0xa4007; push qword ptr [rax]; cmp edi, eax; inc dword ptr [rax + 0x3d]; clc; call qword ptr [rax + 0x3f]; 
0x00000000004bcac4: ja 0xbca49; ret 0x48f; 
0x0000000000400d4d: ja 0xefa; mov rax, qword ptr [rax*8 + 0x4a1ca8]; jmp rax; 
0x00000000004127e7: jae 0x127f9; mov qword ptr [rbx + 0x30], rsi; mov qword ptr [rbx + 0x28], rsi; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x00000000004127e3: jae 0x127fd; mov qword ptr [rbx + 0x10], rsi; mov qword ptr [rbx + 0x30], rsi; mov qword ptr [rbx + 0x28], rsi; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x00000000004127f3: jae 0x12815; call qword ptr [rax + 0x70]; 
0x00000000004127ef: jae 0x12819; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x00000000004127eb: jae 0x1281d; mov qword ptr [rbx + 0x28], rsi; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x0000000000413a98: jae 0x13aa0; movzx eax, byte ptr [rax]; ret; 
0x0000000000413c01: jae 0x13c18; movzx eax, byte ptr [rax]; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x0000000000415a27: jae 0x15a61; cmovne eax, edx; mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x000000000041736b: jae 0x17390; movzx eax, byte ptr [rax]; ret; 
0x000000000043346e: jae 0x33480; mov rcx, rdx; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000442ae9: jae 0x42aaa; std; dec dword ptr [rcx - 0x75]; jge 0x42af1; call rbx; 
0x0000000000444d94: jae 0x44d70; mov eax, 1; ret; 
0x000000000043f4bd: jae 0x44fb0; ret; 
0x000000000047d1cb: jae 0x7d171; xor eax, eax; ret; 
0x000000000048f289: jae 0x8f21c; add dword ptr [rax], eax; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000049a591: jae 0x9a59f; mov rdx, qword ptr [rip + 0x23359e]; add word ptr [rdx + rax*2], 1; ret; 
0x00000000004bb082: jae 0xbb05b; jo 0xbb0f7; mov ebp, 0xfb67d10d; ret; 
0x00000000004bbf1e: jae 0xbbef3; push rsi; pop rdx; je 0xbbee8; ret 0xacfc; 
0x00000000004c5da7: jae 0xc5db3; ret; 
0x00000000004c7d64: jae 0xc7d6a; add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x34b0303; ret; 
0x000000000040f160: jae 0xf175; mov rbp, rax; call qword ptr [rbp]; 
0x000000000041d4ce: jb 0x1d4a8; mov byte ptr [r8 + rbx], r9b; mov rax, r8; pop rbx; ret; 
0x0000000000433271: jb 0x33253; vmovdqu xmmword ptr [rdx - 0x10], xmm15; ret; 
0x00000000004332d4: jb 0x332b6; vmovdqu xmmword ptr [rdx - 0x10], xmm7; ret; 
0x0000000000433333: jb 0x33350; mov rcx, qword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x0000000000433353: jb 0x33362; mov ecx, dword ptr [rsi + rdx - 4]; mov esi, dword ptr [rsi]; mov dword ptr [rdi], esi; mov dword ptr [rdi + rdx - 4], ecx; ret; 
0x0000000000433378: jb 0x3337e; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000004362c7: jb 0x362dd; vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x00000000004362f4: jb 0x36305; mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000436308: jb 0x36316; mov esi, dword ptr [rsi]; mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000436319: jb 0x3632b; mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000043632e: jb 0x36334; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000043e703: jb 0x3e710; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x000000000043e717: jb 0x3e720; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x000000000043e723: jb 0x3e730; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x000000000043e733: jb 0x3e737; mov byte ptr [rdi], cl; ret; 
0x000000000043e856: jb 0x3e866; vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043e869: jb 0x3e875; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x000000000043e882: jb 0x3e88e; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x000000000043e895: jb 0x3e89d; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x000000000043e8a0: jb 0x3e8aa; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x000000000043e8ad: jb 0x3e8b1; mov byte ptr [rdi], cl; ret; 
0x000000000044faea: jb 0x4fb38; mov edx, ecx; mov rsi, r10; mov rdi, r13; mov eax, r8d; syscall; 
0x0000000000450085: jb 0x500b9; movsxd rdi, r15d; mov eax, 3; syscall; 
0x00000000004005a3: jb 0x5f0; add byte ptr [rcx], dh; shr al, 0x93; ret; 
0x000000000046d3b7: jb 0x6d3b5; je 0x6d3d8; mov rdx, qword ptr [rbx + 0xd8]; mov esi, eax; mov rdi, rbx; call qword ptr [rdx + 0x30]; 
0x000000000046d46c: jb 0x6d460; lea eax, dword ptr [rdx + rdi]; ret; 
0x000000000047e608: jb 0x7e5f0; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000049ba43: jb 0x9ba46; add byte ptr [rax], al; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000004c28e1: jb 0xc28d9; call qword ptr [rax]; 
0x0000000000413634: jbe 0x13650; mov rdx, -0x30; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000004157bb: jbe 0x15755; movzx eax, byte ptr [rdx]; pop rbx; ret; 
0x00000000004167c2: jbe 0x167e1; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000416a75: jbe 0x16a94; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000401bc8: jbe 0x1bda; syscall; 
0x0000000000425cf7: jbe 0x25d04; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004268b0: jbe 0x26b60; add rax, rdi; add rax, rcx; ret; 
0x0000000000426b26: jbe 0x26b60; add rax, rdi; ret; 
0x0000000000426b36: jbe 0x26b60; lea rax, qword ptr [rdi + rax + 0x10]; ret; 
0x0000000000426b46: jbe 0x26b60; lea rax, qword ptr [rdi + rax + 0x20]; ret; 
0x0000000000426b56: jbe 0x26b60; lea rax, qword ptr [rdi + rax + 0x30]; ret; 
0x0000000000427313: jbe 0x27325; lea rdi, qword ptr [rdi + 0x10]; jne 0x27300; mov rax, rdi; ret; 
0x0000000000433365: jbe 0x33378; mov cx, word ptr [rsi + rdx - 2]; mov si, word ptr [rsi]; mov word ptr [rdi], si; mov word ptr [rdi + rdx - 2], cx; ret; 
0x000000000045b33d: jbe 0x5b380; add byte ptr [r15 + r9 + 0x45], cl; ret 0xf4c; 
0x000000000045b802: jbe 0x5b78d; ret 0x8166; 
0x000000000046c99a: jbe 0x6c907; mov eax, dword ptr [rsi]; pop rbx; ret; 
0x000000000047e506: jbe 0x7e553; add al, ch; cmp dil, al; jmp qword ptr [rsi - 0x70]; 
0x0000000000480326: jbe 0x80310; cmp ecx, r8d; je 0x802a0; mov eax, r8d; sub eax, ecx; ret; 
0x0000000000480bbf: jbe 0x80bc8; ret; 
0x000000000049d7c3: jbe 0x9d7d8; cmp dil, 0x30; jne 0x9d7f0; mov rax, qword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x000000000049d823: jbe 0x9d838; cmp dil, 0x30; jne 0x9d850; mov rax, qword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x000000000049e8d6: jbe 0x9e8e0; mov rdx, qword ptr [r15]; mov rdi, rbp; call rbx; 
0x000000000049ead1: jbe 0x9eb1c; lea ebp, dword ptr [rbp - 1]; mov rdx, r12; mov rdi, qword ptr [rsp]; mov rsi, qword ptr [r15 + rbp*8 + 0x10]; call rbx; 
0x00000000004a4454: jbe 0xa4473; stc; inc dword ptr [rsi]; sbb eax, 0x1c96fff9; stc; jmp qword ptr [rsi]; 
0x00000000004a49b5: jbe 0xa49b0; push qword ptr [rax]; jbe 0xa49b4; call qword ptr [rax + 0x76]; 
0x00000000004a49b9: jbe 0xa49b4; call qword ptr [rax + 0x76]; 
0x00000000004a49bd: jbe 0xa49b8; push qword ptr [rax + 0x76]; stc; call qword ptr [rax - 0x4f00068a]; jbe 0xa49c4; call rax; 
0x00000000004a49c1: jbe 0xa49bc; call qword ptr [rax - 0x4f00068a]; jbe 0xa49c4; call rax; 
0x00000000004a49c9: jbe 0xa49c4; call rax; 
0x00000000004a49cd: jbe 0xa49c8; inc eax; jns 0xa49cc; call rax; 
0x00000000004a49cd: jbe 0xa49c8; inc eax; jns 0xa49cc; call rax; jns 0xa49d0; jmp rax; 
0x00000000004bb339: jbe 0xbb36e; movabs byte ptr [0x3246dddda441cb9e], al; mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x00000000004c671d: jbe 0xc671f; add byte ptr [rax - 0x6d], al; cli; jmp qword ptr [rax]; 
0x000000000041024e: je 0x10258; mov eax, edx; pop rbx; ret; 
0x00000000004105f8: je 0x1061b; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x000000000040107e: je 0x1085; call 0x437c0; leave; ret; 
0x00000000004110c0: je 0x110e6; or byte ptr [rax - 0x77], cl; add al, 0x24; mov rbx, qword ptr [r15 + 0x98]; mov rdi, rbx; call qword ptr [rbx + 0x20]; 
0x0000000000411960: je 0x1191a; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000411943: je 0x11962; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000000411afc: je 0x11b10; pop rbx; mov eax, 0xffffffff; pop rbp; pop r12; ret; 
0x0000000000401274: je 0x129a; adc byte ptr [rbx + 0x410c247c], cl; call rsp; 
0x00000000004012c8: je 0x12ee; adc byte ptr [rbx + 0x480c247c], cl; mov eax, dword ptr [rsp + 0x18]; call rax; 
0x000000000041301d: je 0x13070; movsxd rdi, dword ptr [r14 + 0x70]; mov rdx, rbx; mov rsi, rbp; mov eax, r13d; syscall; 
0x0000000000413622: je 0x13626; je 0x13658; movsxd rdi, dword ptr [rdi + 0x70]; xor eax, eax; syscall; 
0x0000000000413624: je 0x13658; movsxd rdi, dword ptr [rdi + 0x70]; xor eax, eax; syscall; 
0x0000000000413cd1: je 0x13cd5; je 0x13d40; movsxd rdx, ecx; mov eax, 2; syscall; 
0x0000000000413d88: je 0x13d14; movsxd rdi, ebp; mov eax, 3; syscall; 
0x0000000000413cd3: je 0x13d40; movsxd rdx, ecx; mov eax, 2; syscall; 
0x000000000041495a: je 0x149d8; movzx eax, bpl; pop rbx; pop rbp; pop r12; ret; 
0x0000000000414bab: je 0x14b49; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000415783: je 0x15735; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000004158f3: je 0x158a5; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000415a65: je 0x15a70; ret; 
0x0000000000415a58: je 0x15a7e; or bl, ch; mov edx, 0x48001f0f; cmp dword ptr [rdi + 0x38], 0; je 0x15a70; ret; 
0x0000000000415a97: je 0x15aa0; pop rbx; pop rbp; pop r12; ret; 
0x00000000004165ba: je 0x165bf; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x00000000004165a8: je 0x165c8; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x0000000000416647: je 0x16658; cmp rsi, rcx; jne 0x16640; lea eax, dword ptr [rdx + rdi]; ret; 
0x0000000000417362: je 0x17378; mov rax, qword ptr [rdi + 8]; cmp rax, rcx; jae 0x17390; movzx eax, byte ptr [rax]; ret; 
0x00000000004173a5: je 0x173b8; xor eax, eax; cmp esi, -1; setne al; neg eax; ret; 
0x000000000041872a: je 0x1872e; pop rbx; ret; 
0x0000000000418807: je 0x1880b; call rax; 
0x00000000004195f4: je 0x195fb; pop rbx; pop rbp; pop r12; ret; 
0x0000000000401918: je 0x1a03; add rsp, 0x98; ret; 
0x000000000041b5fa: je 0x1b620; xor byte ptr [rcx + rcx*4 - 0x31], cl; mov eax, r8d; syscall; 
0x0000000000401e33: je 0x1e3e; xor esi, esi; mov edi, 1; call rax; 
0x000000000041f542: je 0x1f568; sub byte ptr [rax - 0x77], cl; out dx, eax; call rax; 
0x000000000041fa88: je 0x1fa8c; call rax; 
0x000000000042014f: je 0x1ff13; nop dword ptr [rax]; mov rdx, qword ptr [rsp + 0x68]; mov rsi, r12; mov rdi, rbx; call rax; 
0x0000000000420ab9: je 0x205db; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000421aa9: je 0x21ab0; ret; 
0x0000000000421d32: je 0x21d40; mov eax, 0x16; ret; 
0x0000000000421d81: je 0x21d8a; lea rax, qword ptr [rip + 0x1a966]; ret; 
0x0000000000424185: je 0x24188; xchg eax, edx; sub eax, edx; ret; 
0x00000000004241f4: je 0x241fd; lea rax, qword ptr [rip + 0x14853]; ret; 
0x000000000042435c: je 0x2433e; pmovmskb edx, xmm4; test edx, edx; je 0x2436a; bsf eax, edx; ret; 
0x0000000000424364: je 0x2436a; bsf eax, edx; ret; 
0x000000000042440d: je 0x24420; bsf rax, rdx; ret; 
0x00000000004243ac: je 0x24430; bsf rax, rdx; ret; 
0x0000000000426a1c: je 0x26a6d; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x0000000000426b8e: je 0x26b98; lea rax, qword ptr [rip + 0x8449]; ret; 
0x0000000000427125: je 0x2713e; and edx, 2; mov eax, 0x4336a0; mov edx, 0x430630; cmove rax, rdx; ret; 
0x0000000000427170: je 0x27179; lea rax, qword ptr [rip + 0x17647]; ret; 
0x0000000000427277: je 0x271e4; mov word ptr [rax + rdx - 2], cx; ret; 
0x0000000000427270: je 0x27274; mov byte ptr [rdi], cl; test dl, 2; je 0x271e4; mov word ptr [rax + rdx - 2], cx; ret; 
0x00000000004276e2: je 0x27708; clc; and edx, 0x7f; jne 0x272a6; mov rax, rdi; ret; 
0x0000000000427724: je 0x2772d; lea rax, qword ptr [rip + 0x12ad3]; ret; 
0x0000000000402979: je 0x2984; lea rdi, qword ptr [rbx + 0x80]; call rax; 
0x0000000000402bc5: je 0x2bd0; lea rdi, qword ptr [rbx + 0x80]; call rax; 
0x000000000042d708: je 0x2d720; bsf eax, eax; add rax, rdi; add rax, rcx; ret; 
0x000000000042d84a: je 0x2d89b; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x000000000042d901: je 0x2d910; bsf eax, eax; lea rax, qword ptr [rdi + rax]; ret; 
0x00000000004002d6: je 0x2dd; call 0xffffffffffc00000; add rsp, 8; ret; 
0x000000000042ed69: je 0x2ed80; bsf rdx, rax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000042ef99: je 0x2ee35; bsf rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000430377: je 0x3037b; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004034a4: je 0x34ad; mov edi, 0x6cd060; call rax; 
0x00000000004036f3: je 0x3706; mov edi, 0x6ccfe0; call rax; 
0x000000000040397a: je 0x3731; mov edi, 0x6ccfe0; call rax; 
0x00000000004033f2: je 0x385d; mov edi, 0x6cd720; call rbx; 
0x00000000004038e7: je 0x38fa; mov edi, 0x6ccfe0; call rax; 
0x0000000000403b48: je 0x3b6d; mov qword ptr [rbp - 0x90], r8; mov qword ptr [rbp - 0x88], rcx; mov edi, 0x6cd060; call rax; 
0x0000000000403ba6: je 0x3bcb; mov qword ptr [rbp - 0x90], r8; mov qword ptr [rbp - 0x88], rcx; mov edi, 0x6cd060; call rax; 
0x0000000000403d02: je 0x3d0b; mov edi, 0x6cd0a0; call rax; 
0x0000000000403e4a: je 0x3e53; mov edi, 0x6cd0a0; call rax; 
0x000000000043ef05: je 0x3ee72; lea rax, qword ptr [rdx + rdx]; pop rbx; and eax, 0x7ff80000; ret; 
0x000000000043ee95: je 0x3ee72; mov eax, ecx; shr eax, 6; and eax, 0x3fffc00; pop rbx; ret; 
0x000000000043ee85: je 0x3ee72; movzx eax, cl; pop rbx; ret; 
0x000000000043efbe: je 0x3efc8; xor eax, eax; ret; 
0x000000000043efb9: je 0x3efd0; cmp eax, 2; je 0x3efc8; xor eax, eax; ret; 
0x000000000043f0f8: je 0x3f101; mov edi, 0x6cd720; call rax; 
0x000000000043f110: je 0x3f119; mov edi, 0x6cd720; call rax; 
0x000000000043f106: je 0x3f128; mov eax, 0; test rax, rax; je 0x3f119; mov edi, 0x6cd720; call rax; 
0x000000000043f380: je 0x3f386; add dword ptr [rax + 0x10], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000043f470: je 0x3f449; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000043f70f: je 0x3f735; adc byte ptr [rdi + 1], bh; mov eax, 0xe5; syscall; 
0x000000000043fe38: je 0x3fe8b; add byte ptr [rax], al; ret; 
0x000000000043ff64: je 0x3ff80; movsxd rsi, esi; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x0000000000440008: je 0x40028; movsxd rsi, esi; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x000000000044014b: je 0x4010a; mov qword ptr [rsp + 8], rdi; mov rdi, qword ptr [rsp + 8]; mov eax, 0x4f; syscall; 
0x0000000000403ff2: je 0x401e; mov ecx, 2; xor esi, esi; mov eax, ecx; syscall; 
0x00000000004404d8: je 0x404e6; movsxd rdi, dword ptr [rsp + 0x10]; mov eax, 3; syscall; 
0x0000000000440a1c: je 0x40a80; mov rbx, rdi; xor esi, esi; mov r12d, edx; mov rbp, rax; call rax; 
0x0000000000440aec: je 0x40af6; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000440b2d: je 0x40b37; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000440b65: je 0x40b6f; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000440bce: je 0x40bd8; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004040a2: je 0x40c0; movsxd r12, r12d; mov rdi, r12; mov eax, 3; syscall; 
0x0000000000440c06: je 0x40c10; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000440c54: je 0x40c5e; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000440c8c: je 0x40c96; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000440d11: je 0x40d1b; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000440d49: je 0x40d53; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000440d97: je 0x40da1; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000440dcf: je 0x40dd9; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000440e38: je 0x40e42; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000440e70: je 0x40e7a; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000440ec2: je 0x40ecc; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004413bf: je 0x41406; mov rsi, qword ptr [rax]; mov rdi, qword ptr [rbp - 0x40]; mov r13d, ebx; mov rax, qword ptr [rbp - 0x48]; call rax; 
0x0000000000441be0: je 0x41be9; add byte ptr [rax], al; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441d1f: je 0x42260; xor esi, esi; mov rdi, r12; call rbx; 
0x00000000004417f2: je 0x42280; xor esi, esi; mov rdi, r12; call rbx; 
0x0000000000441a95: je 0x422b8; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441d44: je 0x422d8; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441817: je 0x422f8; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441fc2: je 0x42318; xor esi, esi; mov rdi, r13; call rbx; 
0x000000000044183b: je 0x42338; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441bde: je 0x42358; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441ab9: je 0x42378; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441960: je 0x42398; xor esi, esi; mov rdi, r14; call rbx; 
0x000000000044210b: je 0x423b8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441fe6: je 0x423d8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441e8d: je 0x423f8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441d68: je 0x42418; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441e01: je 0x42438; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441d88: je 0x42458; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004421a4: je 0x42478; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044212b: je 0x42498; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044207f: je 0x424b8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442006: je 0x424d8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441f26: je 0x424f8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441ead: je 0x42518; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441c77: je 0x42538; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441bfe: je 0x42558; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044185b: je 0x42578; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441b52: je 0x42598; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441ad9: je 0x425b8; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004418d4: je 0x425d8; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004419f9: je 0x425f8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441980: je 0x42618; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044269f: je 0x426a9; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004426d7: je 0x426e1; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442725: je 0x4272f; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x000000000044275d: je 0x42767; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004427c7: je 0x427d1; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004427ff: je 0x42809; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x000000000044284d: je 0x42857; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442885: je 0x4288f; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x000000000044290a: je 0x42914; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442942: je 0x4294c; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442990: je 0x4299a; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004429e8: je 0x429aa; std; dec dword ptr [rcx - 0x75]; jge 0x429f0; call rbx; 
0x00000000004429c8: je 0x429d2; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442a32: je 0x42a3c; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004040ee: je 0x42a5; movsxd rdi, r12d; mov eax, 3; syscall; 
0x0000000000442a6a: je 0x42a74; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442ab8: je 0x42ac2; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442ad6: je 0x42ae0; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000443349: je 0x4334c; ret; 
0x00000000004433ad: je 0x433b0; ret; 
0x0000000000444aa3: je 0x44aac; mov edi, 0x6cc140; call rax; 
0x0000000000444c31: je 0x44c3a; mov edi, 0x6cc140; call rax; 
0x0000000000444db8: je 0x44dc0; ret; 
0x0000000000444dd4: je 0x44de0; mov dword ptr [rip + 0x2861bc], edx; pop rbx; ret; 
0x00000000004455c7: je 0x455ed; sbb byte ptr [rbp - 0x77], cl; int1; call rbx; 
0x0000000000446396: je 0x46440; mov esi, 0x447090; mov edi, 0x6cd6d8; call rax; 
0x0000000000446495: je 0x46690; mov esi, 0x447090; mov edi, 0x6cd6d8; call rax; 
0x000000000044d723: je 0x4d7f0; movsxd rdi, ebx; mov eax, 3; syscall; 
0x000000000044e099: je 0x4e06a; call 0x81040; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000044e063: je 0x4e070; cmp esi, 3; je 0x4e070; pop rbx; ret; 
0x000000000044e068: je 0x4e070; pop rbx; ret; 
0x000000000044e5f0: je 0x4e5f9; mov edi, 0x6cd720; call rax; 
0x000000000044e61f: je 0x4e630; mov edi, 0x6cd720; call rax; 
0x000000000044ec59: je 0x4e633; mov edi, 0x6cd720; call rax; 
0x000000000044e720: je 0x4e724; call rax; 
0x000000000044e70b: je 0x4e724; mov rax, qword ptr [r14*8 + 0x4a6e00]; mov qword ptr [r14*8 + 0x6cc9c0], rbx; test rax, rax; je 0x4e724; call rax; 
0x000000000044e77f: je 0x4e788; mov edi, 0x6cd720; call rax; 
0x000000000044e8f8: je 0x4e908; mov edi, 0x6cd720; call rax; 
0x000000000044ebd8: je 0x4ebe1; mov edi, 0x6cd720; call rax; 
0x000000000044ecdc: je 0x4ece0; call rax; 
0x000000000044eccb: je 0x4ece0; mov qword ptr [r12], rax; mov rax, qword ptr [rbp*8 + 0x4a6e00]; test rax, rax; je 0x4ece0; call rax; 
0x000000000044fb9b: je 0x4fb9f; call rax; 
0x0000000000452937: je 0x5294e; add byte ptr [rdi], cl; test dword ptr [rbx], esp; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000046a22b: je 0x6a1b6; ret 0x348; 
0x000000000046a88e: je 0x6a84f; lea rcx, qword ptr [rbx + 0x40]; lea rdx, qword ptr [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000046b5d8: je 0x6b5fa; pop rbx; mov eax, edx; pop rbp; pop r12; ret; 
0x000000000046bf43: je 0x6bf50; pop rbx; pop rbp; pop r12; ret; 
0x000000000046c3d6: je 0x6c420; add esp, 0x20; pop rbx; ret; 
0x000000000046c79d: je 0x6c8b0; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000046c95d: je 0x6ca90; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000046d1bc: je 0x6d1c0; ret; 
0x000000000046d1ea: je 0x6d247; pop rbp; pop r12; ret; 
0x000000000046d28f: je 0x6d2ec; pop rbp; pop r12; ret; 
0x000000000046d3cd: je 0x6d3d2; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x000000000046d3b9: je 0x6d3d8; mov rdx, qword ptr [rbx + 0xd8]; mov esi, eax; mov rdi, rbx; call qword ptr [rdx + 0x30]; 
0x000000000046d411: je 0x6d416; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x000000000046d467: je 0x6d478; cmp rsi, rcx; jb 0x6d460; lea eax, dword ptr [rdx + rdi]; ret; 
0x000000000046e0a4: je 0x6e0b3; sar rdx, cl; test rdx, rdx; je 0x6e0d0; bsf rax, rdx; ret; 
0x000000000046e0ac: je 0x6e0d0; bsf rax, rdx; ret; 
0x000000000046e03c: je 0x6e0e0; bsf rax, rdx; ret; 
0x000000000046e210: je 0x6e3d0; bsr rax, rax; add rax, rdi; ret; 
0x000000000046e494: je 0x6e3d0; bsr rax, rsi; add rax, rdi; ret; 
0x000000000046e29e: je 0x6e3d0; bsr rsi, rsi; lea rax, qword ptr [rdi + rsi]; ret; 
0x000000000046f029: je 0x6f040; mov cl, dl; and cl, 0xf; je 0x6f050; ret; 
0x000000000046f030: je 0x6f050; ret; 
0x000000000046f045: je 0x6f060; add rax, 2; ret; 
0x0000000000400602: je 0x70f; pop rbx; pop rbp; pop r12; ret; 
0x000000000047337b: je 0x73353; mov rdx, -0x30; movsxd rdi, ebp; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x0000000000473aaf: je 0x73ac2; mov ecx, eax; and ecx, dword ptr [rsi + 0x10]; lea rcx, qword ptr [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x0000000000473d3a: je 0x73cc9; cmp byte ptr [rsi - 2], 0x3a; cmove rax, r9; ret; 
0x00000000004767a8: je 0x7672e; sub byte ptr [rax + 0x39], cl; ret 0x1376; 
0x000000000047857f: je 0x78592; mov qword ptr [rsp], r8; lea rdi, qword ptr [rax + 0x6cc1e0]; call rdx; 
0x00000000004793d3: je 0x793ea; mov qword ptr [rbp - 0xb8], r9; mov edi, 0x6cc140; call rax; 
0x000000000047944a: je 0x7945f; mov dword ptr [rbp - 0xa0], edx; mov edi, 0x6cc140; call rax; 
0x00000000004796f9: je 0x7971e; mov qword ptr [rbp - 0xd0], r8; mov qword ptr [rbp - 0xc8], r9; mov edi, 0x6cc140; call rax; 
0x0000000000479934: je 0x7993d; mov edi, 0x6cc100; call rax; 
0x000000000047999c: je 0x799b0; add rsp, 8; mov edi, 0x6cc100; pop rbx; pop rbp; jmp rax; 
0x000000000047a70a: je 0x7b22c; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r15]; call rax; 
0x000000000047afaa: je 0x7b551; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r15]; call rax; 
0x000000000047d875: je 0x7d88c; mov qword ptr [rbp - 0xa8], rdx; mov edi, 0x6cc140; call rax; 
0x000000000047d928: je 0x7d931; mov edi, 0x6cc140; call rax; 
0x000000000047d950: je 0x7d959; mov edi, 0x6cc140; call rax; 
0x000000000047d9c6: je 0x7d9cf; mov edi, 0x6cc140; call rax; 
0x000000000047e652: je 0x7e5c1; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x000000000047e569: je 0x7e5e0; add r8b, bpl; fidivr word ptr [rcx]; clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000047ea52: je 0x7ea5e; mov rax, qword ptr [r13]; add rax, qword ptr [rdx + 8]; call rax; 
0x000000000047eeeb: je 0x7eef6; mov rdi, qword ptr [rbp - 0x88]; call rax; 
0x000000000047f422: je 0x7f449; add byte ptr [rax + 0x75], al; cmp bl, dh; ret; 
0x000000000047f4dc: je 0x7f4f9; pop rbx; mov edi, 0x6cc140; jmp rax; 
0x000000000047f493: je 0x7f500; mov edi, 0x6cc140; call rax; 
0x000000000047f4f7: je 0x7f55d; pop rbx; ret; 
0x000000000048032b: je 0x802a0; mov eax, r8d; sub eax, ecx; ret; 
0x0000000000480c4e: je 0x80c12; mov edi, 0x6cc140; call rax; 
0x0000000000480c10: je 0x80c20; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000480c2b: je 0x80c3e; mov qword ptr [rsp + 8], rsi; mov edi, 0x6cc140; call rax; 
0x0000000000480c2f: je 0x80c55; or byte ptr [rdi + 0x6cc140], bh; call rax; 
0x0000000000480c44: je 0x80c60; mov eax, 0; test rax, rax; je 0x80c12; mov edi, 0x6cc140; call rax; 
0x0000000000480d96: je 0x80da0; ret; 
0x0000000000480dac: je 0x80db5; mov edi, 0x6cc140; call rax; 
0x0000000000480dbd: je 0x80dd0; mov edi, 0x6cc140; add rsp, 8; jmp rax; 
0x000000000048131b: je 0x81324; mov qword ptr [rax], 0x6ccac0; add rsp, 0x48; ret; 
0x0000000000481335: je 0x81324; mov rdi, qword ptr [rsp + 0x18]; call 0x1ea60; add rsp, 0x48; ret; 
0x000000000048a11e: je 0x8a124; mov qword ptr [rbp], rbx; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000048a19e: je 0x8a1a4; mov qword ptr [rbp], rbx; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000048a24c: je 0x8a252; mov qword ptr [rbp], rbx; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000048a385: je 0x8a370; cmp rcx, rax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x000000000048bf71: je 0x8bf79; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000048c24a: je 0x8c250; mov eax, edx; pop rbx; ret; 
0x000000000048c385: je 0x8c440; mov rax, rdx; pop rbx; ret; 
0x000000000048c51f: je 0x8c52c; mov qword ptr [rip + 0x24149c], 0x6cd9e0; add rsp, 8; ret; 
0x000000000048c567: je 0x8c680; mov esi, 0x48c500; mov edi, 0x6cd9c0; call rax; 
0x000000000048c696: je 0x8c6ae; mov esi, 0x48c740; mov edi, 0x6cd9c4; call rdx; 
0x000000000048c776: je 0x8c788; pop rbx; xor esi, esi; mov edi, dword ptr [rip + 0x241243]; jmp rax; 
0x000000000048c8af: je 0x8c7c0; mov rsi, rbx; mov edi, dword ptr [rip + 0x241106]; call rax; 
0x000000000048c7a2: je 0x8c810; mov esi, 0x48c500; mov edi, 0x6cd9c0; call rax; 
0x000000000048c829: je 0x8c8de; mov esi, 0x48c740; mov edi, 0x6cd9c4; call rdx; 
0x000000000048c911: je 0x8c91a; mov qword ptr [rax], 0x6ccae0; add rsp, 8; ret; 
0x000000000048cb42: je 0x8cb50; pop rbx; pop rbp; pop r12; ret; 
0x00000000004008dd: je 0x8f0; pop rbp; mov edi, 0x6ccb50; jmp rax; 
0x000000000040092b: je 0x938; pop rbp; mov edi, 0x6ccb50; jmp rax; 
0x000000000040095a: je 0x963; mov edi, 0x4bf080; call rax; 
0x0000000000498828: je 0x98831; mov edi, 0x6cc140; call rax; 
0x0000000000498854: je 0x9885d; mov edi, 0x6cc140; call rax; 
0x0000000000498afa: je 0x98b05; mov rax, qword ptr [rax + 8]; add rax, qword ptr [rbx]; call rax; 
0x00000000004009a8: je 0x998; call rax; 
0x000000000049a3bb: je 0x9a3c4; mov edi, 0x6cc140; call rax; 
0x000000000049a3e2: je 0x9a3eb; mov edi, 0x6cc140; call rax; 
0x000000000049a461: je 0x9a46a; mov edi, 0x6cc140; call rax; 
0x000000000049a48a: je 0x9a493; mov edi, 0x6cc140; call rax; 
0x000000000049ace9: je 0x9acd8; call 0xe410; mov rax, qword ptr [rsi + 0xb8]; add rsp, 8; ret; 
0x000000000049acbf: je 0x9acd8; cmp dil, 0x30; jne 0x9aceb; mov rax, qword ptr [rsi + 0xb0]; add rsp, 8; ret; 
0x000000000049ad91: je 0x9ae50; cmp sil, 0x2f; ja 0x9b5ee; movsxd rcx, dword ptr [r14 + rsi*4]; add rcx, r14; jmp rcx; 
0x000000000049cde0: je 0x9cd92; add rsp, 0x18; ret; 
0x000000000049cd97: je 0x9ce03; add rsp, 0x18; ret; 
0x000000000049cfa3: je 0x9cfb0; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000049d4e7: je 0x9d4f8; mov rsi, rdi; mov edi, 1; jmp rax; 
0x000000000049d773: je 0x9d761; call 0xe410; nop word ptr [rax + rax]; mov eax, 4; add rsp, 8; ret; 
0x000000000049d759: je 0x9d780; cmp dil, 4; jne 0x9d775; mov eax, 8; add rsp, 8; ret; 
0x000000000049da7b: je 0x9da90; xor eax, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000049e8ce: je 0x9e9d8; mov rsi, qword ptr [r14 + 8]; mov rdx, qword ptr [r15]; mov rdi, rbp; call rbx; 
0x000000000049ead0: je 0x9eb48; lea rbp, qword ptr [r13 - 1]; mov rdx, r12; mov rdi, qword ptr [rsp]; mov rsi, qword ptr [r15 + rbp*8 + 0x10]; call rbx; 
0x000000000049ee8d: je 0x9eeee; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000049f57a: je 0x9f583; mov edi, 0x6cc100; call rax; 
0x000000000049f63b: je 0x9f644; mov edi, 0x6cc100; call rax; 
0x00000000004a12de: je 0xa12e7; call rax; 
0x00000000004a12d5: je 0xa12ec; mov rax, qword ptr [rdi + 0x20]; test rax, rax; je 0xa12e7; call rax; 
0x00000000004a3fc9: je 0xa3fc3; push qword ptr [rax + 0x5c]; clc; call rax; 
0x00000000004a3fc9: je 0xa3fc3; push qword ptr [rax + 0x5c]; clc; call rax; js 0xa3fcb; jmp qword ptr [rax]; 
0x00000000004a47c8: je 0xa47d7; stc; jmp rsp; 
0x00000000004a4951: je 0xa494c; push qword ptr [rax]; je 0xa4950; inc dword ptr [rax + 0x74]; stc; call qword ptr [rax + 0x74]; 
0x00000000004a4955: je 0xa4950; inc dword ptr [rax + 0x74]; stc; call qword ptr [rax + 0x74]; 
0x00000000004a4955: je 0xa4950; inc dword ptr [rax + 0x74]; stc; call qword ptr [rax + 0x74]; stc; jmp qword ptr [rax + 0x74]; 
0x00000000004a4959: je 0xa4954; call qword ptr [rax + 0x74]; 
0x00000000004a4959: je 0xa4954; call qword ptr [rax + 0x74]; stc; jmp qword ptr [rax + 0x74]; 
0x00000000004a495d: je 0xa4958; jmp qword ptr [rax + 0x74]; 
0x00000000004a4969: je 0xa4964; call qword ptr [rax - 0x5f00068c]; je 0xa496c; push qword ptr [rax - 0x3f00068c]; je 0xa4974; call rax; 
0x00000000004a4971: je 0xa496c; push qword ptr [rax - 0x3f00068c]; je 0xa4974; call rax; 
0x00000000004a4975: je 0xa4970; inc eax; je 0xa4974; call rax; 
0x00000000004a4975: je 0xa4970; inc eax; je 0xa4974; call rax; je 0xa4978; jmp rax; 
0x00000000004a4979: je 0xa4974; call rax; 
0x00000000004a4979: je 0xa4974; call rax; je 0xa4978; jmp rax; 
0x00000000004a497d: je 0xa4978; jmp rax; 
0x00000000004a4981: je 0xa497c; push rax; je 0xa4980; inc dword ptr [rax]; jne 0xa4984; call qword ptr [rax]; 
0x00000000004a4985: je 0xa4980; inc dword ptr [rax]; jne 0xa4984; call qword ptr [rax]; 
0x00000000004a4985: je 0xa4980; inc dword ptr [rax]; jne 0xa4984; call qword ptr [rax]; jne 0xa4988; jmp qword ptr [rax]; 
0x00000000004bb1e8: je 0xbb1af; xor al, 0xd8; ret; 
0x00000000004bbf22: je 0xbbee8; ret 0xacfc; 
0x00000000004bfcf4: je 0xbfd02; add byte ptr [rax], al; pop rax; div esp; call qword ptr [rax]; 
0x00000000004bff72: je 0xbff7e; ret; 
0x00000000004c0bf4: je 0xc0c11; add byte ptr [rax], al; pop rax; cmc; call qword ptr [rcx + 2]; 
0x00000000004c4ff4: je 0xc5055; add byte ptr [rax], al; cmp al, bl; clc; call qword ptr [rdx]; 
0x00000000004c58d4: je 0xc5930; add byte ptr [rax], al; pop rax; pop rsp; cli; jmp qword ptr [rdx + 1]; 
0x00000000004c648d: je 0xc648f; add byte ptr [rax], dl; mov edx, edi; jmp qword ptr [rsi]; 
0x00000000004c68f4: je 0xc696e; add byte ptr [rax], al; js 0xc6896; cli; jmp rdi; 
0x00000000004c81f4: je 0xc8187; add byte ptr [rax], al; pop rax; xchg eax, ecx; sti; call qword ptr [rax]; 
0x000000000040f153: je 0xf175; mov eax, 0x4bf038; cmp rax, 0x4bf040; jae 0xf175; mov rbp, rax; call qword ptr [rbp]; 
0x000000000040f567: je 0xf57e; add byte ptr [rdi], cl; test edx, esi; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000004125e2: jg 0x12654; mov eax, 3; syscall; 
0x0000000000413628: jg 0x1369a; xor eax, eax; syscall; 
0x00000000004271f2: jg 0x2723b; adc bl, dh; movq qword ptr [rdi + rdx - 0x20], mm0; ret; 
0x0000000000427317: jg 0x27329; jne 0x27300; mov rax, rdi; ret; 
0x00000000004276e7: jg 0x276f8; test dword ptr [rax + 0x48fffffb], edi; mov eax, edi; ret; 
0x0000000000430a4e: jg 0x30a9f; ror byte ptr [rax - 0x7d], 0xef; lea r11, qword ptr [rip + 0x737f4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430bed: jg 0x30bef; add rsi, rdx; lea r11, qword ptr [rip + 0x73657]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430c8e: jg 0x30c90; lea r11, qword ptr [rip + 0x735b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430d3d: jg 0x30d3f; add rsi, rdx; lea r11, qword ptr [rip + 0x73507]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430dde: jg 0x30de0; lea r11, qword ptr [rip + 0x73469]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430e8d: jg 0x30e8f; add rsi, rdx; lea r11, qword ptr [rip + 0x733b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430f2e: jg 0x30f30; lea r11, qword ptr [rip + 0x73319]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430fdd: jg 0x30fdf; add rsi, rdx; lea r11, qword ptr [rip + 0x73267]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043112d: jg 0x3112f; add rsi, rdx; lea r11, qword ptr [rip + 0x73117]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004311ce: jg 0x311d0; lea r11, qword ptr [rip + 0x73079]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043127d: jg 0x3127f; add rsi, rdx; lea r11, qword ptr [rip + 0x72fc7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043131e: jg 0x31320; lea r11, qword ptr [rip + 0x72f29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004313cd: jg 0x313cf; add rsi, rdx; lea r11, qword ptr [rip + 0x72e77]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043146e: jg 0x31470; lea r11, qword ptr [rip + 0x72dd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431525: jg 0x31527; lea r11, qword ptr [rip + 0x72d22]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004315be: jg 0x315c0; lea r11, qword ptr [rip + 0x72c89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043166d: jg 0x3166f; add rsi, rdx; lea r11, qword ptr [rip + 0x72bd7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043170e: jg 0x31710; lea r11, qword ptr [rip + 0x72b39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004317bd: jg 0x317bf; add rsi, rdx; lea r11, qword ptr [rip + 0x72a87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043185e: jg 0x31860; lea r11, qword ptr [rip + 0x729e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043190d: jg 0x3190f; add rsi, rdx; lea r11, qword ptr [rip + 0x72937]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431a5d: jg 0x31a5f; add rsi, rdx; lea r11, qword ptr [rip + 0x727e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431afe: jg 0x31b00; lea r11, qword ptr [rip + 0x72749]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431bad: jg 0x31baf; add rsi, rdx; lea r11, qword ptr [rip + 0x72697]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431c4e: jg 0x31c50; lea r11, qword ptr [rip + 0x725f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431cfd: jg 0x31cff; add rsi, rdx; lea r11, qword ptr [rip + 0x72547]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431d9e: jg 0x31da0; lea r11, qword ptr [rip + 0x724a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431e4d: jg 0x31e4f; add rsi, rdx; lea r11, qword ptr [rip + 0x723f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000432859: jg 0x328aa; ret; 
0x00000000004328df: jg 0x32928; ret; 
0x0000000000432a59: jg 0x32aaa; ret 0x894c; 
0x0000000000432adf: jg 0x32b28; ret 0x894c; 
0x000000000043317e: jg 0x33140; sub rdx, 0x40; lea r11, qword ptr [rip + 0x710c5]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043326b: jg 0x332d7; rol ch, 1; jp 0x332f0; jb 0x33253; vmovdqu xmmword ptr [rdx - 0x10], xmm15; ret; 
0x00000000004332fc: jg 0x33305; vmovdqu xmmword ptr [rdi + 0x10], xmm1; vmovdqu xmmword ptr [rdi + rdx - 0x20], xmm6; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x000000000043331c: jg 0x33325; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x0000000000433602: jg 0x33654; push rax; vmovdqu xmmword ptr [rax + 0x60], xmm11; vmovdqu xmmword ptr [rax + 0x70], xmm12; ret; 
0x000000000043367d: jg 0x336cf; push rax; vmovdqu xmmword ptr [rax + 0x60], xmm11; vmovdqu xmmword ptr [rax + 0x70], xmm12; ret; 
0x0000000000435368: jg 0x353b1; loope 0x3535f; movq qword ptr [rdi - 0x10], mm1; ret; 
0x00000000004353df: jg 0x35428; ret 0xff2; 
0x000000000043546f: jg 0x354b8; ret; 
0x0000000000435518: jg 0x35561; in al, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000435598: jg 0x355e1; in eax, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000435618: jg 0x35661; out 0xf3, al; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000435698: jg 0x356e1; out 0xf3, eax; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000435918: jg 0x35961; in al, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435998: jg 0x359e1; in eax, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435a28: jg 0x35a71; out dx, al; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435aa8: jg 0x35af1; out dx, eax; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435b1c: jg 0x35b25; ret; 
0x0000000000435b76: jg 0x35b87; ret; 
0x0000000000435b71: jg 0x35bba; psllq mm1, qword ptr [rdi]; jg 0x35b87; ret; 
0x0000000000435be6: jg 0x35bf7; ret; 
0x0000000000435c56: jg 0x35c67; ret; 
0x0000000000435c43: jg 0x35c8c; sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435c51: jg 0x35c9a; or eax, 0xf7f0ff3; ret; 
0x0000000000435cc6: jg 0x35cd7; ret; 
0x0000000000435cc1: jg 0x35d0a; or al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x0000000000435d36: jg 0x35d47; ret; 
0x0000000000435d31: jg 0x35d7a; or esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x0000000000435da6: jg 0x35db7; ret; 
0x0000000000435da1: jg 0x35dea; or dh, bl; movq qword ptr [rdi], mm1; ret; 
0x0000000000435e16: jg 0x35e27; ret; 
0x0000000000435e11: jg 0x35e5a; or ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x0000000000435e86: jg 0x35e97; ret; 
0x0000000000435e81: jg 0x35eca; or bl, dh; movq qword ptr [rdi], mm1; ret; 
0x0000000000435ef6: jg 0x35f07; ret; 
0x0000000000435f66: jg 0x35f77; ret; 
0x0000000000435fd6: jg 0x35fe7; ret; 
0x0000000000435fc3: jg 0x3600c; adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435fd1: jg 0x3601a; add eax, 0xf7f0ff3; ret; 
0x0000000000436046: jg 0x36057; ret; 
0x0000000000436041: jg 0x3608a; add al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x00000000004360b6: jg 0x360c7; ret; 
0x00000000004360b1: jg 0x360fa; add esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x0000000000436126: jg 0x36137; ret; 
0x0000000000436121: jg 0x3616a; add dh, bl; movq qword ptr [rdi], mm1; ret; 
0x0000000000436196: jg 0x361a7; ret; 
0x0000000000436191: jg 0x361da; add ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x00000000004362b0: jg 0x362b9; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x00000000004362d4: jg 0x362dd; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x00000000004362e8: jg 0x362f1; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x000000000043675a: jg 0x36754; ret; 
0x000000000043be66: jg 0x3be6f; ret; 
0x000000000043be76: jg 0x3be7f; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000043be8a: jg 0x3be93; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000043bea9: jg 0x3beb2; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000043beb9: jg 0x3bec2; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000043bec9: jg 0x3bed2; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000043beea: jg 0x3bef3; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000043bf0a: jg 0x3bf13; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000043bf2a: jg 0x3bf33; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000043bf4a: jg 0x3bf53; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000043bf6e: jg 0x3bf77; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000043bf8d: jg 0x3bf96; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000043bfad: jg 0x3bfb6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000043bfcb: jg 0x3bfd4; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000043bfeb: jg 0x3bff4; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000043c00b: jg 0x3c014; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000043c02b: jg 0x3c034; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000043c4f6: jg 0x3c4ff; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000043c506: jg 0x3c50f; mov byte ptr [rdi + 0x10], dh; lea rax, qword ptr [rdi + 0x10]; ret; 
0x000000000043c51a: jg 0x3c523; mov word ptr [rdi + 0x10], cx; lea rax, qword ptr [rdi + 0x11]; ret; 
0x000000000043c539: jg 0x3c542; mov dword ptr [rdi + 0xf], ecx; lea rax, qword ptr [rdi + 0x12]; ret; 
0x000000000043c559: jg 0x3c562; mov dword ptr [rdi + 0x10], ecx; lea rax, qword ptr [rdi + 0x13]; ret; 
0x000000000043c579: jg 0x3c582; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, qword ptr [rdi + 0x14]; ret; 
0x000000000043c59a: jg 0x3c5a3; mov qword ptr [rdi + 0xe], rcx; lea rax, qword ptr [rdi + 0x15]; ret; 
0x000000000043c5ba: jg 0x3c5c3; mov qword ptr [rdi + 0xf], rcx; lea rax, qword ptr [rdi + 0x16]; ret; 
0x000000000043c5da: jg 0x3c5e3; mov qword ptr [rdi + 0x10], rcx; lea rax, qword ptr [rdi + 0x17]; ret; 
0x000000000043c5fa: jg 0x3c603; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, qword ptr [rdi + 0x18]; ret; 
0x000000000043c61e: jg 0x3c627; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, qword ptr [rdi + 0x19]; ret; 
0x000000000043c63d: jg 0x3c646; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, qword ptr [rdi + 0x1a]; ret; 
0x000000000043c65d: jg 0x3c666; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, qword ptr [rdi + 0x1b]; ret; 
0x000000000043c67b: jg 0x3c684; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, qword ptr [rdi + 0x1c]; ret; 
0x000000000043c69b: jg 0x3c6a4; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, qword ptr [rdi + 0x1d]; ret; 
0x000000000043c6bb: jg 0x3c6c4; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, qword ptr [rdi + 0x1e]; ret; 
0x000000000043c67f: jg 0x3c6d8; or eax, 0x1c478d48; ret; 
0x000000000043c6db: jg 0x3c6e4; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, qword ptr [rdi + 0x1f]; ret; 
0x000000000043e6d7: jg 0x3e6e0; vmovdqu xmmword ptr [rdi + 0x10], xmm0; vmovdqu xmmword ptr [rsi - 0x20], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000043e6f2: jg 0x3e6fb; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000043e877: jg 0x3e880; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000043e86d: jg 0x3e886; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x000000000043ee40: jg 0x3ee7b; ret 0x2b77; 
0x0000000000441853: jg 0x4185d; add byte ptr [rdx + 4], bh; je 0x42578; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004418cc: jg 0x418d6; add byte ptr [rdx + 4], bh; je 0x425d8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441978: jg 0x41982; add byte ptr [rdx + 4], bh; je 0x42618; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004419f1: jg 0x419fb; add byte ptr [rdx + 4], bh; je 0x425f8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441ad1: jg 0x41adb; add byte ptr [rdx + 4], bh; je 0x425b8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441bf6: jg 0x41c00; add byte ptr [rdx + 4], bh; je 0x42558; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441c6f: jg 0x41c79; add byte ptr [rdx + 4], bh; je 0x42538; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441d80: jg 0x41d8a; add byte ptr [rdx + 4], bh; je 0x42458; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441df9: jg 0x41e03; add byte ptr [rdx + 4], bh; je 0x42438; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441f1e: jg 0x41f28; add byte ptr [rdx + 4], bh; je 0x424f8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441ffe: jg 0x42008; add byte ptr [rdx + 4], bh; je 0x424d8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442077: jg 0x42081; add byte ptr [rdx + 4], bh; je 0x424b8; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044219c: jg 0x421a6; add byte ptr [rdx + 4], bh; je 0x42478; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004425ba: jg 0x425cc; add byte ptr [rdi], cl; test dword ptr [rsi*8 + 0x3beffff], ebx; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; call rbx; 
0x000000000044a7df: jg 0x4a76a; ret 0x5c77; 
0x000000000047c10d: jg 0x7c150; std; inc dword ptr [rbp - 0x76b48a40]; ret; 
0x00000000004813a5: jg 0x813cf; mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x000000000048bcc7: jg 0x8bcd0; call 0x8b620; leave; ret; 
0x000000000048bf6e: jg 0x8bf70; add byte ptr [rsi + rax - 0x39], dh; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x000000000048bff3: jg 0x8bff5; or edx, esi; or edx, eax; mov dword ptr [rsp - 4], edx; movss xmm0, dword ptr [rsp - 4]; ret; 
0x000000000048c064: jg 0x8c06f; ret 0x5488; 
0x0000000000495e3c: jg 0x95e27; push -0x7a000006; ror byte ptr [rdi], cl; xchg eax, ebp; ret 0xb60f; 
0x0000000000499261: jg 0x99263; add byte ptr [rcx], bh; ret; 
0x00000000004c0621: jg 0xc0631; movabs al, byte ptr [0x44200e4c01]; lodsb al, byte ptr [rsi]; adc eax, 0x23100000; cmc; call qword ptr [rsi + 4]; 
0x0000000000440b8b: jge 0x40b8d; call rbx; 
0x0000000000440cb2: jge 0x40cb4; call rbx; 
0x0000000000440cc0: jge 0x40cc2; call rbx; 
0x0000000000440df5: jge 0x40df7; call rbx; 
0x0000000000440f65: jge 0x40f67; call rbx; 
0x0000000000440f73: jge 0x40f75; call rbx; 
0x00000000004413c6: jge 0x41388; mov r13d, ebx; mov rax, qword ptr [rbp - 0x48]; call rax; 
0x000000000044180f: jge 0x41819; add byte ptr [rdx + 2], bh; je 0x422f8; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441a8d: jge 0x41a97; add byte ptr [rdx + 2], bh; je 0x422b8; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441d3c: jge 0x41d46; add byte ptr [rdx + 2], bh; je 0x422d8; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000442783: jge 0x42785; call rbx; 
0x00000000004428ab: jge 0x428ad; call rbx; 
0x00000000004429ee: jge 0x429f0; call rbx; 
0x0000000000442aef: jge 0x42af1; call rbx; 
0x0000000000442b0b: jge 0x42b0d; call rbx; 
0x0000000000442e66: jge 0x42e10; mov eax, 3; syscall; 
0x0000000000442f53: jge 0x42eed; mov eax, 3; syscall; 
0x00000000004548e4: jge 0x54916; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000480187: jge 0x8018a; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000480247: jge 0x8024a; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000049d1af: jge 0x9d1a9; leave; ret; 
0x000000000049d247: jge 0x9d241; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049d2db: jge 0x9d2d5; leave; ret; 
0x000000000049d327: jge 0x9d321; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049d3f0: jge 0x9d3ea; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049d47f: jge 0x9d479; leave; ret; 
0x000000000049d4d0: jge 0x9d4ca; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049da78: jge 0x9da83; jp 0x9daf0; adc esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000401278: jl 0x129e; or al, 0x41; call rsp; 
0x00000000004012cc: jl 0x12f2; or al, 0x48; mov eax, dword ptr [rsp + 0x18]; call rax; 
0x000000000041495b: jl 0x1499d; movzx eax, ch; pop rbx; pop rbp; pop r12; ret; 
0x000000000041bc45: jl 0x1bc6b; or byte ptr [rax + 1], cl; ret 0x8948; 
0x000000000041bd7c: jl 0x1bda2; or byte ptr [rax + 1], cl; ret 0x8948; 
0x000000000043623f: jl 0x36289; adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000436246: jl 0x36290; adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000043624d: jl 0x36297; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000436254: jl 0x3629e; adc dword ptr [rcx - 1], edi; ret; 
0x000000000043627c: jl 0x362c6; adc dword ptr [rdi], eax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000436282: jl 0x362cc; adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000436289: jl 0x362d3; adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000436290: jl 0x362da; adc dword ptr [rcx - 1], ebx; ret; 
0x0000000000436479: jl 0x364c3; adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000436480: jl 0x364ca; adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000436487: jl 0x364d1; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000043648e: jl 0x364d8; adc dword ptr [rcx - 1], edi; ret; 
0x00000000004365e7: jl 0x36631; adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x00000000004365ee: jl 0x36638; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x00000000004365f5: jl 0x3663f; adc dword ptr [rcx + 7], edi; ret; 
0x0000000000436742: jl 0x3678c; adc dword ptr [rdi - 5], esp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000436749: jl 0x36793; adc dword ptr [rdi - 6], ebp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000436750: jl 0x3679a; adc dword ptr [rdi - 7], esi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000436757: jl 0x367a1; adc dword ptr [rdi - 8], edi; ret; 
0x000000000043e817: jl 0x3e861; adc dword ptr [rsi - 4], edx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043e81e: jl 0x3e868; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043e825: jl 0x3e86f; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043e82c: jl 0x3e876; adc dword ptr [rsi - 1], edx; ret; 
0x000000000043e839: jl 0x3e883; adc dword ptr [rdi], edx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043e83f: jl 0x3e889; adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043e846: jl 0x3e890; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043e84d: jl 0x3e897; adc dword ptr [rsi - 1], edx; ret; 
0x000000000043e85a: jl 0x3e8a4; adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043e860: jl 0x3e8aa; adc dword ptr [rsi - 1], edx; ret; 
0x000000000043e920: jl 0x3e96a; adc dword ptr [rsi - 4], edx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043e927: jl 0x3e971; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043e92e: jl 0x3e978; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043e935: jl 0x3e97f; adc dword ptr [rsi - 1], edx; ret; 
0x000000000043e979: jl 0x3e9c3; adc dword ptr [rsi], edx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000043e97f: jl 0x3e9c9; adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000043e986: jl 0x3e9d0; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000043e98d: jl 0x3e9d7; adc dword ptr [rsi + 3], edx; ret; 
0x000000000043ea1c: jl 0x3ea66; adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000043ea23: jl 0x3ea6d; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000043ea2a: jl 0x3ea74; adc dword ptr [rsi + 7], edx; ret; 
0x000000000043ffa4: jl 0x3ffca; test al, 2; cmove eax, edx; ret; 
0x000000000044004c: jl 0x40072; adc byte ptr [rdx], al; cmove eax, edx; add rsp, 0x60; pop rbx; ret; 
0x000000000044014f: jl 0x40175; or byte ptr [rax - 0x75], cl; jl 0x4017a; or byte ptr [rax + 0x4f], bh; syscall; 
0x0000000000440154: jl 0x4017a; or byte ptr [rax + 0x4f], bh; syscall; 
0x000000000044045a: jl 0x40480; adc byte ptr [rax + 0x101], bh; syscall; 
0x00000000004404dc: jl 0x40502; adc byte ptr [rax + 3], bh; syscall; 
0x000000000044066a: jl 0x40690; or byte ptr [rax + 0x29], cl; ret; 
0x0000000000441020: jl 0x41046; adc byte ptr [rax - 0x75], cl; and al, 0x18; call rax; 
0x0000000000442282: jl 0x422a8; adc byte ptr [rax], al; jne 0x417f8; mov esi, 3; mov rdi, r12; call rbx; 
0x0000000000447f96: jl 0x47fbc; adc byte ptr [rax - 0x75], cl; and al, 0x20; call rax; 
0x00000000004488f9: jl 0x4891f; adc byte ptr [rax - 0x75], cl; and al, 0x28; call rax; 
0x0000000000448cdf: jl 0x48d05; sbb byte ptr [rax - 0x75], cl; and al, 0x28; call rax; 
0x0000000000449a70: jl 0x49a96; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000044a789: jl 0x4a7af; xor byte ptr [rax - 0x75], cl; and al, 0x20; call rax; 
0x000000000044b695: jl 0x4b6bb; sbb byte ptr [rax - 0x75], cl; and al, 0x28; call rax; 
0x000000000044dc48: jl 0x4dc6e; sub byte ptr [rcx - 0x77], al; ret 0x8b4c; 
0x0000000000450732: jl 0x50758; or byte ptr [rax - 0x7d], cl; call qword ptr [rbx]; 
0x000000000045343c: jl 0x53462; and byte ptr [rax + 1], cl; ret; 
0x000000000045d6bc: jl 0x5d6e2; and byte ptr [rax + 1], cl; ret; 
0x000000000046d135: jl 0x6d0cc; add byte ptr [rax - 0x7d], cl; ret 0x4c01; 
0x0000000000476eef: jl 0x76f15; cmovs eax, dword ptr [rbx + 0x5e8f0e7]; pop rsi; sti; dec dword ptr [rax - 0x77]; ret; 
0x000000000048101a: jl 0x8101b; dec dword ptr [rax - 0x77]; adc byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x000000000048106f: jl 0x81095; sub byte ptr [rax], al; jne 0x81080; add rsp, 0x38; ret; 
0x0000000000481091: jl 0x810b7; sub byte ptr [rcx - 0x17f3dbbc], cl; ret; 
0x00000000004811e9: jl 0x8120f; adc byte ptr [rax], al; jne 0x81228; xor eax, eax; add rsp, 0x68; ret; 
0x00000000004958ed: jl 0x95913; js 0x95932; call rsp; 
0x0000000000495c02: jl 0x95c28; js 0x95c47; call rsp; 
0x0000000000495dc1: jl 0x95de7; js 0x95e06; call rsp; 
0x0000000000495fc9: jl 0x95fef; js 0x9600e; call rsp; 
0x00000000004975c7: jl 0x9758e; adc byte ptr [rax - 0x77], cl; retf 0x8b48; xor cl, byte ptr [rax - 0x7d]; ret 0xf08; 
0x000000000049b802: jl 0x9b828; sub byte ptr [rax - 0x7d], cl; ret; 
0x00000000004a3fdd: jl 0xa3fd7; call qword ptr [rax]; 
0x00000000004a3fdd: jl 0xa3fd7; call qword ptr [rax]; jle 0xa3fdb; jmp qword ptr [rax + 0x7f]; 
0x00000000004a4a2d: jl 0xa4a28; jmp qword ptr [rax]; 
0x00000000004a4a31: jl 0xa4a2c; inc dword ptr [rax + 0x7c]; stc; jmp qword ptr [rax + 0x7c]; 
0x00000000004a4a35: jl 0xa4a30; jmp qword ptr [rax + 0x7c]; 
0x00000000004a4a39: jl 0xa4a34; inc dword ptr [rax - 0x5f000684]; jl 0xa4a3c; inc eax; jl 0xa4a40; jmp rax; 
0x00000000004a4a41: jl 0xa4a3c; inc eax; jl 0xa4a40; jmp rax; 
0x00000000004a4a45: jl 0xa4a40; jmp rax; 
0x00000000004c39fc: jl 0xc3a47; add byte ptr [rax], al; mov al, 0x15; clc; call qword ptr [rax]; 
0x00000000004c55c9: jl 0xc55c4; call rdx; 
0x00000000004c8cfc: jl 0xc8c9a; add byte ptr [rax], al; xor byte ptr [rsp + rdi*8], bh; jmp qword ptr [rdx]; 
0x00000000004c8ffc: jl 0xc8f9d; add byte ptr [rax], al; clc; iretd; cld; call qword ptr [rdi + 9]; 
0x000000000040e863: jl 0xe889; and byte ptr [rax - 0x75], cl; and al, 0x30; lea r15, qword ptr [rbx + r14]; call rax; 
0x0000000000413021: jle 0x13093; mov rdx, rbx; mov rsi, rbp; mov eax, r13d; syscall; 
0x0000000000415a85: jle 0x15ad0; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x00000000004243ae: jle 0x243b0; add byte ptr [rax], al; bsf rax, rdx; ret; 
0x000000000043e712: jle 0x3e6d5; cmp dl, 4; jb 0x3e720; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x000000000043e7a6: jle 0x3e768; rep stosb byte ptr [rdi], al; mov rax, rsi; sub rax, rdx; vzeroupper; ret; 
0x000000000043e890: jle 0x3e853; cmp dl, 4; jb 0x3e89d; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x0000000000441833: jle 0x4183d; add byte ptr [rdx + 3], bh; je 0x42338; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441958: jle 0x41962; add byte ptr [rdx + 3], bh; je 0x42398; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441ab1: jle 0x41abb; add byte ptr [rdx + 3], bh; je 0x42378; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441bd6: jle 0x41be0; add byte ptr [rdx + 3], bh; je 0x42358; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441d60: jle 0x41d6a; add byte ptr [rdx + 3], bh; je 0x42418; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441fde: jle 0x41fe8; add byte ptr [rdx + 3], bh; je 0x423d8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442103: jle 0x4210d; add byte ptr [rdx + 3], bh; je 0x423b8; xor esi, esi; mov rdi, r14; call rbx; 
0x00000000004441d0: jle 0x4421d; add byte ptr [rax - 0x7b], cl; ror byte ptr [rax + 0xf], 0x44; ret 0x3880; 
0x0000000000445f21: jle 0x45f63; add byte ptr [rax - 0x18], dh; ret 0xfba5; 
0x000000000044e0b2: jle 0x4e0bc; sub eax, 1; mov dword ptr [rbx + 8], eax; pop rbx; ret; 
0x000000000044fae9: jle 0x4fb5d; mov rdx, r9; mov rsi, r10; mov rdi, r13; mov eax, r8d; syscall; 
0x000000000044fab3: jle 0x4fb60; mov rsi, rax; mov rdx, r9; mov rdi, r13; xor eax, eax; syscall; 
0x00000000004583ae: jle 0x583cb; mov rax, qword ptr [rbx + 0xd8]; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004585a0: jle 0x58486; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000045c351: jle 0x5c394; add byte ptr [r15 + r9 + 0x44], cl; ret 0xf4c; 
0x00000000004629ae: jle 0x629cb; mov rax, qword ptr [rbx + 0xd8]; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000046be4a: jle 0x6be37; mov rax, qword ptr [r12 + 0xd8]; movsxd rdx, ebx; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000046c08a: jle 0x6c077; mov rax, qword ptr [r12 + 0xd8]; movsxd rdx, ebx; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x00000000004800c0: jle 0x800c3; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000048a0c7: jle 0x8a0c0; jmp qword ptr [rsi + 0xf]; 
0x000000000048c380: jle 0x8c390; test ah, 0x80; je 0x8c440; mov rax, rdx; pop rbx; ret; 
0x00000000004a3fe1: jle 0xa3fdb; jmp qword ptr [rax + 0x7f]; 
0x00000000004a4190: jle 0xa4156; clc; call qword ptr [rsi]; 
0x00000000004bc53a: jle 0xbc4d5; mov edi, 0x99b51319; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x00000000004c6319: jle 0xc6315; jmp rdx; 
0x00000000004c6e8d: jle 0xc6e8f; add byte ptr [rax - 0x37], dh; cli; call qword ptr [rcx]; 
0x00000000004a4673: jmp qword ptr [rax + 0x10]; 
0x00000000004a466b: jmp qword ptr [rax + 0x11]; 
0x00000000004a4663: jmp qword ptr [rax + 0x12]; 
0x00000000004a465b: jmp qword ptr [rax + 0x13]; 
0x00000000004a463f: jmp qword ptr [rax + 0x18]; 
0x00000000004a4427: jmp qword ptr [rax + 0x1b]; 
0x00000000004a401b: jmp qword ptr [rax + 0x41]; 
0x00000000004be463: jmp qword ptr [rax + 0x4d]; 
0x00000000004be473: jmp qword ptr [rax + 0x56]; 
0x00000000004be483: jmp qword ptr [rax + 0x5f]; 
0x00000000004a3f9f: jmp qword ptr [rax + 0x64]; 
0x00000000004be493: jmp qword ptr [rax + 0x68]; 
0x00000000004a3fbf: jmp qword ptr [rax + 0x71]; 
0x00000000004a495f: jmp qword ptr [rax + 0x74]; 
0x00000000004a499b: jmp qword ptr [rax + 0x75]; 
0x00000000004a49f3: jmp qword ptr [rax + 0x7a]; 
0x00000000004a4a17: jmp qword ptr [rax + 0x7b]; 
0x00000000004a4a37: jmp qword ptr [rax + 0x7c]; 
0x00000000004a3fe3: jmp qword ptr [rax + 0x7f]; 
0x00000000004a484f: jmp qword ptr [rax + 0xc]; 
0x00000000004a4847: jmp qword ptr [rax + 0xd]; 
0x00000000004a467b: jmp qword ptr [rax + 0xf]; 
0x00000000004c6813: jmp qword ptr [rax + 1]; 
0x00000000004be423: jmp qword ptr [rax - 0x13]; 
0x00000000004a42cb: jmp qword ptr [rax - 0x15]; 
0x00000000004a42c7: jmp qword ptr [rax - 0x17]; 
0x00000000004a42c3: jmp qword ptr [rax - 0x19]; 
0x00000000004a435f: jmp qword ptr [rax - 0x1c]; 
0x00000000004a42f7: jmp qword ptr [rax - 0x1f]; 
0x00000000004a426f: jmp qword ptr [rax - 0x22]; 
0x00000000004a43fb: jmp qword ptr [rax - 0x2b]; 
0x00000000004a43a7: jmp qword ptr [rax - 0x32]; 
0x00000000004a4143: jmp qword ptr [rax - 0x45]; 
0x000000000045954e: jmp qword ptr [rax - 0x67]; 
0x00000000004a0be6: jmp qword ptr [rax - 0x74]; 
0x00000000004a107e: jmp qword ptr [rax - 0x78]; 
0x00000000004a0e3e: jmp qword ptr [rax - 0x7d]; 
0x00000000004a3eab: jmp qword ptr [rax - 4]; 
0x00000000004a3e97: jmp qword ptr [rax - 8]; 
0x000000000041d679: jmp qword ptr [rax]; 
0x0000000000466a1b: jmp qword ptr [rbp + 0x41]; 
0x0000000000466a67: jmp qword ptr [rbp + 0x45]; 
0x00000000004c7463: jmp qword ptr [rbp + 0xb]; 
0x00000000004c76db: jmp qword ptr [rbp + 1]; 
0x00000000004c2973: jmp qword ptr [rbp + 4]; 
0x0000000000464351: jmp qword ptr [rbp - 0x75]; 
0x0000000000464341: jmp qword ptr [rbp]; 
0x00000000004c2c13: jmp qword ptr [rbx + 0x17]; 
0x00000000004c2a7b: jmp qword ptr [rbx + 2]; 
0x00000000004c71d3: jmp qword ptr [rbx + 5]; 
0x00000000004b9c06: jmp qword ptr [rbx - 0x40]; 
0x00000000004c2bcb: jmp qword ptr [rbx]; 
0x00000000004633a6: jmp qword ptr [rcx + 0x48]; 
0x00000000004a4187: jmp qword ptr [rcx - 0x3d]; 
0x00000000004ba563: jmp qword ptr [rcx - 0x69]; 
0x00000000004c0d6b: jmp qword ptr [rcx]; 
0x00000000004c2ac3: jmp qword ptr [rdi + 0x2b]; 
0x0000000000499647: jmp qword ptr [rdi + 0x6d]; 
0x000000000045a79b: jmp qword ptr [rdi + 0xf]; 
0x00000000004c5a4b: jmp qword ptr [rdi + 1]; 
0x00000000004c20c3: jmp qword ptr [rdi + 3]; 
0x00000000004c2be3: jmp qword ptr [rdi + 6]; 
0x00000000004a41cf: jmp qword ptr [rdi - 0x3c]; 
0x00000000004597fb: jmp qword ptr [rdi - 0x75]; 
0x000000000044d710: jmp qword ptr [rdi]; 
0x00000000004a44d3: jmp qword ptr [rdx + 0x1d]; 
0x00000000004365c2: jmp qword ptr [rdx + 0x51]; 
0x0000000000436723: jmp qword ptr [rdx + 0x71]; 
0x00000000004c58db: jmp qword ptr [rdx + 1]; 
0x00000000004c7c73: jmp qword ptr [rdx + 9]; 
0x00000000004bef3f: jmp qword ptr [rdx - 0x2b]; 
0x00000000004366db: jmp qword ptr [rdx - 0x2f]; 
0x00000000004ba5b0: jmp qword ptr [rdx - 0x71]; 
0x00000000004bc6d3: jmp qword ptr [rdx - 0x78]; 
0x0000000000436221: jmp qword ptr [rdx - 0xf]; 
0x000000000049a9fd: jmp qword ptr [rdx]; 
0x00000000004a446f: jmp qword ptr [rsi + 0x1a]; 
0x00000000004c56b3: jmp qword ptr [rsi + 0x28]; 
0x00000000004018c4: jmp qword ptr [rsi + 0x2e]; 
0x0000000000451f4d: jmp qword ptr [rsi + 0x41]; 
0x00000000004978f0: jmp qword ptr [rsi + 0x43]; 
0x000000000043e4e3: jmp qword ptr [rsi + 0x44]; 
0x00000000004339ff: jmp qword ptr [rsi + 0x45]; 
0x0000000000400889: jmp qword ptr [rsi + 0xf]; 
0x00000000004c5b1b: jmp qword ptr [rsi + 1]; 
0x00000000004c1183: jmp qword ptr [rsi + 2]; 
0x000000000045b80f: jmp qword ptr [rsi - 0x3f]; 
0x00000000004a41b3: jmp qword ptr [rsi - 0x40]; 
0x00000000004a41ab: jmp qword ptr [rsi - 0x41]; 
0x00000000004a41a3: jmp qword ptr [rsi - 0x42]; 
0x000000000040099d: jmp qword ptr [rsi - 0x70]; 
0x000000000042727c: jmp qword ptr [rsi - 0x77]; 
0x0000000000404388: jmp qword ptr [rsi - 0x7b]; 
0x00000000004404a1: jmp qword ptr [rsi - 0x7d]; 
0x00000000004a445f: jmp qword ptr [rsi]; 
0x00000000004008e5: jmp rax; 
0x000000000047f8e1: jmp rbx; 
0x0000000000420fee: jmp rcx; 
0x00000000004c68fb: jmp rdi; 
0x000000000042206a: jmp rdx; 
0x00000000004a4197: jmp rsi; 
0x00000000004a45bb: jmp rsp; 
0x00000000004104ab: jne 0x104b8; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000410bec: jne 0x108e0; mov rdi, rbp; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000410fcb: jne 0x10fd4; mov rdx, qword ptr [r15 + 0x40]; sub rdx, rsi; mov rdi, r15; call rax; 
0x000000000041165c: jne 0x11660; pop rbx; ret; 
0x0000000000401193: jne 0x11b5; nop dword ptr [rax]; call qword ptr [rbx + 0x10]; 
0x00000000004120aa: jne 0x121d6; mov esi, 0x902; mov edi, 0x4a2ac7; mov eax, 2; syscall; 
0x0000000000412270: jne 0x123f7; mov esi, 0x902; mov edi, 0x4a2ac7; mov eax, 2; syscall; 
0x0000000000412844: jne 0x127c0; mov rdi, rbp; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000412bed: jne 0x12bf6; mov rdx, qword ptr [rbx + 0x40]; sub rdx, rsi; mov rdi, rbx; call rax; 
0x0000000000413e35: jne 0x13e40; ret; 
0x0000000000415d07: jne 0x15d39; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x00000000004162c1: jne 0x162d0; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000416612: jne 0x165fa; pop rbx; ret; 
0x000000000041664c: jne 0x16640; lea eax, dword ptr [rdx + rdi]; ret; 
0x0000000000416d60: jne 0x16d1e; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000416f43: jne 0x16f50; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000401932: jne 0x18ea; xor edx, edx; mov esi, 0x20001; mov edi, 0x4a1e23; mov eax, 2; syscall; 
0x000000000040199f: jne 0x1904; xor edx, edx; mov esi, 0x20000; mov edi, 0x4a1e2d; mov eax, 2; syscall; 
0x0000000000401a0f: jne 0x191e; xor edx, edx; mov esi, 0x20000; mov edi, 0x4a1e2d; mov eax, 2; syscall; 
0x000000000041b5cd: jne 0x1b633; mov esi, 0x80000; mov edi, 0x4a34a0; mov eax, 2; syscall; 
0x000000000041e771: jne 0x1e82f; mov rax, rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041fa7c: jne 0x1faa8; mov rax, qword ptr [rip + 0x2adb6b]; test rax, rax; je 0x1fa8c; call rax; 
0x000000000041fde5: jne 0x1feb7; mov rax, rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000421fd4: jne 0x21fdd; lea rax, qword ptr [rip + 3]; ret; 
0x0000000000426a25: jne 0x26b10; pmovmskb eax, xmm1; bsf eax, eax; lea rax, qword ptr [rdi + rax + 0x30]; ret; 
0x0000000000426ad9: jne 0x26b30; xor rax, rax; ret; 
0x0000000000426a99: jne 0x26b50; xor rax, rax; ret; 
0x0000000000426b7a: jne 0x26b84; lea rax, qword ptr [rip + 0x1d]; ret; 
0x00000000004273c3: jne 0x272a6; mov rax, rdi; ret; 
0x0000000000427319: jne 0x27300; mov rax, rdi; ret; 
0x00000000004273fa: jne 0x27410; and edx, 7; jne 0x272a6; mov rax, rdi; ret; 
0x00000000004275e4: jne 0x27600; and edx, 0x3f; jne 0x272a6; mov rax, rdi; ret; 
0x0000000000427840: jne 0x27849; lea rax, qword ptr [rip + 0x67]; ret; 
0x0000000000427893: jne 0x2789c; lea rax, qword ptr [rip + 4]; ret; 
0x0000000000402bb7: jne 0x29e5; mov eax, 0; test rax, rax; je 0x2bd0; lea rdi, qword ptr [rbx + 0x80]; call rax; 
0x000000000042d853: jne 0x2d8a0; pmovmskb eax, xmm1; bsf eax, eax; lea rax, qword ptr [rdi + rax + 0x30]; ret; 
0x000000000042efcc: jne 0x2efb0; xor eax, eax; sub eax, ecx; ret; 
0x00000000004301b7: jne 0x305e3; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000042fc5d: jne 0x305e3; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000042fbb1: jne 0x305e3; xor eax, eax; ret; 
0x000000000042fca8: jne 0x305ef; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000042fbd9: jne 0x305ef; xor eax, eax; ret; 
0x000000000042feaa: jne 0x305fa; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000042fd3d: jne 0x30610; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000043c880: jne 0x3c770; lea rax, qword ptr [rdi + 0xb]; ret; 
0x000000000043c83a: jne 0x3c770; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000043c7e5: jne 0x3c770; lea rax, qword ptr [rdi + 3]; ret; 
0x000000000043c7b7: jne 0x3c770; lea rax, qword ptr [rdi + 7]; ret; 
0x000000000043c762: jne 0x3c774; nop; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x000000000043c7dc: jne 0x3c950; test dl, 4; jne 0x3c770; lea rax, qword ptr [rdi + 3]; ret; 
0x000000000043c8be: jne 0x3c980; test al, 0x40; jne 0x3c990; lea rax, qword ptr [rdi + 7]; ret; 
0x000000000043c8c6: jne 0x3c990; lea rax, qword ptr [rdi + 7]; ret; 
0x000000000043c7ae: jne 0x3c990; test dl, 0x40; jne 0x3c770; lea rax, qword ptr [rdi + 7]; ret; 
0x000000000043c877: jne 0x3c9c0; test dh, 4; jne 0x3c770; lea rax, qword ptr [rdi + 0xb]; ret; 
0x000000000043c910: jne 0x3c9f0; test ah, 0x40; jne 0x3ca00; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000043c919: jne 0x3ca00; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000043c831: jne 0x3ca00; test dh, 0x40; jne 0x3c770; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000043dc15: jne 0x3dc90; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x000000000043df44: jne 0x3e150; xor eax, eax; ret; 
0x000000000043e0a4: jne 0x3e165; cmp eax, ecx; jne 0x3e165; xor eax, eax; ret; 
0x000000000043e161: jne 0x3e165; cmp eax, ecx; sbb eax, eax; sbb eax, -1; ret; 
0x000000000043e140: jne 0x3e165; movzx eax, byte ptr [rdi - 1]; cmp al, byte ptr [rsi - 1]; jne 0x3e165; xor eax, eax; ret; 
0x000000000043dff1: jne 0x3e165; xor eax, eax; ret; 
0x000000000043e271: jne 0x3e260; ret; 
0x000000000043e268: jne 0x3e280; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x3e260; ret; 
0x000000000043e321: jne 0x3e310; ret; 
0x000000000043e318: jne 0x3e330; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x3e310; ret; 
0x000000000043e491: jne 0x3e480; lea rax, qword ptr [rcx - 1]; ret; 
0x000000000043e488: jne 0x3e4a0; movzx edx, byte ptr [rsi + rax + 3]; test dl, dl; jne 0x3e480; lea rax, qword ptr [rcx - 1]; ret; 
0x000000000043e5e1: jne 0x3e5d0; sub rax, 1; ret; 
0x000000000043e5d8: jne 0x3e5f0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x3e5d0; sub rax, 1; ret; 
0x000000000043eed3: jne 0x3ee72; lea eax, dword ptr [rcx*4]; pop rbx; and eax, 0x3fc00; ret; 
0x000000000043f70b: jne 0x3f6d8; lea rsi, qword ptr [rsp + 0x10]; mov edi, 1; mov eax, 0xe5; syscall; 
0x000000000043f646: jne 0x3f6d8; xor esi, esi; mov eax, 2; syscall; 
0x000000000043fe27: jne 0x3fe3d; mov eax, 2; syscall; 
0x000000000043fe87: jne 0x3fe9d; mov eax, 0; syscall; 
0x000000000043fee7: jne 0x3fefd; mov eax, 1; syscall; 
0x0000000000440a85: jne 0x40a1e; pop rbx; pop rbp; pop r12; mov esi, 3; jmp rax; 
0x00000000004042ea: jne 0x40a7; test r8, r8; jne 0x42c5; mov rdi, r12; mov eax, 3; syscall; 
0x0000000000441338: jne 0x41318; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000442286: jne 0x417f8; mov esi, 3; mov rdi, r12; call rbx; 
0x00000000004422fd: jne 0x4181d; mov esi, 3; mov rdi, r13; call rbx; 
0x000000000044233d: jne 0x41841; mov esi, 3; mov rdi, r14; call rbx; 
0x000000000044257d: jne 0x41861; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004425dd: jne 0x418da; mov esi, 3; mov rdi, r15; call rbx; 
0x000000000044239d: jne 0x41966; mov esi, 3; mov rdi, r14; call rbx; 
0x000000000044261d: jne 0x41986; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004425fd: jne 0x419ff; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004422bd: jne 0x41a9b; mov esi, 3; mov rdi, r13; call rbx; 
0x000000000044237d: jne 0x41abf; mov esi, 3; mov rdi, r14; call rbx; 
0x00000000004425bd: jne 0x41adf; mov esi, 3; mov rdi, r15; call rbx; 
0x000000000044259d: jne 0x41b58; mov esi, 3; mov rdi, r15; call rbx; 
0x000000000044235d: jne 0x41be4; mov esi, 3; mov rdi, r14; call rbx; 
0x000000000044255d: jne 0x41c04; mov esi, 3; mov rdi, r15; call rbx; 
0x000000000044253d: jne 0x41c7d; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442266: jne 0x41d25; mov esi, 3; mov rdi, r12; call rbx; 
0x00000000004422dd: jne 0x41d4a; mov esi, 3; mov rdi, r13; call rbx; 
0x000000000044241d: jne 0x41d6e; mov esi, 3; mov rdi, r14; call rbx; 
0x000000000044245d: jne 0x41d8e; mov esi, 3; mov rdi, r15; call rbx; 
0x000000000044243d: jne 0x41e07; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004423fd: jne 0x41e93; mov esi, 3; mov rdi, r14; call rbx; 
0x000000000044251d: jne 0x41eb3; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004424fd: jne 0x41f2c; mov esi, 3; mov rdi, r15; call rbx; 
0x000000000044231d: jne 0x41fc8; mov esi, 3; mov rdi, r13; call rbx; 
0x00000000004423dd: jne 0x41fec; mov esi, 3; mov rdi, r14; call rbx; 
0x00000000004424dd: jne 0x4200c; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004424bd: jne 0x42085; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004423bd: jne 0x42111; mov esi, 3; mov rdi, r14; call rbx; 
0x000000000044249d: jne 0x42131; mov esi, 3; mov rdi, r15; call rbx; 
0x000000000044247d: jne 0x421aa; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004042f3: jne 0x42c5; mov rdi, r12; mov eax, 3; syscall; 
0x0000000000442e62: jne 0x42e50; movsxd rdi, dword ptr [rbp - 0x58]; mov eax, 3; syscall; 
0x0000000000442f4f: jne 0x42f18; movsxd rdi, dword ptr [rbp - 0x68]; mov eax, 3; syscall; 
0x000000000044313a: jne 0x43130; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x00000000004431aa: jne 0x431a0; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x00000000004432f2: jne 0x432e4; pop rdx; pop r10; ret; 
0x00000000004432e2: jne 0x432ec; nop; mov eax, 0xca; syscall; 
0x000000000044333f: jne 0x43328; and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x4334c; ret; 
0x00000000004433a2: jne 0x43390; mov eax, r11d; and eax, 0xc; cmp eax, 4; je 0x433b0; ret; 
0x00000000004434c3: jne 0x434b8; xor eax, eax; leave; ret; 
0x0000000000444e7d: jne 0x44e28; add rsp, 0x1d8; pop rbx; pop rbp; ret; 
0x000000000044e615: jne 0x4e648; mov eax, 0; test rax, rax; je 0x4e630; mov edi, 0x6cd720; call rax; 
0x0000000000452d51: jne 0x52d38; mov rax, rsi; ret; 
0x0000000000452dd5: jne 0x52db0; mov rax, rsi; ret; 
0x00000000004005db: jne 0x5de; ret; 
0x000000000046c76c: jne 0x6c7a3; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x28]; jmp rax; 
0x000000000046c924: jne 0x6c963; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000046d579: jne 0x6d590; sub rdx, qword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; shr rdx, 2; sub eax, edx; ret; 
0x000000000046d709: jne 0x6d718; mov ecx, dword ptr [rdx + 0x48]; cmp ecx, dword ptr [rdx + 0x4c]; cmove eax, ecx; ret; 
0x000000000046d79c: jne 0x6d7ee; mov rdi, r12; lea rdx, qword ptr [rsp + 0x18]; lea r9, qword ptr [rsp + 0x10]; call rbx; 
0x000000000046dfa3: jne 0x6dfa9; xor rax, rax; ret; 
0x00000000004730f2: jne 0x73036; mov rdx, -0x30; movsxd rdi, ebx; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x0000000000473262: jne 0x731a3; mov rdx, -0x30; movsxd rdi, ebx; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x0000000000473807: jne 0x7381d; mov eax, 3; syscall; 
0x0000000000473997: jne 0x739ad; mov eax, 0x14; syscall; 
0x0000000000473d13: jne 0x73cc1; xor eax, eax; ret; 
0x0000000000473d0f: jne 0x73d15; test ecx, ecx; jne 0x73cc1; xor eax, eax; ret; 
0x0000000000479d85: jne 0x79d98; or byte ptr [rdi + 0x315], 4; xor eax, eax; ret; 
0x0000000000479e49: jne 0x79e60; or byte ptr [rdi + 0x315], 4; add rsp, 8; ret; 
0x000000000047a26d: jne 0x7a260; mov r15, qword ptr [rbx]; mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r12]; call rax; 
0x000000000047aa43: jne 0x7a517; mov qword ptr [rbp - 0xf8], r11; mov qword ptr [rbp - 0xd0], rsi; mov qword ptr [rbp - 0xc8], r10; call rax; 
0x000000000047b241: jne 0x7a710; mov rdx, qword ptr [rdx + 8]; add rdx, qword ptr [rax]; mov rax, rdx; call rax; 
0x000000000047b335: jne 0x7ae85; mov qword ptr [rbp - 0xe0], r11; mov qword ptr [rbp - 0xc8], r10; mov qword ptr [rbp - 0xa8], rsi; call rax; 
0x000000000047b566: jne 0x7afb0; mov rdx, qword ptr [rdx + 8]; add rdx, qword ptr [rax]; mov rax, rdx; call rax; 
0x000000000047c303: jne 0x7c240; movsxd rdx, r12d; lea rsi, qword ptr [rbp - 0x430]; movsxd rdi, dword ptr [rbp - 0x46c]; mov eax, 0x14; syscall; 
0x000000000047caba: jne 0x7ca5b; mov eax, dword ptr [rsi + 4]; ret; 
0x000000000047cbc7: jne 0x7cbd1; mov rax, qword ptr [rip + 0x259800]; ret; 
0x000000000047d520: jne 0x7d540; mov qword ptr [rbx], 0; or dword ptr [rip + 0x24ec40], 1; pop rbx; ret; 
0x000000000047d815: jne 0x7d824; mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000047db15: jne 0x7db62; add al, ch; ret; 
0x000000000047e3be: jne 0x7e40b; add al, ch; mov bh, byte ptr [rbx]; clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000047e56a: jne 0x7e5b7; add al, ch; fidivr word ptr [rcx]; clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000048035b: jne 0x802a8; movsx eax, dl; neg eax; ret; 
0x0000000000481073: jne 0x81080; add rsp, 0x38; ret; 
0x000000000048106b: jne 0x81088; cmp qword ptr [rsp + 0x28], 0; jne 0x81080; add rsp, 0x38; ret; 
0x0000000000481115: jne 0x81120; xor eax, eax; add rsp, 0x48; ret; 
0x00000000004811ed: jne 0x81228; xor eax, eax; add rsp, 0x68; ret; 
0x00000000004812a5: jne 0x812b0; xor eax, eax; add rsp, 0x48; ret; 
0x000000000048bf69: jne 0x8bf79; cmp esi, 0x7fff; je 0x8bf79; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000048c3c1: jne 0x8c38e; mov dword ptr fs:[rdx], 5; pop rbx; ret; 
0x000000000048c4c0: jne 0x8c4d0; pop rbx; pop rbp; pop r12; ret; 
0x000000000048c98a: jne 0x8ca20; mov rdx, qword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x000000000048cbf0: jne 0x8cbf9; lea rax, qword ptr [rip + 0x67]; ret; 
0x000000000048cc43: jne 0x8cc4c; lea rax, qword ptr [rip + 4]; ret; 
0x0000000000496981: jne 0x9695f; mov dword ptr fs:[0x2d0], eax; ret; 
0x0000000000496974: jne 0x9695f; mov ecx, 0x27; mov eax, ecx; syscall; 
0x0000000000498063: jne 0x98068; mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x0000000000498288: jne 0x9823d; nop word ptr [rax + rax]; call rbx; 
0x000000000049acc5: jne 0x9aceb; mov rax, qword ptr [rsi + 0xb0]; add rsp, 8; ret; 
0x000000000049cd90: jne 0x9cdd8; cmp qword ptr [r9 + 0x38], 0; je 0x9ce03; add rsp, 0x18; ret; 
0x000000000049cea3: jne 0x9ce93; mov rax, qword ptr [rax]; add rsp, 8; ret; 
0x000000000049cf07: jne 0x9cef3; mov qword ptr [rcx], rdx; add rsp, 8; ret; 
0x000000000049d1ab: jne 0x9d19d; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049d243: jne 0x9d235; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049d2d7: jne 0x9d2c9; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049d323: jne 0x9d315; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049d3ec: jne 0x9d3de; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049d47b: jne 0x9d46d; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049d4cc: jne 0x9d4be; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049d75f: jne 0x9d775; mov eax, 8; add rsp, 8; ret; 
0x000000000049d7f4: jne 0x9d7e3; xor eax, eax; add rsp, 8; ret; 
0x000000000049d7c9: jne 0x9d7f0; mov rax, qword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x000000000049d854: jne 0x9d843; xor eax, eax; add rsp, 8; ret; 
0x000000000049d829: jne 0x9d850; mov rax, qword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x000000000049db27: jne 0x9db03; movzx eax, byte ptr [rcx]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000049f313: jne 0x9f31b; mov eax, 8; ret; 
0x000000000049f705: jne 0x9f6f0; pop rbx; ret; 
0x000000000049f750: jne 0x9f728; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000049f875: jne 0x9f858; pop rbx; ret; 
0x00000000004a4989: jne 0xa4984; call qword ptr [rax]; 
0x00000000004a4989: jne 0xa4984; call qword ptr [rax]; jne 0xa4988; jmp qword ptr [rax]; 
0x00000000004a498d: jne 0xa4988; jmp qword ptr [rax]; 
0x00000000004a4991: jne 0xa498c; push qword ptr [rax]; jne 0xa4990; call qword ptr [rax + 0x75]; 
0x00000000004a4991: jne 0xa498c; push qword ptr [rax]; jne 0xa4990; call qword ptr [rax + 0x75]; stc; jmp qword ptr [rax + 0x75]; 
0x00000000004a4995: jne 0xa4990; call qword ptr [rax + 0x75]; 
0x00000000004a4995: jne 0xa4990; call qword ptr [rax + 0x75]; stc; jmp qword ptr [rax + 0x75]; 
0x00000000004a4999: jne 0xa4994; jmp qword ptr [rax + 0x75]; 
0x00000000004a499d: jne 0xa4998; push qword ptr [rax + 0x75]; stc; call qword ptr [rax - 0x4f00068b]; jne 0xa49a4; call rax; 
0x00000000004a49a1: jne 0xa499c; call qword ptr [rax - 0x4f00068b]; jne 0xa49a4; call rax; 
0x00000000004a49a9: jne 0xa49a4; call rax; 
0x00000000004a49a9: jne 0xa49a4; call rax; jne 0xa49a8; push rax; jne 0xa49ac; call qword ptr [rax]; 
0x00000000004a49ad: jne 0xa49a8; push rax; jne 0xa49ac; call qword ptr [rax]; 
0x00000000004a49b1: jne 0xa49ac; call qword ptr [rax]; 
0x00000000004a49b1: jne 0xa49ac; call qword ptr [rax]; jbe 0xa49b0; push qword ptr [rax]; jbe 0xa49b4; call qword ptr [rax + 0x76]; 
0x00000000004c44e9: jne 0xc44e3; call qword ptr [rcx]; 
0x00000000004c7d9c: jne 0xc7da2; add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x35b0303; ret; 
0x0000000000400f21: jne 0xd3c; nop; leave; ret; 
0x000000000040e3a5: jne 0xe3d8; mov eax, 0xba; syscall; 
0x0000000000426b9b: jno 0x26bfb; add dword ptr [rax], eax; ret; 
0x000000000042fe6e: jno 0x2fe77; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000436250: jno 0x36250; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000043648a: jno 0x3648a; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000004365f1: jno 0x365f9; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000436741: jno 0x367bf; adc qword ptr [rdi - 5], rsp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000436748: jno 0x367c6; adc qword ptr [rdi - 6], rbp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000043674f: jno 0x367cd; adc qword ptr [rdi - 7], rsi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000436756: jno 0x367d4; adc qword ptr [rdi - 8], rdi; ret; 
0x000000000044eff5: jno 0x4eff2; inc dword ptr [rbx - 0x76be0008]; ret; 
0x0000000000453437: jno 0x5343a; add byte ptr [rbp - 0x75], cl; jl 0x53462; and byte ptr [rax + 1], cl; ret; 
0x000000000047f1fb: jno 0x7f222; add cl, ch; mov esi, 0x89fffffe; ret 0x758b; 
0x000000000048a844: jno 0x8a88f; shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x00000000004bb079: jno 0xbb00f; mov ah, 0x5e; sar byte ptr [rip + 0x733db8a1], 0xd7; jo 0xbb0f7; mov ebp, 0xfb67d10d; ret; 
0x00000000004c619d: jno 0xc619f; add al, ah; js 0xc619d; call rsi; 
0x0000000000412dcb: jnp 0x12e3d; syscall; 
0x000000000047357c: jnp 0x73582; sub rsp, 0x80; call 0x43300; add rsp, 0x80; pop rbx; ret; 
0x000000000047a26a: jnp 0x7a274; and eax, 0x8b4cf175; cmp ecx, dword ptr [rax - 0x75]; adc byte ptr [r8 - 0x7d], cl; ret; 
0x000000000049c621: jnp 0x9c62b; add eax, 0x438b5877; or byte ptr [rcx + 0x63], cl; add al, 0x86; add rax, r14; jmp rax; 
0x00000000004a3fd9: jnp 0xa3fd3; inc eax; jl 0xa3fd7; call qword ptr [rax]; 
0x00000000004a3fd9: jnp 0xa3fd3; inc eax; jl 0xa3fd7; call qword ptr [rax]; jle 0xa3fdb; jmp qword ptr [rax + 0x7f]; 
0x00000000004a4a09: jnp 0xa4a04; jmp qword ptr [rax]; 
0x00000000004a4a0d: jnp 0xa4a08; push qword ptr [rax]; jnp 0xa4a0c; inc dword ptr [rax + 0x7b]; stc; jmp qword ptr [rax + 0x7b]; 
0x00000000004a4a11: jnp 0xa4a0c; inc dword ptr [rax + 0x7b]; stc; jmp qword ptr [rax + 0x7b]; 
0x00000000004a4a15: jnp 0xa4a10; jmp qword ptr [rax + 0x7b]; 
0x00000000004a4a19: jnp 0xa4a14; inc dword ptr [rax - 0x5f000685]; jnp 0xa4a1c; inc eax; jnp 0xa4a20; jmp rax; 
0x00000000004a4a21: jnp 0xa4a1c; inc eax; jnp 0xa4a20; jmp rax; 
0x00000000004a4a25: jnp 0xa4a20; jmp rax; 
0x00000000004a4a29: jnp 0xa4a24; inc dword ptr [rax]; jl 0xa4a28; jmp qword ptr [rax]; 
0x00000000004baf05: jnp 0xbaec0; ret; 
0x00000000004bc79e: jnp 0xbc7b6; mov dl, 0x9f; sub edi, esi; int 0x6b; ret; 
0x00000000004c6be5: jnp 0xc6be7; add al, cl; ret; 
0x000000000042b957: jns 0x2b9bc; rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b9a8: jns 0x2ba0d; rcr dword ptr [rdx], 0xf; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042baa7: jns 0x2bb0c; rcr dword ptr [rdx], 0xf; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042bc46: jns 0x2bcab; rcr dword ptr [rdx], 0xf; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042be97: jns 0x2befc; rcr dword ptr [rdx], 0xf; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000042c038: jns 0x2c09d; rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042c137: jns 0x2c19c; rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042c188: jns 0x2c1ed; rcr dword ptr [rdx], 0xf; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042c287: jns 0x2c2ec; rcr dword ptr [rdx], 0xf; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042c677: jns 0x2c6dc; rcr dword ptr [rdx], 0xf; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000042c968: jns 0x2c9cd; rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042ca67: jns 0x2cacc; rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000436257: jns 0x36258; ret; 
0x0000000000436491: jns 0x36492; ret; 
0x00000000004365f8: jns 0x36601; ret; 
0x000000000047801c: jns 0x78024; add byte ptr [rcx + 0xf], al; xchg eax, esp; ret 0x8545; 
0x000000000049aba6: jns 0x9abab; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x000000000049cd94: jns 0x9cdce; add byte ptr [rdx + rbp*2 + 0x48], dh; add esp, 0x18; ret; 
0x000000000049d8c6: jns 0x9d8cb; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x000000000049f206: jns 0x9f20b; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x00000000004a49d1: jns 0xa49cc; call rax; 
0x00000000004a49d1: jns 0xa49cc; call rax; jns 0xa49d0; jmp rax; 
0x00000000004a49d5: jns 0xa49d0; jmp rax; 
0x00000000004a49d9: jns 0xa49d4; push rax; jns 0xa49d8; inc dword ptr [rax]; jp 0xa49dc; call qword ptr [rax]; 
0x00000000004a49dd: jns 0xa49d8; inc dword ptr [rax]; jp 0xa49dc; call qword ptr [rax]; 
0x00000000004ba00e: jns 0xb9fa2; ret 0xf869; 
0x00000000004c8cb9: jns 0xc8cae; jmp qword ptr [rsi]; 
0x000000000041028c: jo 0x102be; add eax, dword ptr [rax]; add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x0000000000410771: jo 0x107ab; mov rdi, rbp; mov r9, qword ptr [rax + 0x10]; lea r8, qword ptr [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x0000000000411578: jo 0x115b2; mov rdi, rbp; lea r8, qword ptr [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x00000000004125e3: jo 0x1259d; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000413022: jo 0x1306c; mov edx, ebx; mov rsi, rbp; mov eax, r13d; syscall; 
0x0000000000413cb4: jo 0x13cfe; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000401d1c: jo 0x1cb1; sub al, 0; xor eax, eax; ret; 
0x000000000044639e: jo 0x463e4; add byte ptr [rdi + 0x6cd6d8], bh; call rax; 
0x000000000044649d: jo 0x464e3; add byte ptr [rdi + 0x6cd6d8], bh; call rax; 
0x000000000046c38a: jo 0x6c39c; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000046c3cf: jo 0x6c401; cmovne eax, edx; mov dword ptr [rbx + 0x74], eax; add rsp, 0x20; pop rbx; ret; 
0x000000000046fb8c: jo 0x6fb9d; xchg eax, ebp; ret 0x8b4c; 
0x000000000048c19a: jo 0x8c121; sar byte ptr [rax + 9], 0xf3; ret; 
0x00000000004a3ec0: jo 0xa3ec2; clc; inc dword ptr [rax + 1]; clc; call qword ptr [rax]; 
0x00000000004a3fcc: jo 0xa402a; clc; call rax; 
0x00000000004a3fcc: jo 0xa402a; clc; call rax; js 0xa3fcb; jmp qword ptr [rax]; 
0x00000000004a3fd8: jo 0xa4055; clc; inc eax; jl 0xa3fd7; call qword ptr [rax]; 
0x00000000004a40d8: jo 0xa4077; clc; call qword ptr [rax - 0x4f000762]; lahf; clc; call rax; 
0x00000000004a40f8: jo 0xa40a0; clc; call qword ptr [rax - 0x4f000759]; test al, 0xf8; call rax; 
0x00000000004a4244: jo 0xa4208; clc; call qword ptr [rax]; 
0x00000000004a4244: jo 0xa4208; clc; call qword ptr [rax]; ret; 
0x00000000004a42dc: jo 0xa42c1; clc; call qword ptr [rax - 0x1b]; 
0x00000000004a435c: jo 0xa4340; clc; jmp qword ptr [rax - 0x1c]; 
0x00000000004a4374: jo 0xa4354; clc; inc dword ptr [rax - 0x20]; clc; jmp qword ptr [rax]; 
0x00000000004a439c: jo 0xa4368; clc; inc eax; retf; clc; call qword ptr [rax]; 
0x00000000004a43f0: jo 0xa43c3; clc; inc eax; sar al, cl; call qword ptr [rax]; 
0x00000000004a4654: jo 0xa466a; stc; push rax; adc edi, ecx; jmp qword ptr [rax + 0x13]; 
0x00000000004a4880: jo 0xa4890; stc; jmp rax; 
0x00000000004a49a0: jo 0xa4a17; stc; call qword ptr [rax - 0x4f00068b]; jne 0xa49a4; call rax; 
0x00000000004a49c0: jo 0xa4a38; stc; call qword ptr [rax - 0x4f00068a]; jbe 0xa49c4; call rax; 
0x00000000004ba788: jo 0xba7f0; salc; retf; ret 0x5508; 
0x00000000004bb084: jo 0xbb0f7; mov ebp, 0xfb67d10d; ret; 
0x00000000004be3ac: jo 0xbe3c5; std; call qword ptr [rax + 0x19]; 
0x00000000004be3cc: jo 0xbe3f4; std; call qword ptr [rax + 0x28]; 
0x00000000004be45c: jo 0xbe447; cld; jmp qword ptr [rax]; 
0x00000000004be458: jo 0xbe465; std; push qword ptr [rax - 0x17]; cld; jmp qword ptr [rax]; 
0x00000000004c0570: jo 0xc0592; cmc; jmp qword ptr [rsi]; 
0x00000000004c616d: jo 0xc616f; add byte ptr [rax + 0x78], dh; cli; call qword ptr [rcx]; 
0x00000000004c6170: jo 0xc61ea; cli; call qword ptr [rcx]; 
0x00000000004c6e90: jo 0xc6e5b; cli; call qword ptr [rcx]; 
0x000000000040f18f: jo 0xf1b1; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000047afa6: jo 0xffffffff8416baa5; movabs eax, dword ptr [0x4910438b48000005]; add eax, dword ptr [rdi]; call rax; 
0x00000000004012c2: jp 0x1287; sub al, 0; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000004272a5: jp 0x2729d; ret 0x7401; 
0x0000000000433276: jp 0x33268; ret; 
0x00000000004332d9: jp 0x332cb; ret; 
0x000000000043326a: jp 0x332eb; push -0x30; vmovdqu xmmword ptr [rdx - 0x20], xmm14; vmovdqu xmmword ptr [rdx - 0x10], xmm15; ret; 
0x000000000043326f: jp 0x332f0; jb 0x33253; vmovdqu xmmword ptr [rdx - 0x10], xmm15; ret; 
0x0000000000433274: jp 0x332f5; jp 0x33268; ret; 
0x0000000000433601: jp 0x33682; push rax; push rax; vmovdqu xmmword ptr [rax + 0x60], xmm11; vmovdqu xmmword ptr [rax + 0x70], xmm12; ret; 
0x000000000043367c: jp 0x336fd; push rax; push rax; vmovdqu xmmword ptr [rax + 0x60], xmm11; vmovdqu xmmword ptr [rax + 0x70], xmm12; ret; 
0x000000000043fea2: jp 0x3fed8; add byte ptr [rax], al; mov qword ptr [rsp], rax; mov eax, 0; syscall; 
0x00000000004541d2: jp 0x541b1; cli; jmp qword ptr [rsi + 0x2e]; 
0x0000000000475cd2: jp 0x75c96; clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000047f56d: jp 0x7f5e7; add r8b, bpl; fisubr dword ptr [rcx]; clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000049562e: jp 0x9563c; pop rbp; pop r12; pop r14; ret; 
0x000000000049da7a: jp 0x9daf0; adc esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004a3fd5: jp 0xa3fcf; push qword ptr [rax + 0x7b]; clc; inc eax; jl 0xa3fd7; call qword ptr [rax]; 
0x00000000004a49e1: jp 0xa49dc; call qword ptr [rax]; 
0x00000000004a49e5: jp 0xa49e0; push qword ptr [rax]; jp 0xa49e4; inc dword ptr [rax + 0x7a]; stc; call qword ptr [rax + 0x7a]; 
0x00000000004a49e9: jp 0xa49e4; inc dword ptr [rax + 0x7a]; stc; call qword ptr [rax + 0x7a]; 
0x00000000004a49e9: jp 0xa49e4; inc dword ptr [rax + 0x7a]; stc; call qword ptr [rax + 0x7a]; stc; jmp qword ptr [rax + 0x7a]; 
0x00000000004a49ed: jp 0xa49e8; call qword ptr [rax + 0x7a]; 
0x00000000004a49ed: jp 0xa49e8; call qword ptr [rax + 0x7a]; stc; jmp qword ptr [rax + 0x7a]; 
0x00000000004a49f1: jp 0xa49ec; jmp qword ptr [rax + 0x7a]; 
0x00000000004a49f5: jp 0xa49f0; inc dword ptr [rax - 0x5f000686]; jp 0xa49f8; inc eax; jp 0xa49fc; jmp rax; 
0x00000000004a49fd: jp 0xa49f8; inc eax; jp 0xa49fc; jmp rax; 
0x00000000004a4a01: jp 0xa49fc; jmp rax; 
0x00000000004a4a05: jp 0xa4a00; inc dword ptr [rax]; jnp 0xa4a04; jmp qword ptr [rax]; 
0x00000000004bad45: jp 0xbada0; cmp byte ptr [rbx + rdi*2], bh; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x00000000004c54c9: jp 0xc54c4; call rdi; 
0x00000000004c61e1: jp 0xc61dd; jmp qword ptr [rdx]; 
0x00000000004125c4: js 0x125d0; mov qword ptr [rbx + 0x90], rax; pop rbx; ret; 
0x000000000044086b: js 0x40832; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000044313f: js 0x4319c; pop rbp; ret; 
0x00000000004431af: js 0x4320c; pop rbp; ret; 
0x000000000044f981: js 0x4f9f1; add byte ptr [rax - 0x77], cl; ret 0x8840; 
0x000000000047e912: js 0x7e95f; add al, ch; clc; jmp qword ptr [rsi + 0xf]; 
0x000000000047f56e: js 0x7f5bb; add al, ch; fisubr dword ptr [rcx]; clc; jmp qword ptr [rsi + 0x2e]; 
0x00000000004958ef: js 0x95932; call rsp; 
0x0000000000495c04: js 0x95c47; call rsp; 
0x0000000000495d83: js 0x95dc6; call rsp; 
0x0000000000495dc3: js 0x95e06; call rsp; 
0x0000000000495f86: js 0x95fc9; call rsp; 
0x0000000000495fcb: js 0x9600e; call rsp; 
0x000000000049d0d5: js 0x9d0d9; add byte ptr [rax], al; mov rax, rbp; pop rbx; pop rbp; ret; 
0x000000000049d0e2: js 0x9d0e6; add byte ptr [rax], al; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000004a3fd1: js 0xa3fcb; jmp qword ptr [rax]; 
0x00000000004bef38: js 0xbef0f; std; ljmp ptr [rbp - 0x2b]; std; jmp qword ptr [rdx - 0x2b]; 
0x00000000004c4968: js 0xc4901; clc; jmp rbx; 
0x00000000004c6171: js 0xc616d; call qword ptr [rcx]; 
0x00000000004c61a1: js 0xc619d; call rsi; 
0x00000000004c68f8: js 0xc6896; cli; jmp rdi; 
0x00000000004c68f5: js 0xc68f7; add byte ptr [rax - 0x64], bh; cli; jmp rdi; 
0x00000000004c8258: js 0xc81eb; sti; call qword ptr [rdx]; 
0x00000000004c8288: js 0xc821b; sti; call qword ptr [rdx]; 
0x00000000004c82b8: js 0xc824b; sti; call qword ptr [rdx]; 
0x00000000004c8e28: js 0xc8e8e; cld; call qword ptr [rax]; 
0x00000000004c94e8: js 0xc94f8; std; jmp qword ptr [rax]; 
0x000000000040f1b7: js 0xf1d9; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x00000000004c8ffd: lahf; add byte ptr [rax], al; clc; iretd; cld; call qword ptr [rdi + 9]; 
0x000000000042084d: lahf; add dword ptr [rax], eax; add byte ptr [rcx - 0x7d], cl; ret 0xe96e; 
0x00000000004a40e1: lahf; clc; call rax; 
0x000000000047d373: lahf; cli; dec dword ptr [rax - 0x73]; push rbp; add dword ptr [rax + 0x39], ecx; ret 0x1272; 
0x00000000004bc543: lahf; mov dh, 0xc7; ret 0xe71f; 
0x000000000047cabb: lahf; mov eax, dword ptr [rsi + 4]; ret; 
0x0000000000417c4d: lahf; mov word ptr [rdx], es; add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rax - 0x77]; ret; 
0x000000000042c3dd: lahf; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000046890c: lahf; ret 0x2941; 
0x00000000004106fe: lahf; ret 0x3841; 
0x000000000044109e: lahf; ret 0x3845; 
0x00000000004b9d9d: lahf; ret 0x871e; 
0x0000000000466ae1: lahf; ret 0xb60f; 
0x0000000000469578: lahf; ret 0xd129; 
0x00000000004695ef: lahf; ret 0xd629; 
0x0000000000469501: lahf; ret 0xd729; 
0x000000000043ee39: lahf; ret 0xea81; 
0x000000000049c436: lahf; ret 0xf45; 
0x0000000000441098: lahf; ret; 
0x00000000004bc7a1: lahf; sub edi, esi; int 0x6b; ret; 
0x000000000049a58d: lahf; xor eax, 0xc730023; mov rdx, qword ptr [rip + 0x23359e]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000042ca6d: lar eax, word ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004bef6b: lcall ptr [rax + rbx*8]; std; ljmp ptr [rdi + rdx*8 - 3]; inc dword ptr [rdi + rdx*8]; std; call rsp; 
0x00000000004bea73: lcall ptr [rax]; ret 0xfffd; 
0x0000000000410b5b: lcall ptr [rbp + 0x41]; pop rsp; pop r13; pop r14; pop r15; ret; 
0x0000000000411b03: lcall ptr [rbp + 0x41]; pop rsp; ret; 
0x000000000046f47a: lcall ptr [rbx + 0x5d]; pop r12; pop r13; pop r14; ret; 
0x000000000044d7e3: lcall ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x0000000000452602: lcall ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000041194d: lcall ptr [rbx + 0x5d]; ret; 
0x000000000047d546: lcall ptr [rbx + 0x64]; mov eax, dword ptr [rax]; ret; 
0x00000000004125d6: lcall ptr [rbx - 0x3d]; nop dword ptr [rax]; movsxd rdi, dword ptr [rdi + 0x70]; mov eax, 3; syscall; 
0x00000000004beb43: lcall ptr [rdx - 0x35]; std; jmp rsp; 
0x00000000004beb3f: lcall ptr [rdx - 0x35]; std; lcall ptr [rdx - 0x35]; std; jmp rsp; 
0x0000000000435b0c: lddqu xmm0, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000435d96: lddqu xmm0, xmmword ptr [rsi + 0xa]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435d26: lddqu xmm0, xmmword ptr [rsi + 0xb]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435cb6: lddqu xmm0, xmmword ptr [rsi + 0xc]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435c46: lddqu xmm0, xmmword ptr [rsi + 0xd]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435bd6: lddqu xmm0, xmmword ptr [rsi + 0xe]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435b66: lddqu xmm0, xmmword ptr [rsi + 0xf]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436186: lddqu xmm0, xmmword ptr [rsi + 1]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436116: lddqu xmm0, xmmword ptr [rsi + 2]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004360a6: lddqu xmm0, xmmword ptr [rsi + 3]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436036: lddqu xmm0, xmmword ptr [rsi + 4]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435fc6: lddqu xmm0, xmmword ptr [rsi + 5]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435f56: lddqu xmm0, xmmword ptr [rsi + 6]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435ee6: lddqu xmm0, xmmword ptr [rsi + 7]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435e76: lddqu xmm0, xmmword ptr [rsi + 8]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435e06: lddqu xmm0, xmmword ptr [rsi + 9]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004352f6: lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x0000000000435a9c: lddqu xmm0, xmmword ptr [rsi - 0x11]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435a1c: lddqu xmm0, xmmword ptr [rsi - 0x12]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043598c: lddqu xmm0, xmmword ptr [rsi - 0x13]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043590c: lddqu xmm0, xmmword ptr [rsi - 0x14]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043588c: lddqu xmm0, xmmword ptr [rsi - 0x15]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043580c: lddqu xmm0, xmmword ptr [rsi - 0x16]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043578c: lddqu xmm0, xmmword ptr [rsi - 0x17]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043570c: lddqu xmm0, xmmword ptr [rsi - 0x18]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043568c: lddqu xmm0, xmmword ptr [rsi - 0x19]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043560c: lddqu xmm0, xmmword ptr [rsi - 0x1a]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043558c: lddqu xmm0, xmmword ptr [rsi - 0x1b]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043550c: lddqu xmm0, xmmword ptr [rsi - 0x1c]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043547c: lddqu xmm0, xmmword ptr [rsi - 0x1d]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004353ec: lddqu xmm0, xmmword ptr [rsi - 0x1e]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043535c: lddqu xmm0, xmmword ptr [rsi - 0x1f]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004352ec: lddqu xmm0, xmmword ptr [rsi - 0x20]; movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x0000000000435b16: lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000435aa1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435a21: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435991: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435911: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435891: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435811: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435791: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435711: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435691: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435611: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435591: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435511: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435481: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004353f1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435361: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435d9b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435d2b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435cbb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435c4b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435bdb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435b6b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043618b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043611b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004360ab: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043603b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435fcb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435f5b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435eeb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435e7b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435e0b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000041665b: lea eax, dword ptr [r8 - 1]; ret; 
0x0000000000460cb6: lea eax, dword ptr [rax + 0x48ffffef]; mov esi, dword ptr [rbp - 0x1088]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000461563: lea eax, dword ptr [rax + 0x48ffffef]; mov esi, dword ptr [rbp - 0x1090]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000473d3b: lea eax, dword ptr [rax + 0x493afe7e]; cmove eax, ecx; ret; 
0x0000000000454125: lea eax, dword ptr [rax + 0x4cfffffb]; mov esi, ebx; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000049ac8c: lea eax, dword ptr [rax + 8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x0000000000426b04: lea eax, dword ptr [rax + rdi + 0x10]; ret; 
0x0000000000426b14: lea eax, dword ptr [rax + rdi + 0x20]; ret; 
0x0000000000426ae4: lea eax, dword ptr [rax + rdi - 0x10]; ret; 
0x00000000004798bd: lea eax, dword ptr [rax + rdx*4]; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x000000000041665c: lea eax, dword ptr [rax - 1]; ret; 
0x000000000043eed7: lea eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rbx + 0x25], bl; add ah, bh; add eax, dword ptr [rax]; ret; 
0x00000000004c7e7d: lea eax, dword ptr [rax]; add byte ptr [rax], dl; test bl, bh; jmp rsi; 
0x000000000046e3ad: lea eax, dword ptr [rcx + rsi]; ret; 
0x000000000043e494: lea eax, dword ptr [rcx - 1]; ret; 
0x000000000043eed5: lea eax, dword ptr [rcx*4]; pop rbx; and eax, 0x3fc00; ret; 
0x000000000043c50c: lea eax, dword ptr [rdi + 0x10]; ret; 
0x000000000043c521: lea eax, dword ptr [rdi + 0x11]; ret; 
0x000000000043c53f: lea eax, dword ptr [rdi + 0x12]; ret; 
0x000000000043c55f: lea eax, dword ptr [rdi + 0x13]; ret; 
0x000000000043c582: lea eax, dword ptr [rdi + 0x14]; ret; 
0x000000000043c5a1: lea eax, dword ptr [rdi + 0x15]; ret; 
0x000000000043c5c1: lea eax, dword ptr [rdi + 0x16]; ret; 
0x000000000043c5e1: lea eax, dword ptr [rdi + 0x17]; ret; 
0x000000000043c604: lea eax, dword ptr [rdi + 0x18]; ret; 
0x000000000043c629: lea eax, dword ptr [rdi + 0x19]; ret; 
0x000000000043c647: lea eax, dword ptr [rdi + 0x1a]; ret; 
0x000000000043c667: lea eax, dword ptr [rdi + 0x1b]; ret; 
0x000000000043c683: lea eax, dword ptr [rdi + 0x1c]; ret; 
0x000000000043c6a3: lea eax, dword ptr [rdi + 0x1d]; ret; 
0x000000000043c6c3: lea eax, dword ptr [rdi + 0x1e]; ret; 
0x000000000043c6e3: lea eax, dword ptr [rdi + 0x1f]; ret; 
0x000000000043c45d: lea eax, dword ptr [rdi + 0xa]; ret; 
0x000000000043c47d: lea eax, dword ptr [rdi + 0xb]; ret; 
0x000000000043c49f: lea eax, dword ptr [rdi + 0xc]; ret; 
0x000000000043c4bf: lea eax, dword ptr [rdi + 0xd]; ret; 
0x000000000043c4df: lea eax, dword ptr [rdi + 0xe]; ret; 
0x000000000043c4f9: lea eax, dword ptr [rdi + 0xf]; ret; 
0x000000000043c3a7: lea eax, dword ptr [rdi + 1]; ret; 
0x000000000043c3ba: lea eax, dword ptr [rdi + 2]; ret; 
0x000000000043c3c5: lea eax, dword ptr [rdi + 3]; ret; 
0x000000000043c3d8: lea eax, dword ptr [rdi + 4]; ret; 
0x000000000043c3ed: lea eax, dword ptr [rdi + 5]; ret; 
0x000000000043c40b: lea eax, dword ptr [rdi + 6]; ret; 
0x000000000043c417: lea eax, dword ptr [rdi + 7]; ret; 
0x000000000043c42a: lea eax, dword ptr [rdi + 8]; ret; 
0x000000000043c43f: lea eax, dword ptr [rdi + 9]; ret; 
0x0000000000426b39: lea eax, dword ptr [rdi + rax + 0x10]; ret; 
0x0000000000426b49: lea eax, dword ptr [rdi + rax + 0x20]; ret; 
0x0000000000426a33: lea eax, dword ptr [rdi + rax + 0x30]; ret; 
0x0000000000421ddc: lea eax, dword ptr [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000042d907: lea eax, dword ptr [rdi + rax]; ret; 
0x000000000046e2a9: lea eax, dword ptr [rdi + rsi]; ret; 
0x0000000000480bb8: lea eax, dword ptr [rdi - 1]; cmp rax, -3; jbe 0x80bc8; ret; 
0x000000000045b040: lea eax, dword ptr [rdi - 1]; xor edx, edx; div ecx; add eax, r8d; ret; 
0x000000000043c393: lea eax, dword ptr [rdi]; ret; 
0x000000000043b97d: lea eax, dword ptr [rdx + 0xa]; ret; 
0x000000000043b99d: lea eax, dword ptr [rdx + 0xb]; ret; 
0x000000000043b9bf: lea eax, dword ptr [rdx + 0xc]; ret; 
0x000000000043b9df: lea eax, dword ptr [rdx + 0xd]; ret; 
0x000000000043b9ff: lea eax, dword ptr [rdx + 0xe]; ret; 
0x000000000043b88f: lea eax, dword ptr [rdx + 0xf]; ret; 
0x0000000000415981: lea eax, dword ptr [rdx + 1]; mov qword ptr [rbx + 8], rax; movzx eax, byte ptr [rdx]; pop rbx; ret; 
0x000000000043b8b7: lea eax, dword ptr [rdx + 1]; ret; 
0x000000000043b8cd: lea eax, dword ptr [rdx + 2]; ret; 
0x000000000043b8e5: lea eax, dword ptr [rdx + 3]; ret; 
0x000000000043b8fb: lea eax, dword ptr [rdx + 4]; ret; 
0x000000000043b90d: lea eax, dword ptr [rdx + 5]; ret; 
0x000000000043b92b: lea eax, dword ptr [rdx + 6]; ret; 
0x000000000043b837: lea eax, dword ptr [rdx + 7]; ret; 
0x000000000043b93d: lea eax, dword ptr [rdx + 8]; ret; 
0x000000000043b95d: lea eax, dword ptr [rdx + 9]; ret; 
0x000000000041664e: lea eax, dword ptr [rdx + rdi]; ret; 
0x000000000043ef0c: lea eax, dword ptr [rdx + rdx]; pop rbx; and eax, 0x7ff80000; ret; 
0x0000000000417b36: lea eax, dword ptr [rdx]; add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rax - 0x77]; ret; 
0x000000000043b8a5: lea eax, dword ptr [rdx]; ret; 
0x0000000000427727: lea eax, dword ptr [rip + 0x12ad3]; ret; 
0x00000000004241f7: lea eax, dword ptr [rip + 0x14853]; ret; 
0x0000000000426b99: lea eax, dword ptr [rip + 0x15e71]; ret; 
0x0000000000427173: lea eax, dword ptr [rip + 0x17647]; ret; 
0x0000000000421d84: lea eax, dword ptr [rip + 0x1a966]; ret; 
0x0000000000426b7d: lea eax, dword ptr [rip + 0x1d]; ret; 
0x0000000000427843: lea eax, dword ptr [rip + 0x67]; ret; 
0x0000000000426b91: lea eax, dword ptr [rip + 0x8449]; ret; 
0x0000000000421fd7: lea eax, dword ptr [rip + 3]; ret; 
0x0000000000427896: lea eax, dword ptr [rip + 4]; ret; 
0x00000000004c63dd: lea eax, dword ptr [rsi + rcx*4]; add ecx, dword ptr [rdi + 0x80e6a02]; ret; 
0x000000000043bc26: lea eax, dword ptr [rsi]; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000480fdb: lea eax, dword ptr [rsp + 0x10]; call 0x78cf0; mov qword ptr [rbx + 0x10], rax; add rsp, 0x30; pop rbx; ret; 
0x000000000041077b: lea eax, dword ptr [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x0000000000411704: lea eax, dword ptr [rsp + 0x20]; mov rdi, rax; call qword ptr [rax + 8]; 
0x00000000004114be: lea eax, dword ptr [rsp + 0x30]; lea rsi, qword ptr [rsp + 0x20]; call qword ptr [rbx + 8]; 
0x000000000048bca1: lea eax, dword ptr [rsp + 0xf]; and r8, 0xfffffffffffffff0; call 0x8b0c0; leave; ret; 
0x000000000049ead3: lea ebp, dword ptr [rbp - 1]; mov rdx, r12; mov rdi, qword ptr [rsp]; mov rsi, qword ptr [r15 + rbp*8 + 0x10]; call rbx; 
0x0000000000445f8f: lea ebp, dword ptr [rdi - 0x76b3fffd]; out 0x48, eax; mov eax, dword ptr [rbp - 0x58]; call rax; 
0x000000000043c376: lea ebx, dword ptr [rip + 0x68654]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043c341: lea ebx, dword ptr [rip + 0x68689]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043c315: lea ebx, dword ptr [rip + 0x686b5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043c2ff: lea ebx, dword ptr [rip + 0x686cb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043c2dd: lea ebx, dword ptr [rip + 0x686ed]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043c2b8: lea ebx, dword ptr [rip + 0x68712]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043c29b: lea ebx, dword ptr [rip + 0x6872f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043c243: lea ebx, dword ptr [rip + 0x68787]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bd56: lea ebx, dword ptr [rip + 0x68bf4]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bd21: lea ebx, dword ptr [rip + 0x68c29]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bcf5: lea ebx, dword ptr [rip + 0x68c55]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bcdf: lea ebx, dword ptr [rip + 0x68c6b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bcbd: lea ebx, dword ptr [rip + 0x68c8d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bc98: lea ebx, dword ptr [rip + 0x68cb2]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bc7b: lea ebx, dword ptr [rip + 0x68ccf]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bc23: lea ebx, dword ptr [rip + 0x68d27]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000435292: lea ebx, dword ptr [rip + 0x6f178]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434f34: lea ebx, dword ptr [rip + 0x6f4d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004350df: lea ebx, dword ptr [rip + 0x6f56b]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434db4: lea ebx, dword ptr [rip + 0x6f656]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434e77: lea ebx, dword ptr [rip + 0x6f7d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434c34: lea ebx, dword ptr [rip + 0x6f7d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434cf7: lea ebx, dword ptr [rip + 0x6f953]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434ab4: lea ebx, dword ptr [rip + 0x6f956]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434b77: lea ebx, dword ptr [rip + 0x6fad3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434934: lea ebx, dword ptr [rip + 0x6fad6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004349f8: lea ebx, dword ptr [rip + 0x6fc52]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004347b4: lea ebx, dword ptr [rip + 0x6fc56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434877: lea ebx, dword ptr [rip + 0x6fdd3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434634: lea ebx, dword ptr [rip + 0x6fdd6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004346f7: lea ebx, dword ptr [rip + 0x6ff53]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004344b4: lea ebx, dword ptr [rip + 0x6ff56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434577: lea ebx, dword ptr [rip + 0x700d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434334: lea ebx, dword ptr [rip + 0x700d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004343f7: lea ebx, dword ptr [rip + 0x70253]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004341b4: lea ebx, dword ptr [rip + 0x70256]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434277: lea ebx, dword ptr [rip + 0x703d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434034: lea ebx, dword ptr [rip + 0x703d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004340f7: lea ebx, dword ptr [rip + 0x70553]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433eb4: lea ebx, dword ptr [rip + 0x70556]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433f77: lea ebx, dword ptr [rip + 0x706d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433d34: lea ebx, dword ptr [rip + 0x706d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433df7: lea ebx, dword ptr [rip + 0x70853]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433bb4: lea ebx, dword ptr [rip + 0x70856]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433c77: lea ebx, dword ptr [rip + 0x709d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433a34: lea ebx, dword ptr [rip + 0x709d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004338bb: lea ebx, dword ptr [rip + 0x70b4f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433af7: lea ebx, dword ptr [rip + 0x70b53]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433977: lea ebx, dword ptr [rip + 0x70cd3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004336bc: lea ebx, dword ptr [rip + 0x70d4e]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043383a: lea ebx, dword ptr [rip + 0x70e10]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004336de: lea ebx, dword ptr [rip + 0x70f6c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433185: lea ebx, dword ptr [rip + 0x710c5]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004330c8: lea ebx, dword ptr [rip + 0x71182]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000432fdd: lea ebx, dword ptr [rip + 0x7126d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000432f12: lea ebx, dword ptr [rip + 0x71338]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431ef1: lea ebx, dword ptr [rip + 0x72359]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431e53: lea ebx, dword ptr [rip + 0x723f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431da1: lea ebx, dword ptr [rip + 0x724a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431d03: lea ebx, dword ptr [rip + 0x72547]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431c51: lea ebx, dword ptr [rip + 0x725f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431bb3: lea ebx, dword ptr [rip + 0x72697]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431b01: lea ebx, dword ptr [rip + 0x72749]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431a63: lea ebx, dword ptr [rip + 0x727e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004319b1: lea ebx, dword ptr [rip + 0x72899]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431913: lea ebx, dword ptr [rip + 0x72937]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431861: lea ebx, dword ptr [rip + 0x729e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004317c3: lea ebx, dword ptr [rip + 0x72a87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431711: lea ebx, dword ptr [rip + 0x72b39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431673: lea ebx, dword ptr [rip + 0x72bd7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004315c1: lea ebx, dword ptr [rip + 0x72c89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431528: lea ebx, dword ptr [rip + 0x72d22]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431471: lea ebx, dword ptr [rip + 0x72dd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004313d3: lea ebx, dword ptr [rip + 0x72e77]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431321: lea ebx, dword ptr [rip + 0x72f29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431283: lea ebx, dword ptr [rip + 0x72fc7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004311d1: lea ebx, dword ptr [rip + 0x73079]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431133: lea ebx, dword ptr [rip + 0x73117]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431081: lea ebx, dword ptr [rip + 0x731c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430fe3: lea ebx, dword ptr [rip + 0x73267]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430f31: lea ebx, dword ptr [rip + 0x73319]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430e93: lea ebx, dword ptr [rip + 0x733b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430de1: lea ebx, dword ptr [rip + 0x73469]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430d43: lea ebx, dword ptr [rip + 0x73507]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430c91: lea ebx, dword ptr [rip + 0x735b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430bf3: lea ebx, dword ptr [rip + 0x73657]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430b47: lea ebx, dword ptr [rip + 0x73703]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430a56: lea ebx, dword ptr [rip + 0x737f4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430997: lea ebx, dword ptr [rip + 0x738b3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043092d: lea ebx, dword ptr [rip + 0x7391d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043083e: lea ebx, dword ptr [rip + 0x73a0c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430779: lea ebx, dword ptr [rip + 0x73ad1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000042fa54: lea ebx, dword ptr [rip + 0x746b6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f9da: lea ebx, dword ptr [rip + 0x74730]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f94b: lea ebx, dword ptr [rip + 0x747bf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f740: lea ebx, dword ptr [rip + 0x749ca]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f60e: lea ebx, dword ptr [rip + 0x74afc]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f548: lea ebx, dword ptr [rip + 0x74bc2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f4ca: lea ebx, dword ptr [rip + 0x74c40]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f433: lea ebx, dword ptr [rip + 0x74cd7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f237: lea ebx, dword ptr [rip + 0x74ed3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f106: lea ebx, dword ptr [rip + 0x75004]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042eff7: lea ebx, dword ptr [rip + 0x75113]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000415baa: lea ebx, dword ptr [rsi + 1]; call qword ptr [rax + 0x18]; 
0x00000000004ba651: lea ebx, dword ptr [rsi - 0x3271f33]; test al, 0x97; xchg eax, esp; ret; 
0x000000000046130f: lea ecx, dword ptr [rax + 0x4cffffef]; mov edi, esi; mov rdx, qword ptr [rbp - 0x10b8]; mov rsi, qword ptr [rbp - 0x1090]; call qword ptr [rax + 0x38]; 
0x000000000046f2b0: lea ecx, dword ptr [rax + 1]; call rbx; 
0x000000000046f684: lea ecx, dword ptr [rax + 4]; lea r9, qword ptr [rsp + 0x20]; lea rdx, qword ptr [rsp + 0x28]; lea rsi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000046c692: lea ecx, dword ptr [rax + 4]; mov qword ptr [rdx], rcx; mov edx, dword ptr [rax]; mov eax, edx; pop rbx; ret; 
0x000000000046da49: lea ecx, dword ptr [rbp - 0x38]; mov rcx, r13; lea rdx, qword ptr [rbp - 0x40]; mov rdi, r15; xor r8d, r8d; call rbx; 
0x000000000046a891: lea ecx, dword ptr [rbx + 0x40]; lea rdx, qword ptr [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000043bc2e: lea ecx, dword ptr [rbx + rcx]; jmp rcx; 
0x000000000046c871: lea ecx, dword ptr [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; pop rbx; ret; 
0x0000000000423537: lea ecx, dword ptr [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000492bae: lea ecx, dword ptr [rip + 0x1584c]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000004914cd: lea ecx, dword ptr [rip + 0x16f2d]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000004911fe: lea ecx, dword ptr [rip + 0x171fc]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000048f56d: lea ecx, dword ptr [rip + 0x18e8d]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000042cc99: lea ecx, dword ptr [rip + 0x7b761]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000042b884: lea ecx, dword ptr [rip + 0x7cb76]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000042b629: lea ecx, dword ptr [rip + 0x7cdd1]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000429d54: lea ecx, dword ptr [rip + 0x7e6a6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000043bcbf: lea ecx, dword ptr [rsi + rax + 0xc634900]; xchg eax, ebx; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000473ab7: lea ecx, dword ptr [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000046d7a7: lea ecx, dword ptr [rsp + 0x10]; call rbx; 
0x000000000046d880: lea ecx, dword ptr [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000046f688: lea ecx, dword ptr [rsp + 0x20]; lea rdx, qword ptr [rsp + 0x28]; lea rsi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000046f5e5: lea ecx, dword ptr [rsp + 0x20]; lea rsi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000046f900: lea ecx, dword ptr [rsp + 0x28]; lea rsi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000046f2a6: lea ecx, dword ptr [rsp + 0x28]; lea rsi, qword ptr [rsp + 0x30]; lea rcx, qword ptr [rax + 1]; call rbx; 
0x000000000046f7fe: lea ecx, dword ptr [rsp + 0x60]; lea rsi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000048bcdf: lea ecx, dword ptr [rsp + 0xf]; and rcx, 0xfffffffffffffff0; call 0x8b7a0; leave; ret; 
0x0000000000478586: lea edi, dword ptr [rax + 0x6cc1e0]; call rdx; 
0x000000000040297c: lea edi, dword ptr [rbx + 0x80]; call rax; 
0x000000000047357b: lea edi, dword ptr [rbx + 4]; sub rsp, 0x80; call 0x43300; add rsp, 0x80; pop rbx; ret; 
0x0000000000498540: lea edi, dword ptr [rbx + rax*8 + 8]; nop dword ptr [rax]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x000000000040e86c: lea edi, dword ptr [rbx + rsi]; call rax; 
0x0000000000427316: lea edi, dword ptr [rdi + 0x10]; jne 0x27300; mov rax, rdi; ret; 
0x000000000043317d: lea edi, dword ptr [rdi - 0x40]; sub rdx, 0x40; lea r11, qword ptr [rip + 0x710c5]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004800bf: lea edi, dword ptr [rsi + 1]; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000416f0b: lea edx, dword ptr [rax + 0x60]; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x00000000004165ef: lea edx, dword ptr [rax - 1]; mov qword ptr [rdi + 8], rdx; movzx eax, byte ptr [rax - 1]; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x000000000046da50: lea edx, dword ptr [rbp - 0x40]; mov rdi, r15; xor r8d, r8d; call rbx; 
0x000000000046a895: lea edx, dword ptr [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x0000000000430784: lea edx, dword ptr [rbx + rdx]; jmp rdx; 
0x000000000044f9d3: lea edx, dword ptr [rcx + 1]; call 0x272a0; mov esi, 0x80000; mov rdi, r13; mov eax, r15d; syscall; 
0x0000000000431d98: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x724a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431c48: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x725f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431af8: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x72749]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431858: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x729e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431708: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x72b39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004315b8: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x72c89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431468: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x72dd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431318: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x72f29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004311c8: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x73079]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430f28: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x73319]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430dd8: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x73469]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430c88: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x735b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004951e7: lea edx, dword ptr [rip + 0x13213]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004951c2: lea edx, dword ptr [rip + 0x13238]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000492c07: lea edx, dword ptr [rip + 0x157f3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000492be2: lea edx, dword ptr [rip + 0x15818]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000491257: lea edx, dword ptr [rip + 0x171a3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000491232: lea edx, dword ptr [rip + 0x171c8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000048f287: lea edx, dword ptr [rip + 0x19173]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000438a1d: lea edx, dword ptr [rip + 0x6f9dd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042cce7: lea edx, dword ptr [rip + 0x7b713]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042cccd: lea edx, dword ptr [rip + 0x7b72d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042b677: lea edx, dword ptr [rip + 0x7cd83]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042b65d: lea edx, dword ptr [rip + 0x7cd9d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000429ac7: lea edx, dword ptr [rip + 0x7e933]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000429aad: lea edx, dword ptr [rip + 0x7e94d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000047cab4: lea edx, dword ptr [rsi + 4]; cmp rdx, r8; jne 0x7ca5b; mov eax, dword ptr [rsi + 4]; ret; 
0x000000000046c7b1: lea edx, dword ptr [rsi + 4]; mov qword ptr [rax], rdx; mov eax, dword ptr [rsi]; pop rbx; ret; 
0x0000000000440029: lea edx, dword ptr [rsp + 0x10]; mov esi, 0x10; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x000000000046d7a2: lea edx, dword ptr [rsp + 0x18]; lea r9, qword ptr [rsp + 0x10]; call rbx; 
0x000000000046f8fb: lea edx, dword ptr [rsp + 0x20]; lea r9, qword ptr [rsp + 0x28]; lea rsi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000046f2a1: lea edx, dword ptr [rsp + 0x20]; lea r9, qword ptr [rsp + 0x28]; lea rsi, qword ptr [rsp + 0x30]; lea rcx, qword ptr [rax + 1]; call rbx; 
0x000000000046f68d: lea edx, dword ptr [rsp + 0x28]; lea rsi, qword ptr [rsp + 0x40]; call rbx; 
0x0000000000447f90: lea edx, dword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004488f3: lea edx, dword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000448cd9: lea edx, dword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000046fcf0: lea edx, dword ptr [rsp + 0x48]; mov rdi, r12; call rbx; 
0x000000000044b68f: lea edx, dword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000044a783: lea edx, dword ptr [rsp + 0x60]; mov rdi, qword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000043ff81: lea edx, dword ptr [rsp - 0x58]; mov esi, 0x10; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x00000000004689cc: lea esi, dword ptr [rax - 0x77000005]; adc byte ptr [rax - 0x7d], cl; ret; 
0x000000000046d79b: lea esi, dword ptr [rbp + 0x50]; mov rdi, r12; lea rdx, qword ptr [rsp + 0x18]; lea r9, qword ptr [rsp + 0x10]; call rbx; 
0x000000000046d879: lea esi, dword ptr [rbp + 0x90]; lea r9, qword ptr [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000046d957: lea esi, dword ptr [rbp + 0x90]; mov rdi, r12; lea rdx, qword ptr [rsp + 0x18]; lea r9, qword ptr [rsp + 0x10]; call rbx; 
0x000000000047c30d: lea esi, dword ptr [rbp - 0x430]; movsxd rdi, dword ptr [rbp - 0x46c]; mov eax, 0x14; syscall; 
0x0000000000401bb8: lea esi, dword ptr [rcx + rdi]; mov qword ptr [rsi + 8], 0x6d63f0; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000427312: lea esi, dword ptr [rsi + 0x10]; lea rdi, qword ptr [rdi + 0x10]; jne 0x27300; mov rax, rdi; ret; 
0x000000000043f70e: lea esi, dword ptr [rsp + 0x10]; mov edi, 1; mov eax, 0xe5; syscall; 
0x000000000040045f: lea esi, dword ptr [rsp + 0x200]; mov rdi, r8; mov eax, ebp; syscall; 
0x000000000040049b: lea esi, dword ptr [rsp + 0x200]; mov rdi, rbx; mov eax, r10d; syscall; 
0x00000000004114c3: lea esi, dword ptr [rsp + 0x20]; call qword ptr [rbx + 8]; 
0x000000000041143b: lea esi, dword ptr [rsp + 0x20]; mov rax, qword ptr [rax + 0x60]; sar r8, 2; mov qword ptr [rsp + 0x20], rax; call qword ptr [rbx + 0x30]; 
0x000000000046f803: lea esi, dword ptr [rsp + 0x30]; call rbx; 
0x000000000046f2ab: lea esi, dword ptr [rsp + 0x30]; lea rcx, qword ptr [rax + 1]; call rbx; 
0x000000000041b5f9: lea esi, dword ptr [rsp + 0x30]; mov rdi, r9; mov eax, r8d; syscall; 
0x000000000046f5ea: lea esi, dword ptr [rsp + 0x40]; call rbx; 
0x0000000000473e5d: lea esp, dword ptr [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret; 
0x000000000040ff11: lea esp, dword ptr [rbp - 0x18]; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000043c375: lea r11, qword ptr [rip + 0x68654]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043c340: lea r11, qword ptr [rip + 0x68689]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043c314: lea r11, qword ptr [rip + 0x686b5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043c2fe: lea r11, qword ptr [rip + 0x686cb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043c2dc: lea r11, qword ptr [rip + 0x686ed]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043c2b7: lea r11, qword ptr [rip + 0x68712]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043c29a: lea r11, qword ptr [rip + 0x6872f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043c242: lea r11, qword ptr [rip + 0x68787]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bd55: lea r11, qword ptr [rip + 0x68bf4]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bd20: lea r11, qword ptr [rip + 0x68c29]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bcf4: lea r11, qword ptr [rip + 0x68c55]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bcde: lea r11, qword ptr [rip + 0x68c6b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bcbc: lea r11, qword ptr [rip + 0x68c8d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bc97: lea r11, qword ptr [rip + 0x68cb2]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bc7a: lea r11, qword ptr [rip + 0x68ccf]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bc22: lea r11, qword ptr [rip + 0x68d27]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000435291: lea r11, qword ptr [rip + 0x6f178]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434f33: lea r11, qword ptr [rip + 0x6f4d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004350de: lea r11, qword ptr [rip + 0x6f56b]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434db3: lea r11, qword ptr [rip + 0x6f656]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434e76: lea r11, qword ptr [rip + 0x6f7d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434c33: lea r11, qword ptr [rip + 0x6f7d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434cf6: lea r11, qword ptr [rip + 0x6f953]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434ab3: lea r11, qword ptr [rip + 0x6f956]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434b76: lea r11, qword ptr [rip + 0x6fad3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434933: lea r11, qword ptr [rip + 0x6fad6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004349f7: lea r11, qword ptr [rip + 0x6fc52]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004347b3: lea r11, qword ptr [rip + 0x6fc56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434876: lea r11, qword ptr [rip + 0x6fdd3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434633: lea r11, qword ptr [rip + 0x6fdd6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004346f6: lea r11, qword ptr [rip + 0x6ff53]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004344b3: lea r11, qword ptr [rip + 0x6ff56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434576: lea r11, qword ptr [rip + 0x700d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434333: lea r11, qword ptr [rip + 0x700d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004343f6: lea r11, qword ptr [rip + 0x70253]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004341b3: lea r11, qword ptr [rip + 0x70256]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434276: lea r11, qword ptr [rip + 0x703d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434033: lea r11, qword ptr [rip + 0x703d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004340f6: lea r11, qword ptr [rip + 0x70553]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433eb3: lea r11, qword ptr [rip + 0x70556]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433f76: lea r11, qword ptr [rip + 0x706d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433d33: lea r11, qword ptr [rip + 0x706d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433df6: lea r11, qword ptr [rip + 0x70853]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433bb3: lea r11, qword ptr [rip + 0x70856]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433c76: lea r11, qword ptr [rip + 0x709d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433a33: lea r11, qword ptr [rip + 0x709d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004338ba: lea r11, qword ptr [rip + 0x70b4f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433af6: lea r11, qword ptr [rip + 0x70b53]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433976: lea r11, qword ptr [rip + 0x70cd3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004336bb: lea r11, qword ptr [rip + 0x70d4e]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433839: lea r11, qword ptr [rip + 0x70e10]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004336dd: lea r11, qword ptr [rip + 0x70f6c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433184: lea r11, qword ptr [rip + 0x710c5]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004330c7: lea r11, qword ptr [rip + 0x71182]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000432fdc: lea r11, qword ptr [rip + 0x7126d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000432f11: lea r11, qword ptr [rip + 0x71338]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431ef0: lea r11, qword ptr [rip + 0x72359]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431e52: lea r11, qword ptr [rip + 0x723f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431da0: lea r11, qword ptr [rip + 0x724a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431d02: lea r11, qword ptr [rip + 0x72547]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431c50: lea r11, qword ptr [rip + 0x725f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431bb2: lea r11, qword ptr [rip + 0x72697]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431b00: lea r11, qword ptr [rip + 0x72749]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431a62: lea r11, qword ptr [rip + 0x727e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004319b0: lea r11, qword ptr [rip + 0x72899]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431912: lea r11, qword ptr [rip + 0x72937]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431860: lea r11, qword ptr [rip + 0x729e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004317c2: lea r11, qword ptr [rip + 0x72a87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431710: lea r11, qword ptr [rip + 0x72b39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431672: lea r11, qword ptr [rip + 0x72bd7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004315c0: lea r11, qword ptr [rip + 0x72c89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431527: lea r11, qword ptr [rip + 0x72d22]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431470: lea r11, qword ptr [rip + 0x72dd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004313d2: lea r11, qword ptr [rip + 0x72e77]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431320: lea r11, qword ptr [rip + 0x72f29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431282: lea r11, qword ptr [rip + 0x72fc7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004311d0: lea r11, qword ptr [rip + 0x73079]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431132: lea r11, qword ptr [rip + 0x73117]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431080: lea r11, qword ptr [rip + 0x731c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430fe2: lea r11, qword ptr [rip + 0x73267]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430f30: lea r11, qword ptr [rip + 0x73319]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430e92: lea r11, qword ptr [rip + 0x733b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430de0: lea r11, qword ptr [rip + 0x73469]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430d42: lea r11, qword ptr [rip + 0x73507]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430c90: lea r11, qword ptr [rip + 0x735b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430bf2: lea r11, qword ptr [rip + 0x73657]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430b46: lea r11, qword ptr [rip + 0x73703]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430a55: lea r11, qword ptr [rip + 0x737f4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430996: lea r11, qword ptr [rip + 0x738b3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043092c: lea r11, qword ptr [rip + 0x7391d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043083d: lea r11, qword ptr [rip + 0x73a0c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430778: lea r11, qword ptr [rip + 0x73ad1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000042fa53: lea r11, qword ptr [rip + 0x746b6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f9d9: lea r11, qword ptr [rip + 0x74730]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f94a: lea r11, qword ptr [rip + 0x747bf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f73f: lea r11, qword ptr [rip + 0x749ca]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f60d: lea r11, qword ptr [rip + 0x74afc]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f547: lea r11, qword ptr [rip + 0x74bc2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f4c9: lea r11, qword ptr [rip + 0x74c40]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f432: lea r11, qword ptr [rip + 0x74cd7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f236: lea r11, qword ptr [rip + 0x74ed3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f105: lea r11, qword ptr [rip + 0x75004]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042eff6: lea r11, qword ptr [rip + 0x75113]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000040e86b: lea r15, qword ptr [rbx + r14]; call rax; 
0x000000000049853f: lea r15, qword ptr [rbx + rax*8 + 8]; nop dword ptr [rax]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x0000000000480fda: lea r8, qword ptr [rsp + 0x10]; call 0x78cf0; mov qword ptr [rbx + 0x10], rax; add rsp, 0x30; pop rbx; ret; 
0x000000000041077a: lea r8, qword ptr [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x0000000000411703: lea r8, qword ptr [rsp + 0x20]; mov rdi, rax; call qword ptr [rax + 8]; 
0x00000000004114bd: lea r8, qword ptr [rsp + 0x30]; lea rsi, qword ptr [rsp + 0x20]; call qword ptr [rbx + 8]; 
0x000000000048bca0: lea r8, qword ptr [rsp + 0xf]; and r8, 0xfffffffffffffff0; call 0x8b0c0; leave; ret; 
0x000000000046da48: lea r9, qword ptr [rbp - 0x38]; mov rcx, r13; lea rdx, qword ptr [rbp - 0x40]; mov rdi, r15; xor r8d, r8d; call rbx; 
0x000000000046d7a6: lea r9, qword ptr [rsp + 0x10]; call rbx; 
0x000000000046d87f: lea r9, qword ptr [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000046f687: lea r9, qword ptr [rsp + 0x20]; lea rdx, qword ptr [rsp + 0x28]; lea rsi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000046f5e4: lea r9, qword ptr [rsp + 0x20]; lea rsi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000046f8ff: lea r9, qword ptr [rsp + 0x28]; lea rsi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000046f2a5: lea r9, qword ptr [rsp + 0x28]; lea rsi, qword ptr [rsp + 0x30]; lea rcx, qword ptr [rax + 1]; call rbx; 
0x000000000046f7fd: lea r9, qword ptr [rsp + 0x60]; lea rsi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000049ac8b: lea rax, qword ptr [rax + 8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x0000000000426b03: lea rax, qword ptr [rax + rdi + 0x10]; ret; 
0x0000000000426b13: lea rax, qword ptr [rax + rdi + 0x20]; ret; 
0x0000000000426ae3: lea rax, qword ptr [rax + rdi - 0x10]; ret; 
0x00000000004798bc: lea rax, qword ptr [rax + rdx*4]; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x000000000046e3ac: lea rax, qword ptr [rcx + rsi]; ret; 
0x000000000043e493: lea rax, qword ptr [rcx - 1]; ret; 
0x000000000043c50b: lea rax, qword ptr [rdi + 0x10]; ret; 
0x000000000043c520: lea rax, qword ptr [rdi + 0x11]; ret; 
0x000000000043c53e: lea rax, qword ptr [rdi + 0x12]; ret; 
0x000000000043c55e: lea rax, qword ptr [rdi + 0x13]; ret; 
0x000000000043c581: lea rax, qword ptr [rdi + 0x14]; ret; 
0x000000000043c5a0: lea rax, qword ptr [rdi + 0x15]; ret; 
0x000000000043c5c0: lea rax, qword ptr [rdi + 0x16]; ret; 
0x000000000043c5e0: lea rax, qword ptr [rdi + 0x17]; ret; 
0x000000000043c603: lea rax, qword ptr [rdi + 0x18]; ret; 
0x000000000043c628: lea rax, qword ptr [rdi + 0x19]; ret; 
0x000000000043c646: lea rax, qword ptr [rdi + 0x1a]; ret; 
0x000000000043c666: lea rax, qword ptr [rdi + 0x1b]; ret; 
0x000000000043c682: lea rax, qword ptr [rdi + 0x1c]; ret; 
0x000000000043c6a2: lea rax, qword ptr [rdi + 0x1d]; ret; 
0x000000000043c6c2: lea rax, qword ptr [rdi + 0x1e]; ret; 
0x000000000043c6e2: lea rax, qword ptr [rdi + 0x1f]; ret; 
0x000000000043c45c: lea rax, qword ptr [rdi + 0xa]; ret; 
0x000000000043c47c: lea rax, qword ptr [rdi + 0xb]; ret; 
0x000000000043c49e: lea rax, qword ptr [rdi + 0xc]; ret; 
0x000000000043c4be: lea rax, qword ptr [rdi + 0xd]; ret; 
0x000000000043c4de: lea rax, qword ptr [rdi + 0xe]; ret; 
0x000000000043c4f8: lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000043c3a6: lea rax, qword ptr [rdi + 1]; ret; 
0x000000000043c3b9: lea rax, qword ptr [rdi + 2]; ret; 
0x000000000043c3c4: lea rax, qword ptr [rdi + 3]; ret; 
0x000000000043c3d7: lea rax, qword ptr [rdi + 4]; ret; 
0x000000000043c3ec: lea rax, qword ptr [rdi + 5]; ret; 
0x000000000043c40a: lea rax, qword ptr [rdi + 6]; ret; 
0x000000000043c416: lea rax, qword ptr [rdi + 7]; ret; 
0x000000000043c429: lea rax, qword ptr [rdi + 8]; ret; 
0x000000000043c43e: lea rax, qword ptr [rdi + 9]; ret; 
0x0000000000426b38: lea rax, qword ptr [rdi + rax + 0x10]; ret; 
0x0000000000426b48: lea rax, qword ptr [rdi + rax + 0x20]; ret; 
0x0000000000426a32: lea rax, qword ptr [rdi + rax + 0x30]; ret; 
0x0000000000421ddb: lea rax, qword ptr [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000042d906: lea rax, qword ptr [rdi + rax]; ret; 
0x000000000046e2a8: lea rax, qword ptr [rdi + rsi]; ret; 
0x0000000000480bb7: lea rax, qword ptr [rdi - 1]; cmp rax, -3; jbe 0x80bc8; ret; 
0x000000000043c392: lea rax, qword ptr [rdi]; ret; 
0x000000000043b97c: lea rax, qword ptr [rdx + 0xa]; ret; 
0x000000000043b99c: lea rax, qword ptr [rdx + 0xb]; ret; 
0x000000000043b9be: lea rax, qword ptr [rdx + 0xc]; ret; 
0x000000000043b9de: lea rax, qword ptr [rdx + 0xd]; ret; 
0x000000000043b9fe: lea rax, qword ptr [rdx + 0xe]; ret; 
0x000000000043b88e: lea rax, qword ptr [rdx + 0xf]; ret; 
0x0000000000415980: lea rax, qword ptr [rdx + 1]; mov qword ptr [rbx + 8], rax; movzx eax, byte ptr [rdx]; pop rbx; ret; 
0x000000000043b8b6: lea rax, qword ptr [rdx + 1]; ret; 
0x000000000043b8cc: lea rax, qword ptr [rdx + 2]; ret; 
0x000000000043b8e4: lea rax, qword ptr [rdx + 3]; ret; 
0x000000000043b8fa: lea rax, qword ptr [rdx + 4]; ret; 
0x000000000043b90c: lea rax, qword ptr [rdx + 5]; ret; 
0x000000000043b92a: lea rax, qword ptr [rdx + 6]; ret; 
0x000000000043b836: lea rax, qword ptr [rdx + 7]; ret; 
0x000000000043b93c: lea rax, qword ptr [rdx + 8]; ret; 
0x000000000043b95c: lea rax, qword ptr [rdx + 9]; ret; 
0x000000000043ef0b: lea rax, qword ptr [rdx + rdx]; pop rbx; and eax, 0x7ff80000; ret; 
0x000000000043b8a4: lea rax, qword ptr [rdx]; ret; 
0x0000000000427726: lea rax, qword ptr [rip + 0x12ad3]; ret; 
0x00000000004241f6: lea rax, qword ptr [rip + 0x14853]; ret; 
0x0000000000426b98: lea rax, qword ptr [rip + 0x15e71]; ret; 
0x0000000000427172: lea rax, qword ptr [rip + 0x17647]; ret; 
0x0000000000421d83: lea rax, qword ptr [rip + 0x1a966]; ret; 
0x0000000000426b7c: lea rax, qword ptr [rip + 0x1d]; ret; 
0x0000000000427842: lea rax, qword ptr [rip + 0x67]; ret; 
0x0000000000426b90: lea rax, qword ptr [rip + 0x8449]; ret; 
0x0000000000421fd6: lea rax, qword ptr [rip + 3]; ret; 
0x0000000000427895: lea rax, qword ptr [rip + 4]; ret; 
0x000000000049ead2: lea rbp, qword ptr [r13 - 1]; mov rdx, r12; mov rdi, qword ptr [rsp]; mov rsi, qword ptr [r15 + rbp*8 + 0x10]; call rbx; 
0x0000000000415ba9: lea rbx, qword ptr [r14 + 1]; call qword ptr [rax + 0x18]; 
0x000000000043bc2d: lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000046f2af: lea rcx, qword ptr [rax + 1]; call rbx; 
0x000000000046f683: lea rcx, qword ptr [rax + 4]; lea r9, qword ptr [rsp + 0x20]; lea rdx, qword ptr [rsp + 0x28]; lea rsi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000046c691: lea rcx, qword ptr [rax + 4]; mov qword ptr [rdx], rcx; mov edx, dword ptr [rax]; mov eax, edx; pop rbx; ret; 
0x000000000046a890: lea rcx, qword ptr [rbx + 0x40]; lea rdx, qword ptr [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000046c870: lea rcx, qword ptr [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; pop rbx; ret; 
0x0000000000423536: lea rcx, qword ptr [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000492bad: lea rcx, qword ptr [rip + 0x1584c]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000004914cc: lea rcx, qword ptr [rip + 0x16f2d]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000004911fd: lea rcx, qword ptr [rip + 0x171fc]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000048f56c: lea rcx, qword ptr [rip + 0x18e8d]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000042cc98: lea rcx, qword ptr [rip + 0x7b761]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000042b883: lea rcx, qword ptr [rip + 0x7cb76]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000042b628: lea rcx, qword ptr [rip + 0x7cdd1]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000429d53: lea rcx, qword ptr [rip + 0x7e6a6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000473ab6: lea rcx, qword ptr [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000048bcde: lea rcx, qword ptr [rsp + 0xf]; and rcx, 0xfffffffffffffff0; call 0x8b7a0; leave; ret; 
0x0000000000478585: lea rdi, qword ptr [rax + 0x6cc1e0]; call rdx; 
0x000000000040297b: lea rdi, qword ptr [rbx + 0x80]; call rax; 
0x000000000047357a: lea rdi, qword ptr [rbx + 4]; sub rsp, 0x80; call 0x43300; add rsp, 0x80; pop rbx; ret; 
0x0000000000427315: lea rdi, qword ptr [rdi + 0x10]; jne 0x27300; mov rax, rdi; ret; 
0x000000000043317c: lea rdi, qword ptr [rdi - 0x40]; sub rdx, 0x40; lea r11, qword ptr [rip + 0x710c5]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430783: lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000416f0a: lea rdx, qword ptr [rax + 0x60]; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x00000000004165ee: lea rdx, qword ptr [rax - 1]; mov qword ptr [rdi + 8], rdx; movzx eax, byte ptr [rax - 1]; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x000000000046da4f: lea rdx, qword ptr [rbp - 0x40]; mov rdi, r15; xor r8d, r8d; call rbx; 
0x000000000046a894: lea rdx, qword ptr [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000044f9d2: lea rdx, qword ptr [rcx + 1]; call 0x272a0; mov esi, 0x80000; mov rdi, r13; mov eax, r15d; syscall; 
0x0000000000431d97: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x724a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431c47: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x725f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431af7: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x72749]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431857: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x729e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431707: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x72b39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004315b7: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x72c89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431467: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x72dd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431317: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x72f29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004311c7: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x73079]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430f27: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x73319]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430dd7: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x73469]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430c87: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x735b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004951e6: lea rdx, qword ptr [rip + 0x13213]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004951c1: lea rdx, qword ptr [rip + 0x13238]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000492c06: lea rdx, qword ptr [rip + 0x157f3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000492be1: lea rdx, qword ptr [rip + 0x15818]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000491256: lea rdx, qword ptr [rip + 0x171a3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000491231: lea rdx, qword ptr [rip + 0x171c8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000048f286: lea rdx, qword ptr [rip + 0x19173]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000438a1c: lea rdx, qword ptr [rip + 0x6f9dd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042cce6: lea rdx, qword ptr [rip + 0x7b713]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042cccc: lea rdx, qword ptr [rip + 0x7b72d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042b676: lea rdx, qword ptr [rip + 0x7cd83]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042b65c: lea rdx, qword ptr [rip + 0x7cd9d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000429ac6: lea rdx, qword ptr [rip + 0x7e933]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000429aac: lea rdx, qword ptr [rip + 0x7e94d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000047cab3: lea rdx, qword ptr [rsi + 4]; cmp rdx, r8; jne 0x7ca5b; mov eax, dword ptr [rsi + 4]; ret; 
0x000000000046c7b0: lea rdx, qword ptr [rsi + 4]; mov qword ptr [rax], rdx; mov eax, dword ptr [rsi]; pop rbx; ret; 
0x0000000000440028: lea rdx, qword ptr [rsp + 0x10]; mov esi, 0x10; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x000000000046d7a1: lea rdx, qword ptr [rsp + 0x18]; lea r9, qword ptr [rsp + 0x10]; call rbx; 
0x000000000046f8fa: lea rdx, qword ptr [rsp + 0x20]; lea r9, qword ptr [rsp + 0x28]; lea rsi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000046f2a0: lea rdx, qword ptr [rsp + 0x20]; lea r9, qword ptr [rsp + 0x28]; lea rsi, qword ptr [rsp + 0x30]; lea rcx, qword ptr [rax + 1]; call rbx; 
0x000000000046f68c: lea rdx, qword ptr [rsp + 0x28]; lea rsi, qword ptr [rsp + 0x40]; call rbx; 
0x0000000000447f8f: lea rdx, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004488f2: lea rdx, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000448cd8: lea rdx, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000046fcef: lea rdx, qword ptr [rsp + 0x48]; mov rdi, r12; call rbx; 
0x000000000044b68e: lea rdx, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000044a782: lea rdx, qword ptr [rsp + 0x60]; mov rdi, qword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000043ff80: lea rdx, qword ptr [rsp - 0x58]; mov esi, 0x10; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x000000000046d79a: lea rsi, qword ptr [rbp + 0x50]; mov rdi, r12; lea rdx, qword ptr [rsp + 0x18]; lea r9, qword ptr [rsp + 0x10]; call rbx; 
0x000000000046d878: lea rsi, qword ptr [rbp + 0x90]; lea r9, qword ptr [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000046d956: lea rsi, qword ptr [rbp + 0x90]; mov rdi, r12; lea rdx, qword ptr [rsp + 0x18]; lea r9, qword ptr [rsp + 0x10]; call rbx; 
0x000000000047c30c: lea rsi, qword ptr [rbp - 0x430]; movsxd rdi, dword ptr [rbp - 0x46c]; mov eax, 0x14; syscall; 
0x0000000000401bb7: lea rsi, qword ptr [rcx + r15]; mov qword ptr [rsi + 8], 0x6d63f0; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000427311: lea rsi, qword ptr [rsi + 0x10]; lea rdi, qword ptr [rdi + 0x10]; jne 0x27300; mov rax, rdi; ret; 
0x000000000043f70d: lea rsi, qword ptr [rsp + 0x10]; mov edi, 1; mov eax, 0xe5; syscall; 
0x000000000040045e: lea rsi, qword ptr [rsp + 0x200]; mov rdi, r8; mov eax, ebp; syscall; 
0x000000000040049a: lea rsi, qword ptr [rsp + 0x200]; mov rdi, rbx; mov eax, r10d; syscall; 
0x00000000004114c2: lea rsi, qword ptr [rsp + 0x20]; call qword ptr [rbx + 8]; 
0x000000000041143a: lea rsi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rax + 0x60]; sar r8, 2; mov qword ptr [rsp + 0x20], rax; call qword ptr [rbx + 0x30]; 
0x000000000046f802: lea rsi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000046f2aa: lea rsi, qword ptr [rsp + 0x30]; lea rcx, qword ptr [rax + 1]; call rbx; 
0x000000000041b5f8: lea rsi, qword ptr [rsp + 0x30]; mov rdi, r9; mov eax, r8d; syscall; 
0x000000000046f5e9: lea rsi, qword ptr [rsp + 0x40]; call rbx; 
0x0000000000473e5c: lea rsp, qword ptr [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret; 
0x000000000040ff10: lea rsp, qword ptr [rbp - 0x18]; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000414aa8: leave; and byte ptr [rcx + 0xc7640f], cl; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x00000000004a43d9: leave; clc; jmp rax; 
0x00000000004c6e91: leave; cli; call qword ptr [rcx]; 
0x000000000049a546: leave; cmove rax, rdx; ret; 
0x0000000000473d39: leave; je 0x73cc9; cmp byte ptr [rsi - 2], 0x3a; cmove rax, r9; ret; 
0x000000000043e270: leave; jne 0x3e260; ret; 
0x000000000043e320: leave; jne 0x3e310; ret; 
0x000000000043e5e0: leave; jne 0x3e5d0; sub rax, 1; ret; 
0x0000000000473d12: leave; jne 0x73cc1; xor eax, eax; ret; 
0x000000000047b565: leave; jne 0x7afb0; mov rdx, qword ptr [rdx + 8]; add rdx, qword ptr [rax]; mov rax, rdx; call rax; 
0x000000000048c3c0: leave; jne 0x8c38e; mov dword ptr fs:[rdx], 5; pop rbx; ret; 
0x000000000042eedc: leave; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000445650: leave; not eax; xor edx, edx; add eax, 2; push rax; call rbx; 
0x000000000049ed83: leave; out dx, eax; and al, byte ptr [rax]; mov qword ptr [rip + 0x22efc2], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x00000000004013b7: leave; ret 0x2c; 
0x0000000000400a61: leave; ret; 
0x00000000004ba801: leave; retf 0x6ee8; sahf; ret 0x38ae; 
0x0000000000417f06: leave; test esi, edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000431083: leave; xor dword ptr [rdi], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000046f5e1: leave; xor edx, edx; lea r9, qword ptr [rsp + 0x20]; lea rsi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000004befcf: ljmp ptr [rax]; add edi, esi; call rax; 
0x00000000004befcb: ljmp ptr [rax]; add edi, esi; ljmp ptr [rax]; add edi, esi; call rax; 
0x00000000004bef3b: ljmp ptr [rbp - 0x2b]; std; jmp qword ptr [rdx - 0x2b]; 
0x00000000004a4207: ljmp ptr [rbx]; ret; 
0x00000000004bef6f: ljmp ptr [rdi + rdx*8 - 3]; inc dword ptr [rdi + rdx*8]; std; call rsp; 
0x00000000004a480f: ljmp ptr [rdx + 0xc]; stc; call qword ptr [rax]; 
0x000000000040f15d: lock add byte ptr [r11 + 0x13], sil; mov rbp, rax; call qword ptr [rbp]; 
0x000000000040f157: lock add byte ptr [r8 + 0x3d], cl; lock add byte ptr [r11 + 0x13], sil; mov rbp, rax; call qword ptr [rbp]; 
0x0000000000410370: lock add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000048c185: lock add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000042f3be: lock add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004c062c: lodsb al, byte ptr [rsi]; adc eax, 0x23100000; cmc; call qword ptr [rsi + 4]; 
0x0000000000423ec0: lodsb al, byte ptr [rsi]; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004186c9: lodsb al, byte ptr [rsi]; add al, byte ptr [rax]; add rsp, 0x80; mov eax, 0x6cb800; ret; 
0x00000000004c402c: lodsb al, byte ptr [rsi]; add byte ptr [r8], r8b; sar byte ptr [rbx], 0xf8; call qword ptr [rbx + 5]; 
0x00000000004c9d2d: lodsb al, byte ptr [rsi]; add byte ptr [rax], al; adc byte ptr [rdx], bh; std; jmp qword ptr [rdi]; 
0x00000000004c44e0: lodsb al, byte ptr [rsi]; add byte ptr [rax], al; add byte ptr [rsp + rdx*2], ah; add byte ptr [rax], cl; jne 0xc44e3; call qword ptr [rcx]; 
0x000000000043dbf0: lodsb al, byte ptr [rsi]; add byte ptr [rax], al; add dh, dh; ret 0x7501; 
0x00000000004c9ce5: lodsb al, byte ptr [rsi]; add byte ptr [rax], al; test al, 0x39; std; jmp qword ptr [rdx]; 
0x00000000004840ce: lodsb al, byte ptr [rsi]; and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004bd070: lodsb al, byte ptr [rsi]; fldcw word ptr [rcx - 0x7f58d21b]; mov dh, 0xdd; in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x00000000004c9d2c: lodsb al, byte ptr [rsi]; lodsb al, byte ptr [rsi]; add byte ptr [rax], al; adc byte ptr [rdx], bh; std; jmp qword ptr [rdi]; 
0x000000000043ff9e: lodsb al, byte ptr [rsi]; mov edx, eax; neg edx; cmp dword ptr [rsp - 0x58], 2; cmove eax, edx; ret; 
0x0000000000480d8f: lodsb al, byte ptr [rsi]; mov rax, qword ptr [rdi]; cmp rax, rsi; je 0x80da0; ret; 
0x00000000004bccdd: lodsb al, byte ptr [rsi]; or byte ptr [rdi + 0x26], al; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x00000000004ba786: lodsb al, byte ptr [rsi]; xchg eax, edi; jo 0xba7f0; salc; retf; ret 0x5508; 
0x0000000000473d14: lodsb al, byte ptr [rsi]; xor eax, eax; ret; 
0x00000000004c9ce4: lodsb al, byte ptr fs:[rsi]; add byte ptr [rax], al; test al, 0x39; std; jmp qword ptr [rdx]; 
0x00000000004409ff: lodsd eax, dword ptr [rsi]; add byte ptr [r8], r8b; ret; 
0x00000000004b9bfb: lodsd eax, dword ptr [rsi]; and al, 0x36; adc eax, 0x42d35a1d; cmp al, 0xe; push rsp; jmp qword ptr [rbx - 0x40]; 
0x00000000004423ae: lodsd eax, dword ptr [rsi]; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000490590: lodsd eax, dword ptr [rsi]; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000048a9b2: lodsd eax, dword ptr [rsi]; ret; 
0x00000000004bb198: lodsd eax, dword ptr [rsi]; xor eax, 0x444be0a8; sar byte ptr [rsi + rax*2], 0xf8; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x00000000004244bc: loope 0x244de; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000042d312: loope 0x2d361; or ecx, edx; mov qword ptr [rdi], r9; pop rbx; ret; 
0x0000000000432c67: loope 0x32cb5; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432caf: loope 0x32cfd; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432ced: loope 0x32d3b; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432d25: loope 0x32d73; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432d63: loope 0x32db1; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432d9b: loope 0x32de9; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432dc3: loope 0x32e11; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043536a: loope 0x3535f; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000043bd65: loope 0x3bdcd; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000043c30e: loope 0x3c2a0; bsf rdx, rdx; lea r11, qword ptr [rip + 0x686b5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043c385: loope 0x3c3ed; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; lea rax, qword ptr [rdi]; ret; 
0x000000000043c91b: loope 0x3c91d; add byte ptr [rax], al; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000043f00e: loope 0x3f003; ret; 
0x0000000000440f7b: loope 0x40f57; std; dec dword ptr [rcx - 0x75]; cmp al, 0x24; call rbx; 
0x0000000000444e9f: loope 0x44ea4; shl eax, cl; pop rbx; pop rbp; ret; 
0x00000000004557f0: loope 0x5583a; mov edi, ebx; mov rdx, rcx; mov qword ptr [rbp - 0x4b0], rcx; call qword ptr [rax + 0x38]; 
0x000000000046e1a8: loope 0x6e1ca; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000046f02e: loope 0x6f03f; je 0x6f050; ret; 
0x000000000047367c: loope 0x73607; ret 0xf631; 
0x000000000047afa5: loope 0x7afb6; cmp cl, 0xa; je 0x7b551; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r15]; call rax; 
0x000000000048a847: loope 0x8a895; mov dword ptr [rdi], ecx; ret; 
0x000000000048a878: loope 0x8a8c6; mov dword ptr [rdi - 8], ecx; ret; 
0x000000000048a8ed: loope 0x8a93b; mov dword ptr [rdi - 0x10], ecx; ret; 
0x000000000048bce5: loope 0x8bcd7; call 0x8b7a0; leave; ret; 
0x000000000049f876: loope 0x9f8d3; ret; 
0x00000000004a42d9: loope 0xa42d3; push qword ptr [rax - 0x1d]; clc; call qword ptr [rax - 0x1b]; 
0x00000000004a42f9: loope 0xa42f3; inc dword ptr [rax - 0x1d]; clc; jmp qword ptr [rax]; 
0x00000000004ba06a: mov ah, 0x13; ret; 
0x0000000000400460: mov ah, 0x24; add byte ptr [rdx], al; add byte ptr [rax], al; mov rdi, r8; mov eax, ebp; syscall; 
0x000000000040049c: mov ah, 0x24; add byte ptr [rdx], al; add byte ptr [rax], al; mov rdi, rbx; mov eax, r10d; syscall; 
0x000000000043fef8: mov ah, 0x50; add byte ptr [rax], al; ret; 
0x00000000004c4e34: mov ah, 0x5d; add byte ptr [rax], al; test al, 0xb7; clc; call qword ptr [rcx + 0x1c]; 
0x00000000004bb07b: mov ah, 0x5e; sar byte ptr [rip + 0x733db8a1], 0xd7; jo 0xbb0f7; mov ebp, 0xfb67d10d; ret; 
0x00000000004c7634: mov ah, 0x85; add byte ptr [rax], al; clc; sub bl, bh; call rdx; 
0x00000000004c7934: mov ah, 0x88; add byte ptr [rax], al; mov byte ptr [rdx - 5], dl; call qword ptr [rsi]; 
0x00000000004ba510: mov ah, 0xa5; ret; 
0x00000000004b9214: mov ah, 0xb5; mov dh, 0xb7; mov eax, 0xbcbbbab9; mov ebp, 0xc1c0bfbe; ret 0xc4c3; 
0x0000000000421cdc: mov ah, 0xff; dec dword ptr [rax - 0x77]; ret 0xc6eb; 
0x00000000004bf534: mov ah, 4; add byte ptr [rax], al; sub byte ptr [rdx], dh; hlt; call qword ptr [rdx]; 
0x00000000004b9e64: mov ah, bl; push rsi; ret; 
0x000000000049acca: mov al, 0; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000049cfc3: mov al, 0; add byte ptr [rax], al; ret; 
0x00000000004c3a00: mov al, 0x15; clc; call qword ptr [rax]; 
0x00000000004a4634: mov al, 0x19; stc; inc dword ptr [rax + 0x19]; stc; call rax; 
0x00000000004a441c: mov al, 0x1c; stc; inc dword ptr [rax + 0x1c]; stc; call rax; 
0x00000000004be3c4: mov al, 0x22; std; call qword ptr [rax + 0x70fffd24]; std; call qword ptr [rax + 0x28]; 
0x00000000004be41c: mov al, 0x2f; std; call qword ptr [rax]; 
0x00000000004c9c50: mov al, 0x38; std; call qword ptr [rdi]; 
0x000000000049cde1: mov al, 0x48; add esp, 0x18; ret; 
0x00000000004a4030: mov al, 0x4b; clc; inc eax; clc; call rax; 
0x00000000004c58a0: mov al, 0x5b; cli; jmp rax; 
0x00000000004c7c30: mov al, 0x5e; sti; jmp qword ptr [rdx]; 
0x00000000004a4974: mov al, 0x74; stc; inc eax; je 0xa4974; call rax; 
0x00000000004a49a8: mov al, 0x75; stc; call rax; 
0x00000000004a49c8: mov al, 0x76; stc; call rax; 
0x00000000004c6810: mov al, 0x98; cli; jmp qword ptr [rax + 1]; 
0x00000000004c8ef0: mov al, 0x9d; cld; call qword ptr [rax]; 
0x00000000004a40e0: mov al, 0x9f; clc; call rax; 
0x00000000004a4100: mov al, 0xa8; clc; call rax; 
0x00000000004a4140: mov al, 0xba; clc; jmp qword ptr [rax - 0x45]; 
0x00000000004a4230: mov al, 0xbf; clc; push qword ptr [rax]; sar al, 0xff; rol al, 0xf8; call qword ptr [rax - 0x3f]; 
0x00000000004a0b58: mov al, 0xcb; and al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000004a43ac: mov al, 0xcf; clc; inc dword ptr [rax]; sar eax, 1; call qword ptr [rax - 0x2e]; 
0x00000000004a4400: mov al, 0xd6; clc; inc dword ptr [rax]; fdivr st(0); call qword ptr [rax - 0x27]; 
0x0000000000440cac: mov al, 0xdd; std; dec dword ptr [rcx - 0x75]; jge 0x40cb4; call rbx; 
0x00000000004be428: mov al, 0xef; cld; inc dword ptr [rax]; cld; call qword ptr [rax - 0xc]; 
0x00000000004c4be9: mov al, 0xf8; call qword ptr [rdi]; 
0x0000000000481066: mov al, 0xff; inc dword ptr [rbp + 0x481b75c0]; cmp dword ptr [rsp + 0x28], 0; jne 0x81080; add rsp, 0x38; ret; 
0x00000000004c08fd: mov al, 1; add ah, byte ptr [rbx + 0x41180e0a]; ret; 
0x00000000004c6bfd: mov al, 1; add bl, byte ptr [rax + 0x41180e0a]; ret; 
0x00000000004c93b0: mov al, 8; std; call qword ptr [rbx + 2]; 
0x00000000004a4001: mov al, bh; jmp rax; 
0x00000000004c7a95: mov al, byte ptr [rax]; add byte ptr [rax], bh; push rdi; sti; call rsi; 
0x000000000043b8c6: mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, qword ptr [rdx + 2]; ret; 
0x000000000043a116: mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x000000000043b8f4: mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; lea rax, qword ptr [rdx + 4]; ret; 
0x000000000043a134: mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x000000000047f6bf: mov al, byte ptr [rcx]; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000043b8a0: mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, qword ptr [rdx]; ret; 
0x000000000043a0f0: mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x000000000041036f: mov al, dh; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000043b904: mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, qword ptr [rdx + 5]; ret; 
0x000000000043a144: mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x000000000043b8b0: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; lea rax, qword ptr [rdx + 1]; ret; 
0x000000000043b8c0: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, qword ptr [rdx + 2]; ret; 
0x000000000043a110: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x000000000043a100: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x0000000000436131: mov bh, 0x16; mov word ptr [rdi], dx; ret; 
0x00000000004748e5: mov bh, 0x29; sti; dec dword ptr [rax + 0x39]; ret; 
0x000000000044dbeb: mov bh, 0x43; add al, 0x29; ret 0x8941; 
0x000000000044d76e: mov bh, 0x47; or cl, byte ptr [rax + 0x39]; ret 0x3a76; 
0x000000000043c7b8: mov bh, 0x48; lea eax, dword ptr [rdi + 7]; ret; 
0x00000000004bb344: mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x00000000004b9217: mov bh, 0xb8; mov ecx, 0xbdbcbbba; mov esi, 0xc2c1c0bf; ret; 
0x00000000004428a5: mov bh, 0xc1; std; dec dword ptr [rcx - 0x75]; jge 0x428ad; call rbx; 
0x00000000004c4e39: mov bh, 0xf8; call qword ptr [rcx + 0x1c]; 
0x000000000048c51b: mov bh, 0xff; test eax, eax; je 0x8c52c; mov qword ptr [rip + 0x24149c], 0x6cd9e0; add rsp, 8; ret; 
0x00000000004c3878: mov bh, 1; ret; 
0x0000000000478aec: mov bh, 8; ret 0x6c; 
0x000000000047e3c2: mov bh, byte ptr [rbx]; clc; jmp qword ptr [rsi + 0x2e]; 
0x00000000004c2378: mov bh, ch; cmc; call qword ptr [rdx]; 
0x000000000043e0ae: mov bl, 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000047258c: mov bl, 0x25; add byte ptr [rdi], cl; xchg eax, ebp; ret 0xf748; 
0x000000000041ea49: mov bl, 0x48; add al, byte ptr [rax]; add rsp, 0x80; mov rax, rbx; pop rbx; ret; 
0x0000000000498289: mov bl, 0x66; nop dword ptr [rax + rax]; call rbx; 
0x00000000004b9213: mov bl, 0xb4; mov ch, 0xb6; mov bh, 0xb8; mov ecx, 0xbdbcbbba; mov esi, 0xc2c1c0bf; ret; 
0x00000000004733a9: mov bl, 0xb6; cli; dec dword ptr [rax + 0x63]; sti; mov eax, 3; syscall; 
0x00000000004c7676: mov bl, 2; ret; 
0x0000000000447718: mov bl, byte ptr [rdx + 0x48004a66]; add edx, 0x4a6680; movsx edx, byte ptr [rdx + 0x1b]; mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x000000000041d640: mov byte ptr [r8 + rbx], r9b; mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041d4d0: mov byte ptr [r8 + rbx], r9b; mov rax, r8; pop rbx; ret; 
0x000000000041233c: mov byte ptr [r8 - 0x75], r9b; or cl, byte ptr [rax - 0x7d]; ret; 
0x000000000047b9b4: mov byte ptr [r8 - 0x77], r9b; or byte ptr [rax - 0x77], cl; ror byte ptr [rax - 0x7d], 1; ret 0x4801; 
0x000000000043dcc7: mov byte ptr [rax + 0x75], 0xc5; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x00000000004738fd: mov byte ptr [rax + 0xc], 0; add rsp, 0x30; mov eax, ebx; pop rbx; ret; 
0x000000000041d641: mov byte ptr [rax + rbx], cl; mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041d4d1: mov byte ptr [rax + rbx], cl; mov rax, r8; pop rbx; ret; 
0x0000000000447e38: mov byte ptr [rax + rcx*2], 0x83; ret; 
0x000000000041233d: mov byte ptr [rax - 0x75], cl; or cl, byte ptr [rax - 0x7d]; ret; 
0x000000000047b9b5: mov byte ptr [rax - 0x77], cl; or byte ptr [rax - 0x77], cl; ror byte ptr [rax - 0x7d], 1; ret 0x4801; 
0x00000000004477e3: mov byte ptr [rax - 0x7c], 0xf6; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000004c7965: mov byte ptr [rax], al; add al, bl; push rdx; sti; jmp qword ptr [rdx]; 
0x00000000004541cd: mov byte ptr [rax], bh; add r8b, bpl; jp 0x541b1; cli; jmp qword ptr [rsi + 0x2e]; 
0x0000000000453984: mov byte ptr [rbp - 0x4d0], al; mov rsi, r15; mov rdi, rbx; call rax; 
0x0000000000453983: mov byte ptr [rbp - 0x4d0], r8b; mov rsi, r15; mov rdi, rbx; call rax; 
0x000000000045dc04: mov byte ptr [rbp - 0x500], al; mov rsi, r15; mov rdi, qword ptr [rbp - 0x4a0]; call rax; 
0x000000000045dc03: mov byte ptr [rbp - 0x500], r8b; mov rsi, r15; mov rdi, qword ptr [rbp - 0x4a0]; call rax; 
0x000000000045dbfd: mov byte ptr [rbp - 0x514], cl; mov byte ptr [rbp - 0x500], r8b; mov rsi, r15; mov rdi, qword ptr [rbp - 0x4a0]; call rax; 
0x000000000045dbfc: mov byte ptr [rbp - 0x514], r9b; mov byte ptr [rbp - 0x500], r8b; mov rsi, r15; mov rdi, qword ptr [rbp - 0x4a0]; call rax; 
0x00000000004bf718: mov byte ptr [rbp - 0xc], bl; call qword ptr [rax]; 
0x00000000004c2828: mov byte ptr [rcx - 0xa], cl; jmp rbx; 
0x00000000004c0d68: mov byte ptr [rcx - 0xb], cl; jmp qword ptr [rcx]; 
0x0000000000442e5d: mov byte ptr [rcx], 0x4c; cmp edx, esi; jne 0x42e50; movsxd rdi, dword ptr [rbp - 0x58]; mov eax, 3; syscall; 
0x00000000004c2858: mov byte ptr [rcx], al; ret; 
0x000000000043c508: mov byte ptr [rdi + 0x10], dh; lea rax, qword ptr [rdi + 0x10]; ret; 
0x000000000043be78: mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000043c57e: mov byte ptr [rdi + 0x14], dh; lea rax, qword ptr [rdi + 0x14]; ret; 
0x000000000043bece: mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000043c600: mov byte ptr [rdi + 0x18], dh; lea rax, qword ptr [rdi + 0x18]; ret; 
0x000000000043bf50: mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000043c3b6: mov byte ptr [rdi + 2], dh; lea rax, qword ptr [rdi + 2]; ret; 
0x000000000043bd96: mov byte ptr [rdi + 2], dh; ret; 
0x000000000043c3d2: mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, qword ptr [rdi + 4]; ret; 
0x000000000043bdb2: mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x000000000043c423: mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, qword ptr [rdi + 8]; ret; 
0x000000000043bdf3: mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x00000000004321fb: mov byte ptr [rdi - 1], dl; ret; 
0x000000000043337c: mov byte ptr [rdi], cl; ret; 
0x0000000000427272: mov byte ptr [rdi], cl; test dl, 2; je 0x271e4; mov word ptr [rax + rdx - 2], cx; ret; 
0x000000000043c390: mov byte ptr [rdi], dh; lea rax, qword ptr [rdi]; ret; 
0x000000000043bd70: mov byte ptr [rdi], dh; ret; 
0x00000000004361a3: mov byte ptr [rdi], dl; ret; 
0x000000000043b8c9: mov byte ptr [rdx + 2], al; lea rax, qword ptr [rdx + 2]; ret; 
0x000000000043a119: mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x000000000043b8f7: mov byte ptr [rdx + 4], al; lea rax, qword ptr [rdx + 4]; ret; 
0x000000000043a137: mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x000000000043dbeb: mov byte ptr [rdx + rdx*8 + 0xac840f], 0; add dh, dh; ret 0x7501; 
0x00000000004c7938: mov byte ptr [rdx - 5], dl; call qword ptr [rsi]; 
0x000000000047c150: mov byte ptr [rdx], 0; add rsp, 0x140; pop rbx; ret; 
0x000000000043b8a2: mov byte ptr [rdx], al; lea rax, qword ptr [rdx]; ret; 
0x000000000043a0f2: mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x00000000004c3a48: mov byte ptr [rdx], bl; clc; call qword ptr [rax]; 
0x00000000004417f4: mov byte ptr [rdx], cl; add byte ptr [rax], al; xor esi, esi; mov rdi, r12; call rbx; 
0x000000000049b680: mov byte ptr [rip + 0x2324d9], 8; ret; 
0x000000000049b679: mov byte ptr [rip + 0x2324df], 8; mov byte ptr [rip + 0x2324d9], 8; ret; 
0x000000000049b672: mov byte ptr [rip + 0x2324e5], 8; mov byte ptr [rip + 0x2324df], 8; mov byte ptr [rip + 0x2324d9], 8; ret; 
0x000000000049b66b: mov byte ptr [rip + 0x2324eb], 8; mov byte ptr [rip + 0x2324e5], 8; mov byte ptr [rip + 0x2324df], 8; mov byte ptr [rip + 0x2324d9], 8; ret; 
0x000000000047ccd4: mov byte ptr [rip - 0x24ce0006], bl; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000452dd3: mov byte ptr [rsi], al; jne 0x52db0; mov rax, rsi; ret; 
0x0000000000452d4f: mov byte ptr [rsi], dl; jne 0x52d38; mov rax, rsi; ret; 
0x000000000041bfe1: mov byte ptr [rsp + 0x20], bl; mov qword ptr [rsp + 0x18], r8; mov qword ptr [rsp + 0x10], r10; call rax; 
0x000000000041bfe0: mov byte ptr [rsp + 0x20], r11b; mov qword ptr [rsp + 0x18], r8; mov qword ptr [rsp + 0x10], r10; call rax; 
0x000000000048c387: mov ch, 0; add byte ptr [rax], al; mov rax, rdx; pop rbx; ret; 
0x00000000004723e1: mov ch, 0x25; add byte ptr [rdi], cl; adc dword ptr [rsi + 0x48000000], -0x77; fmul dword ptr [rax - 0x7d]; ret; 
0x00000000004b9e62: mov ch, 0x31; mov ah, bl; push rsi; ret; 
0x00000000004bb1a3: mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x000000000046d87a: mov ch, 0x90; add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x18; mov rdi, r12; call rbx; 
0x000000000046d958: mov ch, 0x90; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; lea rdx, qword ptr [rsp + 0x18]; lea r9, qword ptr [rsp + 0x10]; call rbx; 
0x00000000004bc53f: mov ch, 0x99; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x00000000004bceea: mov ch, 0xab; ret; 
0x00000000004b9215: mov ch, 0xb6; mov bh, 0xb8; mov ecx, 0xbdbcbbba; mov esi, 0xc2c1c0bf; ret; 
0x00000000004c2c29: mov ch, 0xf7; call qword ptr [rbx + 4]; 
0x00000000004c4c99: mov ch, 0xf8; call qword ptr [rcx]; 
0x00000000004c4c81: mov ch, 0xf8; call qword ptr [rdi]; 
0x00000000004c4ce1: mov ch, 0xf8; call qword ptr [rsi]; 
0x00000000004c4d29: mov ch, 0xf8; jmp qword ptr [rsi]; 
0x000000000042ff36: mov ch, 6; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004c2148: mov ch, bl; cmc; jmp qword ptr [rdx]; 
0x000000000046f040: mov ch, dh; and ch, 0xf; je 0x6f060; add rax, 2; ret; 
0x0000000000426a9b: mov cl, 0; add byte ptr [rax], al; xor rax, rax; ret; 
0x00000000004040f0: mov cl, 1; add byte ptr [rax], al; movsxd rdi, r12d; mov eax, 3; syscall; 
0x0000000000413d89: mov cl, byte ptr [rax + 0x63]; std; mov eax, 3; syscall; 
0x0000000000429ab5: mov cl, byte ptr [rbx - 0x37d67dfc]; ret; 
0x000000000048cab2: mov cl, byte ptr [rip - 0x76b70001]; sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x000000000043337a: mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000046f02b: mov cl, dl; and cl, 0xf; je 0x6f050; ret; 
0x00000000004bc5cc: mov cs, edi; ret 0x8b36; 
0x000000000042beee: mov cs, word ptr [rip - 0x7cb80000]; ret 0xe910; 
0x000000000043631e: mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000043c514: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, qword ptr [rdi + 0x11]; ret; 
0x000000000043be84: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000043c618: mov cx, word ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, qword ptr [rdi + 0x19]; ret; 
0x000000000043bf68: mov cx, word ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000433367: mov cx, word ptr [rsi + rdx - 2]; mov si, word ptr [rsi]; mov word ptr [rdi], si; mov word ptr [rdi + rdx - 2], cx; ret; 
0x0000000000432644: mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x00000000004360c4: mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x000000000043c3b0: mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, qword ptr [rdi + 2]; ret; 
0x000000000043bd90: mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x000000000043631d: mov cx, word ptr ss:[rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000481218: mov dh, 0; add byte ptr [rax - 0x75], cl; and al, 0x38; add rsp, 0x68; ret; 
0x0000000000413c04: mov dh, 0; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x000000000041281e: mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000415b20: mov dh, 0; pop rbx; ret; 
0x0000000000413a9b: mov dh, 0; ret; 
0x00000000004361a1: mov dh, 0x16; mov byte ptr [rdi], dl; ret; 
0x0000000000426c74: mov dh, 0x16; sub eax, edx; ret; 
0x00000000004a4464: mov dh, 0x1b; stc; inc dword ptr [rsi + 0x1b]; stc; call rsi; 
0x0000000000421fcd: mov dh, 0x2a; add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rbp + 7], dh; lea rax, qword ptr [rip + 3]; ret; 
0x0000000000420b18: mov dh, 0x2a; add byte ptr [rdi], cl; test edi, esp; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000401933: mov dh, 0x31; sar byte ptr [rsi + 0x20001], cl; mov edi, 0x4a1e23; mov eax, 2; syscall; 
0x0000000000415ba4: mov dh, 0x36; mov rdi, r12; lea rbx, qword ptr [r14 + 1]; call qword ptr [rax + 0x18]; 
0x000000000046a67e: mov dh, 0x40; add dword ptr [rcx - 0x77], eax; ret 0xe883; 
0x00000000004165f7: mov dh, 0x40; inc dword ptr [rbx - 0x3ca410dd]; nop; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x30]; 
0x000000000040e2a5: mov dh, 0x40; or dword ptr [rax + rax*8 - 0x38b7938c], eax; ret 0xfff0; 
0x000000000046acb3: mov dh, 0x42; add dword ptr [rcx - 0x77], eax; ret 0xe883; 
0x000000000043dc81: mov dh, 0x47; cmc; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000043dc71: mov dh, 0x47; hlt; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000043dc41: mov dh, 0x47; int1; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000043dc61: mov dh, 0x47; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000043dc51: mov dh, 0x47; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x0000000000482a01: mov dh, 0x48; add al, 0x8d; push rcx; rol byte ptr [rax - 0x6df0f506], 1; ret 0xb60f; 
0x00000000004829c1: mov dh, 0x48; add cl, byte ptr [rbp - 0x57f2faf]; or cl, byte ptr [rdi]; xchg eax, edx; ret 0xb60f; 
0x00000000004829a1: mov dh, 0x48; add dword ptr [rbp - 0x57f2faf], ecx; or cl, byte ptr [rdi]; xchg eax, edx; ret 0xb60f; 
0x0000000000482a21: mov dh, 0x48; add eax, 0x80d0518d; cli; or cl, byte ptr [rdi]; xchg eax, edx; ret 0xb60f; 
0x00000000004829e1: mov dh, 0x48; add ecx, dword ptr [rbp - 0x57f2faf]; or cl, byte ptr [rdi]; xchg eax, edx; ret 0xb60f; 
0x0000000000482af9: mov dh, 0x48; or al, 0x8d; push rcx; rol byte ptr [rax - 0x6df0f506], 1; ret 0xb60f; 
0x0000000000482a81: mov dh, 0x48; or byte ptr [rbp - 0x57f2faf], cl; or cl, byte ptr [rdi]; xchg eax, edx; ret 0xb60f; 
0x0000000000482ac1: mov dh, 0x48; or cl, byte ptr [rbp - 0x57f2faf]; or cl, byte ptr [rdi]; xchg eax, edx; ret 0xb60f; 
0x0000000000482aa1: mov dh, 0x48; or dword ptr [rbp - 0x57f2faf], ecx; or cl, byte ptr [rdi]; xchg eax, edx; ret 0xb60f; 
0x0000000000482b15: mov dh, 0x48; or eax, 0x80d0518d; cli; or cl, byte ptr [rdi]; xchg eax, edx; ret 0xb60f; 
0x0000000000482add: mov dh, 0x48; or ecx, dword ptr [rbp - 0x57f2faf]; or cl, byte ptr [rdi]; xchg eax, edx; ret 0xb60f; 
0x00000000004497c0: mov dh, 0x4a; dec dword ptr [rax - 0x7d]; ret 0x4801; 
0x000000000049ada4: mov dh, 0x4c; add ecx, esi; jmp rcx; 
0x00000000004bb302: mov dh, 0x4e; ret 0x474c; 
0x00000000004764c5: mov dh, 0x53; add dword ptr [rdx + rdx*8 - 0x7cb7eb8c], eax; ret; 
0x000000000046b259: mov dh, 0x53; or al, 0xf6; ret 0xf04; 
0x000000000043dc85: mov dh, 0x56; cmc; sub eax, edx; ret; 
0x000000000043dc75: mov dh, 0x56; hlt; sub eax, edx; ret; 
0x000000000043dc45: mov dh, 0x56; int1; sub eax, edx; ret; 
0x000000000043dc55: mov dh, 0x56; sub eax, edx; ret; 
0x000000000045df77: mov dh, 0x57; or al, 0x83; ret; 
0x000000000045defa: mov dh, 0x57; or al, 0xf6; ret 0xf08; 
0x0000000000477057: mov dh, 0x87; adc eax, 0x89000003; ret 0xe8c0; 
0x000000000044f97f: mov dh, 0xb2; js 0x4f9f1; add byte ptr [rax - 0x77], cl; ret 0x8840; 
0x00000000004b9216: mov dh, 0xb7; mov eax, 0xbcbbbab9; mov ebp, 0xc1c0bfbe; ret 0xc4c3; 
0x000000000045030d: mov dh, 0xc0; mov dword ptr [rbx + 0x40], eax; xor eax, eax; pop rbx; ret; 
0x000000000049bd46: mov dh, 0xc0; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x000000000048ca5d: mov dh, 0xc0; neg eax; ret; 
0x000000000048c807: mov dh, 0xc0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000473876: mov dh, 0xc0; ret; 
0x0000000000426c94: mov dh, 0xc0; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000043ee88: mov dh, 0xc1; pop rbx; ret; 
0x000000000043eeb0: mov dh, 0xc2; pop rbx; ret; 
0x000000000041495e: mov dh, 0xc5; pop rbx; pop rbp; pop r12; ret; 
0x00000000004477e2: mov dh, 0xc6; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000004bc544: mov dh, 0xc7; ret 0xe71f; 
0x00000000004165a4: mov dh, 0xce; cmp eax, ecx; je 0x165c8; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x0000000000426c9a: mov dh, 0xd2; sub eax, edx; ret; 
0x00000000004aee70: mov dh, 0xd; add byte ptr [rax], al; mov ecx, 0xbc00000d; or eax, 0xdbf0000; add byte ptr [rax], al; ret 0xd; 
0x000000000049c09f: mov dh, 0xdb; movsxd rax, dword ptr [r8 + r11*4]; add rax, r8; jmp rax; 
0x00000000004bd077: mov dh, 0xdd; in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x0000000000423411: mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000042f014: mov dh, 0xe; sub eax, ecx; ret; 
0x00000000004733aa: mov dh, 0xfa; dec dword ptr [rax + 0x63]; sti; mov eax, 3; syscall; 
0x000000000049ec23: mov dh, 0xff; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x22f121]; mov qword ptr [rip + 0x22f11a], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000049ed7c: mov dh, 0xff; nop; mov rax, qword ptr [rip + 0x22efc9]; mov qword ptr [rip + 0x22efc2], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000049db2a: mov dh, 1; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004157be: mov dh, 2; pop rbx; ret; 
0x0000000000412831: mov dh, 2; ret; 
0x00000000004951e4: mov dh, 7; lea rdx, qword ptr [rip + 0x13213]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000492c04: mov dh, 7; lea rdx, qword ptr [rip + 0x157f3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000491254: mov dh, 7; lea rdx, qword ptr [rip + 0x171a3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000048f284: mov dh, 7; lea rdx, qword ptr [rip + 0x19173]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042cce4: mov dh, 7; lea rdx, qword ptr [rip + 0x7b713]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042b674: mov dh, 7; lea rdx, qword ptr [rip + 0x7cd83]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000429ac4: mov dh, 7; lea rdx, qword ptr [rip + 0x7e933]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042f011: mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000426c71: mov dh, 7; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x0000000000423414: mov dh, 7; sub eax, ecx; ret; 
0x0000000000410334: mov dh, byte ptr [rax]; add dword ptr [rax], eax; add bl, dh; ret; 
0x000000000043f00c: mov dh, byte ptr [rcx - 0xd]; ret; 
0x00000000004a41ac: mov di, 0xfff8; out 0xbf, al; clc; jmp qword ptr [rsi - 0x40]; 
0x0000000000410520: mov dl, 0x2b; add byte ptr [rax - 0x77], cl; ret; 
0x000000000044f980: mov dl, 0x78; outsb dx, byte ptr [rsi]; add byte ptr [rax - 0x77], cl; ret 0x8840; 
0x00000000004bc7a0: mov dl, 0x9f; sub edi, esi; int 0x6b; ret; 
0x00000000004b9212: mov dl, 0xb3; mov ah, 0xb5; mov dh, 0xb7; mov eax, 0xbcbbbab9; mov ebp, 0xc1c0bfbe; ret 0xc4c3; 
0x000000000046669a: mov dl, 0xb8; stc; jmp qword ptr [rsi - 0x70]; 
0x00000000004a4700: mov dl, 0xe; stc; jmp qword ptr [rdx]; 
0x0000000000432280: mov dl, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004c6f08: mov dl, cl; cli; call qword ptr [rcx]; 
0x0000000000496984: mov dword ptr [0x2d0], eax; ret; 
0x0000000000444fb4: mov dword ptr [0xffffffffffffffd0], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000049562c: mov dword ptr [r10 + 0xc], edi; pop rbp; pop r12; pop r14; ret; 
0x0000000000419623: mov dword ptr [r12 + 0x14], eax; pop r12; ret; 
0x00000000004195ef: mov dword ptr [r12 + 0x1c], eax; je 0x195fb; pop rbx; pop rbp; pop r12; ret; 
0x000000000041961d: mov dword ptr [r12 + 0x24], ebp; pop rbp; mov dword ptr [r12 + 0x14], eax; pop r12; ret; 
0x0000000000401392: mov dword ptr [r8], eax; pop rbx; ret; 
0x0000000000436326: mov dword ptr [r9 - 2], ecx; ret; 
0x0000000000436311: mov dword ptr [r9 - 4], ecx; ret; 
0x000000000044387e: mov dword ptr [rax + 0x10], 0x443830; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000411573: mov dword ptr [rax + 0x10], ecx; push rdi; push qword ptr [rax + 0x38]; mov rdi, rbp; lea r8, qword ptr [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x000000000046c349: mov dword ptr [rax + 0x10], edx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000046c389: mov dword ptr [rax + 0x10], esi; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000413171: mov dword ptr [rax + 0x130], 0x4a29c0; mov rax, qword ptr [rbp + 0xd8]; call qword ptr [rax + 0x40]; 
0x000000000046d2e9: mov dword ptr [rax + 0x18], edx; mov dword ptr [rbx], ecx; xor eax, eax; pop rbx; ret; 
0x000000000047305b: mov dword ptr [rax + 0x28], 0; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x000000000046d2e5: mov dword ptr [rax + 0x28], edx; mov qword ptr [rax + 0x18], rdx; mov dword ptr [rbx], ecx; xor eax, eax; pop rbx; ret; 
0x000000000046c3ce: mov dword ptr [rax + 0x30], esi; cmovne eax, edx; mov dword ptr [rbx + 0x74], eax; add rsp, 0x20; pop rbx; ret; 
0x000000000046d1e5: mov dword ptr [rax + 0x38], esp; mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x000000000046c34d: mov dword ptr [rax + 0x40], ecx; ret; 
0x000000000046c994: mov dword ptr [rax + 0x40], edx; mov rdx, rdi; jbe 0x6c907; mov eax, dword ptr [rsi]; pop rbx; ret; 
0x000000000046d387: mov dword ptr [rax + 0x48], 0; pop rbx; ret; 
0x0000000000430835: mov dword ptr [rax + 0x48], 0x148d601; xlatb; lea r11, qword ptr [rip + 0x73a0c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430770: mov dword ptr [rax + 0x48], 0x148d601; xlatb; lea r11, qword ptr [rip + 0x73ad1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000046d37f: mov dword ptr [rax + 0x50], 0; mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x0000000000447728: mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x000000000044772b: mov dword ptr [rax + 0x54], edx; ret; 
0x0000000000450512: mov dword ptr [rax + 0x90], edx; add rsp, 0xd0; ret; 
0x0000000000410227: mov dword ptr [rax + 8], ecx; add dword ptr [r8 + 4], 1; mov rax, qword ptr [rdx + 0xd8]; mov rbx, rdx; mov rdi, rdx; call qword ptr [rax + 0x60]; 
0x000000000046c33e: mov dword ptr [rax + 8], ecx; mov rcx, qword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000046c382: mov dword ptr [rax + 8], edx; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000443886: mov dword ptr [rax + 8], edx; ret; 
0x000000000042727e: mov dword ptr [rax + rdx - 2], ecx; ret; 
0x0000000000462fd2: mov dword ptr [rax - 0x7d], ecx; ret 0x8d01; 
0x000000000049daf3: mov dword ptr [rax - 0x7d], ecx; ret; 
0x000000000048c9fd: mov dword ptr [rax], 0; mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x00000000004736a0: mov dword ptr [rax], 0x14; add rsp, 0x90; xor eax, eax; pop rbx; ret; 
0x0000000000473090: mov dword ptr [rax], 0x14; movsxd rdi, ebx; mov eax, 3; syscall; 
0x000000000043fdc0: mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000049a070: mov dword ptr [rax], 0x16; mov rax, -1; ret; 
0x000000000044e7a8: mov dword ptr [rax], 0x16; xor eax, eax; ret; 
0x000000000044d725: mov dword ptr [rax], 0x63480000; sti; mov eax, 3; syscall; 
0x000000000048131e: mov dword ptr [rax], 0x6ccac0; add rsp, 0x48; ret; 
0x000000000048c914: mov dword ptr [rax], 0x6ccae0; add rsp, 8; ret; 
0x000000000049cd8b: mov dword ptr [rax], 0x75400000; cmp qword ptr [r9 + 0x38], 0; je 0x9ce03; add rsp, 0x18; ret; 
0x0000000000473980: mov dword ptr [rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000041d4e8: mov dword ptr [rax], 0xc; xor eax, eax; ret; 
0x00000000004730b8: mov dword ptr [rax], 2; xor eax, eax; ret; 
0x0000000000410c5d: mov dword ptr [rax], 9; mov eax, 0xffffffff; ret; 
0x00000000004c799d: mov dword ptr [rax], eax; add byte ptr [rax + 0x53], dl; sti; jmp rdi; 
0x0000000000401393: mov dword ptr [rax], eax; pop rbx; ret; 
0x000000000044d673: mov dword ptr [rax], eax; sub byte ptr [rax], al; ret; 
0x000000000047c16f: mov dword ptr [rax], ecx; add rsp, 0x140; mov eax, ebx; pop rbx; ret; 
0x000000000046c875: mov dword ptr [rax], ecx; mov eax, dword ptr [rdx]; pop rbx; ret; 
0x0000000000400484: mov dword ptr [rax], ecx; mov rdi, r8; mov eax, 3; syscall; 
0x000000000048c9b5: mov dword ptr [rax], edi; pop rbx; ret; 
0x0000000000450552: mov dword ptr [rax], edx; mov eax, 0xffffffff; add rsp, 0xd0; ret; 
0x000000000046c7b5: mov dword ptr [rax], edx; mov eax, dword ptr [rsi]; pop rbx; ret; 
0x000000000046c346: mov dword ptr [rax], edx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000046c386: mov dword ptr [rax], edx; mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000400a5e: mov dword ptr [rax], edx; nop; leave; ret; 
0x000000000048c9a9: mov dword ptr [rax], edx; pop rbx; ret; 
0x000000000047396d: mov dword ptr [rax], edx; xor eax, eax; ret; 
0x0000000000400483: mov dword ptr [rax], r9d; mov rdi, r8; mov eax, 3; syscall; 
0x000000000049d0cf: mov dword ptr [rbp + 8], eax; add rsp, 0x278; mov rax, rbp; pop rbx; pop rbp; ret; 
0x00000000004620ea: mov dword ptr [rbp - 0x1070], 0; mov rax, qword ptr [rax*8 + 0x4b44a0]; jmp rax; 
0x0000000000462197: mov dword ptr [rbp - 0x1070], 1; mov rax, qword ptr [rax*8 + 0x4b44a0]; jmp rax; 
0x0000000000460cae: mov dword ptr [rbp - 0x1078], ebx; mov dword ptr [rbp - 0x1080], r9d; mov rsi, qword ptr [rbp - 0x1088]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000046130e: mov dword ptr [rbp - 0x1078], ecx; mov rdi, r14; mov rdx, qword ptr [rbp - 0x10b8]; mov rsi, qword ptr [rbp - 0x1090]; call qword ptr [rax + 0x38]; 
0x000000000046130d: mov dword ptr [rbp - 0x1078], r9d; mov rdi, r14; mov rdx, qword ptr [rbp - 0x10b8]; mov rsi, qword ptr [rbp - 0x1090]; call qword ptr [rax + 0x38]; 
0x0000000000460cb5: mov dword ptr [rbp - 0x1080], ecx; mov rsi, qword ptr [rbp - 0x1088]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000461562: mov dword ptr [rbp - 0x1080], ecx; mov rsi, qword ptr [rbp - 0x1090]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000460cb4: mov dword ptr [rbp - 0x1080], r9d; mov rsi, qword ptr [rbp - 0x1088]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000462616: mov dword ptr [rbp - 0x1088], 0; mov rax, qword ptr [rax*8 + 0x4b44a0]; jmp rax; 
0x00000000004625ce: mov dword ptr [rbp - 0x1088], 1; mov rax, qword ptr [rax*8 + 0x4b45a0]; jmp rax; 
0x00000000004620e0: mov dword ptr [rbp - 0x1090], 1; mov dword ptr [rbp - 0x1070], 0; mov rax, qword ptr [rax*8 + 0x4b44a0]; jmp rax; 
0x000000000046218d: mov dword ptr [rbp - 0x1090], 1; mov dword ptr [rbp - 0x1070], 1; mov rax, qword ptr [rax*8 + 0x4b44a0]; jmp rax; 
0x0000000000460dc6: mov dword ptr [rbp - 0x1090], 1; mov rax, qword ptr [rax*8 + 0x4b43a0]; jmp rax; 
0x000000000046043a: mov dword ptr [rbp - 0x1098], 0; mov dword ptr [rbp - 0x10a0], 0; mov dword ptr [rbp - 0x10b0], 0; jmp rax; 
0x000000000046246a: mov dword ptr [rbp - 0x1098], 1; mov rax, qword ptr [rax*8 + 0x4b48a0]; jmp rax; 
0x0000000000460444: mov dword ptr [rbp - 0x10a0], 0; mov dword ptr [rbp - 0x10b0], 0; jmp rax; 
0x0000000000462333: mov dword ptr [rbp - 0x10a0], 1; mov rax, qword ptr [rax*8 + 0x4b48a0]; jmp rax; 
0x0000000000460b91: mov dword ptr [rbp - 0x10a0], ebx; mov rsi, qword ptr [rbp - 0x1088]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000460430: mov dword ptr [rbp - 0x10a8], 0; mov dword ptr [rbp - 0x1098], 0; mov dword ptr [rbp - 0x10a0], 0; mov dword ptr [rbp - 0x10b0], 0; jmp rax; 
0x00000000004624e6: mov dword ptr [rbp - 0x10a8], 1; mov rax, qword ptr [rax*8 + 0x4b48a0]; jmp rax; 
0x0000000000462460: mov dword ptr [rbp - 0x10ac], 0x20; mov dword ptr [rbp - 0x1098], 1; mov rax, qword ptr [rax*8 + 0x4b48a0]; jmp rax; 
0x000000000046044e: mov dword ptr [rbp - 0x10b0], 0; jmp rax; 
0x00000000004624a8: mov dword ptr [rbp - 0x10b0], 1; mov rax, qword ptr [rax*8 + 0x4b48a0]; jmp rax; 
0x0000000000460e5c: mov dword ptr [rbp - 0x10b8], 1; mov rax, qword ptr [rax*8 + 0x4b48a0]; jmp rax; 
0x000000000046260c: mov dword ptr [rbp - 0x10c0], 1; mov dword ptr [rbp - 0x1088], 0; mov rax, qword ptr [rax*8 + 0x4b44a0]; jmp rax; 
0x0000000000460e9a: mov dword ptr [rbp - 0x10c8], 1; mov rax, qword ptr [rax*8 + 0x4b48a0]; jmp rax; 
0x0000000000442eab: mov dword ptr [rbp - 0x40], esp; mov esi, 0x80000; mov edi, 0x4a58bd; mov eax, ebx; syscall; 
0x0000000000442dba: mov dword ptr [rbp - 0x40], esp; syscall; 
0x0000000000454124: mov dword ptr [rbp - 0x480], ecx; mov rsi, r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000442ea7: mov dword ptr [rbp - 0x48], esp; mov qword ptr [rbp - 0x40], r12; mov esi, 0x80000; mov edi, 0x4a58bd; mov eax, ebx; syscall; 
0x0000000000442db6: mov dword ptr [rbp - 0x48], esp; mov qword ptr [rbp - 0x40], r12; syscall; 
0x00000000004545cf: mov dword ptr [rbp - 0x4a8], eax; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004557f8: mov dword ptr [rbp - 0x4b0], ecx; call qword ptr [rax + 0x38]; 
0x0000000000455b9d: mov dword ptr [rbp - 0x4c8], 0; mov qword ptr [rbp - 0x4e8], rsi; jmp rax; 
0x0000000000456300: mov dword ptr [rbp - 0x4d0], ecx; mov rdx, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000455e62: mov dword ptr [rbp - 0x4d0], ecx; mov rdx, rax; mov rax, qword ptr [rbx + 0xd8]; mov dword ptr [rbp - 0x4d8], r9d; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000456a01: mov dword ptr [rbp - 0x4d0], edx; mov rsi, r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004562ff: mov dword ptr [rbp - 0x4d0], r9d; mov rdx, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x000000000045397d: mov dword ptr [rbp - 0x4d4], ecx; mov byte ptr [rbp - 0x4d0], r8b; mov rsi, r15; mov rdi, rbx; call rax; 
0x000000000045397c: mov dword ptr [rbp - 0x4d4], r9d; mov byte ptr [rbp - 0x4d0], r8b; mov rsi, r15; mov rdi, rbx; call rax; 
0x00000000004562ef: mov dword ptr [rbp - 0x4d8], eax; mov rdi, rbx; mov rsi, qword ptr [rbp - 0x4e0]; mov dword ptr [rbp - 0x4d0], r9d; mov rdx, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000455e73: mov dword ptr [rbp - 0x4d8], ecx; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000455e72: mov dword ptr [rbp - 0x4d8], r9d; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000455ba8: mov dword ptr [rbp - 0x4e8], esi; jmp rax; 
0x0000000000455d0c: mov dword ptr [rbp - 0x4f0], ebx; mov dword ptr [rbp - 0x500], r9d; mov rdi, rbx; mov rsi, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000457061: mov dword ptr [rbp - 0x4f0], ebx; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000455b89: mov dword ptr [rbp - 0x4f8], 0; mov dword ptr [rbp - 0x500], 0; mov dword ptr [rbp - 0x4c8], 0; mov qword ptr [rbp - 0x4e8], rsi; jmp rax; 
0x0000000000455b93: mov dword ptr [rbp - 0x500], 0; mov dword ptr [rbp - 0x4c8], 0; mov qword ptr [rbp - 0x4e8], rsi; jmp rax; 
0x0000000000455d13: mov dword ptr [rbp - 0x500], ecx; mov rdi, rbx; mov rsi, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000457057: mov dword ptr [rbp - 0x500], edx; mov rsi, r11; mov qword ptr [rbp - 0x4f0], r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000455d12: mov dword ptr [rbp - 0x500], r9d; mov rdi, rbx; mov rsi, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000445f8b: mov dword ptr [rbp - 0x58], eax; call 0x80f20; mov rdi, r12; mov rax, qword ptr [rbp - 0x58]; call rax; 
0x0000000000403b52: mov dword ptr [rbp - 0x88], ecx; mov edi, 0x6cd060; call rax; 
0x0000000000403b4b: mov dword ptr [rbp - 0x90], eax; mov qword ptr [rbp - 0x88], rcx; mov edi, 0x6cd060; call rax; 
0x000000000047944c: mov dword ptr [rbp - 0xa0], edx; mov edi, 0x6cc140; call rax; 
0x000000000047b161: mov dword ptr [rbp - 0xa8], edx; call rax; 
0x000000000047d878: mov dword ptr [rbp - 0xa8], edx; mov edi, 0x6cc140; call rax; 
0x000000000047b34a: mov dword ptr [rbp - 0xa8], esi; call rax; 
0x00000000004793d6: mov dword ptr [rbp - 0xb8], ecx; mov edi, 0x6cc140; call rax; 
0x000000000045a60f: mov dword ptr [rbp - 0xb8], ecx; mov rdi, rbx; call rax; 
0x0000000000403496: mov dword ptr [rbp - 0xc0], eax; mov eax, 0; test rax, rax; je 0x34ad; mov edi, 0x6cd060; call rax; 
0x00000000004033ec: mov dword ptr [rbp - 0xc4], eax; je 0x385d; mov edi, 0x6cd720; call rbx; 
0x000000000047b15a: mov dword ptr [rbp - 0xc8], ebx; mov qword ptr [rbp - 0xa8], r10; call rax; 
0x0000000000479703: mov dword ptr [rbp - 0xc8], ecx; mov edi, 0x6cc140; call rax; 
0x000000000047a920: mov dword ptr [rbp - 0xc8], edx; call rax; 
0x000000000047b343: mov dword ptr [rbp - 0xc8], edx; mov qword ptr [rbp - 0xa8], rsi; call rax; 
0x00000000004796fc: mov dword ptr [rbp - 0xd0], eax; mov qword ptr [rbp - 0xc8], r9; mov edi, 0x6cc140; call rax; 
0x000000000047a919: mov dword ptr [rbp - 0xd0], ebx; mov qword ptr [rbp - 0xc8], r10; call rax; 
0x000000000047aa51: mov dword ptr [rbp - 0xd0], esi; mov qword ptr [rbp - 0xc8], r10; call rax; 
0x000000000047b33c: mov dword ptr [rbp - 0xe0], ebx; mov qword ptr [rbp - 0xc8], r10; mov qword ptr [rbp - 0xa8], rsi; call rax; 
0x000000000047aa4a: mov dword ptr [rbp - 0xf8], ebx; mov qword ptr [rbp - 0xd0], rsi; mov qword ptr [rbp - 0xc8], r10; call rax; 
0x00000000004009e7: mov dword ptr [rbp - 8], eax; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000416e4d: mov dword ptr [rbp], eax; mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000492c53: mov dword ptr [rbp], eax; mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048a121: mov dword ptr [rbp], ebx; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000413dff: mov dword ptr [rbp], esp; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000412562: mov dword ptr [rbp], esp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000413dfe: mov dword ptr [rbp], r12d; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000412561: mov dword ptr [rbp], r12d; pop rbx; pop rbp; pop r12; ret; 
0x000000000044e0a1: mov dword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000480fe5: mov dword ptr [rbx + 0x10], eax; add rsp, 0x30; pop rbx; ret; 
0x0000000000412637: mov dword ptr [rbx + 0x10], eax; mov rax, rbx; pop rbx; ret; 
0x000000000048101e: mov dword ptr [rbx + 0x10], eax; pop rax; pop rdx; pop rbx; ret; 
0x000000000047d21f: mov dword ptr [rbx + 0x10], eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000412e39: mov dword ptr [rbx + 0x10], eax; xor eax, eax; pop rbx; ret; 
0x000000000043f46d: mov dword ptr [rbx + 0x10], edx; je 0x3f449; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004127e6: mov dword ptr [rbx + 0x10], esi; mov qword ptr [rbx + 0x30], rsi; mov qword ptr [rbx + 0x28], rsi; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x0000000000415ecd: mov dword ptr [rbx + 0x18], 0; pop rbx; pop rbp; pop r12; ret; 
0x000000000048c658: mov dword ptr [rbx + 0x18], eax; mov dword ptr [rbx + 4], 1; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000041262f: mov dword ptr [rbx + 0x18], eax; mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000480f83: mov dword ptr [rbx + 0x18], eax; pop rax; pop rdx; pop rbx; ret; 
0x000000000049a395: mov dword ptr [rbx + 0x18], eax; pop rbx; ret; 
0x00000000004127e2: mov dword ptr [rbx + 0x18], esi; mov qword ptr [rbx + 0x10], rsi; mov qword ptr [rbx + 0x30], rsi; mov qword ptr [rbx + 0x28], rsi; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x0000000000415653: mov dword ptr [rbx + 0x20], eax; mov dword ptr [rbx], edx; xor eax, eax; pop rbx; ret; 
0x00000000004969c3: mov dword ptr [rbx + 0x20], eax; pop rbx; ret; 
0x00000000004127f2: mov dword ptr [rbx + 0x20], esi; call qword ptr [rax + 0x70]; 
0x00000000004127ee: mov dword ptr [rbx + 0x28], esi; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x000000000041564f: mov dword ptr [rbx + 0x30], eax; mov qword ptr [rbx + 0x20], rax; mov dword ptr [rbx], edx; xor eax, eax; pop rbx; ret; 
0x00000000004127ea: mov dword ptr [rbx + 0x30], esi; mov qword ptr [rbx + 0x28], rsi; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x0000000000412dbd: mov dword ptr [rbx + 0x38], 0; mov eax, 3; movsxd rdi, dword ptr [rbx + 0x70]; syscall; 
0x0000000000415a26: mov dword ptr [rbx + 0x38], esi; cmovne eax, edx; mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x000000000045030f: mov dword ptr [rbx + 0x40], eax; xor eax, eax; pop rbx; ret; 
0x00000000004156ce: mov dword ptr [rbx + 0x50], 0; pop rbx; ret; 
0x0000000000416e51: mov dword ptr [rbx + 0x60], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000413cb2: mov dword ptr [rbx + 0x70], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000046c3d4: mov dword ptr [rbx + 0x74], eax; add rsp, 0x20; pop rbx; ret; 
0x000000000046d1e8: mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x00000000004125c7: mov dword ptr [rbx + 0x90], eax; pop rbx; ret; 
0x0000000000412e2e: mov dword ptr [rbx + 0x90], esi; mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x000000000049cabe: mov dword ptr [rbx + 0x98], edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048c65b: mov dword ptr [rbx + 4], 1; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000412135: mov dword ptr [rbx + 8], eax; mov edx, 1; mov rsi, rbx; mov rdi, r12; mov eax, r9d; syscall; 
0x0000000000412633: mov dword ptr [rbx + 8], eax; mov qword ptr [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000412e35: mov dword ptr [rbx + 8], eax; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x000000000047ccbe: mov dword ptr [rbx + 8], eax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000415985: mov dword ptr [rbx + 8], eax; movzx eax, byte ptr [rdx]; pop rbx; ret; 
0x000000000044e0b7: mov dword ptr [rbx + 8], eax; pop rbx; ret; 
0x00000000004157b5: mov dword ptr [rbx + 8], edx; mov rsi, rcx; jbe 0x15755; movzx eax, byte ptr [rdx]; pop rbx; ret; 
0x0000000000415b1c: mov dword ptr [rbx + 8], edx; movzx eax, byte ptr [rax]; pop rbx; ret; 
0x000000000046fb84: mov dword ptr [rbx - 0x74b7f808], 0xf70244c; xchg eax, ebp; ret 0x8b4c; 
0x0000000000446363: mov dword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000047d523: mov dword ptr [rbx], 0; or dword ptr [rip + 0x24ec40], 1; pop rbx; ret; 
0x0000000000498066: mov dword ptr [rbx], eax; add rsp, 0x10; pop rbx; ret; 
0x0000000000415a2c: mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x000000000049a7d9: mov dword ptr [rbx], eax; pop rax; pop rdx; pop rbx; ret; 
0x000000000046bf02: mov dword ptr [rbx], ecx; mov rsi, r12; cmovne rbp, rdx; mov rdi, rbx; mov rdx, rbp; call qword ptr [rax + 0x58]; 
0x000000000046d2ec: mov dword ptr [rbx], ecx; xor eax, eax; pop rbx; ret; 
0x0000000000415f80: mov dword ptr [rbx], edx; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x0000000000415656: mov dword ptr [rbx], edx; xor eax, eax; pop rbx; ret; 
0x000000000043f0c1: mov dword ptr [rbx], esi; mov rax, qword ptr [rsp + 8]; add rsp, 0x10; pop rbx; ret; 
0x0000000000442cb6: mov dword ptr [rbx], esi; mov rdx, qword ptr [rsp]; mov rsi, r14; mov rdi, qword ptr [rsp + 8]; xor eax, eax; syscall; 
0x0000000000442c75: mov dword ptr [rbx], esi; mov rsi, r14; mov qword ptr [rsp], rax; mov rdx, rax; mov eax, r12d; syscall; 
0x000000000041622a: mov dword ptr [rcx + 0x130], eax; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000416222: mov dword ptr [rcx + 0x50], 0; mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x00000000004584cb: mov dword ptr [rcx + rdx*8], eax; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000436327: mov dword ptr [rcx - 2], ecx; ret; 
0x0000000000436312: mov dword ptr [rcx - 4], ecx; ret; 
0x0000000000436301: mov dword ptr [rcx - 8], ecx; ret; 
0x0000000000480353: mov dword ptr [rcx], 0x1c68348; test al, al; jne 0x802a8; movsx eax, dl; neg eax; ret; 
0x0000000000495629: mov dword ptr [rcx], 0x7a89415b; or al, 0x5d; pop r12; pop r14; ret; 
0x00000000004487b2: mov dword ptr [rcx], 0x83480b89; rol byte ptr [rax + rcx*2], 0x83; ret; 
0x0000000000473d9c: mov dword ptr [rcx], 0x8348c889; ret 0x8401; 
0x0000000000441178: mov dword ptr [rcx], 0x85455374; dec dword ptr [rbp - 0x75]; push rbp; add byte ptr [rcx + 0xf], al; lahf; ret; 
0x000000000044f32b: mov dword ptr [rcx], 0xfffdd8e9; jmp qword ptr [rsi + 0xf]; 
0x00000000004c93ca: mov dword ptr [rcx], eax; ret; 
0x000000000049cf0a: mov dword ptr [rcx], edx; add rsp, 8; ret; 
0x0000000000417ee2: mov dword ptr [rcx], edx; mov rax, rdx; add rsp, 8; ret; 
0x0000000000450174: mov dword ptr [rcx], edx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x000000000044f830: mov dword ptr [rdi + 0x10], 0; mov rdi, qword ptr [rdi]; syscall; 
0x000000000041560b: mov dword ptr [rdi + 0x10], eax; mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x000000000043c51d: mov dword ptr [rdi + 0x10], ecx; lea rax, qword ptr [rdi + 0x11]; ret; 
0x000000000043c55b: mov dword ptr [rdi + 0x10], ecx; lea rax, qword ptr [rdi + 0x13]; ret; 
0x000000000043c5dd: mov dword ptr [rdi + 0x10], ecx; lea rax, qword ptr [rdi + 0x17]; ret; 
0x000000000043c57b: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, qword ptr [rdi + 0x14]; ret; 
0x000000000043becb: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000043c5fd: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x18], dh; lea rax, qword ptr [rdi + 0x18]; ret; 
0x000000000043bf4d: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000043be8d: mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000043c640: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; lea rax, qword ptr [rdi + 0x1a]; ret; 
0x000000000043bf90: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000043c660: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; lea rax, qword ptr [rdi + 0x1b]; ret; 
0x000000000043bfb0: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000043c621: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; lea rax, qword ptr [rdi + 0x19]; ret; 
0x000000000043bf71: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000043c643: mov dword ptr [rdi + 0x17], ecx; lea rax, qword ptr [rdi + 0x1a]; ret; 
0x000000000043bf93: mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000004155e3: mov dword ptr [rdi + 0x18], eax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000043c625: mov dword ptr [rdi + 0x18], ecx; lea rax, qword ptr [rdi + 0x19]; ret; 
0x000000000043c663: mov dword ptr [rdi + 0x18], ecx; lea rax, qword ptr [rdi + 0x1b]; ret; 
0x000000000041560f: mov dword ptr [rdi + 0x18], ecx; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x000000000043bf75: mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000047001d: mov dword ptr [rdi + 0x20], ecx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004798c0: mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x00000000004798c7: mov dword ptr [rdi + 0x308], eax; ret; 
0x00000000004155df: mov dword ptr [rdi + 0x48], edx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000415613: mov dword ptr [rdi + 0x48], edx; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000419200: mov dword ptr [rdi + 0x58], ecx; mov dword ptr [rdi + 4], eax; ret; 
0x000000000049cf61: mov dword ptr [rdi + 0x98], esi; ret; 
0x000000000041604c: mov dword ptr [rdi + 0xa0], 0xffffffff; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000416057: mov dword ptr [rdi + 0xa8], 0; ret; 
0x000000000043c59d: mov dword ptr [rdi + 0xe], ecx; lea rax, qword ptr [rdi + 0x15]; ret; 
0x000000000043beed: mov dword ptr [rdi + 0xe], ecx; ret; 
0x000000000043c53b: mov dword ptr [rdi + 0xf], ecx; lea rax, qword ptr [rdi + 0x12]; ret; 
0x000000000043c5bd: mov dword ptr [rdi + 0xf], ecx; lea rax, qword ptr [rdi + 0x16]; ret; 
0x000000000043beab: mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000435fe5: mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000435e28: mov dword ptr [rdi + 1], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000004360c8: mov dword ptr [rdi + 1], edx; mov word ptr [rdi], cx; ret; 
0x0000000000435f75: mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000435db8: mov dword ptr [rdi + 2], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000043c407: mov dword ptr [rdi + 3], edx; lea rax, qword ptr [rdi + 6]; ret; 
0x0000000000435f05: mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000435d48: mov dword ptr [rdi + 3], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000043bdd7: mov dword ptr [rdi + 3], edx; ret; 
0x0000000000419203: mov dword ptr [rdi + 4], eax; ret; 
0x000000000043c3e9: mov dword ptr [rdi + 4], edx; lea rax, qword ptr [rdi + 5]; ret; 
0x0000000000435cd8: mov dword ptr [rdi + 4], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000043bdc9: mov dword ptr [rdi + 4], edx; ret; 
0x000000000043c49b: mov dword ptr [rdi + 5], edx; lea rax, qword ptr [rdi + 0xc]; ret; 
0x0000000000435c68: mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000043be3b: mov dword ptr [rdi + 5], edx; ret; 
0x000000000043c4bb: mov dword ptr [rdi + 6], edx; lea rax, qword ptr [rdi + 0xd]; ret; 
0x0000000000435bf8: mov dword ptr [rdi + 6], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000043be4b: mov dword ptr [rdi + 6], edx; ret; 
0x000000000043c459: mov dword ptr [rdi + 7], edx; lea rax, qword ptr [rdi + 0xa]; ret; 
0x000000000043c4db: mov dword ptr [rdi + 7], edx; lea rax, qword ptr [rdi + 0xe]; ret; 
0x0000000000435b88: mov dword ptr [rdi + 7], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000043be19: mov dword ptr [rdi + 7], edx; ret; 
0x000000000044f828: mov dword ptr [rdi + 8], 1; mov qword ptr [rdi + 0x10], 0; mov rdi, qword ptr [rdi]; syscall; 
0x00000000004155e7: mov dword ptr [rdi + 8], eax; ret; 
0x000000000048a9f8: mov dword ptr [rdi + 8], eax; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000048a984: mov dword ptr [rdi + 8], ecx; ret; 
0x000000000043c479: mov dword ptr [rdi + 8], edx; lea rax, qword ptr [rdi + 0xb]; ret; 
0x000000000043c43b: mov dword ptr [rdi + 8], edx; lea rax, qword ptr [rdi + 9]; ret; 
0x000000000048be80: mov dword ptr [rdi + 8], edx; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x000000000048a304: mov dword ptr [rdi + 8], edx; mov eax, ecx; adc eax, eax; ret; 
0x00000000004165f3: mov dword ptr [rdi + 8], edx; movzx eax, byte ptr [rax - 1]; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x000000000043be0b: mov dword ptr [rdi + 8], edx; ret; 
0x00000000004315c3: mov dword ptr [rdi + rax], ebp; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000048af1d: mov dword ptr [rdi + rbx*8 + 8], ecx; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000000433373: mov dword ptr [rdi + rdx - 2], ecx; ret; 
0x0000000000427285: mov dword ptr [rdi + rdx - 4], ecx; ret; 
0x000000000042728e: mov dword ptr [rdi + rdx - 8], ecx; ret; 
0x000000000049cf19: mov dword ptr [rdi + rsi*8], edx; add rsp, 8; ret; 
0x0000000000431f45: mov dword ptr [rdi - 0x10], ebx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000431f83: mov dword ptr [rdi - 0x10], ebx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000048a8ef: mov dword ptr [rdi - 0x10], ecx; ret; 
0x00000000004320f8: mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004321f4: mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000432140: mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004322c8: mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004324a8: mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432698: mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432869: mov dword ptr [rdi - 0x15], ebx; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432a69: mov dword ptr [rdi - 0x16], ebx; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432c69: mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000431f41: mov dword ptr [rdi - 0x18], edx; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000431f7f: mov dword ptr [rdi - 0x18], edx; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004320f4: mov dword ptr [rdi - 0x19], edx; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004321f0: mov dword ptr [rdi - 0x19], edx; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000043213c: mov dword ptr [rdi - 0x19], edx; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004322c4: mov dword ptr [rdi - 0x1a], edx; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004324a4: mov dword ptr [rdi - 0x1b], edx; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432694: mov dword ptr [rdi - 0x1c], edx; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432865: mov dword ptr [rdi - 0x1d], edx; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432a65: mov dword ptr [rdi - 0x1e], edx; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432c65: mov dword ptr [rdi - 0x1f], edx; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000431f3d: mov dword ptr [rdi - 0x20], ecx; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000431f7b: mov dword ptr [rdi - 0x20], ecx; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004320f0: mov dword ptr [rdi - 0x21], ecx; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004321ec: mov dword ptr [rdi - 0x21], ecx; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000432138: mov dword ptr [rdi - 0x21], ecx; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004322c0: mov dword ptr [rdi - 0x22], ecx; mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004324a0: mov dword ptr [rdi - 0x23], ecx; mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432690: mov dword ptr [rdi - 0x24], ecx; mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432861: mov dword ptr [rdi - 0x25], ecx; mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432a61: mov dword ptr [rdi - 0x26], ecx; mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432c61: mov dword ptr [rdi - 0x27], ecx; mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000431f39: mov dword ptr [rdi - 0x28], eax; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000431f77: mov dword ptr [rdi - 0x28], eax; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004322cc: mov dword ptr [rdi - 0xa], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435638: mov dword ptr [rdi - 0xa], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004324ac: mov dword ptr [rdi - 0xb], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004355b8: mov dword ptr [rdi - 0xb], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043269c: mov dword ptr [rdi - 0xc], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435538: mov dword ptr [rdi - 0xc], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043286d: mov dword ptr [rdi - 0xd], ecx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004354a9: mov dword ptr [rdi - 0xd], edx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000432a6d: mov dword ptr [rdi - 0xe], ecx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435419: mov dword ptr [rdi - 0xe], edx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000432c6d: mov dword ptr [rdi - 0xf], ecx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435389: mov dword ptr [rdi - 0xf], edx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043264d: mov dword ptr [rdi - 2], ecx; ret; 
0x0000000000432465: mov dword ptr [rdi - 2], edx; ret; 
0x0000000000432649: mov dword ptr [rdi - 3], edx; mov word ptr [rdi - 2], cx; ret; 
0x0000000000432a29: mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004320ff: mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432a26: mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432c26: mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432e26: mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000048a8e8: mov dword ptr [rdi - 8], eax; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000431f49: mov dword ptr [rdi - 8], ecx; ret; 
0x0000000000431f87: mov dword ptr [rdi - 8], edx; ret; 
0x00000000004320fc: mov dword ptr [rdi - 9], eax; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004321f8: mov dword ptr [rdi - 9], ecx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000432144: mov dword ptr [rdi - 9], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004356b8: mov dword ptr [rdi - 9], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000443302: mov dword ptr [rdi], 0; mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000048bfa6: mov dword ptr [rdi], eax; mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000410c53: mov dword ptr [rdi], eax; mov rax, -0x30; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000413deb: mov dword ptr [rdi], eax; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x48]; 
0x000000000047cc28: mov dword ptr [rdi], eax; mov rax, qword ptr [rip + 0x259797]; mov qword ptr [rsi], rax; ret; 
0x000000000048a874: mov dword ptr [rdi], eax; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x000000000048a97e: mov dword ptr [rdi], eax; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x000000000045d0e6: mov dword ptr [rdi], ebp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000048a8e1: mov dword ptr [rdi], ebx; shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000048a9f1: mov dword ptr [rdi], ebx; shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000043c3d5: mov dword ptr [rdi], ecx; lea rax, qword ptr [rdi + 4]; ret; 
0x000000000043c427: mov dword ptr [rdi], ecx; lea rax, qword ptr [rdi + 8]; ret; 
0x000000000043c3b4: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dh; lea rax, qword ptr [rdi + 2]; ret; 
0x000000000043bd94: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dh; ret; 
0x000000000043c405: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, qword ptr [rdi + 6]; ret; 
0x000000000043bdd5: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x000000000043c457: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; lea rax, qword ptr [rdi + 0xa]; ret; 
0x000000000043be17: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000043c477: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; lea rax, qword ptr [rdi + 0xb]; ret; 
0x000000000043be27: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; ret; 
0x0000000000427283: mov dword ptr [rdi], ecx; mov dword ptr [rdi + rdx - 4], ecx; ret; 
0x000000000043e719: mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x0000000000414aaa: mov dword ptr [rdi], ecx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000043c498: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; lea rax, qword ptr [rdi + 0xc]; ret; 
0x000000000043be38: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; ret; 
0x000000000043c4b8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; lea rax, qword ptr [rdi + 0xd]; ret; 
0x000000000043be48: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000043c4d8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; lea rax, qword ptr [rdi + 0xe]; ret; 
0x000000000043be58: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; ret; 
0x000000000042728b: mov dword ptr [rdi], ecx; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x000000000043c3e6: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, qword ptr [rdi + 5]; ret; 
0x000000000043bdc6: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x000000000043c438: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; lea rax, qword ptr [rdi + 9]; ret; 
0x000000000043be08: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; ret; 
0x000000000043e726: mov dword ptr [rdi], ecx; mov word ptr [rsi - 2], cx; ret; 
0x000000000042d317: mov dword ptr [rdi], ecx; pop rbx; ret; 
0x0000000000400598: mov dword ptr [rdi], ecx; ret; 
0x000000000043c3a4: mov dword ptr [rdi], edx; lea rax, qword ptr [rdi + 1]; ret; 
0x000000000043c3c2: mov dword ptr [rdi], edx; lea rax, qword ptr [rdi + 3]; ret; 
0x000000000043c414: mov dword ptr [rdi], edx; lea rax, qword ptr [rdi + 7]; ret; 
0x0000000000411861: mov dword ptr [rdi], edx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000435e94: mov dword ptr [rdi], edx; ret; 
0x000000000043630f: mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x000000000043335b: mov dword ptr [rdi], esi; mov dword ptr [rdi + rdx - 4], ecx; ret; 
0x000000000048beed: mov dword ptr [rdi], esi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000004362fe: mov dword ptr [rdi], esi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000043333e: mov dword ptr [rdi], esi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x0000000000436323: mov dword ptr [rdi], esi; mov word ptr [r9 - 2], cx; ret; 
0x0000000000433370: mov dword ptr [rdi], esi; mov word ptr [rdi + rdx - 2], cx; ret; 
0x000000000048bf13: mov dword ptr [rdi], esi; ret; 
0x00000000004126a3: mov dword ptr [rdx + 0x130], 0x4a2900; pop rbx; ret; 
0x000000000042d5cf: mov dword ptr [rdx + 0x18], eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000049562d: mov dword ptr [rdx + 0xc], edi; pop rbp; pop r12; pop r14; ret; 
0x000000000043b927: mov dword ptr [rdx + 3], eax; lea rax, qword ptr [rdx + 6]; ret; 
0x000000000043a157: mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x000000000043b909: mov dword ptr [rdx + 4], eax; lea rax, qword ptr [rdx + 5]; ret; 
0x000000000043a149: mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x000000000043b9bb: mov dword ptr [rdx + 5], eax; lea rax, qword ptr [rdx + 0xc]; ret; 
0x000000000043b939: mov dword ptr [rdx + 5], eax; lea rax, qword ptr [rdx + 8]; ret; 
0x000000000043a169: mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000043b9db: mov dword ptr [rdx + 6], eax; lea rax, qword ptr [rdx + 0xd]; ret; 
0x000000000043b959: mov dword ptr [rdx + 6], eax; lea rax, qword ptr [rdx + 9]; ret; 
0x000000000043a179: mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000043b979: mov dword ptr [rdx + 7], eax; lea rax, qword ptr [rdx + 0xa]; ret; 
0x000000000043b9fb: mov dword ptr [rdx + 7], eax; lea rax, qword ptr [rdx + 0xe]; ret; 
0x000000000043a189: mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000043b999: mov dword ptr [rdx + 8], eax; lea rax, qword ptr [rdx + 0xb]; ret; 
0x000000000043b88b: mov dword ptr [rdx + 8], eax; lea rax, qword ptr [rdx + 0xf]; ret; 
0x000000000043a0db: mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x000000000048bf20: mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000048c3c4: mov dword ptr [rdx], 5; pop rbx; ret; 
0x000000000047391f: mov dword ptr [rdx], eax; add rsp, 0x30; mov eax, ebx; pop rbx; ret; 
0x000000000049abac: mov dword ptr [rdx], eax; add rsp, 8; ret; 
0x000000000043b8b4: mov dword ptr [rdx], eax; lea rax, qword ptr [rdx + 1]; ret; 
0x000000000043b8e2: mov dword ptr [rdx], eax; lea rax, qword ptr [rdx + 3]; ret; 
0x000000000043b834: mov dword ptr [rdx], eax; lea rax, qword ptr [rdx + 7]; ret; 
0x000000000043b8c4: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, qword ptr [rdx + 2]; ret; 
0x000000000043a114: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x000000000043b8f2: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; lea rax, qword ptr [rdx + 4]; ret; 
0x000000000043a132: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x000000000043b902: mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, qword ptr [rdx + 5]; ret; 
0x000000000043a142: mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x0000000000412de1: mov dword ptr [rdx], eax; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000040e3fa: mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000048beef: mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000043b922: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; lea rax, qword ptr [rdx + 6]; ret; 
0x000000000043a152: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x000000000043b934: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, qword ptr [rdx + 8]; ret; 
0x000000000043a164: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000043b954: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, qword ptr [rdx + 9]; ret; 
0x000000000043a174: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000043b974: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, qword ptr [rdx + 0xa]; ret; 
0x000000000043a184: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000043b994: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, qword ptr [rdx + 0xb]; ret; 
0x000000000043a194: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x0000000000442ed6: mov dword ptr [rdx], eax; mov ebx, 2; mov esi, 0x80000; mov edi, 0x4a58c8; mov eax, ebx; syscall; 
0x0000000000413640: mov dword ptr [rdx], eax; mov rax, -1; ret; 
0x000000000043b9b4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, qword ptr [rdx + 0xc]; ret; 
0x000000000043a1a4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000043b9d4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, qword ptr [rdx + 0xd]; ret; 
0x000000000043a1c4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000043b9f4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, qword ptr [rdx + 0xe]; ret; 
0x000000000043a1e4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000043b884: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, qword ptr [rdx + 0xf]; ret; 
0x000000000043a0d4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x000000000043a084: mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x000000000048c995: mov dword ptr [rdx], eax; pop rbx; ret; 
0x0000000000416f12: mov dword ptr [rdx], eax; ret; 
0x0000000000400426: mov dword ptr [rdx], eax; xor esi, esi; mov edi, 0x4a2aa4; mov eax, 2; syscall; 
0x000000000046c696: mov dword ptr [rdx], ecx; mov edx, dword ptr [rax]; mov eax, edx; pop rbx; ret; 
0x00000000004a0b56: mov dword ptr [rip + 0x22cbb0], 0; add rsp, 8; ret; 
0x000000000049f86f: mov dword ptr [rip + 0x22dd0b], ebx; jne 0x9f858; pop rbx; ret; 
0x000000000049ed88: mov dword ptr [rip + 0x22efc2], esi; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000049ec30: mov dword ptr [rip + 0x22f11a], esi; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000048c522: mov dword ptr [rip + 0x24149c], 0x6cd9e0; add rsp, 8; ret; 
0x0000000000480bd9: mov dword ptr [rip + 0x24cdbd], 0; add rsp, 8; ret; 
0x000000000047cae9: mov dword ptr [rip + 0x2598e1], eax; add rsp, 8; ret; 
0x0000000000479d78: mov dword ptr [rip + 0x25c642], ecx; test byte ptr [rax + 0x314], 4; jne 0x79d98; or byte ptr [rdi + 0x315], 4; xor eax, eax; ret; 
0x000000000044d84b: mov dword ptr [rip + 0x27feab], 0; movsxd rdi, ebx; mov eax, 3; syscall; 
0x0000000000444dd6: mov dword ptr [rip + 0x2861bc], edx; pop rbx; ret; 
0x000000000041e6a8: mov dword ptr [rip + 0x2aef56], 0; ret; 
0x000000000041b623: mov dword ptr [rip + 0x2b0137], eax; mov rdi, r9; mov eax, 3; syscall; 
0x000000000041b622: mov dword ptr [rip + 0x2b0137], r8d; mov rdi, r9; mov eax, 3; syscall; 
0x0000000000417335: mov dword ptr [rip + 0x2b6269], 0; ret; 
0x00000000004172c2: mov dword ptr [rip + 0x2b62e0], edx; add dword ptr [rip + 0x2b62d5], 1; ret; 
0x0000000000401d1a: mov dword ptr [rip + 0x2c9370], eax; xor eax, eax; ret; 
0x0000000000400705: mov dword ptr [rip + 0x2cb9a5], eax; pop rbp; pop r12; ret; 
0x0000000000400cc6: mov dword ptr [rip + 0x2cd6e4], eax; nop; leave; ret; 
0x0000000000475ac7: mov dword ptr [rsi + 0x10], eax; mov edi, 0x1002; mov eax, 0x9e; syscall; 
0x0000000000401bc7: mov dword ptr [rsi + 0x10], esi; syscall; 
0x000000000049ec37: mov dword ptr [rsi + 0x28], eax; ret; 
0x000000000043c343: mov dword ptr [rsi + 0x63490006], eax; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000401bbc: mov dword ptr [rsi + 8], 0x6d63f0; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000043e729: mov dword ptr [rsi - 2], ecx; ret; 
0x000000000043e71b: mov dword ptr [rsi - 4], ecx; ret; 
0x000000000044e716: mov dword ptr [rsi*8 + 0x6cc9c0], ebx; test rax, rax; je 0x4e724; call rax; 
0x0000000000476bf9: mov dword ptr [rsi], 0xffffffff; xor eax, eax; ret; 
0x0000000000475ac4: mov dword ptr [rsi], eax; mov qword ptr [rsi + 0x10], rax; mov edi, 0x1002; mov eax, 0x9e; syscall; 
0x000000000049cf4b: mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000047cc32: mov dword ptr [rsi], eax; ret; 
0x0000000000450169: mov dword ptr [rsi], ecx; mov rcx, -0x18; mov qword ptr fs:[rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000417233: mov dword ptr [rsi], edi; sub eax, dword ptr [rax]; ret; 
0x0000000000401bc4: mov dword ptr [rsi], esi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000049ab06: mov dword ptr [rsp + 0x10], 0; call 0x9a7e0; add rsp, 0x28; ret; 
0x000000000041c09d: mov dword ptr [rsp + 0x10], eax; mov qword ptr [rsp + 8], r8; mov qword ptr [rsp], rcx; call rdx; 
0x000000000041bfeb: mov dword ptr [rsp + 0x10], edx; call rax; 
0x00000000004114b9: mov dword ptr [rsp + 0x10], edx; lea r8, qword ptr [rsp + 0x30]; lea rsi, qword ptr [rsp + 0x20]; call qword ptr [rbx + 8]; 
0x0000000000419624: mov dword ptr [rsp + 0x14], eax; pop r12; ret; 
0x000000000040fc2e: mov dword ptr [rsp + 0x18], eax; call 0x11f00; add rsp, 0xd8; ret; 
0x000000000040fb9d: mov dword ptr [rsp + 0x18], eax; call 0x55730; add rsp, 0xd8; ret; 
0x000000000047c871: mov dword ptr [rsp + 0x18], eax; call 0x7c1e0; add rsp, 0xd8; ret; 
0x000000000048c10e: mov dword ptr [rsp + 0x18], eax; call 0x8c120; add rsp, 0xd8; ret; 
0x000000000041bfe6: mov dword ptr [rsp + 0x18], eax; mov qword ptr [rsp + 0x10], r10; call rax; 
0x00000000004195f0: mov dword ptr [rsp + 0x1c], eax; je 0x195fb; pop rbx; pop rbp; pop r12; ret; 
0x0000000000411448: mov dword ptr [rsp + 0x20], eax; call qword ptr [rbx + 0x30]; 
0x000000000041961e: mov dword ptr [rsp + 0x24], ebp; pop rbp; mov dword ptr [r12 + 0x14], eax; pop r12; ret; 
0x0000000000440f24: mov dword ptr [rsp + 8], eax; call 0x40aa0; mov rax, qword ptr [rsp + 8]; mov rdi, qword ptr [rax]; mov qword ptr [rsp + 8], rax; call rbx; 
0x0000000000440f36: mov dword ptr [rsp + 8], eax; call rbx; 
0x000000000041c0a2: mov dword ptr [rsp + 8], eax; mov qword ptr [rsp], rcx; call rdx; 
0x0000000000442be9: mov dword ptr [rsp + 8], eax; mov rdi, rax; sub rdx, rsi; mov eax, r12d; syscall; 
0x000000000044014e: mov dword ptr [rsp + 8], edi; mov rdi, qword ptr [rsp + 8]; mov eax, 0x4f; syscall; 
0x000000000049a3b7: mov dword ptr [rsp + 8], esi; je 0x9a3c4; mov edi, 0x6cc140; call rax; 
0x0000000000480c2e: mov dword ptr [rsp + 8], esi; mov edi, 0x6cc140; call rax; 
0x00000000004110bf: mov dword ptr [rsp + 8], esi; mov qword ptr [rsp], rax; mov rbx, qword ptr [r15 + 0x98]; mov rdi, rbx; call qword ptr [rbx + 0x20]; 
0x000000000048c07a: mov dword ptr [rsp - 0x10], esi; mov dword ptr [rsp - 0x18], eax; shr rax, 0x20; mov dword ptr [rsp - 0x14], eax; fld xword ptr [rsp - 0x18]; ret; 
0x000000000048c086: mov dword ptr [rsp - 0x14], eax; fld xword ptr [rsp - 0x18]; ret; 
0x000000000048c07e: mov dword ptr [rsp - 0x18], eax; shr rax, 0x20; mov dword ptr [rsp - 0x14], eax; fld xword ptr [rsp - 0x18]; ret; 
0x000000000043ff60: mov dword ptr [rsp - 0x40], eax; je 0x3ff80; movsxd rsi, esi; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x0000000000450285: mov dword ptr [rsp - 2], edi; fldcw word ptr [rsp - 2]; ret; 
0x000000000048bff9: mov dword ptr [rsp - 4], edx; movss xmm0, dword ptr [rsp - 4]; ret; 
0x000000000048c03f: mov dword ptr [rsp - 8], edx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000478582: mov dword ptr [rsp], eax; lea rdi, qword ptr [rax + 0x6cc1e0]; call rdx; 
0x000000000043fea7: mov dword ptr [rsp], eax; mov eax, 0; syscall; 
0x00000000004739b7: mov dword ptr [rsp], eax; mov eax, 0x14; syscall; 
0x000000000043ff07: mov dword ptr [rsp], eax; mov eax, 1; syscall; 
0x000000000043fe47: mov dword ptr [rsp], eax; mov eax, 2; syscall; 
0x0000000000473827: mov dword ptr [rsp], eax; mov eax, 3; syscall; 
0x000000000044ecce: mov dword ptr [rsp], eax; mov rax, qword ptr [rbp*8 + 0x4a6e00]; test rax, rax; je 0x4ece0; call rax; 
0x00000000004110c4: mov dword ptr [rsp], eax; mov rbx, qword ptr [r15 + 0x98]; mov rdi, rbx; call qword ptr [rbx + 0x20]; 
0x0000000000442c7b: mov dword ptr [rsp], eax; mov rdx, rax; mov eax, r12d; syscall; 
0x000000000041c0a7: mov dword ptr [rsp], ecx; call rdx; 
0x0000000000444aa0: mov dword ptr [rsp], ecx; je 0x44aac; mov edi, 0x6cc140; call rax; 
0x000000000049a3b3: mov dword ptr [rsp], edi; mov qword ptr [rsp + 8], rsi; je 0x9a3c4; mov edi, 0x6cc140; call rax; 
0x0000000000496983: mov dword ptr fs:[0x2d0], eax; ret; 
0x0000000000444fb3: mov dword ptr fs:[0xffffffffffffffd0], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000047369f: mov dword ptr fs:[rax], 0x14; add rsp, 0x90; xor eax, eax; pop rbx; ret; 
0x000000000047308f: mov dword ptr fs:[rax], 0x14; movsxd rdi, ebx; mov eax, 3; syscall; 
0x000000000043fdbf: mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000049a06f: mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x000000000044e7a7: mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000047397f: mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000041d4e7: mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x00000000004730b7: mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x0000000000410c5c: mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000450551: mov dword ptr fs:[rax], edx; mov eax, 0xffffffff; add rsp, 0xd0; ret; 
0x000000000047396c: mov dword ptr fs:[rax], edx; xor eax, eax; ret; 
0x0000000000400482: mov dword ptr fs:[rax], r9d; mov rdi, r8; mov eax, 3; syscall; 
0x0000000000413dfd: mov dword ptr fs:[rbp], r12d; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000048c3c3: mov dword ptr fs:[rdx], 5; pop rbx; ret; 
0x000000000047391e: mov dword ptr fs:[rdx], eax; add rsp, 0x30; mov eax, ebx; pop rbx; ret; 
0x0000000000412de0: mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000040e3f9: mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000442ed5: mov dword ptr fs:[rdx], eax; mov ebx, 2; mov esi, 0x80000; mov edi, 0x4a58c8; mov eax, ebx; syscall; 
0x000000000041363f: mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x0000000000400425: mov dword ptr fs:[rdx], eax; xor esi, esi; mov edi, 0x4a2aa4; mov eax, 2; syscall; 
0x000000000043335a: mov dword ptr ss:[rdi], esi; mov dword ptr [rdi + rdx - 4], ecx; ret; 
0x00000000004360c0: mov dx, word ptr [rsi + 1]; mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x000000000043c3e2: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, qword ptr [rdi + 5]; ret; 
0x000000000043bdc2: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x000000000043c433: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, qword ptr [rdi + 9]; ret; 
0x000000000043be03: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000432460: mov dx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x0000000000432640: mov dx, word ptr [rsi - 3]; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000043c3a0: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, qword ptr [rdi + 1]; ret; 
0x000000000043bd80: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000043fe89: mov eax, 0; syscall; 
0x000000000043fe89: mov eax, 0; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x0000000000402971: mov eax, 0; test rax, rax; je 0x2984; lea rdi, qword ptr [rbx + 0x80]; call rax; 
0x0000000000402bbd: mov eax, 0; test rax, rax; je 0x2bd0; lea rdi, qword ptr [rbx + 0x80]; call rax; 
0x000000000040349c: mov eax, 0; test rax, rax; je 0x34ad; mov edi, 0x6cd060; call rax; 
0x00000000004036eb: mov eax, 0; test rax, rax; je 0x3706; mov edi, 0x6ccfe0; call rax; 
0x00000000004038df: mov eax, 0; test rax, rax; je 0x38fa; mov edi, 0x6ccfe0; call rax; 
0x0000000000403e42: mov eax, 0; test rax, rax; je 0x3e53; mov edi, 0x6cd0a0; call rax; 
0x000000000043f108: mov eax, 0; test rax, rax; je 0x3f119; mov edi, 0x6cd720; call rax; 
0x0000000000444c29: mov eax, 0; test rax, rax; je 0x44c3a; mov edi, 0x6cc140; call rax; 
0x000000000044e617: mov eax, 0; test rax, rax; je 0x4e630; mov edi, 0x6cd720; call rax; 
0x000000000044ec51: mov eax, 0; test rax, rax; je 0x4e633; mov edi, 0x6cd720; call rax; 
0x000000000044e777: mov eax, 0; test rax, rax; je 0x4e788; mov edi, 0x6cd720; call rax; 
0x000000000044e8f0: mov eax, 0; test rax, rax; je 0x4e908; mov edi, 0x6cd720; call rax; 
0x000000000044ebd0: mov eax, 0; test rax, rax; je 0x4ebe1; mov edi, 0x6cd720; call rax; 
0x000000000047d920: mov eax, 0; test rax, rax; je 0x7d931; mov edi, 0x6cc140; call rax; 
0x000000000047d948: mov eax, 0; test rax, rax; je 0x7d959; mov edi, 0x6cc140; call rax; 
0x000000000047d9be: mov eax, 0; test rax, rax; je 0x7d9cf; mov edi, 0x6cc140; call rax; 
0x000000000047eee3: mov eax, 0; test rax, rax; je 0x7eef6; mov rdi, qword ptr [rbp - 0x88]; call rax; 
0x000000000047f48b: mov eax, 0; test rax, rax; je 0x7f500; mov edi, 0x6cc140; call rax; 
0x0000000000480c46: mov eax, 0; test rax, rax; je 0x80c12; mov edi, 0x6cc140; call rax; 
0x0000000000498820: mov eax, 0; test rax, rax; je 0x98831; mov edi, 0x6cc140; call rax; 
0x000000000049884c: mov eax, 0; test rax, rax; je 0x9885d; mov edi, 0x6cc140; call rax; 
0x00000000004009a0: mov eax, 0; test rax, rax; je 0x998; call rax; 
0x000000000049a3da: mov eax, 0; test rax, rax; je 0x9a3eb; mov edi, 0x6cc140; call rax; 
0x000000000049a482: mov eax, 0; test rax, rax; je 0x9a493; mov edi, 0x6cc140; call rax; 
0x000000000049f633: mov eax, 0; test rax, rax; je 0x9f644; mov edi, 0x6cc100; call rax; 
0x000000000044025a: mov eax, 0x101; syscall; 
0x0000000000473793: mov eax, 0x106; syscall; 
0x000000000043ef59: mov eax, 0x10; pop rbx; ret; 
0x000000000047388c: mov eax, 0x10; sub rsp, 0x30; mov rdx, rsp; syscall; 
0x0000000000473999: mov eax, 0x14; syscall; 
0x0000000000473999: mov eax, 0x14; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x00000000004737e0: mov eax, 0x15; syscall; 
0x00000000004737e0: mov eax, 0x15; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x0000000000421aa4: mov eax, 0x16; je 0x21ab0; ret; 
0x0000000000421c40: mov eax, 0x16; ret; 
0x000000000043fd30: mov eax, 0x18; syscall; 
0x000000000043fd30: mov eax, 0x18; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x0000000000443253: mov eax, 0x19; syscall; 
0x0000000000443253: mov eax, 0x19; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x000000000045d0f8: mov eax, 0x1b85b; add byte ptr [rax], al; pop rbp; pop r12; pop r13; ret; 
0x00000000004409f0: mov eax, 0x1c; syscall; 
0x00000000004409f0: mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x000000000043ef52: mov eax, 0x20; pop rbx; ret; 
0x000000000043f4b0: mov eax, 0x25; syscall; 
0x000000000043f4b0: mov eax, 0x25; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x000000000049ab30: mov eax, 0x26; syscall; 
0x000000000049ab30: mov eax, 0x26; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x000000000043ef4b: mov eax, 0x30; pop rbx; ret; 
0x00000000004736d0: mov eax, 0x3f; syscall; 
0x00000000004736d0: mov eax, 0x3f; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x000000000043ef44: mov eax, 0x40; pop rbx; ret; 
0x000000000042712a: mov eax, 0x4336a0; mov edx, 0x430630; cmove rax, rdx; ret; 
0x000000000042680c: mov eax, 0x43e180; cmove rax, rdx; ret; 
0x00000000004ba45b: mov eax, 0x45155e93; ret 0x591c; 
0x000000000049acf3: mov eax, 0x48000000; add esp, 8; ret; 
0x000000000041e773: mov eax, 0x48000000; mov eax, edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000043ff6c: mov eax, 0x48; syscall; 
0x00000000004276ea: mov eax, 0x48fffffb; mov eax, edi; ret; 
0x0000000000450193: mov eax, 0x48ffffff; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000400952: mov eax, 0x49ef00; test rax, rax; je 0x963; mov edi, 0x4bf080; call rax; 
0x000000000040f155: mov eax, 0x4bf038; cmp rax, 0x4bf040; jae 0xf175; mov rbp, rax; call qword ptr [rbp]; 
0x00000000004735ab: mov eax, 0x4e; push rbp; push rbx; mov rbx, rsi; sub rsp, 8; syscall; 
0x0000000000440157: mov eax, 0x4f; syscall; 
0x000000000043ef3d: mov eax, 0x60; pop rbx; ret; 
0x00000000004407d0: mov eax, 0x61; syscall; 
0x00000000004407d0: mov eax, 0x61; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x0000000000443270: mov eax, 0x63; syscall; 
0x0000000000443270: mov eax, 0x63; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x00000000004736f0: mov eax, 0x66; syscall; 
0x00000000004736f0: mov eax, 0x66; syscall; ret; 
0x0000000000473710: mov eax, 0x68; syscall; 
0x0000000000473710: mov eax, 0x68; syscall; ret; 
0x0000000000473700: mov eax, 0x6b; syscall; 
0x0000000000473700: mov eax, 0x6b; syscall; ret; 
0x0000000000473720: mov eax, 0x6c; syscall; 
0x0000000000473720: mov eax, 0x6c; syscall; ret; 
0x00000000004186d3: mov eax, 0x6cb800; ret; 
0x0000000000478587: mov eax, 0x6cc1e0; call rdx; 
0x000000000043ef36: mov eax, 0x80; pop rbx; ret; 
0x0000000000411961: mov eax, 0x8c48348; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000041ccb0: mov eax, 0x950f006c; ret 0x8348; 
0x0000000000475acf: mov eax, 0x9e; syscall; 
0x00000000004409d0: mov eax, 0xa; syscall; 
0x00000000004409d0: mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x00000000004409b0: mov eax, 0xb; syscall; 
0x00000000004409b0: mov eax, 0xb; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x00000000004b2910: mov eax, 0xba000004; add al, 0; add byte ptr [rsp + rax + 0x4be0000], bh; add byte ptr [rax], al; rol byte ptr [rax + rax], 0; ret 4; 
0x000000000040e3a7: mov eax, 0xba; syscall; 
0x00000000004b9218: mov eax, 0xbcbbbab9; mov ebp, 0xc1c0bfbe; ret 0xc4c3; 
0x0000000000442ea9: mov eax, 0xc065894c; mov esi, 0x80000; mov edi, 0x4a58bd; mov eax, ebx; syscall; 
0x0000000000442db8: mov eax, 0xc065894c; syscall; 
0x000000000046fdb0: mov eax, 0xc9; syscall; 
0x000000000046fdb0: mov eax, 0xc9; syscall; ret; 
0x00000000004432e5: mov eax, 0xca; syscall; 
0x0000000000443312: mov eax, 0xca; syscall; pop rdx; pop rsi; ret; 
0x00000000004433b9: mov eax, 0xca; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000043f717: mov eax, 0xe5; syscall; 
0x00000000004686c3: mov eax, 0xe8fffff9; mov esp, 0x8348fffb; clc; adc byte ptr [rax - 0x77], cl; ret 0x860f; 
0x00000000004505a9: mov eax, 0xe; syscall; 
0x000000000040e3be: mov eax, 0xea; movsxd rdi, ecx; syscall; 
0x00000000004300c9: mov eax, 0xf66b8b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000450331: mov eax, 0xf; syscall; 
0x000000000048bfa8: mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000450191: mov eax, 0xffffffb8; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000414ba1: mov eax, 0xffffffd0; cmp dword ptr fs:[rax], 0x1d; je 0x14b49; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000473699: mov eax, 0xffffffd0; mov dword ptr fs:[rax], 0x14; add rsp, 0x90; xor eax, eax; pop rbx; ret; 
0x0000000000473089: mov eax, 0xffffffd0; mov dword ptr fs:[rax], 0x14; movsxd rdi, ebx; mov eax, 3; syscall; 
0x000000000043fdb9: mov eax, 0xffffffd0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000049a069: mov eax, 0xffffffd0; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x000000000044e7a1: mov eax, 0xffffffd0; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000473979: mov eax, 0xffffffd0; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000041d4e1: mov eax, 0xffffffd0; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x00000000004730b1: mov eax, 0xffffffd0; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x0000000000410c56: mov eax, 0xffffffd0; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000450549: mov eax, 0xffffffd0; neg edx; mov dword ptr fs:[rax], edx; mov eax, 0xffffffff; add rsp, 0xd0; ret; 
0x0000000000400479: mov eax, 0xffffffd0; neg r9d; mov dword ptr fs:[rax], r9d; mov rdi, r8; mov eax, 3; syscall; 
0x0000000000414aa1: mov eax, 0xffffffd0; or ecx, 0x20; mov dword ptr [rdi], ecx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000411858: mov eax, 0xffffffd0; or edx, 0x20; mov dword ptr [rdi], edx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000047d541: mov eax, 0xffffffd0; pop rbx; mov eax, dword ptr fs:[rax]; ret; 
0x00000000004501f1: mov eax, 0xffffffe0; add rax, qword ptr fs:[0]; ret; 
0x00000000004501d1: mov eax, 0xffffffe8; add rax, qword ptr fs:[0]; ret; 
0x00000000004501b1: mov eax, 0xfffffff0; add rax, qword ptr fs:[0]; ret; 
0x0000000000420ac6: mov eax, 0xfffffffe; pop rbx; ret; 
0x00000000004115b1: mov eax, 0xffffffff; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000450554: mov eax, 0xffffffff; add rsp, 0xd0; ret; 
0x000000000043fd64: mov eax, 0xffffffff; cmove rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000411aff: mov eax, 0xffffffff; pop rbp; pop r12; ret; 
0x000000000044d7df: mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004525fe: mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; ret; 
0x0000000000411949: mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x00000000004125d1: mov eax, 0xffffffff; pop rbx; ret; 
0x000000000040e3fc: mov eax, 0xffffffff; ret; 
0x000000000043f3f4: mov eax, 1; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000046b6f5: mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048bf0d: mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x000000000045d0fa: mov eax, 1; pop rbp; pop r12; pop r13; ret; 
0x0000000000415f82: mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x000000000043f48b: mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000444d96: mov eax, 1; ret; 
0x00000000004003d5: mov eax, 1; syscall; 
0x000000000043fee9: mov eax, 1; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x000000000049d790: mov eax, 2; add rsp, 8; ret; 
0x000000000046f091: mov eax, 2; ret; 
0x000000000040042f: mov eax, 2; syscall; 
0x000000000043fe29: mov eax, 2; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x0000000000473102: mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x0000000000412dc4: mov eax, 3; movsxd rdi, dword ptr [rbx + 0x70]; syscall; 
0x000000000046f0a1: mov eax, 3; ret; 
0x0000000000400489: mov eax, 3; syscall; 
0x0000000000473809: mov eax, 3; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x000000000049d780: mov eax, 4; add rsp, 8; ret; 
0x000000000046f0b1: mov eax, 4; ret; 
0x000000000043fd8e: mov eax, 4; syscall; 
0x000000000044345a: mov eax, 5; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000046f0c1: mov eax, 5; ret; 
0x000000000043fddd: mov eax, 5; syscall; 
0x000000000046f0d1: mov eax, 6; ret; 
0x000000000047373e: mov eax, 6; syscall; 
0x000000000049cbaf: mov eax, 7; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000046f0e1: mov eax, 7; ret; 
0x000000000049d761: mov eax, 8; add rsp, 8; ret; 
0x000000000043ef2f: mov eax, 8; pop rbx; ret; 
0x000000000049f315: mov eax, 8; ret; 
0x0000000000443230: mov eax, 8; syscall; 
0x0000000000443230: mov eax, 8; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x0000000000440963: mov eax, 9; movsxd r10, r10d; syscall; 
0x0000000000440923: mov eax, 9; syscall; 
0x0000000000481352: mov eax, dword ptr [0]; add rax, -8; ret; 
0x000000000046d1f1: mov eax, dword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x000000000046d309: mov eax, dword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000046d171: mov eax, dword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x000000000046c881: mov eax, dword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000041166c: mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000046bf2b: mov eax, dword ptr [rax + 0x130]; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x000000000046c6cc: mov eax, dword ptr [rax + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x000000000041570c: mov eax, dword ptr [rax + 0x18]; jmp rax; 
0x0000000000411673: mov eax, dword ptr [rax + 0x20]; jmp rax; 
0x00000000004158e8: mov eax, dword ptr [rax + 0x28]; jmp rax; 
0x000000000045a608: mov eax, dword ptr [rax + 0x38]; mov rdx, rcx; mov qword ptr [rbp - 0xb8], rcx; mov rdi, rbx; call rax; 
0x0000000000415c08: mov eax, dword ptr [rax + 0x40]; jmp rax; 
0x000000000049a013: mov eax, dword ptr [rax + 0x48]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000415f2c: mov eax, dword ptr [rax + 0x48]; jmp rax; 
0x000000000046d734: mov eax, dword ptr [rax + 0x4c]; ret; 
0x00000000004110bb: mov eax, dword ptr [rax + 0x50]; mov qword ptr [rsp + 8], r14; mov qword ptr [rsp], rax; mov rbx, qword ptr [r15 + 0x98]; mov rdi, rbx; call qword ptr [rbx + 0x20]; 
0x0000000000450258: mov eax, dword ptr [rax + 0x58]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000411440: mov eax, dword ptr [rax + 0x60]; sar r8, 2; mov qword ptr [rsp + 0x20], rax; call qword ptr [rbx + 0x30]; 
0x0000000000410fc8: mov eax, dword ptr [rax + 0x70]; jne 0x10fd4; mov rdx, qword ptr [r15 + 0x40]; sub rdx, rsi; mov rdi, r15; call rax; 
0x0000000000412bea: mov eax, dword ptr [rax + 0x70]; jne 0x12bf6; mov rdx, qword ptr [rbx + 0x40]; sub rdx, rsi; mov rdi, rbx; call rax; 
0x0000000000498afd: mov eax, dword ptr [rax + 8]; add rax, qword ptr [rbx]; call rax; 
0x000000000049839a: mov eax, dword ptr [rax + 8]; add rax, qword ptr [rbx]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000480e01: mov eax, dword ptr [rax + 8]; ret; 
0x0000000000480e11: mov eax, dword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x000000000045dbf9: mov eax, dword ptr [rax + rbx*8]; mov byte ptr [rbp - 0x514], r9b; mov byte ptr [rbp - 0x500], r8b; mov rsi, r15; mov rdi, qword ptr [rbp - 0x4a0]; call rax; 
0x0000000000453979: mov eax, dword ptr [rax + rbx*8]; mov dword ptr [rbp - 0x4d4], r9d; mov byte ptr [rbp - 0x4d0], r8b; mov rsi, r15; mov rdi, rbx; call rax; 
0x000000000045019f: mov eax, dword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000400d54: mov eax, dword ptr [rax*8 + 0x4a1ca8]; jmp rax; 
0x0000000000455f82: mov eax, dword ptr [rax*8 + 0x4b3a20]; jmp rax; 
0x0000000000455fd3: mov eax, dword ptr [rax*8 + 0x4b3b20]; jmp rax; 
0x00000000004580c3: mov eax, dword ptr [rax*8 + 0x4b3c20]; jmp rax; 
0x0000000000456bf6: mov eax, dword ptr [rax*8 + 0x4b3f20]; jmp rax; 
0x0000000000460dd1: mov eax, dword ptr [rax*8 + 0x4b43a0]; jmp rax; 
0x00000000004620f5: mov eax, dword ptr [rax*8 + 0x4b44a0]; jmp rax; 
0x00000000004625d9: mov eax, dword ptr [rax*8 + 0x4b45a0]; jmp rax; 
0x0000000000460e67: mov eax, dword ptr [rax*8 + 0x4b48a0]; jmp rax; 
0x000000000049cea6: mov eax, dword ptr [rax]; add rsp, 8; ret; 
0x000000000049ac89: mov eax, dword ptr [rax]; lea rax, qword ptr [rax + 8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x00000000004033ea: mov eax, dword ptr [rax]; mov dword ptr [rbp - 0xc4], eax; je 0x385d; mov edi, 0x6cd720; call rbx; 
0x000000000049aba9: mov eax, dword ptr [rax]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x000000000045019c: mov eax, dword ptr [rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000045024e: mov eax, dword ptr [rax]; mov rdx, -0x20; mov rax, qword ptr [rax + 0x58]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x00000000004810fc: mov eax, dword ptr [rax]; mov rdx, qword ptr [rsp + 0x38]; add rax, qword ptr [rdx + 8]; add rsp, 0x48; ret; 
0x000000000047d549: mov eax, dword ptr [rax]; ret; 
0x000000000041316a: mov eax, dword ptr [rbp + 0xa0]; mov qword ptr [rax + 0x130], 0x4a29c0; mov rax, qword ptr [rbp + 0xd8]; call qword ptr [rax + 0x40]; 
0x000000000041317c: mov eax, dword ptr [rbp + 0xd8]; call qword ptr [rax + 0x40]; 
0x000000000046cb3b: mov eax, dword ptr [rbp + 0xd8]; mov esi, ebx; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x000000000046d0fa: mov eax, dword ptr [rbp + 0xd8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000046b7ec: mov eax, dword ptr [rbp + 0xd8]; mov rdx, rbx; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x0000000000401fec: mov eax, dword ptr [rbp + 8]; sub eax, dword ptr [rbx + 8]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000040f1d5: mov eax, dword ptr [rbp + rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000400a5a: mov eax, dword ptr [rbp - 0x10]; mov qword ptr [rax], rdx; nop; leave; ret; 
0x00000000004413cc: mov eax, dword ptr [rbp - 0x48]; call rax; 
0x0000000000445f97: mov eax, dword ptr [rbp - 0x58]; call rax; 
0x0000000000400b6e: mov eax, dword ptr [rbp - 8]; mov qword ptr [rax], rdx; nop; leave; ret; 
0x00000000004009eb: mov eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x000000000044ecd2: mov eax, dword ptr [rbp*8 + 0x4a6e00]; test rax, rax; je 0x4ece0; call rax; 
0x000000000047ea55: mov eax, dword ptr [rbp]; add rax, qword ptr [rdx + 8]; call rax; 
0x000000000047b152: mov eax, dword ptr [rbx + 0x10]; add rax, qword ptr [r12]; mov qword ptr [rbp - 0xc8], r11; mov qword ptr [rbp - 0xa8], r10; call rax; 
0x000000000047a911: mov eax, dword ptr [rbx + 0x10]; add rax, qword ptr [r12]; mov qword ptr [rbp - 0xd0], r11; mov qword ptr [rbp - 0xc8], r10; call rax; 
0x000000000047a711: mov eax, dword ptr [rbx + 0x10]; add rax, qword ptr [r15]; call rax; 
0x000000000047a273: mov eax, dword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r12]; call rax; 
0x000000000048c9f9: mov eax, dword ptr [rbx + 0x18]; mov qword ptr [rax], 0; mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000048c9b1: mov eax, dword ptr [rbx + 0x18]; mov qword ptr [rax], rdi; pop rbx; ret; 
0x000000000048c9a1: mov eax, dword ptr [rbx + 0x18]; mov rdx, qword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000411661: mov eax, dword ptr [rbx + 0xa0]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000413b3f: mov eax, dword ptr [rbx + 0xd8]; call qword ptr [rax + 0x20]; 
0x0000000000455e6c: mov eax, dword ptr [rbx + 0xd8]; mov dword ptr [rbp - 0x4d8], r9d; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000049a147: mov eax, dword ptr [rbx + 0xd8]; mov ecx, ebp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x00000000004137a1: mov eax, dword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004136f9: mov eax, dword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; mov rbp, r12; call qword ptr [rax + 0x18]; 
0x0000000000413980: mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x00000000004165ab: mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x0000000000415a88: mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x000000000041576d: mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x00000000004158dd: mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x28]; jmp rax; 
0x0000000000454dd9: mov eax, dword ptr [rbx + 0xd8]; mov rdx, r12; mov rsi, r8; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000046b5b6: mov eax, dword ptr [rbx + 0xd8]; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000412eca: mov eax, dword ptr [rbx + 0xd8]; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000453e3c: mov eax, dword ptr [rbx + 0xd8]; mov rdx, r13; mov rsi, qword ptr [rbp - 0x4a8]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004137f8: mov eax, dword ptr [rbx + 0xd8]; mov rdx, r14; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000413e97: mov eax, dword ptr [rbx + 0xd8]; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x00000000004564b1: mov eax, dword ptr [rbx + 0xd8]; mov rsi, qword ptr [rbp - 0x4e0]; mov rdi, rbx; mov rdx, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x00000000004133ea: mov eax, dword ptr [rbx + 0xd8]; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x000000000041091d: mov eax, dword ptr [rbx + 0xd8]; mov rsi, r14; mov rdi, rbx; sub rdx, r14; call qword ptr [rax + 0x70]; 
0x00000000004583b1: mov eax, dword ptr [rbx + 0xd8]; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004138ee: mov eax, dword ptr [rbx + 0xd8]; or esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004539fb: mov eax, dword ptr [rbx + 0xd8]; sub rdx, rsi; call qword ptr [rax + 0x38]; 
0x0000000000414f5f: mov eax, dword ptr [rbx + 0xd8]; xor edx, edx; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x000000000040ff91: mov eax, dword ptr [rbx + 0xd8]; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x000000000049c626: mov eax, dword ptr [rbx + 8]; movsxd rax, dword ptr [r14 + rax*4]; add rax, r14; jmp rax; 
0x000000000041281a: mov eax, dword ptr [rbx + 8]; movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000045ec92: mov eax, dword ptr [rcx + 0xd8]; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000043b924: mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; lea rax, qword ptr [rdx + 6]; ret; 
0x000000000043a154: mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x000000000043b905: mov eax, dword ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, qword ptr [rdx + 5]; ret; 
0x000000000043a145: mov eax, dword ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x000000000043b936: mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, qword ptr [rdx + 8]; ret; 
0x000000000043a166: mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000043b9b7: mov eax, dword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, qword ptr [rdx + 0xc]; ret; 
0x000000000043a1a7: mov eax, dword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000043b956: mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, qword ptr [rdx + 9]; ret; 
0x000000000043a176: mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000043b9d7: mov eax, dword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, qword ptr [rdx + 0xd]; ret; 
0x000000000043a1c7: mov eax, dword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000043b976: mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, qword ptr [rdx + 0xa]; ret; 
0x000000000043a186: mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000043b9f7: mov eax, dword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, qword ptr [rdx + 0xe]; ret; 
0x000000000043a1e7: mov eax, dword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000043b996: mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, qword ptr [rdx + 0xb]; ret; 
0x000000000043a196: mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x000000000043b887: mov eax, dword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, qword ptr [rdx + 0xf]; ret; 
0x000000000043a0d7: mov eax, dword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x0000000000429d5a: mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000042b632: mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000047d17b: mov eax, dword ptr [rcx + rax]; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000043b8e0: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; lea rax, qword ptr [rdx + 3]; ret; 
0x000000000043b8f0: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; lea rax, qword ptr [rdx + 4]; ret; 
0x000000000043a130: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x000000000043b900: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, qword ptr [rdx + 5]; ret; 
0x000000000043a140: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x000000000043b920: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; lea rax, qword ptr [rdx + 6]; ret; 
0x000000000043a150: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x000000000043a120: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x000000000043b831: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, qword ptr [rdx + 7]; ret; 
0x000000000043b931: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, qword ptr [rdx + 8]; ret; 
0x000000000043a161: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000043b951: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, qword ptr [rdx + 9]; ret; 
0x000000000043a171: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000043b971: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, qword ptr [rdx + 0xa]; ret; 
0x000000000043a181: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000043b991: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, qword ptr [rdx + 0xb]; ret; 
0x000000000043a191: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x000000000043b9b1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, qword ptr [rdx + 0xc]; ret; 
0x000000000043a1a1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000043b9d1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, qword ptr [rdx + 0xd]; ret; 
0x000000000043a1c1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000043b9f1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, qword ptr [rdx + 0xe]; ret; 
0x000000000043a1e1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000043b881: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, qword ptr [rdx + 0xf]; ret; 
0x000000000043a0d1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x000000000043a081: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000043b8b1: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; lea rax, qword ptr [rdx + 1]; ret; 
0x000000000043b8c1: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, qword ptr [rdx + 2]; ret; 
0x000000000043a111: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x000000000043a101: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x000000000046d57f: mov eax, dword ptr [rdi + 0x10]; shr rdx, 2; sub eax, edx; ret; 
0x0000000000416f20: mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x0000000000416f48: mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000044fb92: mov eax, dword ptr [rdi + 0x20]; mov rbx, rdi; test rax, rax; je 0x4fb9f; call rax; 
0x00000000004a12d8: mov eax, dword ptr [rdi + 0x20]; test rax, rax; je 0xa12e7; call rax; 
0x0000000000417a61: mov eax, dword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000046d731: mov eax, dword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x00000000004155db: mov eax, dword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000417251: mov eax, dword ptr [rdi + 0x68]; ret; 
0x00000000004135d1: mov eax, dword ptr [rdi + 0x90]; add rsp, 8; pop rbx; pop rbp; sub rax, rdx; ret; 
0x000000000049ceb1: mov eax, dword ptr [rdi + 0x90]; ret; 
0x000000000049cf31: mov eax, dword ptr [rdi + 0x98]; ret; 
0x000000000046d1b1: mov eax, dword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x6d1c0; ret; 
0x000000000049cf71: mov eax, dword ptr [rdi + 0xa0]; ret; 
0x000000000049cfd1: mov eax, dword ptr [rdi + 0xa8]; ret; 
0x000000000049cfc1: mov eax, dword ptr [rdi + 0xb0]; ret; 
0x000000000049cf81: mov eax, dword ptr [rdi + 0xb8]; ret; 
0x000000000049cf41: mov eax, dword ptr [rdi + 0xc0]; shr rax, 0x3f; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000452f56: mov eax, dword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x0000000000413dee: mov eax, dword ptr [rdi + 0xd8]; call qword ptr [rax + 0x48]; 
0x0000000000415f21: mov eax, dword ptr [rdi + 0xd8]; mov ecx, edx; xor edx, edx; mov rax, qword ptr [rax + 0x48]; jmp rax; 
0x0000000000410bf6: mov eax, dword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000416601: mov eax, dword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x30]; 
0x0000000000415705: mov eax, dword ptr [rdi + 0xd8]; mov rax, qword ptr [rax + 0x18]; jmp rax; 
0x0000000000415c01: mov eax, dword ptr [rdi + 0xd8]; mov rax, qword ptr [rax + 0x40]; jmp rax; 
0x0000000000415e58: mov eax, dword ptr [rdi + 0xd8]; mov rbx, rdi; mov rbp, rdx; call qword ptr [rax + 0x60]; 
0x000000000045ea8b: mov eax, dword ptr [rdi + 0xd8]; mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x00000000004105a9: mov eax, dword ptr [rdi + 0xd8]; mov rdx, rbx; mov rsi, r12; call qword ptr [rax + 0x38]; 
0x0000000000415b01: mov eax, dword ptr [rdi + 0xd8]; push rbx; mov rbx, rdi; call qword ptr [rax + 0x20]; 
0x000000000045dc84: mov eax, dword ptr [rdi + 0xd8]; sub rdx, rsi; sar rdx, 2; call qword ptr [rax + 0x38]; 
0x00000000004191f6: mov eax, dword ptr [rdi + 4]; or eax, 2; or eax, 1; mov qword ptr [rdi + 0x58], rcx; mov dword ptr [rdi + 4], eax; ret; 
0x0000000000413a91: mov eax, dword ptr [rdi + 8]; cmp rax, qword ptr [rdi + 0x10]; jae 0x13aa0; movzx eax, byte ptr [rax]; ret; 
0x0000000000417365: mov eax, dword ptr [rdi + 8]; cmp rax, rcx; jae 0x17390; movzx eax, byte ptr [rax]; ret; 
0x000000000049d4e1: mov eax, dword ptr [rdi + 8]; test rax, rax; je 0x9d4f8; mov rsi, rdi; mov edi, 1; jmp rax; 
0x000000000042fbd4: mov eax, dword ptr [rdi - 4]; cmp ecx, eax; jne 0x305ef; xor eax, eax; ret; 
0x000000000043df3c: mov eax, dword ptr [rdi - 4]; mov ecx, dword ptr [rsi - 4]; cmp eax, ecx; jne 0x3e150; xor eax, eax; ret; 
0x000000000042fe33: mov eax, dword ptr [rdi - 4]; mov ecx, dword ptr [rsi - 4]; cmp ecx, eax; jne 0x305ef; xor eax, eax; ret; 
0x0000000000430131: mov eax, dword ptr [rdi - 8]; cmp rcx, rax; jne 0x305e3; xor eax, eax; ret; 
0x000000000042fba7: mov eax, dword ptr [rdi - 8]; mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x305e3; xor eax, eax; ret; 
0x000000000044e7bc: mov eax, dword ptr [rdi*8 + 0x6cca40]; ret; 
0x0000000000480d91: mov eax, dword ptr [rdi]; cmp rax, rsi; je 0x80da0; ret; 
0x0000000000416f0f: mov eax, dword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x000000000046d531: mov eax, dword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000410230: mov eax, dword ptr [rdx + 0xd8]; mov rbx, rdx; mov rdi, rdx; call qword ptr [rax + 0x60]; 
0x0000000000429ab6: mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000046d40b: mov eax, dword ptr [rdx - 4]; cmp eax, -1; je 0x6d416; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x00000000004115f0: mov eax, dword ptr [rdx]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000046c877: mov eax, dword ptr [rdx]; pop rbx; ret; 
0x0000000000410b30: mov eax, dword ptr [rdx]; ret; 
0x000000000049ed81: mov eax, dword ptr [rip + 0x22efc9]; mov qword ptr [rip + 0x22efc2], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000049ec29: mov eax, dword ptr [rip + 0x22f121]; mov qword ptr [rip + 0x22f11a], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000049a7a0: mov eax, dword ptr [rip + 0x23c11a]; ret; 
0x000000000047cc21: mov eax, dword ptr [rip + 0x24e469]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x259797]; mov qword ptr [rsi], rax; ret; 
0x000000000047cc2b: mov eax, dword ptr [rip + 0x259797]; mov qword ptr [rsi], rax; ret; 
0x000000000047cbca: mov eax, dword ptr [rip + 0x259800]; ret; 
0x0000000000470a56: mov eax, dword ptr [rip + 0x265f7c]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044d671: mov eax, dword ptr [rip + 0x280089]; ret; 
0x0000000000446301: mov eax, dword ptr [rip + 0x290621]; ret; 
0x0000000000444db0: mov eax, dword ptr [rip + 0x291b5a]; test eax, eax; je 0x44dc0; ret; 
0x00000000004431c0: mov eax, dword ptr [rip + 0x2936fa]; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x000000000041fa7f: mov eax, dword ptr [rip + 0x2adb6b]; test rax, rax; je 0x1fa8c; call rax; 
0x0000000000417231: mov eax, dword ptr [rip + 0x2b3e89]; ret; 
0x00000000004187fe: mov eax, dword ptr [rip + 0x2b4ddc]; test rax, rax; je 0x1880b; call rax; 
0x000000000049d7cc: mov eax, dword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x000000000049ad01: mov eax, dword ptr [rsi + 0xa8]; add rsp, 8; ret; 
0x000000000049acc8: mov eax, dword ptr [rsi + 0xb0]; add rsp, 8; ret; 
0x000000000049acf1: mov eax, dword ptr [rsi + 0xb8]; add rsp, 8; ret; 
0x0000000000460644: mov eax, dword ptr [rsi + 0xd8]; call qword ptr [rax + 0x38]; 
0x0000000000416eb1: mov eax, dword ptr [rsi + 0xd8]; mov rdi, rbx; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000046015d: mov eax, dword ptr [rsi + 0xd8]; sar r15, 2; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000047cabc: mov eax, dword ptr [rsi + 4]; ret; 
0x000000000049d801: mov eax, dword ptr [rsi + 8]; add rsp, 8; ret; 
0x000000000044e70e: mov eax, dword ptr [rsi*8 + 0x4a6e00]; mov qword ptr [r14*8 + 0x6cc9c0], rbx; test rax, rax; je 0x4e724; call rax; 
0x000000000043bd59: mov eax, dword ptr [rsi]; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000046c7b7: mov eax, dword ptr [rsi]; pop rbx; ret; 
0x000000000049cfa6: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x00000000004012d0: mov eax, dword ptr [rsp + 0x18]; call rax; 
0x00000000004116ff: mov eax, dword ptr [rsp + 0x18]; lea r8, qword ptr [rsp + 0x20]; mov rdi, rax; call qword ptr [rax + 8]; 
0x0000000000447f9a: mov eax, dword ptr [rsp + 0x20]; call rax; 
0x00000000004488fd: mov eax, dword ptr [rsp + 0x28]; call rax; 
0x000000000040e867: mov eax, dword ptr [rsp + 0x30]; lea r15, qword ptr [rbx + r14]; call rax; 
0x000000000048121c: mov eax, dword ptr [rsp + 0x38]; add rsp, 0x68; ret; 
0x00000000004463bc: mov eax, dword ptr [rsp + 0xc]; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000048109d: mov eax, dword ptr [rsp + 0xc]; add rsp, 0x38; ret; 
0x000000000046be19: mov eax, dword ptr [rsp + 0xd8]; mov edx, 0x10; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000046be4d: mov eax, dword ptr [rsp + 0xd8]; movsxd rdx, ebx; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000043f0c4: mov eax, dword ptr [rsp + 8]; add rsp, 0x10; pop rbx; ret; 
0x000000000048c5d0: mov eax, dword ptr [rsp + 8]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000440f2e: mov eax, dword ptr [rsp + 8]; mov rdi, qword ptr [rax]; mov qword ptr [rsp + 8], rax; call rbx; 
0x0000000000440f3d: mov eax, dword ptr [rsp + 8]; mov rdi, rax; call 0x1ea60; mov rdi, qword ptr [r15]; call rbx; 
0x000000000043ff9b: mov eax, dword ptr [rsp - 0x54]; mov edx, eax; neg edx; cmp dword ptr [rsp - 0x58], 2; cmove eax, edx; ret; 
0x00000000004033e9: mov eax, dword ptr fs:[rax]; mov dword ptr [rbp - 0xc4], eax; je 0x385d; mov edi, 0x6cd720; call rbx; 
0x000000000047d548: mov eax, dword ptr fs:[rax]; ret; 
0x0000000000452e5d: mov eax, eax; add r8, rbx; add rsp, 0x20; mov rax, r8; pop rbx; ret; 
0x000000000041d645: mov eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044008a: mov eax, eax; mov esi, 7; movsxd rdi, ebx; mov eax, 0x48; syscall; 
0x000000000045b100: mov eax, eax; pop rbp; pop r12; ret; 
0x000000000041d4d5: mov eax, eax; pop rbx; ret; 
0x0000000000433455: mov eax, eax; ret; 
0x0000000000480332: mov eax, eax; sub eax, ecx; ret; 
0x000000000041b601: mov eax, eax; syscall; 
0x00000000004135aa: mov eax, ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000046b81b: mov eax, ebp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000046be69: mov eax, ebp; pop rbp; pop r12; pop r13; ret; 
0x0000000000440a6b: mov eax, ebp; pop rbx; pop rbp; pop r12; mov esi, 2; jmp rax; 
0x000000000046be3c: mov eax, ebp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000410063: mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000411966: mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000400469: mov eax, ebp; syscall; 
0x000000000048be83: mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x0000000000413d1d: mov eax, ebx; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000047d818: mov eax, ebx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004433a5: mov eax, ebx; and eax, 0xc; cmp eax, 4; je 0x433b0; ret; 
0x000000000047c14e: mov eax, ebx; mov byte ptr [rdx], 0; add rsp, 0x140; pop rbx; ret; 
0x000000000041255f: mov eax, ebx; mov dword ptr [rbp], r12d; pop rbx; pop rbp; pop r12; ret; 
0x000000000049cb30: mov eax, ebx; mov rcx, r12; or esi, 2; mov rdx, qword ptr [r12]; mov edi, 1; call rax; 
0x000000000049d15e: mov eax, ebx; mov rcx, r13; mov rdx, qword ptr [r13]; mov esi, 1; mov edi, 1; call rax; 
0x00000000004103c9: mov eax, ebx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004104ae: mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x000000000044083e: mov eax, ebx; pop rbx; pop rbp; ret; 
0x000000000041263b: mov eax, ebx; pop rbx; ret; 
0x0000000000442eb8: mov eax, ebx; syscall; 
0x000000000048a307: mov eax, ecx; adc eax, eax; ret; 
0x000000000047cab1: mov eax, ecx; lea rdx, qword ptr [rsi + 4]; cmp rdx, r8; jne 0x7ca5b; mov eax, dword ptr [rsi + 4]; ret; 
0x0000000000473d46: mov eax, ecx; ret; 
0x000000000043eeb8: mov eax, ecx; shr eax, 0xe; and eax, 0x3fc00; pop rbx; ret; 
0x000000000043ee97: mov eax, ecx; shr eax, 6; and eax, 0x3fffc00; pop rbx; ret; 
0x0000000000472fc8: mov eax, ecx; sub rsp, 0x98; syscall; 
0x0000000000403ffb: mov eax, ecx; syscall; 
0x000000000049697b: mov eax, ecx; syscall; test edx, edx; jne 0x9695f; mov dword ptr fs:[0x2d0], eax; ret; 
0x0000000000417261: mov eax, edi; ret; 
0x000000000044f9e4: mov eax, edi; syscall; 
0x000000000042041f: mov eax, edx; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000049a33e: mov eax, edx; add rsp, 0x28; ret; 
0x000000000048cb23: mov eax, edx; add rsp, 0x38; ret; 
0x000000000043fe5e: mov eax, edx; add rsp, 8; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x000000000041e778: mov eax, edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000417ee5: mov eax, edx; add rsp, 8; ret; 
0x000000000047b24f: mov eax, edx; call rax; 
0x00000000004a4204: mov eax, edx; clc; ljmp ptr [rbx]; ret; 
0x000000000046b5db: mov eax, edx; pop rbp; pop r12; ret; 
0x000000000045ceea: mov eax, edx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000041f112: mov eax, edx; pop rbx; pop rbp; pop r12; ret; 
0x00000000004182cc: mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000410250: mov eax, edx; pop rbx; ret; 
0x0000000000427809: mov eax, edx; ret; 
0x00000000004004a6: mov eax, edx; syscall; 
0x000000000043fd84: mov eax, esi; ja 0x3fdb8; mov rdi, rax; mov rsi, rdx; mov eax, 4; syscall; 
0x000000000043fdd3: mov eax, esi; ja 0x3fe08; movsxd rdi, eax; mov rsi, rdx; mov eax, 5; syscall; 
0x0000000000473734: mov eax, esi; ja 0x73768; mov rdi, rax; mov rsi, rdx; mov eax, 6; syscall; 
0x00000000004813a7: mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x00000000004734e3: mov eax, esi; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000049a168: mov eax, esi; pop rbx; pop rbp; pop r12; ret; 
0x000000000040f354: mov eax, esi; pop rbx; pop rbp; ret; 
0x000000000040fda8: mov eax, esi; pop rbx; ret; 
0x0000000000452d54: mov eax, esi; ret; 
0x000000000043e7ab: mov eax, esi; sub rax, rdx; vzeroupper; ret; 
0x000000000043f4f3: mov eax, esi; syscall; 
0x00000000004430c9: mov eax, esp; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000049cc14: mov eax, esp; mov rcx, rbp; mov rdx, qword ptr [rbp]; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000415035: mov eax, esp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004213fa: mov eax, esp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000442bf4: mov eax, esp; syscall; 
0x00000000004004a5: mov eax, r10d; syscall; 
0x00000000004433a4: mov eax, r11d; and eax, 0xc; cmp eax, 4; je 0x433b0; ret; 
0x00000000004430c8: mov eax, r12d; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000415034: mov eax, r12d; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000442bf3: mov eax, r12d; syscall; 
0x0000000000413029: mov eax, r13d; syscall; 
0x000000000044f9e3: mov eax, r15d; syscall; 
0x000000000045b0ff: mov eax, r8d; pop rbp; pop r12; ret; 
0x0000000000480331: mov eax, r8d; sub eax, ecx; ret; 
0x000000000041b600: mov eax, r8d; syscall; 
0x0000000000412143: mov eax, r9d; syscall; 
0x000000000044014c: mov ebp, 0x247c8948; or byte ptr [rax - 0x75], cl; jl 0x4017a; or byte ptr [rax + 0x4f], bh; syscall; 
0x0000000000440c9f: mov ebp, 0x49fffddd; mov edi, dword ptr [rsi]; call rbx; 
0x000000000042fdc4: mov ebp, 0x4e6f0ff3; mov ebp, 0xf66bdb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004a412d: mov ebp, 0xba96fff8; clc; inc dword ptr [rdx - 0x45]; clc; call qword ptr [rdx]; 
0x00000000004a413d: mov ebp, 0xbab0fff8; clc; jmp qword ptr [rax - 0x45]; 
0x00000000004a41a1: mov ebp, 0xbe66fff8; clc; jmp rsi; 
0x00000000004af124: mov ebp, 0xc000000f; sldt word ptr [rax]; ret; 
0x00000000004b921d: mov ebp, 0xc1c0bfbe; ret 0xc4c3; 
0x000000000042fdc9: mov ebp, 0xf66bdb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000046e218: mov ebp, 0xf80148c0; ret; 
0x000000000046e49c: mov ebp, 0xf80148c6; ret; 
0x00000000004bb086: mov ebp, 0xfb67d10d; ret; 
0x00000000004611bd: mov ebp, 0xffffef78; add byte ptr [rdi], cl; test al, al; add byte ptr [rax], al; add byte ptr [rbx - 0x106f43], al; call qword ptr [rax]; 
0x00000000004613cd: mov ebp, 0xffffef78; add byte ptr [rdi], cl; test bh, al; add byte ptr [rax], al; add byte ptr [rbx - 0x106f43], al; call qword ptr [rax]; 
0x000000000045613c: mov ebp, 0xfffffb08; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000004566c1: mov ebp, 0xfffffb10; or byte ptr [rdi], cl; xchg eax, esp; ret 0x9522; 
0x000000000045dc0f: mov ebp, 0xfffffb60; call rax; 
0x000000000045ea7b: mov ebp, 0xfffffb60; mov rbx, qword ptr [rbp - 0x4d8]; mov rsi, r12; mov rax, qword ptr [rdi + 0xd8]; mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x000000000045f5f2: mov ebp, 0xfffffb60; mov rdx, r12; mov rsi, r13; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000047c315: mov ebp, 0xfffffb94; mov eax, 0x14; syscall; 
0x000000000047eeef: mov ebp, 0xffffff78; call rax; 
0x000000000047d3b8: mov ebp, 0xffffffff; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000044f8e0: mov ebp, 1; mov eax, 3; syscall; 
0x00000000004038dc: mov ebp, dword ptr [rax + 0x28]; mov eax, 0; test rax, rax; je 0x38fa; mov edi, 0x6ccfe0; call rax; 
0x000000000049d1a6: mov ebp, dword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049d23e: mov ebp, dword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049d24a: mov ebp, dword ptr [rbp]; mov rsp, rcx; ret; 
0x00000000004106ef: mov ebp, dword ptr [rdi + 0x98]; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x0000000000401188: mov ebp, dword ptr [rip - 0xfb6]; mov ebx, 0x4001d8; jne 0x11b5; nop dword ptr [rax]; call qword ptr [rbx + 0x10]; 
0x000000000040f163: mov ebp, eax; call qword ptr [rbp]; 
0x0000000000440a27: mov ebp, eax; call rax; 
0x00000000004413c9: mov ebp, ebx; mov rax, qword ptr [rbp - 0x48]; call rax; 
0x00000000004813ad: mov ebp, ecx; nop; jmp rdx; 
0x0000000000403975: mov ebp, ecx; test rax, rax; je 0x3731; mov edi, 0x6ccfe0; call rax; 
0x000000000048c79f: mov ebp, edi; push rbx; je 0x8c810; mov esi, 0x48c500; mov edi, 0x6cd9c0; call rax; 
0x000000000049f571: mov ebp, edi; sub rsp, 0x40; test rax, rax; je 0x9f583; mov edi, 0x6cc100; call rax; 
0x00000000004417cf: mov ebp, edi; xor edx, edx; xor esi, esi; mov rbx, rax; call rax; 
0x0000000000415e62: mov ebp, edx; call qword ptr [rax + 0x60]; 
0x0000000000413708: mov ebp, esp; call qword ptr [rax + 0x18]; 
0x000000000040118e: mov ebx, 0x4001d8; jne 0x11b5; nop dword ptr [rax]; call qword ptr [rbx + 0x10]; 
0x000000000040297d: mov ebx, 0x80; call rax; 
0x0000000000415d01: mov ebx, 0x85ffffee; sal byte ptr [rbp + 0x30], 0x48; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x00000000004604a4: mov ebx, 0x8b4c0000; popfq; sub bh, 0xff; dec dword ptr [rcx + 0x39]; ret; 
0x0000000000443344: mov ebx, 0xafb8341; je 0x4334c; ret; 
0x00000000004a4135: mov ebx, 0xbc12fff8; clc; call qword ptr [rdx]; mov ebp, 0xbab0fff8; clc; jmp qword ptr [rax - 0x45]; 
0x00000000004b921b: mov ebx, 0xbfbebdbc; rol cl, 0xc2; ret; 
0x000000000042ff49: mov ebx, 0xf66bbb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000473919: mov ebx, 0xffffffff; mov dword ptr fs:[rdx], eax; add rsp, 0x30; mov eax, ebx; pop rbx; ret; 
0x0000000000442ed8: mov ebx, 2; mov esi, 0x80000; mov edi, 0x4a58c8; mov eax, ebx; syscall; 
0x000000000045ea81: mov ebx, dword ptr [rbp - 0x4d8]; mov rsi, r12; mov rax, qword ptr [rdi + 0xd8]; mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x00000000004110c8: mov ebx, dword ptr [rdi + 0x98]; mov rdi, rbx; call qword ptr [rbx + 0x20]; 
0x00000000004733a6: mov ebx, dword ptr [rdi]; call 0x1ea60; movsxd rdi, ebx; mov eax, 3; syscall; 
0x0000000000432091: mov ebx, dword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432075: mov ebx, dword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000480eed: mov ebx, dword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000480e7b: mov ebx, dword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x50; jmp qword ptr [rax]; 
0x00000000004417d6: mov ebx, eax; call rax; 
0x0000000000411652: mov ebx, edi; call 0x13920; cmp eax, -1; jne 0x11660; pop rbx; ret; 
0x0000000000415b09: mov ebx, edi; call qword ptr [rax + 0x20]; 
0x0000000000415e5f: mov ebx, edi; mov rbp, rdx; call qword ptr [rax + 0x60]; 
0x000000000043f0ef: mov ebx, edi; sub rsp, 0x18; test rax, rax; je 0x3f101; mov edi, 0x6cd720; call rax; 
0x000000000044fb96: mov ebx, edi; test rax, rax; je 0x4fb9f; call rax; 
0x0000000000480c26: mov ebx, edi; test rax, rax; je 0x80c3e; mov qword ptr [rsp + 8], rsi; mov edi, 0x6cc140; call rax; 
0x0000000000440a1f: mov ebx, edi; xor esi, esi; mov r12d, edx; mov rbp, rax; call rax; 
0x0000000000410237: mov ebx, edx; mov rdi, rdx; call qword ptr [rax + 0x60]; 
0x00000000004735b3: mov ebx, esi; sub rsp, 8; syscall; 
0x000000000047992b: mov ebx, esi; sub rsp, 8; test rax, rax; je 0x7993d; mov edi, 0x6cc100; call rax; 
0x0000000000496976: mov ecx, 0x27; mov eax, ecx; syscall; 
0x000000000049ad93: mov ecx, 0x40000000; cmp dh, 0x2f; ja 0x9b5ee; movsxd rcx, dword ptr [r14 + rsi*4]; add rcx, r14; jmp rcx; 
0x0000000000421d7a: mov ecx, 0x4002a; add byte ptr [rax], al; je 0x21d8a; lea rax, qword ptr [rip + 0x1a966]; ret; 
0x00000000004c011c: mov ecx, 0x41380e0a; ret; 
0x0000000000400708: mov ecx, 0x415d002c; pop rsp; ret; 
0x00000000004aee74: mov ecx, 0xbc00000d; or eax, 0xdbf0000; add byte ptr [rax], al; ret 0xd; 
0x00000000004b9219: mov ecx, 0xbdbcbbba; mov esi, 0xc2c1c0bf; ret; 
0x0000000000442268: mov ecx, 0xbefffffa; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r12; call rbx; 
0x0000000000497c23: mov ecx, 0xc0; add byte ptr [rdi], cl; test dword ptr [rcx], edx; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x8308; 
0x0000000000473930: mov ecx, 0xc; mov eax, ecx; syscall; 
0x000000000049cdda: mov ecx, 0xdf; add byte ptr [rax + rsi*4 + 0x48], dh; add esp, 0x18; ret; 
0x00000000004005d1: mov ecx, 0xe; mov rsi, rax; repe cmpsb byte ptr [rsi], byte ptr [rdi]; jne 0x5de; ret; 
0x000000000041caa7: mov ecx, 0xea8306e2; add cl, byte ptr [rcx + 0x548d48d0]; ret; 
0x0000000000430049: mov ecx, 0xf66b9b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000045016c: mov ecx, 0xffffffe8; mov qword ptr fs:[rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x000000000047312b: mov ecx, 2; mov esi, 0x90800; mov eax, ecx; sub rsp, 0x98; syscall; 
0x0000000000403ff4: mov ecx, 2; xor esi, esi; mov eax, ecx; syscall; 
0x0000000000410777: mov ecx, dword ptr [rax + 0x10]; lea r8, qword ptr [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x000000000046c342: mov ecx, dword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000045ec85: mov ecx, dword ptr [rbp - 0x4a0]; mov rdx, r12; mov rsi, r13; mov rax, qword ptr [rcx + 0xd8]; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000045efd7: mov ecx, dword ptr [rbp - 0x4a0]; mov rdx, r13; mov rsi, r12; mov rax, qword ptr [rcx + 0xd8]; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x0000000000403ba0: mov ecx, dword ptr [rbp - 0x90]; je 0x3bcb; mov qword ptr [rbp - 0x90], r8; mov qword ptr [rbp - 0x88], rcx; mov edi, 0x6cd060; call rax; 
0x000000000043631f: mov ecx, dword ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000043630c: mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x00000000004362fa: mov ecx, dword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000049cf04: mov ecx, dword ptr [rdi + rsi*8]; jne 0x9cef3; mov qword ptr [rcx], rdx; add rsp, 8; ret; 
0x000000000046d70b: mov ecx, dword ptr [rdx + 0x48]; cmp ecx, dword ptr [rdx + 0x4c]; cmove eax, ecx; ret; 
0x000000000049d5a9: mov ecx, dword ptr [rdx + 8]; mov edx, 1; sbb eax, eax; cmp qword ptr [rsi + 8], rcx; cmova eax, edx; ret; 
0x0000000000429ab3: mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000048c3bd: mov ecx, dword ptr [rdx]; test ecx, ecx; jne 0x8c38e; mov dword ptr fs:[rdx], 5; pop rbx; ret; 
0x000000000043c554: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, qword ptr [rdi + 0x13]; ret; 
0x000000000043c574: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, qword ptr [rdi + 0x14]; ret; 
0x000000000043bec4: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000043beb4: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000043c5d5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, qword ptr [rdi + 0x17]; ret; 
0x000000000043c5f5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, qword ptr [rdi + 0x18]; ret; 
0x000000000043bf45: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000043bf25: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000043c515: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, qword ptr [rdi + 0x11]; ret; 
0x000000000043be85: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000043c638: mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, qword ptr [rdi + 0x1a]; ret; 
0x000000000043bf88: mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000043c658: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, qword ptr [rdi + 0x1b]; ret; 
0x000000000043bfa8: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000043c619: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, qword ptr [rdi + 0x19]; ret; 
0x000000000043bf69: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000043c595: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, qword ptr [rdi + 0x15]; ret; 
0x000000000043bee5: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000043c534: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, qword ptr [rdi + 0x12]; ret; 
0x000000000043bea4: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000043c5b5: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, qword ptr [rdi + 0x16]; ret; 
0x000000000043bf05: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x0000000000433368: mov ecx, dword ptr [rsi + rdx - 2]; mov si, word ptr [rsi]; mov word ptr [rdi], si; mov word ptr [rdi + rdx - 2], cx; ret; 
0x0000000000433355: mov ecx, dword ptr [rsi + rdx - 4]; mov esi, dword ptr [rsi]; mov dword ptr [rdi], esi; mov dword ptr [rdi + rdx - 4], ecx; ret; 
0x0000000000433336: mov ecx, dword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x0000000000432435: mov ecx, dword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432451: mov ecx, dword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432615: mov ecx, dword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432631: mov ecx, dword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004327f5: mov ecx, dword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432811: mov ecx, dword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004329e5: mov ecx, dword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432a01: mov ecx, dword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432be5: mov ecx, dword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432c01: mov ecx, dword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432de5: mov ecx, dword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432e01: mov ecx, dword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432645: mov ecx, dword ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000043df3f: mov ecx, dword ptr [rsi - 4]; cmp eax, ecx; jne 0x3e150; xor eax, eax; ret; 
0x000000000042fe36: mov ecx, dword ptr [rsi - 4]; cmp ecx, eax; jne 0x305ef; xor eax, eax; ret; 
0x0000000000432a23: mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432c23: mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432e23: mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042fbd1: mov ecx, dword ptr [rsi - 4]; mov eax, dword ptr [rdi - 4]; cmp ecx, eax; jne 0x305ef; xor eax, eax; ret; 
0x0000000000435634: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004355b4: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000435534: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004356b4: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042fbab: mov ecx, dword ptr [rsi - 8]; cmp rcx, rax; jne 0x305e3; xor eax, eax; ret; 
0x00000000004354a5: mov ecx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000435415: mov ecx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000435385: mov ecx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043012d: mov ecx, dword ptr [rsi - 8]; mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x305e3; xor eax, eax; ret; 
0x0000000000432255: mov ecx, dword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432271: mov ecx, dword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043c3d0: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, qword ptr [rdi + 4]; ret; 
0x000000000043bdb0: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x000000000043c421: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, qword ptr [rdi + 8]; ret; 
0x000000000043bdf1: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x0000000000435fe3: mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000435f73: mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000435f03: mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000043c3e0: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, qword ptr [rdi + 5]; ret; 
0x000000000043bdc0: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x000000000043c431: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, qword ptr [rdi + 9]; ret; 
0x000000000043be01: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000043c400: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, qword ptr [rdi + 6]; ret; 
0x000000000043bdd0: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x000000000043c451: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, qword ptr [rdi + 0xa]; ret; 
0x000000000043be11: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000043c471: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, qword ptr [rdi + 0xb]; ret; 
0x000000000043be21: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x0000000000435e25: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435db5: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435d45: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435cd5: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435c65: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435bf5: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435b85: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043c491: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, qword ptr [rdi + 0xc]; ret; 
0x000000000043be31: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x000000000043c4b1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, qword ptr [rdi + 0xd]; ret; 
0x000000000043be41: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000043c4d1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, qword ptr [rdi + 0xe]; ret; 
0x000000000043be51: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x00000000004360c5: mov ecx, dword ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x000000000043c3b1: mov ecx, dword ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, qword ptr [rdi + 2]; ret; 
0x000000000043bd91: mov ecx, dword ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x00000000004114b4: mov ecx, dword ptr [rsp + 0x18]; mov qword ptr [rsp + 0x10], r10; lea r8, qword ptr [rsp + 0x30]; lea rsi, qword ptr [rsp + 0x20]; call qword ptr [rbx + 8]; 
0x000000000046fce5: mov ecx, dword ptr [rsp + 0x18]; xor r8d, r8d; mov rsi, r14; lea rdx, qword ptr [rsp + 0x48]; mov rdi, r12; call rbx; 
0x000000000044a33e: mov ecx, dword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x00000000004484bf: mov ecx, dword ptr [rsp + 0x38]; mov rsi, qword ptr [rsp + 0x30]; mov rdi, qword ptr [rsp + 0x28]; call rbx; 
0x0000000000480ef7: mov ecx, dword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000480e85: mov ecx, dword ptr [rsp + 0x40]; add rsp, 0x50; jmp qword ptr [rax]; 
0x000000000048c3bc: mov ecx, dword ptr fs:[rdx]; test ecx, ecx; jne 0x8c38e; mov dword ptr fs:[rdx], 5; pop rbx; ret; 
0x000000000043630b: mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000473ab1: mov ecx, eax; and ecx, dword ptr [rsi + 0x10]; lea rcx, qword ptr [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000048bc9e: mov ecx, eax; lea r8, qword ptr [rsp + 0xf]; and r8, 0xfffffffffffffff0; call 0x8b0c0; leave; ret; 
0x000000000042d30e: mov ecx, eax; shl r9, cl; or r9, r10; mov qword ptr [rdi], r9; pop rbx; ret; 
0x000000000046da4d: mov ecx, ebp; lea rdx, qword ptr [rbp - 0x40]; mov rdi, r15; xor r8d, r8d; call rbx; 
0x000000000049d161: mov ecx, ebp; mov rdx, qword ptr [r13]; mov esi, 1; mov edi, 1; call rax; 
0x000000000049cc17: mov ecx, ebp; mov rdx, qword ptr [rbp]; mov esi, 0xa; mov edi, 1; call rax; 
0x000000000046fb6c: mov ecx, ebp; mov rdx, r13; mov rsi, r14; mov rdi, r12; mov r9, r15; call rbx; 
0x000000000049a14d: mov ecx, ebp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x000000000046fb78: mov ecx, edi; call rbx; 
0x000000000046f7f5: mov ecx, edi; mov rdx, r13; mov rdi, r12; lea r9, qword ptr [rsp + 0x60]; lea rsi, qword ptr [rsp + 0x30]; call rbx; 
0x0000000000433471: mov ecx, edx; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000433474: mov ecx, edx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000415f27: mov ecx, edx; xor edx, edx; mov rax, qword ptr [rax + 0x48]; jmp rax; 
0x00000000004455cb: mov ecx, esi; call rbx; 
0x000000000046d798: mov ecx, esi; lea rsi, qword ptr [rbp + 0x50]; mov rdi, r12; lea rdx, qword ptr [rsp + 0x18]; lea r9, qword ptr [rsp + 0x10]; call rbx; 
0x000000000046d954: mov ecx, esi; lea rsi, qword ptr [rbp + 0x90]; mov rdi, r12; lea rdx, qword ptr [rsp + 0x18]; lea r9, qword ptr [rsp + 0x10]; call rbx; 
0x000000000046f8f5: mov ecx, esi; mov rdi, r12; lea rdx, qword ptr [rsp + 0x20]; lea r9, qword ptr [rsp + 0x28]; lea rsi, qword ptr [rsp + 0x30]; call rbx; 
0x0000000000444d8a: mov ecx, esi; sub rcx, qword ptr [rdx + 0x10]; cmp rcx, qword ptr [rdx + 0x28]; jae 0x44d70; mov eax, 1; ret; 
0x000000000049cb33: mov ecx, esp; or esi, 2; mov rdx, qword ptr [r12]; mov edi, 1; call rax; 
0x00000000004455be: mov ecx, esp; push 0; mov rdx, rbp; mov rsi, qword ptr [rsp + 0x18]; mov r9, r14; call rbx; 
0x0000000000471551: mov ecx, gs; imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000042d30d: mov ecx, r8d; shl r9, cl; or r9, r10; mov qword ptr [rdi], r9; pop rbx; ret; 
0x0000000000475aca: mov edi, 0x1002; mov eax, 0x9e; syscall; 
0x0000000000442b22: mov edi, 0x1f0ffffd; add bl, dh; ret; 
0x000000000045d2fa: mov edi, 0x218; movsxd rbx, edx; mov rdx, rbx; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x00000000004430a0: mov edi, 0x24448b48; or byte ptr [rax + 0x39], cl; ret; 
0x00000000004bccd1: mov edi, 0x3ca045d6; stosb byte ptr [rdi], al; xchg esp, edi; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000046a88f: mov edi, 0x404b8d48; lea rdx, qword ptr [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x00000000004426dd: mov edi, 0x49ffffe3; mov edi, dword ptr [rdi]; call rbx; 
0x000000000040193b: mov edi, 0x4a1e23; mov eax, 2; syscall; 
0x00000000004019ac: mov edi, 0x4a1e2d; mov eax, 2; syscall; 
0x000000000040042a: mov edi, 0x4a2aa4; mov eax, 2; syscall; 
0x00000000004120b5: mov edi, 0x4a2ac7; mov eax, 2; syscall; 
0x00000000004a1c64: mov edi, 0x4a2e50; call 0x17a80; add byte ptr [rax], al; sub rsp, 8; add rsp, 8; ret; 
0x000000000041b5d4: mov edi, 0x4a34a0; mov eax, 2; syscall; 
0x000000000043f641: mov edi, 0x4a4fa0; jne 0x3f6d8; xor esi, esi; mov eax, 2; syscall; 
0x0000000000442eb3: mov edi, 0x4a58bd; mov eax, ebx; syscall; 
0x0000000000442ee2: mov edi, 0x4a58c8; mov eax, ebx; syscall; 
0x000000000044d6b0: mov edi, 0x4a6d28; mov eax, ecx; syscall; 
0x000000000044ffe5: mov edi, 0x4a7820; mov eax, ecx; syscall; 
0x000000000046fda3: mov edi, 0x4b5e18; call 0x1f50; nop dword ptr [rax]; mov eax, 0xc9; syscall; 
0x000000000046fda3: mov edi, 0x4b5e18; call 0x1f50; nop dword ptr [rax]; mov eax, 0xc9; syscall; ret; 
0x00000000004005cc: mov edi, 0x4be2dc; mov ecx, 0xe; mov rsi, rax; repe cmpsb byte ptr [rsi], byte ptr [rdi]; jne 0x5de; ret; 
0x000000000040095c: mov edi, 0x4bf080; call rax; 
0x0000000000479936: mov edi, 0x6cc100; call rax; 
0x00000000004799a2: mov edi, 0x6cc100; pop rbx; pop rbp; jmp rax; 
0x0000000000480dbf: mov edi, 0x6cc140; add rsp, 8; jmp rax; 
0x0000000000444aa5: mov edi, 0x6cc140; call rax; 
0x000000000049a3e4: mov edi, 0x6cc140; call rax; add rsp, 0x20; mov rax, rbx; pop rbx; ret; 
0x000000000049a48c: mov edi, 0x6cc140; call rax; add rsp, 0x50; mov rax, rbx; pop rbx; ret; 
0x000000000047f4df: mov edi, 0x6cc140; jmp rax; 
0x00000000004008e0: mov edi, 0x6ccb50; jmp rax; 
0x00000000004036f5: mov edi, 0x6ccfe0; call rax; 
0x00000000004033ff: mov edi, 0x6ccfe0; call rbx; 
0x00000000004034a6: mov edi, 0x6cd060; call rax; 
0x0000000000403d04: mov edi, 0x6cd0a0; call rax; 
0x00000000004463a1: mov edi, 0x6cd6d8; call rax; 
0x000000000043f0fa: mov edi, 0x6cd720; call rax; 
0x00000000004033f8: mov edi, 0x6cd720; call rbx; 
0x000000000048c572: mov edi, 0x6cd9c0; call rax; 
0x000000000048c69d: mov edi, 0x6cd9c4; call rdx; 
0x0000000000442b06: mov edi, 0x8b48fffd; jge 0x42b0d; call rbx; 
0x0000000000442af8: mov edi, 0x8b49fffd; cmp al, 0x24; call rbx; 
0x0000000000442aea: mov edi, 0x8b49fffd; jge 0x42af1; call rbx; 
0x00000000004bc53c: mov edi, 0x99b51319; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x00000000004a422d: mov edi, 0xbfb0fff8; clc; push qword ptr [rax]; sar al, 0xff; rol al, 0xf8; call qword ptr [rax - 0x3f]; 
0x00000000004a41ad: mov edi, 0xbfe6fff8; clc; jmp qword ptr [rsi - 0x40]; 
0x0000000000452f4a: mov edi, 0xe0; movsxd r12, edx; mov rdx, r12; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000042fbf9: mov edi, 0xf66bfb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000440254: mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000000401e37: mov edi, 1; call rax; 
0x000000000049d4ec: mov edi, 1; jmp rax; 
0x000000000043f712: mov edi, 1; mov eax, 0xe5; syscall; 
0x000000000040f1b6: mov edi, dword ptr [rax + 0x20]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000440f33: mov edi, dword ptr [rax]; mov qword ptr [rsp + 8], rax; call rbx; 
0x00000000004413c5: mov edi, dword ptr [rbp - 0x40]; mov r13d, ebx; mov rax, qword ptr [rbp - 0x48]; call rax; 
0x000000000045dc0e: mov edi, dword ptr [rbp - 0x4a0]; call rax; 
0x000000000045ea7a: mov edi, dword ptr [rbp - 0x4a0]; mov rbx, qword ptr [rbp - 0x4d8]; mov rsi, r12; mov rax, qword ptr [rdi + 0xd8]; mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x000000000045f5f1: mov edi, dword ptr [rbp - 0x4a0]; mov rdx, r12; mov rsi, r13; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000047eeee: mov edi, dword ptr [rbp - 0x88]; call rax; 
0x000000000049d1ae: mov edi, dword ptr [rbp - 8]; leave; ret; 
0x000000000049d246: mov edi, dword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x0000000000440b8a: mov edi, dword ptr [rbp]; call rbx; 
0x000000000047a270: mov edi, dword ptr [rbx]; mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r12]; call rax; 
0x000000000045d2f9: mov edi, dword ptr [rdi + 0x218]; movsxd rbx, edx; mov rdx, rbx; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x00000000004813a4: mov edi, dword ptr [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x0000000000452f49: mov edi, dword ptr [rdi + 0xe0]; movsxd r12, edx; mov rdx, r12; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000049a411: mov edi, dword ptr [rdi]; call 0x9aa60; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000049a38d: mov edi, dword ptr [rdi]; call 0x9ab20; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x0000000000440b38: mov edi, dword ptr [rdi]; call rbx; 
0x000000000044f838: mov edi, dword ptr [rdi]; syscall; 
0x00000000004bb346: mov edi, dword ptr [rdx]; ret; 
0x000000000048c8b8: mov edi, dword ptr [rip + 0x241106]; call rax; 
0x000000000048c77b: mov edi, dword ptr [rip + 0x241243]; jmp rax; 
0x0000000000440af7: mov edi, dword ptr [rsi]; call rbx; 
0x000000000049a32f: mov edi, dword ptr [rsp + 0x10]; call 0x8c900; mov rdx, qword ptr [rsp + 0x10]; mov rax, rdx; add rsp, 0x28; ret; 
0x000000000044101f: mov edi, dword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000447f95: mov edi, dword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004488f8: mov edi, dword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000481338: mov edi, dword ptr [rsp + 0x18]; call 0x1ea60; add rsp, 0x48; ret; 
0x000000000048cb14: mov edi, dword ptr [rsp + 0x18]; call 0x8c900; mov rdx, qword ptr [rsp + 0x18]; mov rax, rdx; add rsp, 0x38; ret; 
0x0000000000448cde: mov edi, dword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000040e862: mov edi, dword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x30]; lea r15, qword ptr [rbx + r14]; call rax; 
0x00000000004484c9: mov edi, dword ptr [rsp + 0x28]; call rbx; 
0x000000000044a348: mov edi, dword ptr [rsp + 0x30]; call rbx; 
0x000000000044a788: mov edi, dword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000449a6f: mov edi, dword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004012cb: mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000043f0a7: mov edi, dword ptr [rsp + 8]; call 0x46750; add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x0000000000440153: mov edi, dword ptr [rsp + 8]; mov eax, 0x4f; syscall; 
0x0000000000442cc0: mov edi, dword ptr [rsp + 8]; xor eax, eax; syscall; 
0x0000000000440f80: mov edi, dword ptr [rsp]; call rbx; 
0x000000000049eada: mov edi, dword ptr [rsp]; mov rsi, qword ptr [r15 + rbp*8 + 0x10]; call rbx; 
0x0000000000440f42: mov edi, eax; call 0x1ea60; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000411709: mov edi, eax; call qword ptr [rax + 8]; 
0x0000000000421c4a: mov edi, eax; call rcx; 
0x00000000004040ec: mov edi, eax; je 0x42a5; movsxd rdi, r12d; mov eax, 3; syscall; 
0x0000000000452d4d: mov edi, eax; mov byte ptr [rsi], dl; jne 0x52d38; mov rax, rsi; ret; 
0x0000000000400487: mov edi, eax; mov eax, 3; syscall; 
0x0000000000400467: mov edi, eax; mov eax, ebp; syscall; 
0x000000000043f681: mov edi, eax; mov eax, r9d; syscall; 
0x0000000000445f88: mov edi, eax; mov qword ptr [rbp - 0x58], rax; call 0x80f20; mov rdi, r12; mov rax, qword ptr [rbp - 0x58]; call rax; 
0x000000000047d870: mov edi, eax; mov r14, r9; je 0x7d88c; mov qword ptr [rbp - 0xa8], rdx; mov edi, 0x6cc140; call rax; 
0x000000000046015a: mov edi, eax; mov rax, qword ptr [r14 + 0xd8]; sar r15, 2; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000043fd89: mov edi, eax; mov rsi, rdx; mov eax, 4; syscall; 
0x0000000000473739: mov edi, eax; mov rsi, rdx; mov eax, 6; syscall; 
0x0000000000420fe8: mov edi, eax; pop rbx; pop rbp; pop r12; jmp rcx; 
0x0000000000442bee: mov edi, eax; sub rdx, rsi; mov eax, r12d; syscall; 
0x0000000000440f78: mov edi, ebp; call 0x1ea60; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000440cb7: mov edi, ebp; call 0x1ea60; mov rdi, qword ptr [rbp]; call rbx; 
0x000000000046cb33: mov edi, ebp; call 0x6da80; mov rax, qword ptr [r13 + 0xd8]; mov esi, ebx; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x000000000046cb44: mov edi, ebp; call qword ptr [rax + 0x18]; 
0x000000000046d101: mov edi, ebp; call qword ptr [rax + 0x20]; 
0x000000000046b7f6: mov edi, ebp; call qword ptr [rax + 0x38]; 
0x00000000004106f6: mov edi, ebp; call qword ptr [rbp + 0x20]; 
0x00000000004983e6: mov edi, ebp; call qword ptr [rbx]; 
0x000000000041f546: mov edi, ebp; call rax; 
0x0000000000441820: mov edi, ebp; call rbx; 
0x000000000041157b: mov edi, ebp; lea r8, qword ptr [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x000000000044f9e1: mov edi, ebp; mov eax, r15d; syscall; 
0x000000000044faf2: mov edi, ebp; mov eax, r8d; syscall; 
0x0000000000410774: mov edi, ebp; mov r9, qword ptr [rax + 0x10]; lea r8, qword ptr [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x0000000000410bf3: mov edi, ebp; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000041fea7: mov edi, ebp; pop rbx; pop rbp; jmp rax; 
0x000000000044fac0: mov edi, ebp; xor eax, eax; syscall; 
0x000000000043f740: mov edi, ebx; call 0x3efb0; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000473681: mov edi, ebx; call 0x73290; add rsp, 0x90; pop rbx; ret; 
0x000000000040ff9a: mov edi, ebx; call qword ptr [rax + 0x10]; 
0x00000000004137ad: mov edi, ebx; call qword ptr [rax + 0x18]; 
0x0000000000413987: mov edi, ebx; call qword ptr [rax + 0x20]; 
0x0000000000413987: mov edi, ebx; call qword ptr [rax + 0x20]; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x00000000004165b2: mov edi, ebx; call qword ptr [rax + 0x30]; 
0x0000000000453e4d: mov edi, ebx; call qword ptr [rax + 0x38]; 
0x0000000000412ed7: mov edi, ebx; call qword ptr [rax + 0x40]; 
0x000000000049a153: mov edi, ebx; call qword ptr [rax + 0x48]; 
0x0000000000414f6a: mov edi, ebx; call qword ptr [rax + 0x58]; 
0x0000000000415a8f: mov edi, ebx; call qword ptr [rax + 0x68]; 
0x00000000004133f4: mov edi, ebx; call qword ptr [rax + 0x70]; 
0x0000000000413805: mov edi, ebx; call qword ptr [rax + 0x78]; 
0x00000000004110cf: mov edi, ebx; call qword ptr [rbx + 0x20]; 
0x000000000046d3c5: mov edi, ebx; call qword ptr [rdx + 0x30]; 
0x0000000000412bf7: mov edi, ebx; call rax; 
0x000000000049f703: mov edi, ebx; jne 0x9f6f0; pop rbx; ret; 
0x0000000000411438: mov edi, ebx; lea rsi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rax + 0x60]; sar r8, 2; mov qword ptr [rsp + 0x20], rax; call qword ptr [rbx + 0x30]; 
0x00000000004003d3: mov edi, ebx; mov eax, 1; syscall; 
0x00000000004004a3: mov edi, ebx; mov eax, r10d; syscall; 
0x0000000000416eb8: mov edi, ebx; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000046c6c9: mov edi, ebx; mov rax, qword ptr [rax + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x000000000049a010: mov edi, ebx; mov rax, qword ptr [rax + 0x48]; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000004539f8: mov edi, ebx; mov rax, qword ptr [rbx + 0xd8]; sub rdx, rsi; call qword ptr [rax + 0x38]; 
0x0000000000413705: mov edi, ebx; mov rbp, r12; call qword ptr [rax + 0x18]; 
0x00000000004564bf: mov edi, ebx; mov rdx, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x000000000046bf0c: mov edi, ebx; mov rdx, rbp; call qword ptr [rax + 0x58]; 
0x00000000004557f2: mov edi, ebx; mov rdx, rcx; mov qword ptr [rbp - 0x4b0], rcx; call qword ptr [rax + 0x38]; 
0x00000000004562f6: mov edi, ebx; mov rsi, qword ptr [rbp - 0x4e0]; mov dword ptr [rbp - 0x4d0], r9d; mov rdx, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000455d1a: mov edi, ebx; mov rsi, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000411668: mov edi, ebx; pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000415774: mov edi, ebx; pop rbx; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x00000000004158e4: mov edi, ebx; pop rbx; mov rax, qword ptr [rax + 0x28]; jmp rax; 
0x0000000000410927: mov edi, ebx; sub rdx, r14; call qword ptr [rax + 0x70]; 
0x000000000045ec99: mov edi, ecx; call qword ptr [rax + 0x38]; 
0x000000000041b62a: mov edi, ecx; mov eax, 3; syscall; 
0x000000000041b5fe: mov edi, ecx; mov eax, r8d; syscall; 
0x0000000000440b75: mov edi, edi; call 0x1ea60; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000410fd5: mov edi, edi; call rax; 
0x0000000000441864: mov edi, edi; call rbx; 
0x000000000044187f: mov edi, edi; mov edx, 4; mov esi, 1; call rbx; 
0x000000000046da54: mov edi, edi; xor r8d, r8d; call rbx; 
0x000000000041023a: mov edi, edx; call qword ptr [rax + 0x60]; 
0x0000000000452dd1: mov edi, edx; mov byte ptr [rsi], al; jne 0x52db0; mov rax, rsi; ret; 
0x000000000043f4f1: mov edi, edx; mov eax, esi; syscall; 
0x000000000043f501: mov edi, edx; mov eax, r8d; syscall; 
0x0000000000440b82: mov edi, esi; call 0x1ea60; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004500bd: mov edi, esi; call 0x409b0; movsxd rdi, r15d; mov eax, 3; syscall; 
0x0000000000460b9f: mov edi, esi; call qword ptr [rax + 0x38]; 
0x0000000000441844: mov edi, esi; call rbx; 
0x00000000004123c7: mov edi, esi; mov eax, r9d; syscall; 
0x0000000000461315: mov edi, esi; mov rdx, qword ptr [rbp - 0x10b8]; mov rsi, qword ptr [rbp - 0x1090]; call qword ptr [rax + 0x38]; 
0x000000000046063e: mov edi, esi; mov rdx, rax; mov rax, qword ptr [r14 + 0xd8]; call qword ptr [rax + 0x38]; 
0x0000000000442b02: mov edi, esp; call 0x1ea60; mov rdi, qword ptr [rbp]; call rbx; 
0x000000000046be29: mov edi, esp; call qword ptr [rax + 0x38]; 
0x00000000004417fb: mov edi, esp; call rbx; 
0x000000000046f7fb: mov edi, esp; lea r9, qword ptr [rsp + 0x60]; lea rsi, qword ptr [rsp + 0x30]; call rbx; 
0x0000000000415ba7: mov edi, esp; lea rbx, qword ptr [r14 + 1]; call qword ptr [rax + 0x18]; 
0x000000000046d79f: mov edi, esp; lea rdx, qword ptr [rsp + 0x18]; lea r9, qword ptr [rsp + 0x10]; call rbx; 
0x000000000046f8f8: mov edi, esp; lea rdx, qword ptr [rsp + 0x20]; lea r9, qword ptr [rsp + 0x28]; lea rsi, qword ptr [rsp + 0x30]; call rbx; 
0x00000000004040a8: mov edi, esp; mov eax, 3; syscall; 
0x0000000000440921: mov edi, esp; mov eax, 9; syscall; 
0x00000000004042cc: mov edi, esp; mov eax, r10d; syscall; 
0x0000000000412141: mov edi, esp; mov eax, r9d; syscall; 
0x000000000046fb75: mov edi, esp; mov r9, r15; call rbx; 
0x0000000000445f94: mov edi, esp; mov rax, qword ptr [rbp - 0x58]; call rax; 
0x000000000047c069: mov edi, esp; pop rbx; pop rbp; pop r12; pop r13; jmp rax; 
0x000000000047c068: mov edi, r12d; pop rbx; pop rbp; pop r12; pop r13; jmp rax; 
0x0000000000421d59: mov edx, 0; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x0000000000421dd6: mov edx, 0; lea rax, qword ptr [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000047d175: mov edx, 0; mov rax, qword ptr [rcx + rax]; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000046be20: mov edx, 0x10; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x00000000004003c8: mov edx, 0x1d; mov esi, 0x4a2a68; mov rdi, rbx; mov eax, 1; syscall; 
0x0000000000400400: mov edx, 0x1d; mov esi, 0x4a2a86; mov rdi, rbx; mov eax, 1; syscall; 
0x000000000043f678: mov edx, 0x1f; mov rsi, rbp; mov rdi, r8; mov eax, r9d; syscall; 
0x0000000000401301: mov edx, 0x3c; nop word ptr cs:[rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x0000000000426807: mov edx, 0x426230; mov eax, 0x43e180; cmove rax, rdx; ret; 
0x000000000042712f: mov edx, 0x430630; cmove rax, rdx; ret; 
0x000000000046e212: mov edx, 0x48000001; bsr eax, eax; add rax, rdi; ret; 
0x0000000000415a5c: mov edx, 0x48001f0f; cmp dword ptr [rdi + 0x38], 0; je 0x15a70; ret; 
0x00000000004431c6: mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000440249: mov edx, 0x80000; mov esi, 0x4a5790; mov rdi, -0x64; mov eax, 0x101; syscall; 
0x000000000044044e: mov edx, 0x80000; mov esi, 0x4a5790; movsxd rdi, dword ptr [rsp + 0x10]; mov eax, 0x101; syscall; 
0x0000000000472fc0: mov edx, 0x90800; movsxd rdi, edi; mov eax, ecx; sub rsp, 0x98; syscall; 
0x00000000004a4131: mov edx, 0xbb42fff8; clc; call qword ptr [rdx]; 
0x00000000004a4141: mov edx, 0xbb60fff8; clc; call qword ptr [rax - 0x44]; 
0x000000000042ffc9: mov edx, 0xf66bab2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000049bae3: mov edx, 0xfc0c7; add byte ptr [rax], al; syscall; 
0x0000000000413d7e: mov edx, 0xffffffd0; cmp dword ptr fs:[rdx], 0x1d; je 0x13d14; movsxd rdi, ebp; mov eax, 3; syscall; 
0x000000000047337e: mov edx, 0xffffffd0; movsxd rdi, ebp; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x00000000004730f9: mov edx, 0xffffffd0; movsxd rdi, ebx; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x0000000000412dd8: mov edx, 0xffffffd0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000040e3f1: mov edx, 0xffffffd0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000413637: mov edx, 0xffffffd0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x0000000000450177: mov edx, 0xffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000450251: mov edx, 0xffffffe0; mov rax, qword ptr [rax + 0x58]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x00000000004477e7: mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000441d1a: mov edx, 1; je 0x42260; xor esi, esi; mov rdi, r12; call rbx; 
0x00000000004417ed: mov edx, 1; je 0x42280; xor esi, esi; mov rdi, r12; call rbx; 
0x0000000000444dcf: mov edx, 1; je 0x44de0; mov dword ptr [rip + 0x2861bc], edx; pop rbx; ret; 
0x000000000041b5f3: mov edx, 1; lea rsi, qword ptr [rsp + 0x30]; mov rdi, r9; mov eax, r8d; syscall; 
0x000000000044330d: mov edx, 1; mov eax, 0xca; syscall; 
0x00000000004796dc: mov edx, 1; mov esi, 0x81; add rdi, 0x1c; mov eax, 0xca; syscall; 
0x0000000000441a6e: mov edx, 1; mov esi, 1; mov rdi, r12; call rbx; 
0x0000000000441cec: mov edx, 1; mov esi, 2; mov rdi, r12; call rbx; 
0x0000000000412138: mov edx, 1; mov rsi, rbx; mov rdi, r12; mov eax, r9d; syscall; 
0x000000000049d5ac: mov edx, 1; sbb eax, eax; cmp qword ptr [rsi + 8], rcx; cmova eax, edx; ret; 
0x0000000000441a90: mov edx, 2; je 0x422b8; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441d3f: mov edx, 2; je 0x422d8; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441812: mov edx, 2; je 0x422f8; xor esi, esi; mov rdi, r13; call rbx; 
0x000000000044193a: mov edx, 2; mov esi, 1; mov rdi, r13; call rbx; 
0x0000000000441a5f: mov edx, 2; mov esi, 2; mov rdi, r13; call rbx; 
0x0000000000441836: mov edx, 3; je 0x42338; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441bd9: mov edx, 3; je 0x42358; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441ab4: mov edx, 3; je 0x42378; xor esi, esi; mov rdi, r14; call rbx; 
0x000000000044195b: mov edx, 3; je 0x42398; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442106: mov edx, 3; je 0x423b8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441fe1: mov edx, 3; je 0x423d8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441d63: mov edx, 3; je 0x42418; xor esi, esi; mov rdi, r14; call rbx; 
0x00000000004418b2: mov edx, 3; mov esi, 1; mov rdi, r14; call rbx; 
0x000000000044192b: mov edx, 3; mov esi, 2; mov rdi, r14; call rbx; 
0x0000000000441dfc: mov edx, 4; je 0x42438; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441d83: mov edx, 4; je 0x42458; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044219f: mov edx, 4; je 0x42478; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044207a: mov edx, 4; je 0x424b8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442001: mov edx, 4; je 0x424d8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441f21: mov edx, 4; je 0x424f8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441c72: mov edx, 4; je 0x42538; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441bf9: mov edx, 4; je 0x42558; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441856: mov edx, 4; je 0x42578; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441ad4: mov edx, 4; je 0x425b8; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004418cf: mov edx, 4; je 0x425d8; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004419f4: mov edx, 4; je 0x425f8; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044197b: mov edx, 4; je 0x42618; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441881: mov edx, 4; mov esi, 1; call rbx; 
0x00000000004418a3: mov edx, 4; mov esi, 2; mov rdi, r15; call rbx; 
0x0000000000445610: mov edx, 8; mov eax, edx; ret; 
0x00000000004505a1: mov edx, 8; movsxd rdi, edi; mov eax, 0xe; syscall; 
0x0000000000450421: mov edx, 8; movsxd rdi, edi; mov eax, ecx; syscall; 
0x000000000040138a: mov edx, dword ptr [r9]; add dword ptr [rsi], edx; and eax, 0xf; mov dword ptr [r8], eax; pop rbx; ret; 
0x000000000040f1b2: mov edx, dword ptr [rax + 0x18]; mov rdi, qword ptr [rax + 0x20]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000040f18a: mov edx, dword ptr [rax + 0x18]; mov rsi, qword ptr [rax + 0x20]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000416f40: mov edx, dword ptr [rax + 8]; jne 0x16f50; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000046c698: mov edx, dword ptr [rax]; mov eax, edx; pop rbx; ret; 
0x0000000000400bfb: mov edx, dword ptr [rax]; mov rax, qword ptr [rbp - 0x10]; mov qword ptr [rax], rdx; nop; leave; ret; 
0x0000000000461318: mov edx, dword ptr [rbp - 0x10b8]; mov rsi, qword ptr [rbp - 0x1090]; call qword ptr [rax + 0x38]; 
0x00000000004434a9: mov edx, dword ptr [rbp - 0x20]; movsxd rcx, eax; cmp qword ptr [rdx + rcx*8 - 8], 1; sbb eax, 0; leave; ret; 
0x0000000000456307: mov edx, dword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x000000000049cc1a: mov edx, dword ptr [rbp]; mov esi, 0xa; mov edi, 1; call rax; 
0x000000000049d164: mov edx, dword ptr [rbp]; mov esi, 1; mov edi, 1; call rax; 
0x000000000048c991: mov edx, dword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x0000000000410919: mov edx, dword ptr [rbx + 0x40]; mov rax, qword ptr [rbx + 0xd8]; mov rsi, r14; mov rdi, rbx; sub rdx, r14; call qword ptr [rax + 0x70]; 
0x0000000000412bf0: mov edx, dword ptr [rbx + 0x40]; sub rdx, rsi; mov rdi, rbx; call rax; 
0x000000000046d3bc: mov edx, dword ptr [rbx + 0xd8]; mov esi, eax; mov rdi, rbx; call qword ptr [rdx + 0x30]; 
0x000000000042b62f: mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000429d5d: mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000040138b: mov edx, dword ptr [rcx]; add dword ptr [rsi], edx; and eax, 0xf; mov dword ptr [r8], eax; pop rbx; ret; 
0x00000000004155d7: mov edx, dword ptr [rdi + 0x18]; mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000048c9a5: mov edx, dword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000410fce: mov edx, dword ptr [rdi + 0x40]; sub rdx, rsi; mov rdi, r15; call rax; 
0x000000000048ca04: mov edx, dword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000415a7d: mov edx, dword ptr [rdi + 0xc0]; test edx, edx; jle 0x15ad0; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x000000000049e8d9: mov edx, dword ptr [rdi]; mov rdi, rbp; call rbx; 
0x000000000047b248: mov edx, dword ptr [rdx + 8]; add rdx, qword ptr [rax]; mov rax, rdx; call rax; 
0x0000000000400c63: mov edx, dword ptr [rdx]; mov qword ptr [rax], rdx; nop; leave; ret; 
0x000000000049cabb: mov edx, dword ptr [rdx]; mov qword ptr [rbx + 0x98], rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000049a594: mov edx, dword ptr [rip + 0x23359e]; add word ptr [rdx + rax*2], 1; ret; 
0x00000000004012c0: mov edx, dword ptr [rip + 0x2cc37a]; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000043bf85: mov edx, dword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000043bfa5: mov edx, dword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000004360c1: mov edx, dword ptr [rsi + 1]; mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x0000000000435fe0: mov edx, dword ptr [rsi + 1]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000435e21: mov edx, dword ptr [rsi + 1]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435f70: mov edx, dword ptr [rsi + 2]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000435db1: mov edx, dword ptr [rsi + 2]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043c402: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, qword ptr [rdi + 6]; ret; 
0x000000000043bdd2: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x0000000000435f00: mov edx, dword ptr [rsi + 3]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000435d41: mov edx, dword ptr [rsi + 3]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043c3e3: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, qword ptr [rdi + 5]; ret; 
0x000000000043bdc3: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x0000000000435cd1: mov edx, dword ptr [rsi + 4]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043c494: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, qword ptr [rdi + 0xc]; ret; 
0x000000000043be34: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000435c61: mov edx, dword ptr [rsi + 5]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043c4b4: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, qword ptr [rdi + 0xd]; ret; 
0x000000000043be44: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x0000000000435bf1: mov edx, dword ptr [rsi + 6]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043c453: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, qword ptr [rdi + 0xa]; ret; 
0x000000000043be13: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000043c4d4: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, qword ptr [rdi + 0xe]; ret; 
0x000000000043be54: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000435b81: mov edx, dword ptr [rsi + 7]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043c473: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, qword ptr [rdi + 0xb]; ret; 
0x000000000043be23: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000043c434: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, qword ptr [rdi + 9]; ret; 
0x000000000043be04: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000435631: mov edx, dword ptr [rsi - 0xa]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004355b1: mov edx, dword ptr [rsi - 0xb]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000435531: mov edx, dword ptr [rsi - 0xc]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004354a1: mov edx, dword ptr [rsi - 0xd]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000435411: mov edx, dword ptr [rsi - 0xe]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000435381: mov edx, dword ptr [rsi - 0xf]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000432461: mov edx, dword ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x0000000000432641: mov edx, dword ptr [rsi - 3]; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x0000000000432820: mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432258: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432438: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432618: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004327f8: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432454: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432634: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432814: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432274: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432a20: mov edx, dword ptr [rsi - 5]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432c20: mov edx, dword ptr [rsi - 6]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432e20: mov edx, dword ptr [rsi - 7]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432095: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004329e9: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432be9: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432de9: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432079: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432a05: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432c05: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432e05: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004320b1: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004356b1: mov edx, dword ptr [rsi - 9]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043c3c0: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, qword ptr [rdi + 3]; ret; 
0x0000000000436050: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x000000000043c411: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, qword ptr [rdi + 7]; ret; 
0x0000000000435e91: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000043c3a1: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; lea rax, qword ptr [rdi + 1]; ret; 
0x000000000043bd81: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000049a339: mov edx, dword ptr [rsp + 0x10]; mov rax, rdx; add rsp, 0x28; ret; 
0x000000000048cb1e: mov edx, dword ptr [rsp + 0x18]; mov rax, rdx; add rsp, 0x38; ret; 
0x00000000004810ff: mov edx, dword ptr [rsp + 0x38]; add rax, qword ptr [rdx + 8]; add rsp, 0x48; ret; 
0x000000000045050d: mov edx, dword ptr [rsp + 0x38]; mov qword ptr [r8 + 0x90], rdx; add rsp, 0xd0; ret; 
0x0000000000480ef2: mov edx, dword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000480e80: mov edx, dword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x50; jmp qword ptr [rax]; 
0x000000000041ee61: mov edx, dword ptr [rsp + 0x68]; call rax; 
0x0000000000420159: mov edx, dword ptr [rsp + 0x68]; mov rsi, r12; mov rdi, rbx; call rax; 
0x000000000049c093: mov edx, dword ptr [rsp + rax*8 + 0x30]; ja 0x9be60; movzx r11d, r11b; movsxd rax, dword ptr [r8 + r11*4]; add rax, r8; jmp rax; 
0x000000000049cb39: mov edx, dword ptr [rsp]; mov edi, 1; call rax; 
0x0000000000442cb9: mov edx, dword ptr [rsp]; mov rsi, r14; mov rdi, qword ptr [rsp + 8]; xor eax, eax; syscall; 
0x000000000048bcdc: mov edx, eax; lea rcx, qword ptr [rsp + 0xf]; and rcx, 0xfffffffffffffff0; call 0x8b7a0; leave; ret; 
0x0000000000442c7f: mov edx, eax; mov eax, r12d; syscall; 
0x0000000000460641: mov edx, eax; mov rax, qword ptr [r14 + 0xd8]; call qword ptr [rax + 0x38]; 
0x0000000000455e69: mov edx, eax; mov rax, qword ptr [rbx + 0xd8]; mov dword ptr [rbp - 0x4d8], r9d; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004133e7: mov edx, eax; mov rax, qword ptr [rbx + 0xd8]; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x000000000043f695: mov edx, eax; mov rdi, r8; mov eax, 3; syscall; 
0x00000000004123c1: mov edx, eax; mov rsi, r13; mov rdi, r14; mov eax, r9d; syscall; 
0x00000000004042c6: mov edx, eax; mov rsi, r9; mov rdi, r12; mov eax, r10d; syscall; 
0x000000000043ff9f: mov edx, eax; neg edx; cmp dword ptr [rsp - 0x58], 2; cmove eax, edx; ret; 
0x000000000046bf0f: mov edx, ebp; call qword ptr [rax + 0x58]; 
0x000000000046f7f8: mov edx, ebp; mov rdi, r12; lea r9, qword ptr [rsp + 0x60]; lea rsi, qword ptr [rsp + 0x30]; call rbx; 
0x0000000000453e43: mov edx, ebp; mov rsi, qword ptr [rbp - 0x4a8]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004455c3: mov edx, ebp; mov rsi, qword ptr [rsp + 0x18]; mov r9, r14; call rbx; 
0x00000000004983e1: mov edx, ebp; mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x00000000004983a1: mov edx, ebp; mov rsi, r12; mov edi, ebp; call rax; 
0x000000000045efde: mov edx, ebp; mov rsi, r12; mov rax, qword ptr [rcx + 0xd8]; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000046bf32: mov edx, ebp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000413e9e: mov edx, ebp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000046fb6f: mov edx, ebp; mov rsi, r14; mov rdi, r12; mov r9, r15; call rbx; 
0x000000000045ea92: mov edx, ebx; call qword ptr [rax + 0x38]; 
0x0000000000460cab: mov edx, ebx; mov qword ptr [rbp - 0x1078], r11; mov dword ptr [rbp - 0x1080], r9d; mov rsi, qword ptr [rbp - 0x1088]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000460b8e: mov edx, ebx; mov qword ptr [rbp - 0x10a0], r11; mov rsi, qword ptr [rbp - 0x1088]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000455d09: mov edx, ebx; mov qword ptr [rbp - 0x4f0], r11; mov dword ptr [rbp - 0x500], r9d; mov rdi, rbx; mov rsi, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x000000000045d303: mov edx, ebx; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000046b7f3: mov edx, ebx; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x00000000004105b0: mov edx, ebx; mov rsi, r12; call qword ptr [rax + 0x38]; 
0x000000000044091b: mov edx, ebx; mov rsi, r13; mov rdi, r12; mov eax, 9; syscall; 
0x0000000000413024: mov edx, ebx; mov rsi, rbp; mov eax, r13d; syscall; 
0x000000000044095b: mov edx, ebx; or r10d, 0x40; xor edi, edi; mov eax, 9; movsxd r10, r10d; syscall; 
0x000000000048bcc5: mov edx, ecx; jg 0x8bcd0; call 0x8b620; leave; ret; 
0x0000000000473791: mov edx, ecx; mov eax, 0x106; syscall; 
0x0000000000443251: mov edx, ecx; mov eax, 0x19; syscall; 
0x0000000000443251: mov edx, ecx; mov eax, 0x19; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x000000000046155f: mov edx, ecx; mov qword ptr [rbp - 0x1080], rcx; mov rsi, qword ptr [rbp - 0x1090]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000454121: mov edx, ecx; mov qword ptr [rbp - 0x480], rcx; mov rsi, r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004557f5: mov edx, ecx; mov qword ptr [rbp - 0x4b0], rcx; call qword ptr [rax + 0x38]; 
0x000000000045a60c: mov edx, ecx; mov qword ptr [rbp - 0xb8], rcx; mov rdi, rbx; call rax; 
0x000000000044fabd: mov edx, ecx; mov rdi, r13; xor eax, eax; syscall; 
0x000000000044faec: mov edx, ecx; mov rsi, r10; mov rdi, r13; mov eax, r8d; syscall; 
0x0000000000460168: mov edx, edi; call qword ptr [rax + 0x38]; 
0x000000000046c998: mov edx, edi; jbe 0x6c907; mov eax, dword ptr [rsi]; pop rbx; ret; 
0x00000000004c6491: mov edx, edi; jmp qword ptr [rsi]; 
0x00000000004569fe: mov edx, edx; mov qword ptr [rbp - 0x4d0], r10; mov rsi, r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000457054: mov edx, edx; mov qword ptr [rbp - 0x500], r10; mov rsi, r11; mov qword ptr [rbp - 0x4f0], r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004137ff: mov edx, esi; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000452f53: mov edx, esp; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000049ead7: mov edx, esp; mov rdi, qword ptr [rsp]; mov rsi, qword ptr [r15 + rbp*8 + 0x10]; call rbx; 
0x000000000045ec8c: mov edx, esp; mov rsi, r13; mov rax, qword ptr [rcx + 0xd8]; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000045f5f8: mov edx, esp; mov rsi, r13; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x00000000004545c9: mov edx, esp; mov rsi, r8; mov qword ptr [rbp - 0x4a8], r8; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000454de0: mov edx, esp; mov rsi, r8; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000046b5bd: mov edx, esp; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000412ed1: mov edx, esp; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000473896: mov edx, esp; syscall; 
0x0000000000473ab9: mov es, word ptr [rbx]; add al, 0x11; ret; 
0x00000000004c92ec: mov es, word ptr [rcx*4 + 0x48068c05]; add dword ptr [rdi], 3; pop rbx; add cl, byte ptr [rdx]; ret; 
0x00000000004c766c: mov es, word ptr [rcx*4 + 0x4b068c05]; add dword ptr [rdi], 3; mov bl, 2; ret; 
0x000000000048f570: mov es, word ptr [rcx]; add byte ptr [rbx + 0x148b8104], cl; xchg eax, ecx; sub eax, edx; ret; 
0x0000000000441d46: mov es, word ptr [rip - 0x9cf0000]; mov rdi, r13; call rbx; 
0x000000000043ff85: mov esi, 0x10; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x00000000004019a7: mov esi, 0x20000; mov edi, 0x4a1e2d; mov eax, 2; syscall; 
0x0000000000401936: mov esi, 0x20001; mov edi, 0x4a1e23; mov eax, 2; syscall; 
0x00000000004736c9: mov esi, 0x441f0f66; add byte ptr [rax], al; mov eax, 0x3f; syscall; 
0x000000000044639c: mov esi, 0x447090; mov edi, 0x6cd6d8; call rax; 
0x0000000000447725: mov esi, 0x48891b52; push rax; mov dword ptr [rax + 0x54], edx; ret; 
0x000000000048c56d: mov esi, 0x48c500; mov edi, 0x6cd9c0; call rax; 
0x000000000048c698: mov esi, 0x48c740; mov edi, 0x6cd9c4; call rdx; 
0x0000000000480f7e: mov esi, 0x48ffffc8; mov dword ptr [rbx + 0x18], eax; pop rax; pop rdx; pop rbx; ret; 
0x00000000004003cd: mov esi, 0x4a2a68; mov rdi, rbx; mov eax, 1; syscall; 
0x0000000000400405: mov esi, 0x4a2a86; mov rdi, rbx; mov eax, 1; syscall; 
0x000000000044024e: mov esi, 0x4a5790; mov rdi, -0x64; mov eax, 0x101; syscall; 
0x0000000000440453: mov esi, 0x4a5790; movsxd rdi, dword ptr [rsp + 0x10]; mov eax, 0x101; syscall; 
0x0000000000447717: mov esi, 0x4a669a8a; add byte ptr [rax - 0x7f], cl; ret 0x6680; 
0x000000000046fd9e: mov esi, 0x4b5f34; mov edi, 0x4b5e18; call 0x1f50; nop dword ptr [rax]; mov eax, 0xc9; syscall; 
0x0000000000473887: mov esi, 0x5401; mov eax, 0x10; sub rsp, 0x30; mov rdx, rsp; syscall; 
0x00000000004bc33a: mov esi, 0x5fd2fe07; insd dword ptr [rdi], dx; test eax, 0x7d4c8c5d; ret 0xd8f; 
0x000000000041b5cf: mov esi, 0x80000; mov edi, 0x4a34a0; mov eax, 2; syscall; 
0x0000000000442eae: mov esi, 0x80000; mov edi, 0x4a58bd; mov eax, ebx; syscall; 
0x0000000000442edd: mov esi, 0x80000; mov edi, 0x4a58c8; mov eax, ebx; syscall; 
0x000000000044ffe0: mov esi, 0x80000; mov edi, 0x4a7820; mov eax, ecx; syscall; 
0x000000000044f9db: mov esi, 0x80000; mov rdi, r13; mov eax, r15d; syscall; 
0x00000000004432db: mov esi, 0x80; cmp eax, edx; jne 0x432ec; nop; mov eax, 0xca; syscall; 
0x00000000004433c8: mov esi, 0x80; syscall; 
0x00000000004796e1: mov esi, 0x81; add rdi, 0x1c; mov eax, 0xca; syscall; 
0x0000000000443308: mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000048c7ee: mov esi, 0x89fffef8; add ecx, dword ptr [rax - 0x75]; sbb byte ptr [r9], sil; ror byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x000000000047f1ff: mov esi, 0x89fffffe; ret 0x758b; 
0x00000000004120b0: mov esi, 0x902; mov edi, 0x4a2ac7; mov eax, 2; syscall; 
0x0000000000473130: mov esi, 0x90800; mov eax, ecx; sub rsp, 0x98; syscall; 
0x000000000049cc1d: mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000482d3f: mov esi, 0xbe0f2414; ret 0x8349; 
0x00000000004a41a5: mov esi, 0xbee6fff8; clc; jmp qword ptr [rsi - 0x41]; 
0x00000000004a41a9: mov esi, 0xbf66fff8; clc; jmp rsi; 
0x000000000041fa77: mov esi, 0xc0840045; jne 0x1faa8; mov rax, qword ptr [rip + 0x2adb6b]; test rax, rax; je 0x1fa8c; call rax; 
0x00000000004b921e: mov esi, 0xc2c1c0bf; ret; 
0x0000000000416dea: mov esi, 0xc48348ff; sub byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000041647b: mov esi, 0xc48348ff; sub byte ptr [rbx + 0x5d], bl; ret; 
0x000000000043ee34: mov esi, 0xf000000; lahf; ret 0xea81; 
0x000000000042fcc9: mov esi, 0xf66beb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004ba1a6: mov esi, 0xfa1fb992; xchg dword ptr [rsp + rax + 0x6fa9ce9d], esp; ret; 
0x0000000000410bfc: mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000416607: mov esi, 0xffffffff; call qword ptr [rax + 0x30]; 
0x0000000000416607: mov esi, 0xffffffff; call qword ptr [rax + 0x30]; cmp eax, -1; jne 0x165fa; pop rbx; ret; 
0x000000000046d177: mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x00000000004137a7: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004136ff: mov esi, 0xffffffff; mov rdi, rbx; mov rbp, r12; call qword ptr [rax + 0x18]; 
0x0000000000441886: mov esi, 1; call rbx; 
0x000000000049d167: mov esi, 1; mov edi, 1; call rax; 
0x000000000044f8da: mov esi, 1; mov r13d, 1; mov eax, 3; syscall; 
0x0000000000441a73: mov esi, 1; mov rdi, r12; call rbx; 
0x000000000044193f: mov esi, 1; mov rdi, r13; call rbx; 
0x00000000004418b7: mov esi, 1; mov rdi, r14; call rbx; 
0x0000000000441cfd: mov esi, 1; mov rdi, rbp; call rbx; 
0x000000000046a898: mov esi, 1; mov rdi, rbx; call rax; 
0x0000000000440a71: mov esi, 2; jmp rax; 
0x0000000000441cf1: mov esi, 2; mov rdi, r12; call rbx; 
0x0000000000441a64: mov esi, 2; mov rdi, r13; call rbx; 
0x0000000000441930: mov esi, 2; mov rdi, r14; call rbx; 
0x00000000004418a8: mov esi, 2; mov rdi, r15; call rbx; 
0x0000000000440a8b: mov esi, 3; jmp rax; 
0x000000000044226c: mov esi, 3; mov rdi, r12; call rbx; 
0x00000000004422c3: mov esi, 3; mov rdi, r13; call rbx; 
0x0000000000442343: mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442443: mov esi, 3; mov rdi, r15; call rbx; 
0x000000000044008c: mov esi, 7; movsxd rdi, ebx; mov eax, 0x48; syscall; 
0x000000000040f18e: mov esi, dword ptr [rax + 0x20]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x00000000004413c2: mov esi, dword ptr [rax]; mov rdi, qword ptr [rbp - 0x40]; mov r13d, ebx; mov rax, qword ptr [rbp - 0x48]; call rax; 
0x0000000000460b98: mov esi, dword ptr [rbp - 0x1088]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000046131f: mov esi, dword ptr [rbp - 0x1090]; call qword ptr [rax + 0x38]; 
0x0000000000461569: mov esi, dword ptr [rbp - 0x1090]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000049d1aa: mov esi, dword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049d242: mov esi, dword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x0000000000453e46: mov esi, dword ptr [rbp - 0x4a8]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004562f9: mov esi, dword ptr [rbp - 0x4e0]; mov dword ptr [rbp - 0x4d0], r9d; mov rdx, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x00000000004564b8: mov esi, dword ptr [rbp - 0x4e0]; mov rdi, rbx; mov rdx, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000455d1d: mov esi, dword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000442be6: mov esi, dword ptr [rbx]; mov qword ptr [rsp + 8], rax; mov rdi, rax; sub rdx, rsi; mov eax, r12d; syscall; 
0x000000000044101c: mov esi, dword ptr [rbx]; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000049a40d: mov esi, dword ptr [rdi + 8]; mov rdi, qword ptr [rdi]; call 0x9aa60; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000049a389: mov esi, dword ptr [rdi + 8]; mov rdi, qword ptr [rdi]; call 0x9ab20; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x000000000049eade: mov esi, dword ptr [rdi + rbp*8 + 0x10]; call rbx; 
0x0000000000473108: mov esi, dword ptr [rdx]; syscall; 
0x000000000049e8d5: mov esi, dword ptr [rsi + 8]; mov rdx, qword ptr [r15]; mov rdi, rbp; call rbx; 
0x000000000043631c: mov esi, dword ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000433359: mov esi, dword ptr [rsi]; mov dword ptr [rdi], esi; mov dword ptr [rdi + rdx - 4], ecx; ret; 
0x000000000043630a: mov esi, dword ptr [rsi]; mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x000000000043333b: mov esi, dword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x00000000004362f7: mov esi, dword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000043336d: mov esi, dword ptr [rsi]; mov word ptr [rdi], si; mov word ptr [rdi + rdx - 2], cx; ret; 
0x00000000004012c7: mov esi, dword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000041fe9e: mov esi, dword ptr [rsp + 0x18]; add rsp, 8; mov rdi, rbp; pop rbx; pop rbp; jmp rax; 
0x000000000041e819: mov esi, dword ptr [rsp + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x00000000004455c6: mov esi, dword ptr [rsp + 0x18]; mov r9, r14; call rbx; 
0x000000000041f541: mov esi, dword ptr [rsp + 0x28]; mov rdi, rbp; call rax; 
0x00000000004484c4: mov esi, dword ptr [rsp + 0x30]; mov rdi, qword ptr [rsp + 0x28]; call rbx; 
0x000000000044a343: mov esi, dword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000041eb41: mov esi, dword ptr [rsp + 0x48]; call rax; 
0x00000000004276e1: mov esi, dword ptr [rsp - 8]; and edx, 0x7f; jne 0x272a6; mov rax, rdi; ret; 
0x0000000000473107: mov esi, dword ptr fs:[rdx]; syscall; 
0x00000000004545cc: mov esi, eax; mov qword ptr [rbp - 0x4a8], r8; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000454de3: mov esi, eax; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000046d3c2: mov esi, eax; mov rdi, rbx; call qword ptr [rdx + 0x30]; 
0x000000000044faba: mov esi, eax; mov rdx, r9; mov rdi, r13; xor eax, eax; syscall; 
0x00000000004005d7: mov esi, eax; repe cmpsb byte ptr [rsi], byte ptr [rdi]; jne 0x5de; ret; 
0x0000000000413027: mov esi, ebp; mov eax, r13d; syscall; 
0x000000000045ec8f: mov esi, ebp; mov rax, qword ptr [rcx + 0xd8]; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000045f5fb: mov esi, ebp; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000040e85f: mov esi, ebp; mov rdi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x30]; lea r15, qword ptr [rbx + r14]; call rax; 
0x000000000046be26: mov esi, ebp; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000044091e: mov esi, ebp; mov rdi, r12; mov eax, 9; syscall; 
0x00000000004123c4: mov esi, ebp; mov rdi, r14; mov eax, r9d; syscall; 
0x000000000043f67e: mov esi, ebp; mov rdi, r8; mov eax, r9d; syscall; 
0x000000000046b5c0: mov esi, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000412ed4: mov esi, ebp; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000413802: mov esi, ebp; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000044189c: mov esi, ebx; call 0x40a10; mov edx, 4; mov esi, 2; mov rdi, r15; call rbx; 
0x0000000000441877: mov esi, ebx; call 0x40a10; mov rdi, r15; mov edx, 4; mov esi, 1; call rbx; 
0x0000000000440aef: mov esi, ebx; call 0x40aa0; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000440b30: mov esi, ebx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x000000000048c8b6: mov esi, ebx; mov edi, dword ptr [rip + 0x241106]; call rax; 
0x000000000045705e: mov esi, ebx; mov qword ptr [rbp - 0x4f0], r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000041213e: mov esi, ebx; mov rdi, r12; mov eax, r9d; syscall; 
0x000000000046cb41: mov esi, ebx; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000421c47: mov esi, ebx; mov rdi, rax; call rcx; 
0x000000000045412b: mov esi, ebx; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004157b9: mov esi, ecx; jbe 0x15755; movzx eax, byte ptr [rdx]; pop rbx; ret; 
0x000000000047d873: mov esi, ecx; je 0x7d88c; mov qword ptr [rbp - 0xa8], rdx; mov edi, 0x6cc140; call rax; 
0x00000000004042c9: mov esi, ecx; mov rdi, r12; mov eax, r10d; syscall; 
0x000000000049d4ea: mov esi, edi; mov edi, 1; jmp rax; 
0x000000000045dc0b: mov esi, edi; mov rdi, qword ptr [rbp - 0x4a0]; call rax; 
0x000000000045398b: mov esi, edi; mov rdi, rbx; call rax; 
0x0000000000460637: mov esi, edi; sar rax, 2; mov rdi, r14; mov rdx, rax; mov rax, qword ptr [r14 + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000043fd8c: mov esi, edx; mov eax, 4; syscall; 
0x000000000043fddb: mov esi, edx; mov eax, 5; syscall; 
0x000000000047373c: mov esi, edx; mov eax, 6; syscall; 
0x000000000044faef: mov esi, edx; mov rdi, r13; mov eax, r8d; syscall; 
0x000000000046fced: mov esi, esi; lea rdx, qword ptr [rsp + 0x48]; mov rdi, r12; call rbx; 
0x0000000000442c78: mov esi, esi; mov qword ptr [rsp], rax; mov rdx, rax; mov eax, r12d; syscall; 
0x0000000000442cbd: mov esi, esi; mov rdi, qword ptr [rsp + 8]; xor eax, eax; syscall; 
0x000000000046fb72: mov esi, esi; mov rdi, r12; mov r9, r15; call rbx; 
0x00000000004133f1: mov esi, esi; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x0000000000410924: mov esi, esi; mov rdi, rbx; sub rdx, r14; call qword ptr [rax + 0x70]; 
0x00000000004105b3: mov esi, esp; call qword ptr [rax + 0x38]; 
0x000000000046bf05: mov esi, esp; cmovne rbp, rdx; mov rdi, rbx; mov rdx, rbp; call qword ptr [rax + 0x58]; 
0x00000000004983e4: mov esi, esp; mov edi, ebp; call qword ptr [rbx]; 
0x00000000004983a4: mov esi, esp; mov edi, ebp; call rax; 
0x000000000045efe1: mov esi, esp; mov rax, qword ptr [rcx + 0xd8]; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000045ea88: mov esi, esp; mov rax, qword ptr [rdi + 0xd8]; mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x00000000004500ba: mov esi, esp; mov rdi, r14; call 0x409b0; movsxd rdi, r15d; mov eax, 3; syscall; 
0x0000000000420fe5: mov esi, esp; mov rdi, rax; pop rbx; pop rbp; pop r12; jmp rcx; 
0x000000000049a150: mov esi, esp; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x000000000046bf35: mov esi, esp; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000413ea1: mov esi, esp; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000042015e: mov esi, esp; mov rdi, rbx; call rax; 
0x0000000000420d0a: mov esi, esp; pop rbp; pop r12; jmp rax; 
0x0000000000420545: mov esi, esp; pop rbx; pop rbp; pop r12; jmp rax; 
0x00000000004557ec: mov esi, esp; sub rcx, r12; mov rdi, rbx; mov rdx, rcx; mov qword ptr [rbp - 0x4b0], rcx; call qword ptr [rax + 0x38]; 
0x000000000047d2cb: mov esi, esp; syscall; 
0x000000000043c2b5: mov esp, 0x1d8d4cd2; adc al, byte ptr [rdi + 0x63490006]; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bcba: mov esp, 0x1d8d4cd2; lea ecx, dword ptr [rsi + rax + 0xc634900]; xchg eax, ebx; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000004c163c: mov esp, 0x20000025; cmc; call qword ptr [rdx]; 
0x0000000000421fcc: mov esp, 0x2ab6; add al, byte ptr [rax]; add byte ptr [rbp + 7], dh; lea rax, qword ptr [rip + 3]; ret; 
0x0000000000426ae1: mov esp, 0x448d48c0; cmp al, dh; ret; 
0x0000000000426b11: mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x0000000000426b01: mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x000000000042fec4: mov esp, 0x4e6f0ff3; mov esp, 0xf66bcb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000444dd8: mov esp, 0x5b002861; ret; 
0x00000000004c823c: mov esp, 0x80000091; xchg eax, ecx; sti; call qword ptr [rax]; 
0x00000000004686c9: mov esp, 0x8348fffb; clc; adc byte ptr [rax - 0x77], cl; ret 0x860f; 
0x000000000043c8c0: mov esp, 0xa8000000; jne 0x3c990; lea rax, qword ptr [rdi + 7]; ret; 
0x0000000000421dd4: mov esp, 0xbac0; add byte ptr [rax], al; lea rax, qword ptr [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000004a419d: mov esp, 0xbde6fff8; clc; jmp qword ptr [rsi - 0x42]; 
0x00000000004b2b18: mov esp, 0xbe000005; add eax, 0x5c00000; add byte ptr [rax], al; ret 5; 
0x00000000004bfc3c: mov esp, 0xc000000b; cmc; hlt; call qword ptr [rbx]; 
0x00000000004268ab: mov esp, 0xc22948c0; jbe 0x26b60; add rax, rdi; add rax, rcx; ret; 
0x0000000000426b21: mov esp, 0xc22948c0; jbe 0x26b60; add rax, rdi; ret; 
0x0000000000426b31: mov esp, 0xc22948c0; jbe 0x26b60; lea rax, qword ptr [rdi + rax + 0x10]; ret; 
0x0000000000426b41: mov esp, 0xc22948c0; jbe 0x26b60; lea rax, qword ptr [rdi + rax + 0x20]; ret; 
0x0000000000426b51: mov esp, 0xc22948c0; jbe 0x26b60; lea rax, qword ptr [rdi + rax + 0x30]; ret; 
0x00000000004244c3: mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x0000000000425cf2: mov esp, 0xd32949d2; jbe 0x25d04; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000416d61: mov esp, 0xd8838b48; add byte ptr [rax], al; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000042fec9: mov esp, 0xf66bcb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d70b: mov esp, 0xf80148c0; add rax, rcx; ret; 
0x0000000000426af1: mov esp, 0xf80148c0; ret; 
0x000000000049d1a2: mov esp, dword ptr [rbp - 0x20]; mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000413de8: mov esp, dword ptr [rbp]; mov dword ptr [rdi], eax; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x48]; 
0x00000000004813aa: mov esp, eax; mov rbp, r9; nop; jmp rdx; 
0x000000000049d24e: mov esp, ecx; ret; 
0x0000000000403cf9: mov esp, ecx; sub rsp, 0x48; test rax, rax; je 0x3d0b; mov edi, 0x6cd0a0; call rax; 
0x0000000000440a24: mov esp, edx; mov rbp, rax; call rax; 
0x0000000000415e54: mov esp, esi; push rbx; mov rax, qword ptr [rdi + 0xd8]; mov rbx, rdi; mov rbp, rdx; call qword ptr [rax + 0x60]; 
0x000000000044fab4: mov fs, word ptr [rdi + 0x48000000]; mov esi, eax; mov rdx, r9; mov rdi, r13; xor eax, eax; syscall; 
0x000000000042d5ce: mov qword ptr [r10 + 0x18], r8; pop rbx; pop rbp; pop r12; ret; 
0x000000000049abab: mov qword ptr [r10], r8; add rsp, 8; ret; 
0x000000000044eccd: mov qword ptr [r12], rax; mov rax, qword ptr [rbp*8 + 0x4a6e00]; test rax, rax; je 0x4ece0; call rax; 
0x000000000044e715: mov qword ptr [r14*8 + 0x6cc9c0], rbx; test rax, rax; je 0x4e724; call rax; 
0x000000000046c3cd: mov qword ptr [r8 + 0x30], rsi; cmovne eax, edx; mov dword ptr [rbx + 0x74], eax; add rsp, 0x20; pop rbx; ret; 
0x0000000000450511: mov qword ptr [r8 + 0x90], rdx; add rsp, 0xd0; ret; 
0x0000000000410226: mov qword ptr [r8 + 8], r9; add dword ptr [r8 + 4], 1; mov rax, qword ptr [rdx + 0xd8]; mov rbx, rdx; mov rdi, rdx; call qword ptr [rax + 0x60]; 
0x0000000000436300: mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000417ee1: mov qword ptr [r9], rdx; mov rax, rdx; add rsp, 8; ret; 
0x000000000044387d: mov qword ptr [rax + 0x10], 0x443830; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000411572: mov qword ptr [rax + 0x10], r9; push rdi; push qword ptr [rax + 0x38]; mov rdi, rbp; lea r8, qword ptr [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x000000000046c348: mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000046c388: mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000413170: mov qword ptr [rax + 0x130], 0x4a29c0; mov rax, qword ptr [rbp + 0xd8]; call qword ptr [rax + 0x40]; 
0x000000000046d2e8: mov qword ptr [rax + 0x18], rdx; mov dword ptr [rbx], ecx; xor eax, eax; pop rbx; ret; 
0x000000000046d2e4: mov qword ptr [rax + 0x28], rdx; mov qword ptr [rax + 0x18], rdx; mov dword ptr [rbx], ecx; xor eax, eax; pop rbx; ret; 
0x000000000046d1e4: mov qword ptr [rax + 0x38], r12; mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x000000000046c34c: mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000046c993: mov qword ptr [rax + 0x40], rdx; mov rdx, rdi; jbe 0x6c907; mov eax, dword ptr [rsi]; pop rbx; ret; 
0x000000000046d386: mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x000000000046d37e: mov qword ptr [rax + 0x50], 0; mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x000000000046c33d: mov qword ptr [rax + 8], rcx; mov rcx, qword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000046c381: mov qword ptr [rax + 8], rdx; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000443885: mov qword ptr [rax + 8], rdx; ret; 
0x000000000048c9fc: mov qword ptr [rax], 0; mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000048131d: mov qword ptr [rax], 0x6ccac0; add rsp, 0x48; ret; 
0x000000000048c913: mov qword ptr [rax], 0x6ccae0; add rsp, 8; ret; 
0x000000000047c16e: mov qword ptr [rax], rcx; add rsp, 0x140; mov eax, ebx; pop rbx; ret; 
0x000000000046c874: mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; pop rbx; ret; 
0x000000000048c9b4: mov qword ptr [rax], rdi; pop rbx; ret; 
0x000000000046c7b4: mov qword ptr [rax], rdx; mov eax, dword ptr [rsi]; pop rbx; ret; 
0x000000000046c345: mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000046c385: mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000400a5d: mov qword ptr [rax], rdx; nop; leave; ret; 
0x000000000048c9a8: mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000049d0ce: mov qword ptr [rbp + 8], rax; add rsp, 0x278; mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000460cad: mov qword ptr [rbp - 0x1078], r11; mov dword ptr [rbp - 0x1080], r9d; mov rsi, qword ptr [rbp - 0x1088]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000461561: mov qword ptr [rbp - 0x1080], rcx; mov rsi, qword ptr [rbp - 0x1090]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000460b90: mov qword ptr [rbp - 0x10a0], r11; mov rsi, qword ptr [rbp - 0x1088]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000442eaa: mov qword ptr [rbp - 0x40], r12; mov esi, 0x80000; mov edi, 0x4a58bd; mov eax, ebx; syscall; 
0x0000000000442db9: mov qword ptr [rbp - 0x40], r12; syscall; 
0x0000000000454123: mov qword ptr [rbp - 0x480], rcx; mov rsi, r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000442ea6: mov qword ptr [rbp - 0x48], r12; mov qword ptr [rbp - 0x40], r12; mov esi, 0x80000; mov edi, 0x4a58bd; mov eax, ebx; syscall; 
0x0000000000442db5: mov qword ptr [rbp - 0x48], r12; mov qword ptr [rbp - 0x40], r12; syscall; 
0x00000000004545ce: mov qword ptr [rbp - 0x4a8], r8; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004557f7: mov qword ptr [rbp - 0x4b0], rcx; call qword ptr [rax + 0x38]; 
0x0000000000456a00: mov qword ptr [rbp - 0x4d0], r10; mov rsi, r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000455e61: mov qword ptr [rbp - 0x4d0], rcx; mov rdx, rax; mov rax, qword ptr [rbx + 0xd8]; mov dword ptr [rbp - 0x4d8], r9d; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004562ee: mov qword ptr [rbp - 0x4d8], r8; mov rdi, rbx; mov rsi, qword ptr [rbp - 0x4e0]; mov dword ptr [rbp - 0x4d0], r9d; mov rdx, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000455ba7: mov qword ptr [rbp - 0x4e8], rsi; jmp rax; 
0x0000000000455d0b: mov qword ptr [rbp - 0x4f0], r11; mov dword ptr [rbp - 0x500], r9d; mov rdi, rbx; mov rsi, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000457060: mov qword ptr [rbp - 0x4f0], r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000457056: mov qword ptr [rbp - 0x500], r10; mov rsi, r11; mov qword ptr [rbp - 0x4f0], r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000445f8a: mov qword ptr [rbp - 0x58], rax; call 0x80f20; mov rdi, r12; mov rax, qword ptr [rbp - 0x58]; call rax; 
0x0000000000403b51: mov qword ptr [rbp - 0x88], rcx; mov edi, 0x6cd060; call rax; 
0x0000000000403b4a: mov qword ptr [rbp - 0x90], r8; mov qword ptr [rbp - 0x88], rcx; mov edi, 0x6cd060; call rax; 
0x000000000047b160: mov qword ptr [rbp - 0xa8], r10; call rax; 
0x000000000047d877: mov qword ptr [rbp - 0xa8], rdx; mov edi, 0x6cc140; call rax; 
0x000000000047b349: mov qword ptr [rbp - 0xa8], rsi; call rax; 
0x00000000004793d5: mov qword ptr [rbp - 0xb8], r9; mov edi, 0x6cc140; call rax; 
0x000000000045a60e: mov qword ptr [rbp - 0xb8], rcx; mov rdi, rbx; call rax; 
0x0000000000403495: mov qword ptr [rbp - 0xc0], rax; mov eax, 0; test rax, rax; je 0x34ad; mov edi, 0x6cd060; call rax; 
0x000000000047a91f: mov qword ptr [rbp - 0xc8], r10; call rax; 
0x000000000047b342: mov qword ptr [rbp - 0xc8], r10; mov qword ptr [rbp - 0xa8], rsi; call rax; 
0x000000000047b159: mov qword ptr [rbp - 0xc8], r11; mov qword ptr [rbp - 0xa8], r10; call rax; 
0x0000000000479702: mov qword ptr [rbp - 0xc8], r9; mov edi, 0x6cc140; call rax; 
0x000000000047a918: mov qword ptr [rbp - 0xd0], r11; mov qword ptr [rbp - 0xc8], r10; call rax; 
0x00000000004796fb: mov qword ptr [rbp - 0xd0], r8; mov qword ptr [rbp - 0xc8], r9; mov edi, 0x6cc140; call rax; 
0x000000000047aa50: mov qword ptr [rbp - 0xd0], rsi; mov qword ptr [rbp - 0xc8], r10; call rax; 
0x000000000047b33b: mov qword ptr [rbp - 0xe0], r11; mov qword ptr [rbp - 0xc8], r10; mov qword ptr [rbp - 0xa8], rsi; call rax; 
0x000000000047aa49: mov qword ptr [rbp - 0xf8], r11; mov qword ptr [rbp - 0xd0], rsi; mov qword ptr [rbp - 0xc8], r10; call rax; 
0x00000000004009e6: mov qword ptr [rbp - 8], rax; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000416e4c: mov qword ptr [rbp], rax; mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000492c52: mov qword ptr [rbp], rax; mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048a120: mov qword ptr [rbp], rbx; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000044e0a0: mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000480fe4: mov qword ptr [rbx + 0x10], rax; add rsp, 0x30; pop rbx; ret; 
0x0000000000412636: mov qword ptr [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret; 
0x000000000048101d: mov qword ptr [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000047d21e: mov qword ptr [rbx + 0x10], rax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000412e38: mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x000000000043f46c: mov qword ptr [rbx + 0x10], rdx; je 0x3f449; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004127e5: mov qword ptr [rbx + 0x10], rsi; mov qword ptr [rbx + 0x30], rsi; mov qword ptr [rbx + 0x28], rsi; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x0000000000415ecc: mov qword ptr [rbx + 0x18], 0; pop rbx; pop rbp; pop r12; ret; 
0x000000000048c657: mov qword ptr [rbx + 0x18], rax; mov dword ptr [rbx + 4], 1; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000041262e: mov qword ptr [rbx + 0x18], rax; mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000480f82: mov qword ptr [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000049a394: mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x00000000004127e1: mov qword ptr [rbx + 0x18], rsi; mov qword ptr [rbx + 0x10], rsi; mov qword ptr [rbx + 0x30], rsi; mov qword ptr [rbx + 0x28], rsi; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x0000000000415652: mov qword ptr [rbx + 0x20], rax; mov dword ptr [rbx], edx; xor eax, eax; pop rbx; ret; 
0x00000000004969c2: mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x00000000004127f1: mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x00000000004127ed: mov qword ptr [rbx + 0x28], rsi; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x000000000041564e: mov qword ptr [rbx + 0x30], rax; mov qword ptr [rbx + 0x20], rax; mov dword ptr [rbx], edx; xor eax, eax; pop rbx; ret; 
0x00000000004127e9: mov qword ptr [rbx + 0x30], rsi; mov qword ptr [rbx + 0x28], rsi; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x0000000000412dbc: mov qword ptr [rbx + 0x38], 0; mov eax, 3; movsxd rdi, dword ptr [rbx + 0x70]; syscall; 
0x0000000000415a25: mov qword ptr [rbx + 0x38], rsi; cmovne eax, edx; mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x00000000004156cd: mov qword ptr [rbx + 0x50], 0; pop rbx; ret; 
0x0000000000416e50: mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004125c6: mov qword ptr [rbx + 0x90], rax; pop rbx; ret; 
0x0000000000412e2d: mov qword ptr [rbx + 0x90], rsi; mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x000000000049cabd: mov qword ptr [rbx + 0x98], rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000412134: mov qword ptr [rbx + 8], r8; mov edx, 1; mov rsi, rbx; mov rdi, r12; mov eax, r9d; syscall; 
0x0000000000412632: mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000412e34: mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x000000000047ccbd: mov qword ptr [rbx + 8], rax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000415984: mov qword ptr [rbx + 8], rax; movzx eax, byte ptr [rdx]; pop rbx; ret; 
0x00000000004157b4: mov qword ptr [rbx + 8], rdx; mov rsi, rcx; jbe 0x15755; movzx eax, byte ptr [rdx]; pop rbx; ret; 
0x0000000000415b1b: mov qword ptr [rbx + 8], rdx; movzx eax, byte ptr [rax]; pop rbx; ret; 
0x0000000000446362: mov qword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000047d522: mov qword ptr [rbx], 0; or dword ptr [rip + 0x24ec40], 1; pop rbx; ret; 
0x0000000000442cb5: mov qword ptr [rbx], r14; mov rdx, qword ptr [rsp]; mov rsi, r14; mov rdi, qword ptr [rsp + 8]; xor eax, eax; syscall; 
0x0000000000442c74: mov qword ptr [rbx], r14; mov rsi, r14; mov qword ptr [rsp], rax; mov rdx, rax; mov eax, r12d; syscall; 
0x0000000000498065: mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x000000000049a7d8: mov qword ptr [rbx], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000043f0c0: mov qword ptr [rbx], rsi; mov rax, qword ptr [rsp + 8]; add rsp, 0x10; pop rbx; ret; 
0x0000000000416229: mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000416221: mov qword ptr [rcx + 0x50], 0; mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x00000000004584ca: mov qword ptr [rcx + rdx*8], rax; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000049cf09: mov qword ptr [rcx], rdx; add rsp, 8; ret; 
0x0000000000450173: mov qword ptr [rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x000000000044f82f: mov qword ptr [rdi + 0x10], 0; mov rdi, qword ptr [rdi]; syscall; 
0x000000000048a9fe: mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000041560a: mov qword ptr [rdi + 0x10], rax; mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x000000000043c5dc: mov qword ptr [rdi + 0x10], rcx; lea rax, qword ptr [rdi + 0x17]; ret; 
0x000000000043c5fc: mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, qword ptr [rdi + 0x18]; ret; 
0x000000000043bf4c: mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000043bf2c: mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000043c63f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, qword ptr [rdi + 0x1a]; ret; 
0x000000000043bf8f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000043c65f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, qword ptr [rdi + 0x1b]; ret; 
0x000000000043bfaf: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000043c620: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, qword ptr [rdi + 0x19]; ret; 
0x000000000043bf70: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000004155e2: mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000041560e: mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x000000000047001c: mov qword ptr [rdi + 0x20], rcx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004798c6: mov qword ptr [rdi + 0x308], rax; ret; 
0x00000000004155de: mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000415612: mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x00000000004191ff: mov qword ptr [rdi + 0x58], rcx; mov dword ptr [rdi + 4], eax; ret; 
0x000000000049cf60: mov qword ptr [rdi + 0x98], rsi; ret; 
0x000000000041604b: mov qword ptr [rdi + 0xa0], -1; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000416056: mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000043c59c: mov qword ptr [rdi + 0xe], rcx; lea rax, qword ptr [rdi + 0x15]; ret; 
0x000000000043beec: mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000043c5bc: mov qword ptr [rdi + 0xf], rcx; lea rax, qword ptr [rdi + 0x16]; ret; 
0x000000000043bf0c: mov qword ptr [rdi + 0xf], rcx; ret; 
0x0000000000435e27: mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435db7: mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435d47: mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435cd7: mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043c49a: mov qword ptr [rdi + 5], rdx; lea rax, qword ptr [rdi + 0xc]; ret; 
0x0000000000435c67: mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043be3a: mov qword ptr [rdi + 5], rdx; ret; 
0x000000000043c4ba: mov qword ptr [rdi + 6], rdx; lea rax, qword ptr [rdi + 0xd]; ret; 
0x0000000000435bf7: mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043be4a: mov qword ptr [rdi + 6], rdx; ret; 
0x000000000043c4da: mov qword ptr [rdi + 7], rdx; lea rax, qword ptr [rdi + 0xe]; ret; 
0x0000000000435b87: mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043be5a: mov qword ptr [rdi + 7], rdx; ret; 
0x000000000048be7f: mov qword ptr [rdi + 8], r10; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x000000000048a303: mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000048a9f7: mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000048a983: mov qword ptr [rdi + 8], r9; ret; 
0x00000000004155e6: mov qword ptr [rdi + 8], rax; ret; 
0x00000000004165f2: mov qword ptr [rdi + 8], rdx; movzx eax, byte ptr [rax - 1]; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x000000000048af1c: mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000042728d: mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x000000000049cf18: mov qword ptr [rdi + rsi*8], rdx; add rsp, 8; ret; 
0x0000000000431f44: mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000431f82: mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000048a8ee: mov qword ptr [rdi - 0x10], r9; ret; 
0x00000000004320f7: mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004321f3: mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000043213f: mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004322c7: mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004324a7: mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432697: mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432868: mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432a68: mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432c68: mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000431f40: mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000431f7e: mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004320f3: mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004321ef: mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000043213b: mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004322c3: mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004324a3: mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432693: mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432864: mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432a64: mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432c64: mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000431f3c: mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000431f7a: mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004320ef: mov qword ptr [rdi - 0x21], r9; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004321eb: mov qword ptr [rdi - 0x21], r9; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000432137: mov qword ptr [rdi - 0x21], r9; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004322bf: mov qword ptr [rdi - 0x22], r9; mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043249f: mov qword ptr [rdi - 0x23], r9; mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043268f: mov qword ptr [rdi - 0x24], r9; mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432860: mov qword ptr [rdi - 0x25], r9; mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432a60: mov qword ptr [rdi - 0x26], r9; mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432c60: mov qword ptr [rdi - 0x27], r9; mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000431f38: mov qword ptr [rdi - 0x28], r8; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000431f76: mov qword ptr [rdi - 0x28], r8; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004322cb: mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435637: mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004324ab: mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004355b7: mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043269b: mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435537: mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043286c: mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004354a8: mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000432a6c: mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435418: mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000432c6c: mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435388: mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000048a8e7: mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000048a879: mov qword ptr [rdi - 8], r9; ret; 
0x0000000000431f48: mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000431f86: mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004320fb: mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004321f7: mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000432143: mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004356b7: mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000048a8e0: mov qword ptr [rdi], r11; shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000048a9f0: mov qword ptr [rdi], r11; shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000045d0e5: mov qword ptr [rdi], r13; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000048a873: mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x000000000048a97d: mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x000000000042d316: mov qword ptr [rdi], r9; pop rbx; ret; 
0x000000000048a848: mov qword ptr [rdi], r9; ret; 
0x000000000048bfa5: mov qword ptr [rdi], rax; mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000047cc27: mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x259797]; mov qword ptr [rsi], rax; ret; 
0x000000000043c426: mov qword ptr [rdi], rcx; lea rax, qword ptr [rdi + 8]; ret; 
0x000000000043c456: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, qword ptr [rdi + 0xa]; ret; 
0x000000000043be16: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000043c476: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, qword ptr [rdi + 0xb]; ret; 
0x000000000043be26: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000043c497: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, qword ptr [rdi + 0xc]; ret; 
0x000000000043be37: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x000000000043c4b7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, qword ptr [rdi + 0xd]; ret; 
0x000000000043be47: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000043c4d7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, qword ptr [rdi + 0xe]; ret; 
0x000000000043be57: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x000000000042728a: mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x000000000043c437: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, qword ptr [rdi + 9]; ret; 
0x000000000043be07: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000400597: mov qword ptr [rdi], rcx; ret; 
0x000000000043c413: mov qword ptr [rdi], rdx; lea rax, qword ptr [rdi + 7]; ret; 
0x0000000000435e93: mov qword ptr [rdi], rdx; ret; 
0x000000000048beec: mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000004362fd: mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000043333d: mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x000000000048bf12: mov qword ptr [rdi], rsi; ret; 
0x00000000004126a2: mov qword ptr [rdx + 0x130], 0x4a2900; pop rbx; ret; 
0x000000000043b9ba: mov qword ptr [rdx + 5], rax; lea rax, qword ptr [rdx + 0xc]; ret; 
0x000000000043a1aa: mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000043b9da: mov qword ptr [rdx + 6], rax; lea rax, qword ptr [rdx + 0xd]; ret; 
0x000000000043a1ca: mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000043b9fa: mov qword ptr [rdx + 7], rax; lea rax, qword ptr [rdx + 0xe]; ret; 
0x000000000043a1ea: mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000043b88a: mov qword ptr [rdx + 8], rax; lea rax, qword ptr [rdx + 0xf]; ret; 
0x000000000043a0da: mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x000000000043b833: mov qword ptr [rdx], rax; lea rax, qword ptr [rdx + 7]; ret; 
0x000000000043b933: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, qword ptr [rdx + 8]; ret; 
0x000000000043a163: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000043b953: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, qword ptr [rdx + 9]; ret; 
0x000000000043a173: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000043b973: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, qword ptr [rdx + 0xa]; ret; 
0x000000000043a183: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000043b993: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, qword ptr [rdx + 0xb]; ret; 
0x000000000043a193: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x000000000043b9b3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, qword ptr [rdx + 0xc]; ret; 
0x000000000043a1a3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000043b9d3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, qword ptr [rdx + 0xd]; ret; 
0x000000000043a1c3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000043b9f3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, qword ptr [rdx + 0xe]; ret; 
0x000000000043a1e3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000043b883: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, qword ptr [rdx + 0xf]; ret; 
0x000000000043a0d3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x000000000043a083: mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000048c994: mov qword ptr [rdx], rax; pop rbx; ret; 
0x0000000000416f11: mov qword ptr [rdx], rax; ret; 
0x000000000046c695: mov qword ptr [rdx], rcx; mov edx, dword ptr [rax]; mov eax, edx; pop rbx; ret; 
0x00000000004a0b55: mov qword ptr [rip + 0x22cbb0], 0; add rsp, 8; ret; 
0x000000000049f86e: mov qword ptr [rip + 0x22dd0b], rbx; jne 0x9f858; pop rbx; ret; 
0x000000000049ed87: mov qword ptr [rip + 0x22efc2], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000049ec2f: mov qword ptr [rip + 0x22f11a], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000048c521: mov qword ptr [rip + 0x24149c], 0x6cd9e0; add rsp, 8; ret; 
0x0000000000480bd8: mov qword ptr [rip + 0x24cdbd], 0; add rsp, 8; ret; 
0x000000000047cae8: mov qword ptr [rip + 0x2598e1], rax; add rsp, 8; ret; 
0x0000000000479d77: mov qword ptr [rip + 0x25c642], rcx; test byte ptr [rax + 0x314], 4; jne 0x79d98; or byte ptr [rdi + 0x315], 4; xor eax, eax; ret; 
0x000000000044d84a: mov qword ptr [rip + 0x27feab], 0; movsxd rdi, ebx; mov eax, 3; syscall; 
0x0000000000417334: mov qword ptr [rip + 0x2b6269], 0; ret; 
0x00000000004172c1: mov qword ptr [rip + 0x2b62e0], rdx; add dword ptr [rip + 0x2b62d5], 1; ret; 
0x0000000000401d19: mov qword ptr [rip + 0x2c9370], rax; xor eax, eax; ret; 
0x0000000000400704: mov qword ptr [rip + 0x2cb9a5], rax; pop rbp; pop r12; ret; 
0x0000000000400cc5: mov qword ptr [rip + 0x2cd6e4], rax; nop; leave; ret; 
0x0000000000475ac6: mov qword ptr [rsi + 0x10], rax; mov edi, 0x1002; mov eax, 0x9e; syscall; 
0x0000000000401bc6: mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000049ec36: mov qword ptr [rsi + 0x28], rax; ret; 
0x0000000000401bbb: mov qword ptr [rsi + 8], 0x6d63f0; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000476bf8: mov qword ptr [rsi], -1; xor eax, eax; ret; 
0x0000000000475ac3: mov qword ptr [rsi], rax; mov qword ptr [rsi + 0x10], rax; mov edi, 0x1002; mov eax, 0x9e; syscall; 
0x000000000047cc31: mov qword ptr [rsi], rax; ret; 
0x0000000000450168: mov qword ptr [rsi], rcx; mov rcx, -0x18; mov qword ptr fs:[rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000401bc3: mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000049ab05: mov qword ptr [rsp + 0x10], 0; call 0x9a7e0; add rsp, 0x28; ret; 
0x000000000041bfea: mov qword ptr [rsp + 0x10], r10; call rax; 
0x00000000004114b8: mov qword ptr [rsp + 0x10], r10; lea r8, qword ptr [rsp + 0x30]; lea rsi, qword ptr [rsp + 0x20]; call qword ptr [rbx + 8]; 
0x000000000041c09c: mov qword ptr [rsp + 0x10], rax; mov qword ptr [rsp + 8], r8; mov qword ptr [rsp], rcx; call rdx; 
0x000000000041bfe5: mov qword ptr [rsp + 0x18], r8; mov qword ptr [rsp + 0x10], r10; call rax; 
0x000000000040fc2d: mov qword ptr [rsp + 0x18], rax; call 0x11f00; add rsp, 0xd8; ret; 
0x000000000040fb9c: mov qword ptr [rsp + 0x18], rax; call 0x55730; add rsp, 0xd8; ret; 
0x000000000047c870: mov qword ptr [rsp + 0x18], rax; call 0x7c1e0; add rsp, 0xd8; ret; 
0x000000000048c10d: mov qword ptr [rsp + 0x18], rax; call 0x8c120; add rsp, 0xd8; ret; 
0x0000000000411447: mov qword ptr [rsp + 0x20], rax; call qword ptr [rbx + 0x30]; 
0x00000000004110be: mov qword ptr [rsp + 8], r14; mov qword ptr [rsp], rax; mov rbx, qword ptr [r15 + 0x98]; mov rdi, rbx; call qword ptr [rbx + 0x20]; 
0x000000000041c0a1: mov qword ptr [rsp + 8], r8; mov qword ptr [rsp], rcx; call rdx; 
0x0000000000440f23: mov qword ptr [rsp + 8], rax; call 0x40aa0; mov rax, qword ptr [rsp + 8]; mov rdi, qword ptr [rax]; mov qword ptr [rsp + 8], rax; call rbx; 
0x0000000000440f35: mov qword ptr [rsp + 8], rax; call rbx; 
0x0000000000442be8: mov qword ptr [rsp + 8], rax; mov rdi, rax; sub rdx, rsi; mov eax, r12d; syscall; 
0x000000000044014d: mov qword ptr [rsp + 8], rdi; mov rdi, qword ptr [rsp + 8]; mov eax, 0x4f; syscall; 
0x000000000049a3b6: mov qword ptr [rsp + 8], rsi; je 0x9a3c4; mov edi, 0x6cc140; call rax; 
0x0000000000480c2d: mov qword ptr [rsp + 8], rsi; mov edi, 0x6cc140; call rax; 
0x000000000043ff5f: mov qword ptr [rsp - 0x40], rax; je 0x3ff80; movsxd rsi, esi; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x000000000048c03e: mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000478581: mov qword ptr [rsp], r8; lea rdi, qword ptr [rax + 0x6cc1e0]; call rdx; 
0x000000000043fea6: mov qword ptr [rsp], rax; mov eax, 0; syscall; 
0x00000000004739b6: mov qword ptr [rsp], rax; mov eax, 0x14; syscall; 
0x000000000043ff06: mov qword ptr [rsp], rax; mov eax, 1; syscall; 
0x000000000043fe46: mov qword ptr [rsp], rax; mov eax, 2; syscall; 
0x0000000000473826: mov qword ptr [rsp], rax; mov eax, 3; syscall; 
0x00000000004110c3: mov qword ptr [rsp], rax; mov rbx, qword ptr [r15 + 0x98]; mov rdi, rbx; call qword ptr [rbx + 0x20]; 
0x0000000000442c7a: mov qword ptr [rsp], rax; mov rdx, rax; mov eax, r12d; syscall; 
0x000000000041c0a6: mov qword ptr [rsp], rcx; call rdx; 
0x0000000000444a9f: mov qword ptr [rsp], rcx; je 0x44aac; mov edi, 0x6cc140; call rax; 
0x000000000049a3b2: mov qword ptr [rsp], rdi; mov qword ptr [rsp + 8], rsi; je 0x9a3c4; mov edi, 0x6cc140; call rax; 
0x0000000000417ee0: mov qword ptr fs:[r9], rdx; mov rax, rdx; add rsp, 8; ret; 
0x0000000000450172: mov qword ptr fs:[rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x000000000045017d: mov qword ptr fs:[rdx], rax; ret; 
0x0000000000450167: mov qword ptr fs:[rsi], rcx; mov rcx, -0x18; mov qword ptr fs:[rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x000000000043333c: mov qword ptr ss:[rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x0000000000401bc5: mov qword ptr ss:[rsi + 0x10], rsi; syscall; 
0x000000000049c092: mov r10, qword ptr [rsp + rax*8 + 0x30]; ja 0x9be60; movzx r11d, r11b; movsxd rax, dword ptr [r8 + r11*4]; add rax, r8; jmp rax; 
0x0000000000443250: mov r10, rcx; mov eax, 0x19; syscall; 
0x0000000000443250: mov r10, rcx; mov eax, 0x19; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x00000000004505a0: mov r10d, 8; movsxd rdi, edi; mov eax, 0xe; syscall; 
0x0000000000450420: mov r10d, 8; movsxd rdi, edi; mov eax, ecx; syscall; 
0x0000000000432090: mov r11, qword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432074: mov r11, qword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000480eec: mov r11, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000480e7a: mov r11, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x50; jmp qword ptr [rax]; 
0x000000000049d1a1: mov r12, qword ptr [rbp - 0x20]; mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000403cf8: mov r12, rcx; sub rsp, 0x48; test rax, rax; je 0x3d0b; mov edi, 0x6cd0a0; call rax; 
0x0000000000415e53: mov r12, rsi; push rbx; mov rax, qword ptr [rdi + 0xd8]; mov rbx, rdi; mov rbp, rdx; call qword ptr [rax + 0x60]; 
0x0000000000413de7: mov r12d, dword ptr [rbp]; mov dword ptr [rdi], eax; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x48]; 
0x0000000000413de6: mov r12d, dword ptr fs:[rbp]; mov dword ptr [rdi], eax; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x48]; 
0x0000000000440a23: mov r12d, edx; mov rbp, rax; call rax; 
0x00000000004038db: mov r13, qword ptr [rax + 0x28]; mov eax, 0; test rax, rax; je 0x38fa; mov edi, 0x6ccfe0; call rax; 
0x000000000049d1a5: mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049d23d: mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x0000000000403974: mov r13, rcx; test rax, rax; je 0x3731; mov edi, 0x6ccfe0; call rax; 
0x000000000044f8df: mov r13d, 1; mov eax, 3; syscall; 
0x00000000004413c8: mov r13d, ebx; mov rax, qword ptr [rbp - 0x48]; call rax; 
0x000000000049d1a9: mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049d241: mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x00000000004276e0: mov r14, qword ptr [rsp - 8]; and edx, 0x7f; jne 0x272a6; mov rax, rdi; ret; 
0x000000000047d872: mov r14, r9; je 0x7d88c; mov qword ptr [rbp - 0xa8], rdx; mov edi, 0x6cc140; call rax; 
0x000000000044f8d9: mov r14d, 1; mov r13d, 1; mov eax, 3; syscall; 
0x000000000049d1ad: mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049d245: mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000047a26f: mov r15, qword ptr [rbx]; mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r12]; call rax; 
0x00000000004813a3: mov r15, qword ptr [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x00000000004040eb: mov r15, rax; je 0x42a5; movsxd rdi, r12d; mov eax, 3; syscall; 
0x0000000000460159: mov r15, rax; mov rax, qword ptr [r14 + 0xd8]; sar r15, 2; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x00000000004bccd0: mov r15d, 0x3ca045d6; stosb byte ptr [rdi], al; xchg esp, edi; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000047d86f: mov r15d, r8d; mov r14, r9; je 0x7d88c; mov qword ptr [rbp - 0xa8], rdx; mov edi, 0x6cc140; call rax; 
0x000000000049aba8: mov r8, qword ptr [r8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x000000000049ac88: mov r8, qword ptr [rax]; lea rax, qword ptr [rax + 8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x000000000049cc13: mov r8, r12; mov rcx, rbp; mov rdx, qword ptr [rbp]; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000452e5c: mov r8, rax; add r8, rbx; add rsp, 0x20; mov rax, r8; pop rbx; ret; 
0x000000000049cb2f: mov r8, rbx; mov rcx, r12; or esi, 2; mov rdx, qword ptr [r12]; mov edi, 1; call rax; 
0x000000000049d15d: mov r8, rbx; mov rcx, r13; mov rdx, qword ptr [r13]; mov esi, 1; mov edi, 1; call rax; 
0x000000000047cab0: mov r8, rcx; lea rdx, qword ptr [rsi + 4]; cmp rdx, r8; jne 0x7ca5b; mov eax, dword ptr [rsi + 4]; ret; 
0x0000000000481065: mov r8b, 0xff; inc dword ptr [rbp + 0x481b75c0]; cmp dword ptr [rsp + 0x28], 0; jne 0x81080; add rsp, 0x38; ret; 
0x000000000047f6be: mov r8b, byte ptr [rcx]; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000440089: mov r8d, eax; mov esi, 7; movsxd rdi, ebx; mov eax, 0x48; syscall; 
0x0000000000410776: mov r9, qword ptr [rax + 0x10]; lea r8, qword ptr [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x000000000044a33d: mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x00000000004484be: mov r9, qword ptr [rsp + 0x38]; mov rsi, qword ptr [rsp + 0x30]; mov rdi, qword ptr [rsp + 0x28]; call rbx; 
0x00000000004455ca: mov r9, r14; call rbx; 
0x000000000046fb77: mov r9, r15; call rbx; 
0x0000000000421d79: mov r9d, 0x4002a; add byte ptr [rax], al; je 0x21d8a; lea rax, qword ptr [rip + 0x1a966]; ret; 
0x00000000004501b0: mov rax, -0x10; add rax, qword ptr fs:[0]; ret; 
0x00000000004501d0: mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x00000000004501f0: mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x0000000000414ba0: mov rax, -0x30; cmp dword ptr fs:[rax], 0x1d; je 0x14b49; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000473698: mov rax, -0x30; mov dword ptr fs:[rax], 0x14; add rsp, 0x90; xor eax, eax; pop rbx; ret; 
0x0000000000473088: mov rax, -0x30; mov dword ptr fs:[rax], 0x14; movsxd rdi, ebx; mov eax, 3; syscall; 
0x000000000043fdb8: mov rax, -0x30; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000049a068: mov rax, -0x30; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x000000000044e7a0: mov rax, -0x30; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000473978: mov rax, -0x30; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000041d4e0: mov rax, -0x30; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x00000000004730b0: mov rax, -0x30; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x0000000000410c55: mov rax, -0x30; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000450548: mov rax, -0x30; neg edx; mov dword ptr fs:[rax], edx; mov eax, 0xffffffff; add rsp, 0xd0; ret; 
0x0000000000400478: mov rax, -0x30; neg r9d; mov dword ptr fs:[rax], r9d; mov rdi, r8; mov eax, 3; syscall; 
0x0000000000414aa0: mov rax, -0x30; or ecx, 0x20; mov dword ptr [rdi], ecx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000411857: mov rax, -0x30; or edx, 0x20; mov dword ptr [rdi], edx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000047d540: mov rax, -0x30; pop rbx; mov eax, dword ptr fs:[rax]; ret; 
0x0000000000450190: mov rax, -0x48; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000043fd63: mov rax, -1; cmove rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000046f64b: mov rax, -1; pop rbx; pop rbp; pop r12; ret; 
0x00000000004125d0: mov rax, -1; pop rbx; ret; 
0x0000000000413642: mov rax, -1; ret; 
0x0000000000450330: mov rax, 0xf; syscall; 
0x000000000046f080: mov rax, 1; ret; 
0x000000000046f090: mov rax, 2; ret; 
0x000000000046f0a0: mov rax, 3; ret; 
0x000000000046f0b0: mov rax, 4; ret; 
0x000000000046f0c0: mov rax, 5; ret; 
0x000000000046f0d0: mov rax, 6; ret; 
0x000000000046f0e0: mov rax, 7; ret; 
0x0000000000481351: mov rax, qword ptr [0]; add rax, -8; ret; 
0x000000000046be18: mov rax, qword ptr [r12 + 0xd8]; mov edx, 0x10; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000046be4c: mov rax, qword ptr [r12 + 0xd8]; movsxd rdx, ebx; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000046cb3a: mov rax, qword ptr [r13 + 0xd8]; mov esi, ebx; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x000000000040f1d4: mov rax, qword ptr [r13 + rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000047ea54: mov rax, qword ptr [r13]; add rax, qword ptr [rdx + 8]; call rax; 
0x0000000000460643: mov rax, qword ptr [r14 + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000046015c: mov rax, qword ptr [r14 + 0xd8]; sar r15, 2; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000044e70d: mov rax, qword ptr [r14*8 + 0x4a6e00]; mov qword ptr [r14*8 + 0x6cc9c0], rbx; test rax, rax; je 0x4e724; call rax; 
0x000000000046d1f0: mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x000000000046d308: mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000046d170: mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x000000000046c880: mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000041166b: mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000046bf2a: mov rax, qword ptr [rax + 0x130]; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x000000000046c6cb: mov rax, qword ptr [rax + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x000000000041570b: mov rax, qword ptr [rax + 0x18]; jmp rax; 
0x0000000000411672: mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x00000000004158e7: mov rax, qword ptr [rax + 0x28]; jmp rax; 
0x000000000045a607: mov rax, qword ptr [rax + 0x38]; mov rdx, rcx; mov qword ptr [rbp - 0xb8], rcx; mov rdi, rbx; call rax; 
0x0000000000415c07: mov rax, qword ptr [rax + 0x40]; jmp rax; 
0x000000000049a012: mov rax, qword ptr [rax + 0x48]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000415f2b: mov rax, qword ptr [rax + 0x48]; jmp rax; 
0x000000000046d733: mov rax, qword ptr [rax + 0x4c]; ret; 
0x00000000004110ba: mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsp + 8], r14; mov qword ptr [rsp], rax; mov rbx, qword ptr [r15 + 0x98]; mov rdi, rbx; call qword ptr [rbx + 0x20]; 
0x0000000000450257: mov rax, qword ptr [rax + 0x58]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000041143f: mov rax, qword ptr [rax + 0x60]; sar r8, 2; mov qword ptr [rsp + 0x20], rax; call qword ptr [rbx + 0x30]; 
0x0000000000410fc7: mov rax, qword ptr [rax + 0x70]; jne 0x10fd4; mov rdx, qword ptr [r15 + 0x40]; sub rdx, rsi; mov rdi, r15; call rax; 
0x0000000000412be9: mov rax, qword ptr [rax + 0x70]; jne 0x12bf6; mov rdx, qword ptr [rbx + 0x40]; sub rdx, rsi; mov rdi, rbx; call rax; 
0x0000000000498afc: mov rax, qword ptr [rax + 8]; add rax, qword ptr [rbx]; call rax; 
0x0000000000498399: mov rax, qword ptr [rax + 8]; add rax, qword ptr [rbx]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000480e00: mov rax, qword ptr [rax + 8]; ret; 
0x0000000000480e10: mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x000000000045dbf8: mov rax, qword ptr [rax + r11*8]; mov byte ptr [rbp - 0x514], r9b; mov byte ptr [rbp - 0x500], r8b; mov rsi, r15; mov rdi, qword ptr [rbp - 0x4a0]; call rax; 
0x0000000000453978: mov rax, qword ptr [rax + r11*8]; mov dword ptr [rbp - 0x4d4], r9d; mov byte ptr [rbp - 0x4d0], r8b; mov rsi, r15; mov rdi, rbx; call rax; 
0x000000000045019e: mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000400d53: mov rax, qword ptr [rax*8 + 0x4a1ca8]; jmp rax; 
0x0000000000455f81: mov rax, qword ptr [rax*8 + 0x4b3a20]; jmp rax; 
0x0000000000455fd2: mov rax, qword ptr [rax*8 + 0x4b3b20]; jmp rax; 
0x00000000004580c2: mov rax, qword ptr [rax*8 + 0x4b3c20]; jmp rax; 
0x0000000000456bf5: mov rax, qword ptr [rax*8 + 0x4b3f20]; jmp rax; 
0x0000000000460dd0: mov rax, qword ptr [rax*8 + 0x4b43a0]; jmp rax; 
0x00000000004620f4: mov rax, qword ptr [rax*8 + 0x4b44a0]; jmp rax; 
0x00000000004625d8: mov rax, qword ptr [rax*8 + 0x4b45a0]; jmp rax; 
0x0000000000460e66: mov rax, qword ptr [rax*8 + 0x4b48a0]; jmp rax; 
0x000000000049cea5: mov rax, qword ptr [rax]; add rsp, 8; ret; 
0x000000000045019b: mov rax, qword ptr [rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000045024d: mov rax, qword ptr [rax]; mov rdx, -0x20; mov rax, qword ptr [rax + 0x58]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x00000000004810fb: mov rax, qword ptr [rax]; mov rdx, qword ptr [rsp + 0x38]; add rax, qword ptr [rdx + 8]; add rsp, 0x48; ret; 
0x0000000000413169: mov rax, qword ptr [rbp + 0xa0]; mov qword ptr [rax + 0x130], 0x4a29c0; mov rax, qword ptr [rbp + 0xd8]; call qword ptr [rax + 0x40]; 
0x000000000041317b: mov rax, qword ptr [rbp + 0xd8]; call qword ptr [rax + 0x40]; 
0x000000000046d0f9: mov rax, qword ptr [rbp + 0xd8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000046b7eb: mov rax, qword ptr [rbp + 0xd8]; mov rdx, rbx; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x0000000000400a59: mov rax, qword ptr [rbp - 0x10]; mov qword ptr [rax], rdx; nop; leave; ret; 
0x00000000004413cb: mov rax, qword ptr [rbp - 0x48]; call rax; 
0x0000000000445f96: mov rax, qword ptr [rbp - 0x58]; call rax; 
0x0000000000400b6d: mov rax, qword ptr [rbp - 8]; mov qword ptr [rax], rdx; nop; leave; ret; 
0x00000000004009ea: mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000044ecd1: mov rax, qword ptr [rbp*8 + 0x4a6e00]; test rax, rax; je 0x4ece0; call rax; 
0x000000000047b151: mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; mov qword ptr [rbp - 0xc8], r11; mov qword ptr [rbp - 0xa8], r10; call rax; 
0x000000000047a910: mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; mov qword ptr [rbp - 0xd0], r11; mov qword ptr [rbp - 0xc8], r10; call rax; 
0x000000000047a710: mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r15]; call rax; 
0x000000000047a272: mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r12]; call rax; 
0x000000000048c9f8: mov rax, qword ptr [rbx + 0x18]; mov qword ptr [rax], 0; mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000048c9b0: mov rax, qword ptr [rbx + 0x18]; mov qword ptr [rax], rdi; pop rbx; ret; 
0x000000000048c9a0: mov rax, qword ptr [rbx + 0x18]; mov rdx, qword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000411660: mov rax, qword ptr [rbx + 0xa0]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000413b3e: mov rax, qword ptr [rbx + 0xd8]; call qword ptr [rax + 0x20]; 
0x0000000000455e6b: mov rax, qword ptr [rbx + 0xd8]; mov dword ptr [rbp - 0x4d8], r9d; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000049a146: mov rax, qword ptr [rbx + 0xd8]; mov ecx, ebp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x00000000004137a0: mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004136f8: mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; mov rbp, r12; call qword ptr [rax + 0x18]; 
0x000000000041397f: mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x00000000004165aa: mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x0000000000415a87: mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x000000000041576c: mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x00000000004158dc: mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x28]; jmp rax; 
0x0000000000454dd8: mov rax, qword ptr [rbx + 0xd8]; mov rdx, r12; mov rsi, r8; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000046b5b5: mov rax, qword ptr [rbx + 0xd8]; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000412ec9: mov rax, qword ptr [rbx + 0xd8]; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000453e3b: mov rax, qword ptr [rbx + 0xd8]; mov rdx, r13; mov rsi, qword ptr [rbp - 0x4a8]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004137f7: mov rax, qword ptr [rbx + 0xd8]; mov rdx, r14; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000413e96: mov rax, qword ptr [rbx + 0xd8]; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x00000000004564b0: mov rax, qword ptr [rbx + 0xd8]; mov rsi, qword ptr [rbp - 0x4e0]; mov rdi, rbx; mov rdx, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x00000000004133e9: mov rax, qword ptr [rbx + 0xd8]; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x000000000041091c: mov rax, qword ptr [rbx + 0xd8]; mov rsi, r14; mov rdi, rbx; sub rdx, r14; call qword ptr [rax + 0x70]; 
0x00000000004583b0: mov rax, qword ptr [rbx + 0xd8]; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004138ed: mov rax, qword ptr [rbx + 0xd8]; or esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004539fa: mov rax, qword ptr [rbx + 0xd8]; sub rdx, rsi; call qword ptr [rax + 0x38]; 
0x0000000000414f5e: mov rax, qword ptr [rbx + 0xd8]; xor edx, edx; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x000000000040ff90: mov rax, qword ptr [rbx + 0xd8]; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x0000000000412819: mov rax, qword ptr [rbx + 8]; movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000045ec91: mov rax, qword ptr [rcx + 0xd8]; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000043b9b6: mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, qword ptr [rdx + 0xc]; ret; 
0x000000000043a1a6: mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000043b9d6: mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, qword ptr [rdx + 0xd]; ret; 
0x000000000043a1c6: mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000043b9f6: mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, qword ptr [rdx + 0xe]; ret; 
0x000000000043a1e6: mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000043b886: mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, qword ptr [rdx + 0xf]; ret; 
0x000000000043a0d6: mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x000000000047d17a: mov rax, qword ptr [rcx + rax]; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000043b830: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, qword ptr [rdx + 7]; ret; 
0x000000000043b930: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, qword ptr [rdx + 8]; ret; 
0x000000000043a160: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000043b950: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, qword ptr [rdx + 9]; ret; 
0x000000000043a170: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000043b970: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, qword ptr [rdx + 0xa]; ret; 
0x000000000043a180: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000043b990: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, qword ptr [rdx + 0xb]; ret; 
0x000000000043a190: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x000000000043b9b0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, qword ptr [rdx + 0xc]; ret; 
0x000000000043a1a0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000043b9d0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, qword ptr [rdx + 0xd]; ret; 
0x000000000043a1c0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000043b9f0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, qword ptr [rdx + 0xe]; ret; 
0x000000000043a1e0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000043b880: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, qword ptr [rdx + 0xf]; ret; 
0x000000000043a0d0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x000000000043a080: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000044fb91: mov rax, qword ptr [rdi + 0x20]; mov rbx, rdi; test rax, rax; je 0x4fb9f; call rax; 
0x00000000004a12d7: mov rax, qword ptr [rdi + 0x20]; test rax, rax; je 0xa12e7; call rax; 
0x0000000000417a60: mov rax, qword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000046d730: mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x00000000004155da: mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000417250: mov rax, qword ptr [rdi + 0x68]; ret; 
0x00000000004135d0: mov rax, qword ptr [rdi + 0x90]; add rsp, 8; pop rbx; pop rbp; sub rax, rdx; ret; 
0x000000000049ceb0: mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000049cf30: mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000046d1b0: mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x6d1c0; ret; 
0x000000000049cf70: mov rax, qword ptr [rdi + 0xa0]; ret; 
0x000000000049cfd0: mov rax, qword ptr [rdi + 0xa8]; ret; 
0x000000000049cfc0: mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000049cf80: mov rax, qword ptr [rdi + 0xb8]; ret; 
0x000000000049cf40: mov rax, qword ptr [rdi + 0xc0]; shr rax, 0x3f; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000452f55: mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x0000000000413ded: mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x48]; 
0x0000000000415f20: mov rax, qword ptr [rdi + 0xd8]; mov ecx, edx; xor edx, edx; mov rax, qword ptr [rax + 0x48]; jmp rax; 
0x0000000000410bf5: mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000416600: mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x30]; 
0x0000000000415704: mov rax, qword ptr [rdi + 0xd8]; mov rax, qword ptr [rax + 0x18]; jmp rax; 
0x0000000000415c00: mov rax, qword ptr [rdi + 0xd8]; mov rax, qword ptr [rax + 0x40]; jmp rax; 
0x0000000000415e57: mov rax, qword ptr [rdi + 0xd8]; mov rbx, rdi; mov rbp, rdx; call qword ptr [rax + 0x60]; 
0x000000000045ea8a: mov rax, qword ptr [rdi + 0xd8]; mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x00000000004105a8: mov rax, qword ptr [rdi + 0xd8]; mov rdx, rbx; mov rsi, r12; call qword ptr [rax + 0x38]; 
0x0000000000415b00: mov rax, qword ptr [rdi + 0xd8]; push rbx; mov rbx, rdi; call qword ptr [rax + 0x20]; 
0x000000000045dc83: mov rax, qword ptr [rdi + 0xd8]; sub rdx, rsi; sar rdx, 2; call qword ptr [rax + 0x38]; 
0x0000000000413a90: mov rax, qword ptr [rdi + 8]; cmp rax, qword ptr [rdi + 0x10]; jae 0x13aa0; movzx eax, byte ptr [rax]; ret; 
0x0000000000417364: mov rax, qword ptr [rdi + 8]; cmp rax, rcx; jae 0x17390; movzx eax, byte ptr [rax]; ret; 
0x000000000049d4e0: mov rax, qword ptr [rdi + 8]; test rax, rax; je 0x9d4f8; mov rsi, rdi; mov edi, 1; jmp rax; 
0x0000000000430130: mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x305e3; xor eax, eax; ret; 
0x000000000042fba6: mov rax, qword ptr [rdi - 8]; mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x305e3; xor eax, eax; ret; 
0x000000000044e7bb: mov rax, qword ptr [rdi*8 + 0x6cca40]; ret; 
0x0000000000480d90: mov rax, qword ptr [rdi]; cmp rax, rsi; je 0x80da0; ret; 
0x0000000000416f0e: mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x000000000046d530: mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000041022f: mov rax, qword ptr [rdx + 0xd8]; mov rbx, rdx; mov rdi, rdx; call qword ptr [rax + 0x60]; 
0x000000000049ed80: mov rax, qword ptr [rip + 0x22efc9]; mov qword ptr [rip + 0x22efc2], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000049ec28: mov rax, qword ptr [rip + 0x22f121]; mov qword ptr [rip + 0x22f11a], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000047cc20: mov rax, qword ptr [rip + 0x24e469]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x259797]; mov qword ptr [rsi], rax; ret; 
0x000000000047cc2a: mov rax, qword ptr [rip + 0x259797]; mov qword ptr [rsi], rax; ret; 
0x000000000047cbc9: mov rax, qword ptr [rip + 0x259800]; ret; 
0x0000000000470a55: mov rax, qword ptr [rip + 0x265f7c]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044d670: mov rax, qword ptr [rip + 0x280089]; ret; 
0x0000000000446300: mov rax, qword ptr [rip + 0x290621]; ret; 
0x000000000041fa7e: mov rax, qword ptr [rip + 0x2adb6b]; test rax, rax; je 0x1fa8c; call rax; 
0x0000000000417230: mov rax, qword ptr [rip + 0x2b3e89]; ret; 
0x00000000004187fd: mov rax, qword ptr [rip + 0x2b4ddc]; test rax, rax; je 0x1880b; call rax; 
0x000000000049d7cb: mov rax, qword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x000000000049ad00: mov rax, qword ptr [rsi + 0xa8]; add rsp, 8; ret; 
0x000000000049acc7: mov rax, qword ptr [rsi + 0xb0]; add rsp, 8; ret; 
0x000000000049acf0: mov rax, qword ptr [rsi + 0xb8]; add rsp, 8; ret; 
0x0000000000416eb0: mov rax, qword ptr [rsi + 0xd8]; mov rdi, rbx; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000049d800: mov rax, qword ptr [rsi + 8]; add rsp, 8; ret; 
0x000000000049cfa5: mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x00000000004012cf: mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000004116fe: mov rax, qword ptr [rsp + 0x18]; lea r8, qword ptr [rsp + 0x20]; mov rdi, rax; call qword ptr [rax + 8]; 
0x0000000000447f99: mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004488fc: mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000040e866: mov rax, qword ptr [rsp + 0x30]; lea r15, qword ptr [rbx + r14]; call rax; 
0x000000000048121b: mov rax, qword ptr [rsp + 0x38]; add rsp, 0x68; ret; 
0x000000000043f0c3: mov rax, qword ptr [rsp + 8]; add rsp, 0x10; pop rbx; ret; 
0x000000000048c5cf: mov rax, qword ptr [rsp + 8]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000440f2d: mov rax, qword ptr [rsp + 8]; mov rdi, qword ptr [rax]; mov qword ptr [rsp + 8], rax; call rbx; 
0x0000000000440f3c: mov rax, qword ptr [rsp + 8]; mov rdi, rax; call 0x1ea60; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000481350: mov rax, qword ptr fs:[0]; add rax, -8; ret; 
0x000000000045019a: mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000417703: mov rax, r12; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004213f9: mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000046b81a: mov rax, r13; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000041d644: mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041d4d4: mov rax, r8; pop rbx; ret; 
0x0000000000433454: mov rax, r8; ret; 
0x0000000000473d45: mov rax, r9; ret; 
0x00000000004135a9: mov rax, rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000046be68: mov rax, rbp; pop rbp; pop r12; pop r13; ret; 
0x0000000000440a6a: mov rax, rbp; pop rbx; pop rbp; pop r12; mov esi, 2; jmp rax; 
0x000000000046be3b: mov rax, rbp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000047d3a1: mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000049d0d9: mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000413d1c: mov rax, rbx; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000047d817: mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041255e: mov rax, rbx; mov dword ptr [rbp], r12d; pop rbx; pop rbp; pop r12; ret; 
0x00000000004103c8: mov rax, rbx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004104ad: mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000044083d: mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000041263a: mov rax, rbx; pop rbx; ret; 
0x0000000000417260: mov rax, rdi; ret; 
0x000000000042041e: mov rax, rdx; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000049a33d: mov rax, rdx; add rsp, 0x28; ret; 
0x000000000048cb22: mov rax, rdx; add rsp, 0x38; ret; 
0x000000000043fe5d: mov rax, rdx; add rsp, 8; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x000000000041e777: mov rax, rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000417ee4: mov rax, rdx; add rsp, 8; ret; 
0x000000000047b24e: mov rax, rdx; call rax; 
0x000000000041f111: mov rax, rdx; pop rbx; pop rbp; pop r12; ret; 
0x00000000004182cb: mov rax, rdx; pop rbx; pop rbp; ret; 
0x000000000043ef77: mov rax, rdx; pop rbx; ret; 
0x0000000000427808: mov rax, rdx; ret; 
0x000000000043fd83: mov rax, rsi; ja 0x3fdb8; mov rdi, rax; mov rsi, rdx; mov eax, 4; syscall; 
0x0000000000473733: mov rax, rsi; ja 0x73768; mov rdi, rax; mov rsi, rdx; mov eax, 6; syscall; 
0x00000000004734e2: mov rax, rsi; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000049a167: mov rax, rsi; pop rbx; pop rbp; pop r12; ret; 
0x000000000040f353: mov rax, rsi; pop rbx; pop rbp; ret; 
0x0000000000452d53: mov rax, rsi; ret; 
0x000000000043e7aa: mov rax, rsi; sub rax, rdx; vzeroupper; ret; 
0x000000000047d3b7: mov rbp, -1; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000049d249: mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x00000000004106ee: mov rbp, qword ptr [rdi + 0x98]; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x0000000000401187: mov rbp, qword ptr [rip - 0xfb6]; mov ebx, 0x4001d8; jne 0x11b5; nop dword ptr [rax]; call qword ptr [rbx + 0x10]; 
0x0000000000413707: mov rbp, r12; call qword ptr [rax + 0x18]; 
0x00000000004813ac: mov rbp, r9; nop; jmp rdx; 
0x000000000040f162: mov rbp, rax; call qword ptr [rbp]; 
0x0000000000440a26: mov rbp, rax; call rax; 
0x000000000048c79e: mov rbp, rdi; push rbx; je 0x8c810; mov esi, 0x48c500; mov edi, 0x6cd9c0; call rax; 
0x000000000049f570: mov rbp, rdi; sub rsp, 0x40; test rax, rax; je 0x9f583; mov edi, 0x6cc100; call rax; 
0x00000000004417ce: mov rbp, rdi; xor edx, edx; xor esi, esi; mov rbx, rax; call rax; 
0x0000000000415e61: mov rbp, rdx; call qword ptr [rax + 0x60]; 
0x00000000004110c7: mov rbx, qword ptr [r15 + 0x98]; mov rdi, rbx; call qword ptr [rbx + 0x20]; 
0x000000000045ea80: mov rbx, qword ptr [rbp - 0x4d8]; mov rsi, r12; mov rax, qword ptr [rdi + 0xd8]; mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x00000000004417d5: mov rbx, rax; call rax; 
0x0000000000411651: mov rbx, rdi; call 0x13920; cmp eax, -1; jne 0x11660; pop rbx; ret; 
0x0000000000415b08: mov rbx, rdi; call qword ptr [rax + 0x20]; 
0x0000000000415e5e: mov rbx, rdi; mov rbp, rdx; call qword ptr [rax + 0x60]; 
0x000000000043f0ee: mov rbx, rdi; sub rsp, 0x18; test rax, rax; je 0x3f101; mov edi, 0x6cd720; call rax; 
0x000000000044fb95: mov rbx, rdi; test rax, rax; je 0x4fb9f; call rax; 
0x0000000000480c25: mov rbx, rdi; test rax, rax; je 0x80c3e; mov qword ptr [rsp + 8], rsi; mov edi, 0x6cc140; call rax; 
0x0000000000440a1e: mov rbx, rdi; xor esi, esi; mov r12d, edx; mov rbp, rax; call rax; 
0x0000000000410236: mov rbx, rdx; mov rdi, rdx; call qword ptr [rax + 0x60]; 
0x00000000004735b2: mov rbx, rsi; sub rsp, 8; syscall; 
0x000000000047992a: mov rbx, rsi; sub rsp, 8; test rax, rax; je 0x7993d; mov edi, 0x6cc100; call rax; 
0x000000000045016b: mov rcx, -0x18; mov qword ptr fs:[rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x000000000046c341: mov rcx, qword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000045ec84: mov rcx, qword ptr [rbp - 0x4a0]; mov rdx, r12; mov rsi, r13; mov rax, qword ptr [rcx + 0xd8]; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000045efd6: mov rcx, qword ptr [rbp - 0x4a0]; mov rdx, r13; mov rsi, r12; mov rax, qword ptr [rcx + 0xd8]; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x0000000000403b9f: mov rcx, qword ptr [rbp - 0x90]; je 0x3bcb; mov qword ptr [rbp - 0x90], r8; mov qword ptr [rbp - 0x88], rcx; mov edi, 0x6cd060; call rax; 
0x00000000004362f9: mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000049cf03: mov rcx, qword ptr [rdi + rsi*8]; jne 0x9cef3; mov qword ptr [rcx], rdx; add rsp, 8; ret; 
0x000000000049d5a8: mov rcx, qword ptr [rdx + 8]; mov edx, 1; sbb eax, eax; cmp qword ptr [rsi + 8], rcx; cmova eax, edx; ret; 
0x000000000043c5d4: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, qword ptr [rdi + 0x17]; ret; 
0x000000000043c5f4: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, qword ptr [rdi + 0x18]; ret; 
0x000000000043bf44: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000043bf24: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000043c594: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, qword ptr [rdi + 0x15]; ret; 
0x000000000043bee4: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000043c5b4: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, qword ptr [rdi + 0x16]; ret; 
0x000000000043bf04: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x0000000000433335: mov rcx, qword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x0000000000432434: mov rcx, qword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432450: mov rcx, qword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432614: mov rcx, qword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432630: mov rcx, qword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004327f4: mov rcx, qword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432810: mov rcx, qword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004329e4: mov rcx, qword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432a00: mov rcx, qword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432be4: mov rcx, qword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432c00: mov rcx, qword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432de4: mov rcx, qword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432e00: mov rcx, qword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fbaa: mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x305e3; xor eax, eax; ret; 
0x00000000004354a4: mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000435414: mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000435384: mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043012c: mov rcx, qword ptr [rsi - 8]; mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x305e3; xor eax, eax; ret; 
0x0000000000432254: mov rcx, qword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432270: mov rcx, qword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043c420: mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, qword ptr [rdi + 8]; ret; 
0x000000000043bdf0: mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x000000000043c430: mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, qword ptr [rdi + 9]; ret; 
0x000000000043be00: mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000043c450: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, qword ptr [rdi + 0xa]; ret; 
0x000000000043be10: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000043c470: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, qword ptr [rdi + 0xb]; ret; 
0x000000000043be20: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x0000000000435e24: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435db4: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435d44: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435cd4: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435c64: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435bf4: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435b84: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043c490: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, qword ptr [rdi + 0xc]; ret; 
0x000000000043be30: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x000000000043c4b0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, qword ptr [rdi + 0xd]; ret; 
0x000000000043be40: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000043c4d0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, qword ptr [rdi + 0xe]; ret; 
0x000000000043be50: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x00000000004114b3: mov rcx, qword ptr [rsp + 0x18]; mov qword ptr [rsp + 0x10], r10; lea r8, qword ptr [rsp + 0x30]; lea rsi, qword ptr [rsp + 0x20]; call qword ptr [rbx + 8]; 
0x000000000046fce4: mov rcx, qword ptr [rsp + 0x18]; xor r8d, r8d; mov rsi, r14; lea rdx, qword ptr [rsp + 0x48]; mov rdi, r12; call rbx; 
0x0000000000480ef6: mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000480e84: mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x50; jmp qword ptr [rax]; 
0x00000000004362f8: mov rcx, qword ptr ss:[rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000049cb32: mov rcx, r12; or esi, 2; mov rdx, qword ptr [r12]; mov edi, 1; call rax; 
0x00000000004455bd: mov rcx, r12; push 0; mov rdx, rbp; mov rsi, qword ptr [rsp + 0x18]; mov r9, r14; call rbx; 
0x000000000046da4c: mov rcx, r13; lea rdx, qword ptr [rbp - 0x40]; mov rdi, r15; xor r8d, r8d; call rbx; 
0x000000000049d160: mov rcx, r13; mov rdx, qword ptr [r13]; mov esi, 1; mov edi, 1; call rax; 
0x000000000046d797: mov rcx, r14; lea rsi, qword ptr [rbp + 0x50]; mov rdi, r12; lea rdx, qword ptr [rsp + 0x18]; lea r9, qword ptr [rsp + 0x10]; call rbx; 
0x000000000046d953: mov rcx, r14; lea rsi, qword ptr [rbp + 0x90]; mov rdi, r12; lea rdx, qword ptr [rsp + 0x18]; lea r9, qword ptr [rsp + 0x10]; call rbx; 
0x000000000046f8f4: mov rcx, r14; mov rdi, r12; lea rdx, qword ptr [rsp + 0x20]; lea r9, qword ptr [rsp + 0x28]; lea rsi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000046f7f4: mov rcx, r15; mov rdx, r13; mov rdi, r12; lea r9, qword ptr [rsp + 0x60]; lea rsi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000048bc9d: mov rcx, rax; lea r8, qword ptr [rsp + 0xf]; and r8, 0xfffffffffffffff0; call 0x8b0c0; leave; ret; 
0x000000000049cc16: mov rcx, rbp; mov rdx, qword ptr [rbp]; mov esi, 0xa; mov edi, 1; call rax; 
0x000000000046fb6b: mov rcx, rbp; mov rdx, r13; mov rsi, r14; mov rdi, r12; mov r9, r15; call rbx; 
0x0000000000433470: mov rcx, rdx; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000433473: mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000444d89: mov rcx, rsi; sub rcx, qword ptr [rdx + 0x10]; cmp rcx, qword ptr [rdx + 0x28]; jae 0x44d70; mov eax, 1; ret; 
0x0000000000440253: mov rdi, -0x64; mov eax, 0x101; syscall; 
0x0000000000440f7f: mov rdi, qword ptr [r12]; call rbx; 
0x0000000000440b89: mov rdi, qword ptr [r13]; call rbx; 
0x0000000000440af6: mov rdi, qword ptr [r14]; call rbx; 
0x0000000000440b37: mov rdi, qword ptr [r15]; call rbx; 
0x000000000040f1b5: mov rdi, qword ptr [rax + 0x20]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000440f32: mov rdi, qword ptr [rax]; mov qword ptr [rsp + 8], rax; call rbx; 
0x00000000004413c4: mov rdi, qword ptr [rbp - 0x40]; mov r13d, ebx; mov rax, qword ptr [rbp - 0x48]; call rax; 
0x000000000045dc0d: mov rdi, qword ptr [rbp - 0x4a0]; call rax; 
0x000000000045ea79: mov rdi, qword ptr [rbp - 0x4a0]; mov rbx, qword ptr [rbp - 0x4d8]; mov rsi, r12; mov rax, qword ptr [rdi + 0xd8]; mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x000000000045f5f0: mov rdi, qword ptr [rbp - 0x4a0]; mov rdx, r12; mov rsi, r13; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000047eeed: mov rdi, qword ptr [rbp - 0x88]; call rax; 
0x0000000000440cbe: mov rdi, qword ptr [rbp]; call rbx; 
0x000000000045d2f8: mov rdi, qword ptr [rdi + 0x218]; movsxd rbx, edx; mov rdx, rbx; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x0000000000452f48: mov rdi, qword ptr [rdi + 0xe0]; movsxd r12, edx; mov rdx, r12; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000049a410: mov rdi, qword ptr [rdi]; call 0x9aa60; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000049a38c: mov rdi, qword ptr [rdi]; call 0x9ab20; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x000000000044f837: mov rdi, qword ptr [rdi]; syscall; 
0x000000000049a32e: mov rdi, qword ptr [rsp + 0x10]; call 0x8c900; mov rdx, qword ptr [rsp + 0x10]; mov rax, rdx; add rsp, 0x28; ret; 
0x000000000044101e: mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000447f94: mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004488f7: mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000481337: mov rdi, qword ptr [rsp + 0x18]; call 0x1ea60; add rsp, 0x48; ret; 
0x000000000048cb13: mov rdi, qword ptr [rsp + 0x18]; call 0x8c900; mov rdx, qword ptr [rsp + 0x18]; mov rax, rdx; add rsp, 0x38; ret; 
0x0000000000448cdd: mov rdi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000040e861: mov rdi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x30]; lea r15, qword ptr [rbx + r14]; call rax; 
0x00000000004484c8: mov rdi, qword ptr [rsp + 0x28]; call rbx; 
0x000000000044a347: mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000044a787: mov rdi, qword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000449a6e: mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000043f0a6: mov rdi, qword ptr [rsp + 8]; call 0x46750; add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x0000000000440152: mov rdi, qword ptr [rsp + 8]; mov eax, 0x4f; syscall; 
0x0000000000442cbf: mov rdi, qword ptr [rsp + 8]; xor eax, eax; syscall; 
0x000000000049ead9: mov rdi, qword ptr [rsp]; mov rsi, qword ptr [r15 + rbp*8 + 0x10]; call rbx; 
0x0000000000442b01: mov rdi, r12; call 0x1ea60; mov rdi, qword ptr [rbp]; call rbx; 
0x000000000046be28: mov rdi, r12; call qword ptr [rax + 0x38]; 
0x00000000004417fa: mov rdi, r12; call rbx; 
0x000000000046f7fa: mov rdi, r12; lea r9, qword ptr [rsp + 0x60]; lea rsi, qword ptr [rsp + 0x30]; call rbx; 
0x0000000000415ba6: mov rdi, r12; lea rbx, qword ptr [r14 + 1]; call qword ptr [rax + 0x18]; 
0x000000000046d79e: mov rdi, r12; lea rdx, qword ptr [rsp + 0x18]; lea r9, qword ptr [rsp + 0x10]; call rbx; 
0x000000000046f8f7: mov rdi, r12; lea rdx, qword ptr [rsp + 0x20]; lea r9, qword ptr [rsp + 0x28]; lea rsi, qword ptr [rsp + 0x30]; call rbx; 
0x00000000004040a7: mov rdi, r12; mov eax, 3; syscall; 
0x0000000000440920: mov rdi, r12; mov eax, 9; syscall; 
0x00000000004042cb: mov rdi, r12; mov eax, r10d; syscall; 
0x0000000000412140: mov rdi, r12; mov eax, r9d; syscall; 
0x000000000046fb74: mov rdi, r12; mov r9, r15; call rbx; 
0x0000000000445f93: mov rdi, r12; mov rax, qword ptr [rbp - 0x58]; call rax; 
0x00000000004428af: mov rdi, r13; call 0x1ea60; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000440cb6: mov rdi, r13; call 0x1ea60; mov rdi, qword ptr [rbp]; call rbx; 
0x000000000046cb32: mov rdi, r13; call 0x6da80; mov rax, qword ptr [r13 + 0xd8]; mov esi, ebx; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x000000000046cb43: mov rdi, r13; call qword ptr [rax + 0x18]; 
0x000000000044181f: mov rdi, r13; call rbx; 
0x000000000044f9e0: mov rdi, r13; mov eax, r15d; syscall; 
0x000000000044faf1: mov rdi, r13; mov eax, r8d; syscall; 
0x000000000044fabf: mov rdi, r13; xor eax, eax; syscall; 
0x0000000000440b81: mov rdi, r14; call 0x1ea60; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004500bc: mov rdi, r14; call 0x409b0; movsxd rdi, r15d; mov eax, 3; syscall; 
0x0000000000460b9e: mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000441843: mov rdi, r14; call rbx; 
0x00000000004123c6: mov rdi, r14; mov eax, r9d; syscall; 
0x0000000000461314: mov rdi, r14; mov rdx, qword ptr [rbp - 0x10b8]; mov rsi, qword ptr [rbp - 0x1090]; call qword ptr [rax + 0x38]; 
0x000000000046063d: mov rdi, r14; mov rdx, rax; mov rax, qword ptr [r14 + 0xd8]; call qword ptr [rax + 0x38]; 
0x0000000000440b74: mov rdi, r15; call 0x1ea60; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000410fd4: mov rdi, r15; call rax; 
0x0000000000441863: mov rdi, r15; call rbx; 
0x000000000044187e: mov rdi, r15; mov edx, 4; mov esi, 1; call rbx; 
0x000000000046da53: mov rdi, r15; xor r8d, r8d; call rbx; 
0x0000000000400486: mov rdi, r8; mov eax, 3; syscall; 
0x0000000000400466: mov rdi, r8; mov eax, ebp; syscall; 
0x000000000043f680: mov rdi, r8; mov eax, r9d; syscall; 
0x000000000041b629: mov rdi, r9; mov eax, 3; syscall; 
0x000000000041b5fd: mov rdi, r9; mov eax, r8d; syscall; 
0x0000000000440f41: mov rdi, rax; call 0x1ea60; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000411708: mov rdi, rax; call qword ptr [rax + 8]; 
0x0000000000421c49: mov rdi, rax; call rcx; 
0x0000000000452d4c: mov rdi, rax; mov byte ptr [rsi], dl; jne 0x52d38; mov rax, rsi; ret; 
0x0000000000445f87: mov rdi, rax; mov qword ptr [rbp - 0x58], rax; call 0x80f20; mov rdi, r12; mov rax, qword ptr [rbp - 0x58]; call rax; 
0x000000000043fd88: mov rdi, rax; mov rsi, rdx; mov eax, 4; syscall; 
0x0000000000473738: mov rdi, rax; mov rsi, rdx; mov eax, 6; syscall; 
0x0000000000420fe7: mov rdi, rax; pop rbx; pop rbp; pop r12; jmp rcx; 
0x0000000000442bed: mov rdi, rax; sub rdx, rsi; mov eax, r12d; syscall; 
0x0000000000440f77: mov rdi, rbp; call 0x1ea60; mov rdi, qword ptr [r12]; call rbx; 
0x000000000046d17c: mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x000000000046d100: mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000046b7f5: mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x00000000004106f5: mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x000000000041f545: mov rdi, rbp; call rax; 
0x0000000000441d02: mov rdi, rbp; call rbx; 
0x000000000041157a: mov rdi, rbp; lea r8, qword ptr [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x0000000000410773: mov rdi, rbp; mov r9, qword ptr [rax + 0x10]; lea r8, qword ptr [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x0000000000410bf2: mov rdi, rbp; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000041fea6: mov rdi, rbp; pop rbx; pop rbp; jmp rax; 
0x000000000040ff99: mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x00000000004137ac: mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000413986: mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x0000000000413986: mov rdi, rbx; call qword ptr [rax + 0x20]; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x00000000004165b1: mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x0000000000453e4c: mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000412ed6: mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x000000000049a152: mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x0000000000414f69: mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000415a8e: mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x00000000004133f3: mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x0000000000413804: mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x00000000004110ce: mov rdi, rbx; call qword ptr [rbx + 0x20]; 
0x000000000046d3c4: mov rdi, rbx; call qword ptr [rdx + 0x30]; 
0x0000000000412bf6: mov rdi, rbx; call rax; 
0x000000000049f702: mov rdi, rbx; jne 0x9f6f0; pop rbx; ret; 
0x0000000000411437: mov rdi, rbx; lea rsi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rax + 0x60]; sar r8, 2; mov qword ptr [rsp + 0x20], rax; call qword ptr [rbx + 0x30]; 
0x00000000004003d2: mov rdi, rbx; mov eax, 1; syscall; 
0x00000000004004a2: mov rdi, rbx; mov eax, r10d; syscall; 
0x0000000000416eb7: mov rdi, rbx; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000046c6c8: mov rdi, rbx; mov rax, qword ptr [rax + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x000000000049a00f: mov rdi, rbx; mov rax, qword ptr [rax + 0x48]; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000004539f7: mov rdi, rbx; mov rax, qword ptr [rbx + 0xd8]; sub rdx, rsi; call qword ptr [rax + 0x38]; 
0x0000000000413704: mov rdi, rbx; mov rbp, r12; call qword ptr [rax + 0x18]; 
0x00000000004564be: mov rdi, rbx; mov rdx, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x000000000046bf0b: mov rdi, rbx; mov rdx, rbp; call qword ptr [rax + 0x58]; 
0x00000000004557f1: mov rdi, rbx; mov rdx, rcx; mov qword ptr [rbp - 0x4b0], rcx; call qword ptr [rax + 0x38]; 
0x00000000004562f5: mov rdi, rbx; mov rsi, qword ptr [rbp - 0x4e0]; mov dword ptr [rbp - 0x4d0], r9d; mov rdx, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000455d19: mov rdi, rbx; mov rsi, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000411667: mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000415773: mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x00000000004158e3: mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x28]; jmp rax; 
0x0000000000410926: mov rdi, rbx; sub rdx, r14; call qword ptr [rax + 0x70]; 
0x000000000045ec98: mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x0000000000410239: mov rdi, rdx; call qword ptr [rax + 0x60]; 
0x0000000000452dd0: mov rdi, rdx; mov byte ptr [rsi], al; jne 0x52db0; mov rax, rsi; ret; 
0x000000000043f4f0: mov rdi, rdx; mov eax, esi; syscall; 
0x000000000043f500: mov rdi, rdx; mov eax, r8d; syscall; 
0x0000000000450176: mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000450250: mov rdx, -0x20; mov rax, qword ptr [rax + 0x58]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000413d7d: mov rdx, -0x30; cmp dword ptr fs:[rdx], 0x1d; je 0x13d14; movsxd rdi, ebp; mov eax, 3; syscall; 
0x000000000047337d: mov rdx, -0x30; movsxd rdi, ebp; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x00000000004730f8: mov rdx, -0x30; movsxd rdi, ebx; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x0000000000412dd7: mov rdx, -0x30; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000040e3f0: mov rdx, -0x30; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000413636: mov rdx, -0x30; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000049cb38: mov rdx, qword ptr [r12]; mov edi, 1; call rax; 
0x000000000049d163: mov rdx, qword ptr [r13]; mov esi, 1; mov edi, 1; call rax; 
0x0000000000410fcd: mov rdx, qword ptr [r15 + 0x40]; sub rdx, rsi; mov rdi, r15; call rax; 
0x000000000049e8d8: mov rdx, qword ptr [r15]; mov rdi, rbp; call rbx; 
0x000000000040f1b1: mov rdx, qword ptr [rax + 0x18]; mov rdi, qword ptr [rax + 0x20]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000040f189: mov rdx, qword ptr [rax + 0x18]; mov rsi, qword ptr [rax + 0x20]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000416f3f: mov rdx, qword ptr [rax + 8]; jne 0x16f50; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000400bfa: mov rdx, qword ptr [rax]; mov rax, qword ptr [rbp - 0x10]; mov qword ptr [rax], rdx; nop; leave; ret; 
0x0000000000461317: mov rdx, qword ptr [rbp - 0x10b8]; mov rsi, qword ptr [rbp - 0x1090]; call qword ptr [rax + 0x38]; 
0x00000000004434a8: mov rdx, qword ptr [rbp - 0x20]; movsxd rcx, eax; cmp qword ptr [rdx + rcx*8 - 8], 1; sbb eax, 0; leave; ret; 
0x0000000000456306: mov rdx, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x000000000049cc19: mov rdx, qword ptr [rbp]; mov esi, 0xa; mov edi, 1; call rax; 
0x000000000048c990: mov rdx, qword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x0000000000410918: mov rdx, qword ptr [rbx + 0x40]; mov rax, qword ptr [rbx + 0xd8]; mov rsi, r14; mov rdi, rbx; sub rdx, r14; call qword ptr [rax + 0x70]; 
0x0000000000412bef: mov rdx, qword ptr [rbx + 0x40]; sub rdx, rsi; mov rdi, rbx; call rax; 
0x000000000046d3bb: mov rdx, qword ptr [rbx + 0xd8]; mov esi, eax; mov rdi, rbx; call qword ptr [rdx + 0x30]; 
0x00000000004155d6: mov rdx, qword ptr [rdi + 0x18]; mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000048c9a4: mov rdx, qword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000048ca03: mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000047b247: mov rdx, qword ptr [rdx + 8]; add rdx, qword ptr [rax]; mov rax, rdx; call rax; 
0x0000000000400c62: mov rdx, qword ptr [rdx]; mov qword ptr [rax], rdx; nop; leave; ret; 
0x000000000049caba: mov rdx, qword ptr [rdx]; mov qword ptr [rbx + 0x98], rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000049a593: mov rdx, qword ptr [rip + 0x23359e]; add word ptr [rdx + rax*2], 1; ret; 
0x00000000004012bf: mov rdx, qword ptr [rip + 0x2cc37a]; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000043bf84: mov rdx, qword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000043bfa4: mov rdx, qword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000435e20: mov rdx, qword ptr [rsi + 1]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435db0: mov rdx, qword ptr [rsi + 2]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435d40: mov rdx, qword ptr [rsi + 3]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435cd0: mov rdx, qword ptr [rsi + 4]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043c493: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, qword ptr [rdi + 0xc]; ret; 
0x000000000043be33: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000435c60: mov rdx, qword ptr [rsi + 5]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043c4b3: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, qword ptr [rdi + 0xd]; ret; 
0x000000000043be43: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x0000000000435bf0: mov rdx, qword ptr [rsi + 6]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043c4d3: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, qword ptr [rdi + 0xe]; ret; 
0x000000000043be53: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000435b80: mov rdx, qword ptr [rsi + 7]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435630: mov rdx, qword ptr [rsi - 0xa]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004355b0: mov rdx, qword ptr [rsi - 0xb]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000435530: mov rdx, qword ptr [rsi - 0xc]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004354a0: mov rdx, qword ptr [rsi - 0xd]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000435410: mov rdx, qword ptr [rsi - 0xe]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000435380: mov rdx, qword ptr [rsi - 0xf]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000432094: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004329e8: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432be8: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432de8: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432078: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432a04: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432c04: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432e04: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004320b0: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004356b0: mov rdx, qword ptr [rsi - 9]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043c410: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, qword ptr [rdi + 7]; ret; 
0x0000000000435e90: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000049a338: mov rdx, qword ptr [rsp + 0x10]; mov rax, rdx; add rsp, 0x28; ret; 
0x000000000048cb1d: mov rdx, qword ptr [rsp + 0x18]; mov rax, rdx; add rsp, 0x38; ret; 
0x00000000004810fe: mov rdx, qword ptr [rsp + 0x38]; add rax, qword ptr [rdx + 8]; add rsp, 0x48; ret; 
0x000000000045050c: mov rdx, qword ptr [rsp + 0x38]; mov qword ptr [r8 + 0x90], rdx; add rsp, 0xd0; ret; 
0x0000000000480ef1: mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000480e7f: mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x50; jmp qword ptr [rax]; 
0x000000000041ee60: mov rdx, qword ptr [rsp + 0x68]; call rax; 
0x0000000000420158: mov rdx, qword ptr [rsp + 0x68]; mov rsi, r12; mov rdi, rbx; call rax; 
0x0000000000442cb8: mov rdx, qword ptr [rsp]; mov rsi, r14; mov rdi, qword ptr [rsp + 8]; xor eax, eax; syscall; 
0x00000000004569fd: mov rdx, r10; mov qword ptr [rbp - 0x4d0], r10; mov rsi, r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000457053: mov rdx, r10; mov qword ptr [rbp - 0x500], r10; mov rsi, r11; mov qword ptr [rbp - 0x4f0], r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000460caa: mov rdx, r11; mov qword ptr [rbp - 0x1078], r11; mov dword ptr [rbp - 0x1080], r9d; mov rsi, qword ptr [rbp - 0x1088]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000460b8d: mov rdx, r11; mov qword ptr [rbp - 0x10a0], r11; mov rsi, qword ptr [rbp - 0x1088]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000455d08: mov rdx, r11; mov qword ptr [rbp - 0x4f0], r11; mov dword ptr [rbp - 0x500], r9d; mov rdi, rbx; mov rsi, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000452f52: mov rdx, r12; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000049ead6: mov rdx, r12; mov rdi, qword ptr [rsp]; mov rsi, qword ptr [r15 + rbp*8 + 0x10]; call rbx; 
0x000000000045ec8b: mov rdx, r12; mov rsi, r13; mov rax, qword ptr [rcx + 0xd8]; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000045f5f7: mov rdx, r12; mov rsi, r13; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x00000000004545c8: mov rdx, r12; mov rsi, r8; mov qword ptr [rbp - 0x4a8], r8; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000454ddf: mov rdx, r12; mov rsi, r8; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000046b5bc: mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000412ed0: mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x000000000046f7f7: mov rdx, r13; mov rdi, r12; lea r9, qword ptr [rsp + 0x60]; lea rsi, qword ptr [rsp + 0x30]; call rbx; 
0x0000000000453e42: mov rdx, r13; mov rsi, qword ptr [rbp - 0x4a8]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004983e0: mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x00000000004983a0: mov rdx, r13; mov rsi, r12; mov edi, ebp; call rax; 
0x000000000045efdd: mov rdx, r13; mov rsi, r12; mov rax, qword ptr [rcx + 0xd8]; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000046fb6e: mov rdx, r13; mov rsi, r14; mov rdi, r12; mov r9, r15; call rbx; 
0x00000000004137fe: mov rdx, r14; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000460167: mov rdx, r15; call qword ptr [rax + 0x38]; 
0x00000000004123c0: mov rdx, r8; mov rsi, r13; mov rdi, r14; mov eax, r9d; syscall; 
0x00000000004042c5: mov rdx, r8; mov rsi, r9; mov rdi, r12; mov eax, r10d; syscall; 
0x000000000044fabc: mov rdx, r9; mov rdi, r13; xor eax, eax; syscall; 
0x000000000044faeb: mov rdx, r9; mov rsi, r10; mov rdi, r13; mov eax, r8d; syscall; 
0x000000000048bcdb: mov rdx, rax; lea rcx, qword ptr [rsp + 0xf]; and rcx, 0xfffffffffffffff0; call 0x8b7a0; leave; ret; 
0x0000000000442c7e: mov rdx, rax; mov eax, r12d; syscall; 
0x0000000000460640: mov rdx, rax; mov rax, qword ptr [r14 + 0xd8]; call qword ptr [rax + 0x38]; 
0x0000000000455e68: mov rdx, rax; mov rax, qword ptr [rbx + 0xd8]; mov dword ptr [rbp - 0x4d8], r9d; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004133e6: mov rdx, rax; mov rax, qword ptr [rbx + 0xd8]; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x000000000043f694: mov rdx, rax; mov rdi, r8; mov eax, 3; syscall; 
0x000000000046bf0e: mov rdx, rbp; call qword ptr [rax + 0x58]; 
0x00000000004455c2: mov rdx, rbp; mov rsi, qword ptr [rsp + 0x18]; mov r9, r14; call rbx; 
0x000000000046bf31: mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000413e9d: mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000045ea91: mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x000000000045d302: mov rdx, rbx; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000046b7f2: mov rdx, rbx; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x00000000004105af: mov rdx, rbx; mov rsi, r12; call qword ptr [rax + 0x38]; 
0x000000000044091a: mov rdx, rbx; mov rsi, r13; mov rdi, r12; mov eax, 9; syscall; 
0x0000000000413023: mov rdx, rbx; mov rsi, rbp; mov eax, r13d; syscall; 
0x000000000044095a: mov rdx, rbx; or r10d, 0x40; xor edi, edi; mov eax, 9; movsxd r10, r10d; syscall; 
0x000000000048bcc4: mov rdx, rcx; jg 0x8bcd0; call 0x8b620; leave; ret; 
0x0000000000473790: mov rdx, rcx; mov eax, 0x106; syscall; 
0x000000000046155e: mov rdx, rcx; mov qword ptr [rbp - 0x1080], rcx; mov rsi, qword ptr [rbp - 0x1090]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000454120: mov rdx, rcx; mov qword ptr [rbp - 0x480], rcx; mov rsi, r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004557f4: mov rdx, rcx; mov qword ptr [rbp - 0x4b0], rcx; call qword ptr [rax + 0x38]; 
0x000000000045a60b: mov rdx, rcx; mov qword ptr [rbp - 0xb8], rcx; mov rdi, rbx; call rax; 
0x000000000046c997: mov rdx, rdi; jbe 0x6c907; mov eax, dword ptr [rsi]; pop rbx; ret; 
0x0000000000473895: mov rdx, rsp; syscall; 
0x000000000049e8d4: mov rsi, qword ptr [r14 + 8]; mov rdx, qword ptr [r15]; mov rdi, rbp; call rbx; 
0x000000000049eadd: mov rsi, qword ptr [r15 + rbp*8 + 0x10]; call rbx; 
0x000000000040f18d: mov rsi, qword ptr [rax + 0x20]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x00000000004413c1: mov rsi, qword ptr [rax]; mov rdi, qword ptr [rbp - 0x40]; mov r13d, ebx; mov rax, qword ptr [rbp - 0x48]; call rax; 
0x0000000000460b97: mov rsi, qword ptr [rbp - 0x1088]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000046131e: mov rsi, qword ptr [rbp - 0x1090]; call qword ptr [rax + 0x38]; 
0x0000000000461568: mov rsi, qword ptr [rbp - 0x1090]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000453e45: mov rsi, qword ptr [rbp - 0x4a8]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004562f8: mov rsi, qword ptr [rbp - 0x4e0]; mov dword ptr [rbp - 0x4d0], r9d; mov rdx, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x00000000004564b7: mov rsi, qword ptr [rbp - 0x4e0]; mov rdi, rbx; mov rdx, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000455d1c: mov rsi, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000442be5: mov rsi, qword ptr [rbx]; mov qword ptr [rsp + 8], rax; mov rdi, rax; sub rdx, rsi; mov eax, r12d; syscall; 
0x000000000044101b: mov rsi, qword ptr [rbx]; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000049a40c: mov rsi, qword ptr [rdi + 8]; mov rdi, qword ptr [rdi]; call 0x9aa60; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000049a388: mov rsi, qword ptr [rdi + 8]; mov rdi, qword ptr [rdi]; call 0x9ab20; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x000000000043333a: mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x00000000004362f6: mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x00000000004012c6: mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000041fe9d: mov rsi, qword ptr [rsp + 0x18]; add rsp, 8; mov rdi, rbp; pop rbx; pop rbp; jmp rax; 
0x000000000041e818: mov rsi, qword ptr [rsp + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x00000000004455c5: mov rsi, qword ptr [rsp + 0x18]; mov r9, r14; call rbx; 
0x000000000041f540: mov rsi, qword ptr [rsp + 0x28]; mov rdi, rbp; call rax; 
0x00000000004484c3: mov rsi, qword ptr [rsp + 0x30]; mov rdi, qword ptr [rsp + 0x28]; call rbx; 
0x000000000044a342: mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000041eb40: mov rsi, qword ptr [rsp + 0x48]; call rax; 
0x000000000044faee: mov rsi, r10; mov rdi, r13; mov eax, r8d; syscall; 
0x000000000045705d: mov rsi, r11; mov qword ptr [rbp - 0x4f0], r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000045412a: mov rsi, r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004105b2: mov rsi, r12; call qword ptr [rax + 0x38]; 
0x000000000046bf04: mov rsi, r12; cmovne rbp, rdx; mov rdi, rbx; mov rdx, rbp; call qword ptr [rax + 0x58]; 
0x00000000004983e3: mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x00000000004983a3: mov rsi, r12; mov edi, ebp; call rax; 
0x000000000045efe0: mov rsi, r12; mov rax, qword ptr [rcx + 0xd8]; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000045ea87: mov rsi, r12; mov rax, qword ptr [rdi + 0xd8]; mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x00000000004500b9: mov rsi, r12; mov rdi, r14; call 0x409b0; movsxd rdi, r15d; mov eax, 3; syscall; 
0x0000000000420fe4: mov rsi, r12; mov rdi, rax; pop rbx; pop rbp; pop r12; jmp rcx; 
0x000000000049a14f: mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x000000000046bf34: mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000413ea0: mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000042015d: mov rsi, r12; mov rdi, rbx; call rax; 
0x0000000000420d09: mov rsi, r12; pop rbp; pop r12; jmp rax; 
0x0000000000420544: mov rsi, r12; pop rbx; pop rbp; pop r12; jmp rax; 
0x00000000004557eb: mov rsi, r12; sub rcx, r12; mov rdi, rbx; mov rdx, rcx; mov qword ptr [rbp - 0x4b0], rcx; call qword ptr [rax + 0x38]; 
0x000000000045ec8e: mov rsi, r13; mov rax, qword ptr [rcx + 0xd8]; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000045f5fa: mov rsi, r13; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000046be25: mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000044091d: mov rsi, r13; mov rdi, r12; mov eax, 9; syscall; 
0x00000000004123c3: mov rsi, r13; mov rdi, r14; mov eax, r9d; syscall; 
0x0000000000413801: mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000046fcec: mov rsi, r14; lea rdx, qword ptr [rsp + 0x48]; mov rdi, r12; call rbx; 
0x0000000000442c77: mov rsi, r14; mov qword ptr [rsp], rax; mov rdx, rax; mov eax, r12d; syscall; 
0x0000000000442cbc: mov rsi, r14; mov rdi, qword ptr [rsp + 8]; xor eax, eax; syscall; 
0x000000000046fb71: mov rsi, r14; mov rdi, r12; mov r9, r15; call rbx; 
0x00000000004133f0: mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x0000000000410923: mov rsi, r14; mov rdi, rbx; sub rdx, r14; call qword ptr [rax + 0x70]; 
0x000000000045dc0a: mov rsi, r15; mov rdi, qword ptr [rbp - 0x4a0]; call rax; 
0x000000000045398a: mov rsi, r15; mov rdi, rbx; call rax; 
0x0000000000460636: mov rsi, r15; sar rax, 2; mov rdi, r14; mov rdx, rax; mov rax, qword ptr [r14 + 0xd8]; call qword ptr [rax + 0x38]; 
0x00000000004545cb: mov rsi, r8; mov qword ptr [rbp - 0x4a8], r8; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000454de2: mov rsi, r8; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004042c8: mov rsi, r9; mov rdi, r12; mov eax, r10d; syscall; 
0x000000000044fab9: mov rsi, rax; mov rdx, r9; mov rdi, r13; xor eax, eax; syscall; 
0x00000000004005d6: mov rsi, rax; repe cmpsb byte ptr [rsi], byte ptr [rdi]; jne 0x5de; ret; 
0x0000000000413026: mov rsi, rbp; mov eax, r13d; syscall; 
0x000000000040e85e: mov rsi, rbp; mov rdi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x30]; lea r15, qword ptr [rbx + r14]; call rax; 
0x000000000043f67d: mov rsi, rbp; mov rdi, r8; mov eax, r9d; syscall; 
0x000000000046b5bf: mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000412ed3: mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x000000000044189b: mov rsi, rbx; call 0x40a10; mov edx, 4; mov esi, 2; mov rdi, r15; call rbx; 
0x0000000000441876: mov rsi, rbx; call 0x40a10; mov rdi, r15; mov edx, 4; mov esi, 1; call rbx; 
0x0000000000440aee: mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000440b2f: mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x000000000048c8b5: mov rsi, rbx; mov edi, dword ptr [rip + 0x241106]; call rax; 
0x000000000041213d: mov rsi, rbx; mov rdi, r12; mov eax, r9d; syscall; 
0x0000000000421c46: mov rsi, rbx; mov rdi, rax; call rcx; 
0x00000000004157b8: mov rsi, rcx; jbe 0x15755; movzx eax, byte ptr [rdx]; pop rbx; ret; 
0x000000000049d4e9: mov rsi, rdi; mov edi, 1; jmp rax; 
0x000000000043fd8b: mov rsi, rdx; mov eax, 4; syscall; 
0x000000000043fdda: mov rsi, rdx; mov eax, 5; syscall; 
0x000000000047373b: mov rsi, rdx; mov eax, 6; syscall; 
0x000000000047d2ca: mov rsi, rsp; syscall; 
0x00000000004813a9: mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x000000000049d24d: mov rsp, rcx; ret; 
0x00000000004a41a4: mov si, 0xfff8; out 0xbe, al; clc; jmp qword ptr [rsi - 0x41]; 
0x000000000043631b: mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000043336c: mov si, word ptr [rsi]; mov word ptr [rdi], si; mov word ptr [rdi + rdx - 2], cx; ret; 
0x00000000004707f6: mov ss, eax; and eax, 0x3d894800; scasd eax, dword ptr [rdi]; ret 0x25; 
0x0000000000436325: mov word ptr [r9 - 2], cx; ret; 
0x00000000004bfd0c: mov word ptr [rax + rax], cs; add byte ptr [rax - 9], dl; hlt; call qword ptr [rdx]; 
0x0000000000443699: mov word ptr [rax + rcx*4], gs; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000042727d: mov word ptr [rax + rdx - 2], cx; ret; 
0x000000000043f648: mov word ptr [rax], es; add byte ptr [rax], al; xor esi, esi; mov eax, 2; syscall; 
0x00000000004c820c: mov word ptr [rcx - 0x6eb00000], ss; sti; call qword ptr [rdx]; 
0x000000000043c51c: mov word ptr [rdi + 0x10], cx; lea rax, qword ptr [rdi + 0x11]; ret; 
0x000000000043be8c: mov word ptr [rdi + 0x10], cx; ret; 
0x000000000043c624: mov word ptr [rdi + 0x18], cx; lea rax, qword ptr [rdi + 0x19]; ret; 
0x000000000043bf74: mov word ptr [rdi + 0x18], cx; ret; 
0x00000000004360c7: mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x000000000043c3e8: mov word ptr [rdi + 4], dx; lea rax, qword ptr [rdi + 5]; ret; 
0x000000000043bdc8: mov word ptr [rdi + 4], dx; ret; 
0x000000000043c43a: mov word ptr [rdi + 8], dx; lea rax, qword ptr [rdi + 9]; ret; 
0x000000000043be0a: mov word ptr [rdi + 8], dx; ret; 
0x0000000000433372: mov word ptr [rdi + rdx - 2], cx; ret; 
0x000000000043264c: mov word ptr [rdi - 2], cx; ret; 
0x0000000000432464: mov word ptr [rdi - 2], dx; ret; 
0x0000000000432648: mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000043c3b3: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, qword ptr [rdi + 2]; ret; 
0x000000000043bd93: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x000000000043e725: mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x00000000004360cb: mov word ptr [rdi], cx; ret; 
0x000000000043c3a3: mov word ptr [rdi], dx; lea rax, qword ptr [rdi + 1]; ret; 
0x0000000000436133: mov word ptr [rdi], dx; ret; 
0x000000000049a390: mov word ptr [rdi], es; add byte ptr [rax], al; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x0000000000436322: mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000043336f: mov word ptr [rdi], si; mov word ptr [rdi + rdx - 2], cx; ret; 
0x000000000043b908: mov word ptr [rdx + 4], ax; lea rax, qword ptr [rdx + 5]; ret; 
0x000000000043a148: mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x000000000043b8b3: mov word ptr [rdx], ax; lea rax, qword ptr [rdx + 1]; ret; 
0x000000000043b8c3: mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, qword ptr [rdx + 2]; ret; 
0x000000000043a113: mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x000000000043a103: mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x0000000000417c4e: mov word ptr [rdx], es; add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rax - 0x77]; ret; 
0x00000000004c2982: mov word ptr [rip + 0x3068345], es; mov byte ptr [rcx], al; ret; 
0x000000000043e728: mov word ptr [rsi - 2], cx; ret; 
0x000000000043bc7e: mov word ptr [rsi], es; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000004c9240: mov word ptr [rsi], es; add dword ptr [rdi], 3; test byte ptr [rcx], al; ret; 
0x00000000004c7670: mov word ptr [rsi], es; add qword ptr [r15], 3; mov bl, 2; ret; 
0x00000000004c92f0: mov word ptr [rsi], es; add qword ptr [rdi], 3; pop rbx; add cl, byte ptr [rdx]; ret; 
0x00000000004c170c: mov word ptr [rsi], fs; add byte ptr [rax], al; ret; 
0x00000000004c070c: mov word ptr [rsi], ss; add byte ptr [rax], al; shr byte ptr [rax], 1; cmc; call qword ptr [rax]; 
0x000000000048c079: mov word ptr [rsp - 0x10], si; mov dword ptr [rsp - 0x18], eax; shr rax, 0x20; mov dword ptr [rsp - 0x14], eax; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000450284: mov word ptr [rsp - 2], di; fldcw word ptr [rsp - 2]; ret; 
0x000000000043336e: mov word ptr ss:[rdi], si; mov word ptr [rdi + rdx - 2], cx; ret; 
0x00000000004bea6c: movabs al, byte ptr [0x18fffdc128fffdc1]; ret 0xfffd; 
0x00000000004be478: movabs al, byte ptr [0x20fffd5ae0fffd58]; pop rbp; std; jmp qword ptr [rax + 0x5f]; 
0x00000000004be488: movabs al, byte ptr [0x20fffd63e0fffd61]; std; jmp qword ptr [rax + 0x68]; 
0x000000000041b5d5: movabs al, byte ptr [0x2b8004a34]; syscall; 
0x0000000000427121: movabs al, byte ptr [0x2e283177400426f]; mov eax, 0x4336a0; mov edx, 0x430630; cmove rax, rdx; ret; 
0x000000000046d1b3: movabs al, byte ptr [0x30788348000000]; je 0x6d1c0; ret; 
0x00000000004a3ebc: movabs al, byte ptr [0x40fff80070fff7ff]; add eax, edi; call qword ptr [rax]; 
0x00000000004ca279: movabs al, byte ptr [0x41380e0a01940301]; ret; 
0x000000000042712b: movabs al, byte ptr [0x430630ba004336]; cmove rax, rdx; ret; 
0x00000000004c0623: movabs al, byte ptr [0x44200e4c01]; lodsb al, byte ptr [rsi]; adc eax, 0x23100000; cmc; call qword ptr [rsi + 4]; 
0x0000000000411663: movabs al, byte ptr [0x485bdf8948000000]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000041604e: movabs al, byte ptr [0x48ffffffff000000]; mov dword ptr [rdi + 0xa8], 0; ret; 
0x000000000045e159: movabs al, byte ptr [0x8348001f0f004b42]; ret 0x481e; 
0x000000000047c53a: movabs al, byte ptr [0x840ffffa83fffffb]; pop rsi; add dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; ret 0xf48; 
0x000000000043ee63: movabs al, byte ptr [0x841f0f66004a4a]; add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x000000000045d322: movabs al, byte ptr [0x852c8d4c000000]; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000046d18e: movabs al, byte ptr [0x8b48004d8b000000]; push rax; and cl, ch; sar dh, 0xff; jmp qword ptr [rsi - 0x70]; 
0x000000000043f642: movabs al, byte ptr [0x8c850f004a4f]; add byte ptr [rcx], dh; idiv byte ptr [rax + 2]; syscall; 
0x00000000004a40e5: movabs al, byte ptr [0xa310fff8a1f0fff8]; clc; push qword ptr [rax]; movsb byte ptr [rdi], byte ptr [rsi]; clc; call qword ptr [rax - 0x5b]; 
0x000000000049cf9c: movabs al, byte ptr [0xb74c0854800001f]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000047d91c: movabs al, byte ptr [0xb8000001]; test rax, rax; je 0x7d931; mov edi, 0x6cc140; call rax; 
0x00000000004a402c: movabs al, byte ptr [0xc0fff84bb0fff849]; clc; call rax; 
0x00000000004a4438: movabs al, byte ptr [0xc0fff91930fff919]; sbb cl, bh; call qword ptr [rax + 0x18]; 
0x00000000004a4970: movabs al, byte ptr [0xc0fff974b0fff974]; je 0xa4974; call rax; 
0x00000000004bccd4: movabs al, byte ptr [0xc8c62d12fc87aa3c]; lodsb al, byte ptr [rsi]; or byte ptr [rdi + 0x26], al; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x00000000004a3fc8: movabs al, byte ptr [0xd0fff85c70fff874]; js 0xa3fcb; jmp qword ptr [rax]; 
0x00000000004a0c87: movabs al, byte ptr [0xeefee80574004a78]; cli; dec dword ptr [rax - 0x75]; cmp ecx, dword ptr [rax - 0x75]; imul ebx, dword ptr [rax], -0x18; ret 0xf7dd; 
0x0000000000447267: movabs al, byte ptr [0xf7840fc08548ffff]; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004603cb: movabs al, byte ptr [0xffef5485c7004b48]; jmp qword ptr [rax]; 
0x00000000004bb33b: movabs byte ptr [0x3246dddda441cb9e], al; mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x0000000000441f6a: movabs byte ptr [0x4baffffea], al; mov esi, 2; mov rdi, r15; call rbx; 
0x000000000040abfc: movabs byte ptr [0x840f03f883000008], al; or byte ptr [eax], al; add byte ptr [rbx - 0x7bf0fe08], al; ret 8; 
0x00000000004a44e4: movabs byte ptr [0xc2fff91b32fff91b], al; sbb bh, cl; call qword ptr [rdx + 0x1a]; 
0x000000000041bfd8: movabs dword ptr [0x4400401f0ffffffe], eax; mov byte ptr [rsp + 0x20], bl; mov qword ptr [rsp + 0x18], r8; mov qword ptr [rsp + 0x10], r10; call rax; 
0x000000000044255f: movabs eax, dword ptr [0x3befffff6]; mov rdi, r15; call rbx; 
0x000000000047afac: movabs eax, dword ptr [0x4910438b48000005]; add eax, dword ptr [rdi]; call rax; 
0x0000000000470833: movabs eax, dword ptr [0x5b28c48348002661]; pop rbp; pop r12; pop r13; ret; 
0x00000000004a40e9: movabs eax, dword ptr [0xa430fff8a310fff8]; clc; call qword ptr [rax - 0x5b]; 
0x00000000004bb07f: movabs eax, dword ptr [0xdbd7170d7733db8]; shl dword ptr [rdi - 5], 1; ret; 
0x0000000000445f1e: movabs eax, dword ptr [0xe8e07400407e8349]; ret 0xfba5; 
0x00000000004604a3: movabs r11, 0xffef809d8b4c0000; dec dword ptr [rcx + 0x39]; ret; 
0x000000000042fdc8: movabs rbp, 0xf66d1ef0f66bdb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042fec8: movabs rsp, 0xf66d1ef0f66bcb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000049a457: movaps xmmword ptr [rsp + 0x20], xmm1; movaps xmmword ptr [rsp + 0x30], xmm0; je 0x9a46a; mov edi, 0x6cc140; call rax; 
0x000000000049a45c: movaps xmmword ptr [rsp + 0x30], xmm0; je 0x9a46a; mov edi, 0x6cc140; call rax; 
0x0000000000430b3d: movdqa xmmword ptr [rdi - 0x20], xmm1; sub rdi, 0x20; lea r11, qword ptr [rip + 0x73703]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430a4c: movdqa xmmword ptr [rdi - 0x40], xmm1; sub rdi, 0x40; lea r11, qword ptr [rip + 0x737f4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043c510: movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, qword ptr [rdi + 0x11]; ret; 
0x000000000043be80: movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000043c550: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, qword ptr [rdi + 0x13]; ret; 
0x000000000043bec0: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000043beb0: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000043c530: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, qword ptr [rdi + 0x12]; ret; 
0x000000000043bea0: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000043c5d0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, qword ptr [rdi + 0x17]; ret; 
0x000000000043bf40: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000043bf20: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000043c590: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, qword ptr [rdi + 0x15]; ret; 
0x000000000043bee0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000043c5b0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, qword ptr [rdi + 0x16]; ret; 
0x000000000043bf00: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000043c020: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000043c670: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, qword ptr [rdi + 0x1c]; ret; 
0x000000000043bfc0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000043c690: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, qword ptr [rdi + 0x1d]; ret; 
0x000000000043bfe0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000043c000: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000043c4f0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000043c500: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, qword ptr [rdi + 0x10]; ret; 
0x000000000043be70: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000043be60: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000043c024: movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000043c674: movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, qword ptr [rdi + 0x1c]; ret; 
0x000000000043bfc4: movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000043c694: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, qword ptr [rdi + 0x1d]; ret; 
0x000000000043bfe4: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000043c004: movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000431e4a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x723f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431cfa: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x72547]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431baa: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x72697]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431a5a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x727e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043190a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x72937]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004317ba: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x72a87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043166a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x72bd7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004313ca: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x72e77]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043127a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x72fc7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043112a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x73117]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430fda: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x73267]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430e8a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x733b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430d3a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x73507]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430bea: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x73657]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431d9b: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x724a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431c4b: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x725f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431afb: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x72749]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043185b: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x729e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043170b: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x72b39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004315bb: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x72c89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431522: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x72d22]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043146b: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x72dd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043131b: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x72f29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004311cb: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x73079]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430f2b: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x73319]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430ddb: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x73469]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430c8b: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x735b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000435b11: movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000004271f0: movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x000000000043c6dd: movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, qword ptr [rdi + 0x1f]; ret; 
0x000000000043c02d: movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000436181: movdqu xmmword ptr [rdi + 0x11], xmm0; lddqu xmm0, xmmword ptr [rsi + 1]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436111: movdqu xmmword ptr [rdi + 0x12], xmm0; lddqu xmm0, xmmword ptr [rsi + 2]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004360a1: movdqu xmmword ptr [rdi + 0x13], xmm0; lddqu xmm0, xmmword ptr [rsi + 3]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436031: movdqu xmmword ptr [rdi + 0x14], xmm0; lddqu xmm0, xmmword ptr [rsi + 4]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435fc1: movdqu xmmword ptr [rdi + 0x15], xmm0; lddqu xmm0, xmmword ptr [rsi + 5]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435f51: movdqu xmmword ptr [rdi + 0x16], xmm0; lddqu xmm0, xmmword ptr [rsi + 6]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435ee1: movdqu xmmword ptr [rdi + 0x17], xmm0; lddqu xmm0, xmmword ptr [rsi + 7]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435e71: movdqu xmmword ptr [rdi + 0x18], xmm0; lddqu xmm0, xmmword ptr [rsi + 8]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435e01: movdqu xmmword ptr [rdi + 0x19], xmm0; lddqu xmm0, xmmword ptr [rsi + 9]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435d91: movdqu xmmword ptr [rdi + 0x1a], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xa]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435d21: movdqu xmmword ptr [rdi + 0x1b], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xb]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435cb1: movdqu xmmword ptr [rdi + 0x1c], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xc]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435c41: movdqu xmmword ptr [rdi + 0x1d], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xd]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435bd1: movdqu xmmword ptr [rdi + 0x1e], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xe]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435b61: movdqu xmmword ptr [rdi + 0x1f], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xf]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435b07: movdqu xmmword ptr [rdi + 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000435d9f: movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435d2f: movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435cbf: movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435c4f: movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043c67d: movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, qword ptr [rdi + 0x1c]; ret; 
0x000000000043bfcd: movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000435bdf: movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043c69d: movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, qword ptr [rdi + 0x1d]; ret; 
0x000000000043bfed: movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x0000000000435b6f: movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043c6bd: movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, qword ptr [rdi + 0x1e]; ret; 
0x000000000043c00d: movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000043618f: movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043611f: movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004360af: movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043603f: movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435fcf: movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435f5f: movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435eef: movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435e7f: movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435e0f: movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004271f5: movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000004352fb: movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000043536b: movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435aa6: movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435a26: movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435996: movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435916: movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435896: movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435816: movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435796: movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435716: movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435696: movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435616: movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435596: movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435516: movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435486: movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004353f6: movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435366: movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004352f1: movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x0000000000435a97: movdqu xmmword ptr [rdi - 0x21], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x11]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435a17: movdqu xmmword ptr [rdi - 0x22], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x12]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435987: movdqu xmmword ptr [rdi - 0x23], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x13]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435907: movdqu xmmword ptr [rdi - 0x24], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x14]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435887: movdqu xmmword ptr [rdi - 0x25], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x15]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435807: movdqu xmmword ptr [rdi - 0x26], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x16]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435787: movdqu xmmword ptr [rdi - 0x27], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x17]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435707: movdqu xmmword ptr [rdi - 0x28], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x18]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435587: movdqu xmmword ptr [rdi - 0x2b], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1b]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435507: movdqu xmmword ptr [rdi - 0x2c], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1c]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435477: movdqu xmmword ptr [rdi - 0x2d], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1d]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004353e7: movdqu xmmword ptr [rdi - 0x2e], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1e]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435357: movdqu xmmword ptr [rdi - 0x2f], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1f]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004352e7: movdqu xmmword ptr [rdi - 0x30], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x20]; movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000043c4f4: movdqu xmmword ptr [rdi], xmm0; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000043c504: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, qword ptr [rdi + 0x10]; ret; 
0x000000000043be74: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000043c557: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, qword ptr [rdi + 0x13]; ret; 
0x000000000043c577: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, qword ptr [rdi + 0x14]; ret; 
0x000000000043bec7: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000043beb7: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000043c537: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, qword ptr [rdi + 0x12]; ret; 
0x000000000043bea7: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000043c5d8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, qword ptr [rdi + 0x17]; ret; 
0x000000000043c5f8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, qword ptr [rdi + 0x18]; ret; 
0x000000000043bf48: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000043bf28: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000043c63b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, qword ptr [rdi + 0x1a]; ret; 
0x000000000043bf8b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000043c65b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, qword ptr [rdi + 0x1b]; ret; 
0x000000000043bfab: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000043c61c: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, qword ptr [rdi + 0x19]; ret; 
0x000000000043bf6c: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000043c598: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, qword ptr [rdi + 0x15]; ret; 
0x000000000043bee8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000043c5b8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, qword ptr [rdi + 0x16]; ret; 
0x000000000043bf08: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000043c518: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, qword ptr [rdi + 0x11]; ret; 
0x000000000043be88: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000043c6d9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, qword ptr [rdi + 0x1f]; ret; 
0x000000000043c029: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000043c679: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, qword ptr [rdi + 0x1c]; ret; 
0x000000000043bfc9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000043c699: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, qword ptr [rdi + 0x1d]; ret; 
0x000000000043bfe9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000043c6b9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, qword ptr [rdi + 0x1e]; ret; 
0x000000000043c009: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000435b1a: movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000435b74: movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000049a452: movhps xmm0, qword ptr [rsp + 0x10]; movaps xmmword ptr [rsp + 0x20], xmm1; movaps xmmword ptr [rsp + 0x30], xmm0; je 0x9a46a; mov edi, 0x6cc140; call rax; 
0x000000000043c511: movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, qword ptr [rdi + 0x11]; ret; 
0x000000000043be81: movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000043c551: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, qword ptr [rdi + 0x13]; ret; 
0x000000000043bec1: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000043beb1: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000043c531: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, qword ptr [rdi + 0x12]; ret; 
0x000000000043bea1: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000043c5d1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, qword ptr [rdi + 0x17]; ret; 
0x000000000043bf41: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000043bf21: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000043c591: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, qword ptr [rdi + 0x15]; ret; 
0x000000000043bee1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000043c5b1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, qword ptr [rdi + 0x16]; ret; 
0x000000000043bf01: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000043c021: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000043c671: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, qword ptr [rdi + 0x1c]; ret; 
0x000000000043bfc1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000043c691: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, qword ptr [rdi + 0x1d]; ret; 
0x000000000043bfe1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000043c001: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000043c4f1: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000043c501: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, qword ptr [rdi + 0x10]; ret; 
0x000000000043be71: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000043be61: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000043c025: movq mm2, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000043c675: movq mm2, qword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, qword ptr [rdi + 0x1c]; ret; 
0x000000000043bfc5: movq mm2, qword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000043c695: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, qword ptr [rdi + 0x1d]; ret; 
0x000000000043bfe5: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000043c005: movq mm2, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000431e4b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x723f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431cfb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x72547]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431bab: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x72697]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431a5b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x727e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043190b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x72937]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004317bb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x72a87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043166b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x72bd7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004313cb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x72e77]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043127b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x72fc7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043112b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x73117]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430fdb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x73267]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430e8b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x733b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430d3b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x73507]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430beb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x73657]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431d9c: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x724a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431c4c: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x725f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431afc: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x72749]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043185c: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x729e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043170c: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x72b39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004315bc: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x72c89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431523: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x72d22]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043146c: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x72dd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043131c: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x72f29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004311cc: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x73079]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430f2c: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x73319]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430ddc: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x73469]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430c8c: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x735b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431e4c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x723f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431cfc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x72547]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431bac: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x72697]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431a5c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x727e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043190c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x72937]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004317bc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x72a87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043166c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x72bd7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004313cc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x72e77]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043127c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x72fc7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043112c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x73117]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430fdc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x73267]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430e8c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x733b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430d3c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x73507]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430bec: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x73657]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431d9d: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x724a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431c4d: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x725f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431afd: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x72749]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043185d: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x729e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043170d: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x72b39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004315bd: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x72c89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431524: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x72d22]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043146d: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x72dd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043131d: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x72f29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004311cd: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x73079]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430f2d: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x73319]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430ddd: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x73469]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430c8d: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x735b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000435b12: movq qword ptr [rdi + 0x10], mm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000004271f1: movq qword ptr [rdi + 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x000000000043c6de: movq qword ptr [rdi + 0x10], mm2; lea rax, qword ptr [rdi + 0x1f]; ret; 
0x000000000043c02e: movq qword ptr [rdi + 0x10], mm2; ret; 
0x0000000000436182: movq qword ptr [rdi + 0x11], mm0; lddqu xmm0, xmmword ptr [rsi + 1]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436112: movq qword ptr [rdi + 0x12], mm0; lddqu xmm0, xmmword ptr [rsi + 2]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004360a2: movq qword ptr [rdi + 0x13], mm0; lddqu xmm0, xmmword ptr [rsi + 3]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436032: movq qword ptr [rdi + 0x14], mm0; lddqu xmm0, xmmword ptr [rsi + 4]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435fc2: movq qword ptr [rdi + 0x15], mm0; lddqu xmm0, xmmword ptr [rsi + 5]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435f52: movq qword ptr [rdi + 0x16], mm0; lddqu xmm0, xmmword ptr [rsi + 6]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435ee2: movq qword ptr [rdi + 0x17], mm0; lddqu xmm0, xmmword ptr [rsi + 7]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435e72: movq qword ptr [rdi + 0x18], mm0; lddqu xmm0, xmmword ptr [rsi + 8]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435e02: movq qword ptr [rdi + 0x19], mm0; lddqu xmm0, xmmword ptr [rsi + 9]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435d92: movq qword ptr [rdi + 0x1a], mm0; lddqu xmm0, xmmword ptr [rsi + 0xa]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435d22: movq qword ptr [rdi + 0x1b], mm0; lddqu xmm0, xmmword ptr [rsi + 0xb]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435cb2: movq qword ptr [rdi + 0x1c], mm0; lddqu xmm0, xmmword ptr [rsi + 0xc]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435c42: movq qword ptr [rdi + 0x1d], mm0; lddqu xmm0, xmmword ptr [rsi + 0xd]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435bd2: movq qword ptr [rdi + 0x1e], mm0; lddqu xmm0, xmmword ptr [rsi + 0xe]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435b62: movq qword ptr [rdi + 0x1f], mm0; lddqu xmm0, xmmword ptr [rsi + 0xf]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435b08: movq qword ptr [rdi + 0x20], mm0; lddqu xmm0, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000435da0: movq qword ptr [rdi + 0xa], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435d30: movq qword ptr [rdi + 0xb], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435cc0: movq qword ptr [rdi + 0xc], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435c50: movq qword ptr [rdi + 0xd], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043c67e: movq qword ptr [rdi + 0xd], mm2; lea rax, qword ptr [rdi + 0x1c]; ret; 
0x000000000043bfce: movq qword ptr [rdi + 0xd], mm2; ret; 
0x0000000000435be0: movq qword ptr [rdi + 0xe], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043c69e: movq qword ptr [rdi + 0xe], mm2; lea rax, qword ptr [rdi + 0x1d]; ret; 
0x000000000043bfee: movq qword ptr [rdi + 0xe], mm2; ret; 
0x0000000000435b70: movq qword ptr [rdi + 0xf], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043c6be: movq qword ptr [rdi + 0xf], mm2; lea rax, qword ptr [rdi + 0x1e]; ret; 
0x000000000043c00e: movq qword ptr [rdi + 0xf], mm2; ret; 
0x0000000000436190: movq qword ptr [rdi + 1], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436120: movq qword ptr [rdi + 2], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004360b0: movq qword ptr [rdi + 3], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436040: movq qword ptr [rdi + 4], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435fd0: movq qword ptr [rdi + 5], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435f60: movq qword ptr [rdi + 6], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435ef0: movq qword ptr [rdi + 7], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435e80: movq qword ptr [rdi + 8], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435e10: movq qword ptr [rdi + 9], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004271f6: movq qword ptr [rdi + rdx - 0x20], mm0; ret; 
0x00000000004352fc: movq qword ptr [rdi - 0x10], mm0; ret; 
0x000000000043536c: movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000435aa7: movq qword ptr [rdi - 0x11], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435a27: movq qword ptr [rdi - 0x12], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435997: movq qword ptr [rdi - 0x13], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435917: movq qword ptr [rdi - 0x14], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435897: movq qword ptr [rdi - 0x15], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435817: movq qword ptr [rdi - 0x16], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435797: movq qword ptr [rdi - 0x17], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435717: movq qword ptr [rdi - 0x18], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435697: movq qword ptr [rdi - 0x19], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435617: movq qword ptr [rdi - 0x1a], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435597: movq qword ptr [rdi - 0x1b], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435517: movq qword ptr [rdi - 0x1c], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435487: movq qword ptr [rdi - 0x1d], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004353f7: movq qword ptr [rdi - 0x1e], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435367: movq qword ptr [rdi - 0x1f], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004352f2: movq qword ptr [rdi - 0x20], mm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x0000000000430b3e: movq qword ptr [rdi - 0x20], mm1; sub rdi, 0x20; lea r11, qword ptr [rip + 0x73703]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000435a98: movq qword ptr [rdi - 0x21], mm0; lddqu xmm0, xmmword ptr [rsi - 0x11]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435a18: movq qword ptr [rdi - 0x22], mm0; lddqu xmm0, xmmword ptr [rsi - 0x12]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435988: movq qword ptr [rdi - 0x23], mm0; lddqu xmm0, xmmword ptr [rsi - 0x13]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435908: movq qword ptr [rdi - 0x24], mm0; lddqu xmm0, xmmword ptr [rsi - 0x14]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435888: movq qword ptr [rdi - 0x25], mm0; lddqu xmm0, xmmword ptr [rsi - 0x15]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435808: movq qword ptr [rdi - 0x26], mm0; lddqu xmm0, xmmword ptr [rsi - 0x16]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435788: movq qword ptr [rdi - 0x27], mm0; lddqu xmm0, xmmword ptr [rsi - 0x17]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435708: movq qword ptr [rdi - 0x28], mm0; lddqu xmm0, xmmword ptr [rsi - 0x18]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435588: movq qword ptr [rdi - 0x2b], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1b]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435508: movq qword ptr [rdi - 0x2c], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1c]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435478: movq qword ptr [rdi - 0x2d], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1d]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004353e8: movq qword ptr [rdi - 0x2e], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1e]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435358: movq qword ptr [rdi - 0x2f], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1f]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004352e8: movq qword ptr [rdi - 0x30], mm0; lddqu xmm0, xmmword ptr [rsi - 0x20]; movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x0000000000430a4d: movq qword ptr [rdi - 0x40], mm1; sub rdi, 0x40; lea r11, qword ptr [rip + 0x737f4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043c4f5: movq qword ptr [rdi], mm0; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000043c505: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], dh; lea rax, qword ptr [rdi + 0x10]; ret; 
0x000000000043be75: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000043c558: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, qword ptr [rdi + 0x13]; ret; 
0x000000000043c578: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, qword ptr [rdi + 0x14]; ret; 
0x000000000043bec8: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000043beb8: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000043c538: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; lea rax, qword ptr [rdi + 0x12]; ret; 
0x000000000043bea8: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000043c5d9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, qword ptr [rdi + 0x17]; ret; 
0x000000000043c5f9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, qword ptr [rdi + 0x18]; ret; 
0x000000000043bf49: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000043bf29: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000043c63c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, qword ptr [rdi + 0x1a]; ret; 
0x000000000043bf8c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000043c65c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, qword ptr [rdi + 0x1b]; ret; 
0x000000000043bfac: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000043c61d: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, qword ptr [rdi + 0x19]; ret; 
0x000000000043bf6d: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000043c599: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; lea rax, qword ptr [rdi + 0x15]; ret; 
0x000000000043bee9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000043c5b9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; lea rax, qword ptr [rdi + 0x16]; ret; 
0x000000000043bf09: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000043c519: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, qword ptr [rdi + 0x11]; ret; 
0x000000000043be89: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000043c6da: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, qword ptr [rdi + 0x1f]; ret; 
0x000000000043c02a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000043c67a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, qword ptr [rdi + 0x1c]; ret; 
0x000000000043bfca: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000043c69a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, qword ptr [rdi + 0x1d]; ret; 
0x000000000043bfea: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000043c6ba: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, qword ptr [rdi + 0x1e]; ret; 
0x000000000043c00a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000435b1b: movq qword ptr [rdi], mm0; ret; 
0x0000000000435b75: movq qword ptr [rdi], mm1; ret; 
0x0000000000446398: movsb byte ptr [rdi], byte ptr [rsi]; add byte ptr [rax], al; add byte ptr [rsi + 0x447090], bh; mov edi, 0x6cd6d8; call rax; 
0x00000000004c94e5: movsb byte ptr [rdi], byte ptr [rsi]; add byte ptr [rax], al; js 0xc94f8; std; jmp qword ptr [rax]; 
0x00000000004a40f1: movsb byte ptr [rdi], byte ptr [rsi]; clc; call qword ptr [rax - 0x5b]; 
0x00000000004bb1c2: movsb byte ptr [rdi], byte ptr [rsi]; in eax, 0x24; outsd dx, dword ptr es:[rsi]; ret 0x5ae4; 
0x0000000000405d88: movsb byte ptr [rdi], byte ptr [rsi]; in eax, 1; add byte ptr [rax + 0x29], cl; ret; 
0x000000000049cdd3: movsb byte ptr [rdi], byte ptr [rsi]; nop dword ptr [rax]; cmp byte ptr [r9 + 0xdf], 0; je 0x9cd92; add rsp, 0x18; ret; 
0x00000000004c8e24: movsb byte ptr [rdi], byte ptr [rsi]; popfq; add byte ptr [rax], al; js 0xc8e8e; cld; call qword ptr [rax]; 
0x000000000041b6d8: movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004996c0: movsb byte ptr [rdi], byte ptr [rsi]; shl dword ptr [rbx], 1; add byte ptr [rax - 0x77], cl; ret; 
0x000000000040042b: movsb byte ptr [rdi], byte ptr [rsi]; sub cl, byte ptr [rdx]; mov eax, 2; syscall; 
0x00000000004c9a24: movsb byte ptr [rdi], byte ptr [rsi]; test eax, 0x34980000; std; jmp qword ptr [rcx]; 
0x000000000047d1cc: movsb byte ptr [rdi], byte ptr [rsi]; xor eax, eax; ret; 
0x00000000004c94e4: movsb byte ptr [rdi], byte ptr fs:[rsi]; add byte ptr [rax], al; js 0xc94f8; std; jmp qword ptr [rax]; 
0x000000000043f827: movsd dword ptr [rdi], dword ptr [rsi]; adc dword ptr [rbx], eax; add byte ptr [rax - 0x77], cl; ret 0x6b8; 
0x0000000000417f37: movsd dword ptr [rdi], dword ptr [rsi]; add byte ptr [rax], al; add dh, dh; ret; 
0x00000000004ca318: movsd dword ptr [rdi], dword ptr [rsi]; add ebp, eax; add ebp, esi; add al, byte ptr [rax]; ret; 
0x0000000000400707: movsd dword ptr [rdi], dword ptr [rsi]; mov ecx, 0x415d002c; pop rsp; ret; 
0x000000000048a8a2: movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x00000000004153e7: movsd dword ptr [rdi], dword ptr [rsi]; sub dword ptr [rbx], 0x83c88900; ret 0x2501; 
0x000000000048c043: movsd xmm0, qword ptr [rsp - 8]; ret; 
0x000000000048bffd: movss xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000480361: movsx eax, dl; neg eax; ret; 
0x0000000000447716: movsx ecx, byte ptr [rdx + 0x4a669a]; add rdx, 0x4a6680; movsx edx, byte ptr [rdx + 0x1b]; mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x0000000000447724: movsx edx, byte ptr [rdx + 0x1b]; mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x0000000000447715: movsx r9, byte ptr [rdx + 0x4a669a]; add rdx, 0x4a6680; movsx edx, byte ptr [rdx + 0x1b]; mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x0000000000440968: movsxd r10, r10d; syscall; 
0x0000000000440917: movsxd r10, r14d; mov rdx, rbx; mov rsi, r13; mov rdi, r12; mov eax, 9; syscall; 
0x000000000047378d: movsxd r10, r8d; mov rdx, rcx; mov eax, 0x106; syscall; 
0x0000000000452f4f: movsxd r12, edx; mov rdx, r12; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x00000000004040a4: movsxd r12, r12d; mov rdi, r12; mov eax, 3; syscall; 
0x000000000041b5f0: movsxd r9, eax; mov edx, 1; lea rsi, qword ptr [rsp + 0x30]; mov rdi, r9; mov eax, r8d; syscall; 
0x000000000049c629: movsxd rax, dword ptr [r14 + rax*4]; add rax, r14; jmp rax; 
0x000000000049c0a1: movsxd rax, dword ptr [r8 + r11*4]; add rax, r8; jmp rax; 
0x000000000049bd48: movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x000000000042aa2b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042c678: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000042be98: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000042c288: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042baa8: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b58b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042ad6b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000042a54b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x000000000042bc47: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042b0ab: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042a88b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042a06b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000042b24b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x000000000042c138: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b958: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042ca68: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a3ab: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042a4e1: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b1e1: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042ad01: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042c039: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042c969: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042b521: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a821: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x000000000042a341: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b041: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x000000000042c189: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042b9a9: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004003c6: movsxd rbx, ebp; mov edx, 0x1d; mov esi, 0x4a2a68; mov rdi, rbx; mov eax, 1; syscall; 
0x000000000045d300: movsxd rbx, edx; mov rdx, rbx; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000042effd: movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043bc29: movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000049ada1: movsxd rcx, dword ptr [r14 + rsi*4]; add rcx, r14; jmp rcx; 
0x00000000004434ad: movsxd rcx, eax; cmp qword ptr [rdx + rcx*8 - 8], 1; sbb eax, 0; leave; ret; 
0x000000000041b5f1: movsxd rcx, eax; mov edx, 1; lea rsi, qword ptr [rsp + 0x30]; mov rdi, r9; mov eax, r8d; syscall; 
0x000000000041301f: movsxd rdi, dword ptr [r14 + 0x70]; mov rdx, rbx; mov rsi, rbp; mov eax, r13d; syscall; 
0x000000000047c313: movsxd rdi, dword ptr [rbp - 0x46c]; mov eax, 0x14; syscall; 
0x0000000000442e64: movsxd rdi, dword ptr [rbp - 0x58]; mov eax, 3; syscall; 
0x0000000000442f51: movsxd rdi, dword ptr [rbp - 0x68]; mov eax, 3; syscall; 
0x0000000000412dc9: movsxd rdi, dword ptr [rbx + 0x70]; syscall; 
0x00000000004125e0: movsxd rdi, dword ptr [rdi + 0x70]; mov eax, 3; syscall; 
0x0000000000413626: movsxd rdi, dword ptr [rdi + 0x70]; xor eax, eax; syscall; 
0x0000000000440458: movsxd rdi, dword ptr [rsp + 0x10]; mov eax, 0x101; syscall; 
0x00000000004404da: movsxd rdi, dword ptr [rsp + 0x10]; mov eax, 3; syscall; 
0x000000000043fdd8: movsxd rdi, eax; mov rsi, rdx; mov eax, 5; syscall; 
0x000000000047378b: movsxd rdi, eax; movsxd r10, r8d; mov rdx, rcx; mov eax, 0x106; syscall; 
0x00000000004be48d: movsxd rdi, ebp; jmp qword ptr [rax]; 
0x0000000000473385: movsxd rdi, ebp; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x0000000000413d8b: movsxd rdi, ebp; mov eax, 3; syscall; 
0x000000000044f8d7: movsxd rdi, ebp; mov r14d, 1; mov r13d, 1; mov eax, 3; syscall; 
0x0000000000440092: movsxd rdi, ebx; mov eax, 0x48; syscall; 
0x0000000000473100: movsxd rdi, ebx; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x000000000044d72a: movsxd rdi, ebx; mov eax, 3; syscall; 
0x000000000040e3c4: movsxd rdi, ecx; syscall; 
0x000000000043ff6a: movsxd rdi, edi; mov eax, 0x48; syscall; 
0x00000000004505a7: movsxd rdi, edi; mov eax, 0xe; syscall; 
0x0000000000450088: movsxd rdi, edi; mov eax, 3; syscall; 
0x0000000000472fc6: movsxd rdi, edi; mov eax, ecx; sub rsp, 0x98; syscall; 
0x0000000000450427: movsxd rdi, edi; mov eax, ecx; syscall; 
0x0000000000473885: movsxd rdi, edi; mov esi, 0x5401; mov eax, 0x10; sub rsp, 0x30; mov rdx, rsp; syscall; 
0x000000000044e7b9: movsxd rdi, edi; mov rax, qword ptr [rdi*8 + 0x6cca40]; ret; 
0x0000000000450198: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000004c5b19: movsxd rdi, edx; jmp qword ptr [rsi + 1]; 
0x000000000044f931: movsxd rdi, esi; mov eax, 3; syscall; 
0x00000000004040f5: movsxd rdi, esp; mov eax, 3; syscall; 
0x00000000004040f4: movsxd rdi, r12d; mov eax, 3; syscall; 
0x000000000044f8d6: movsxd rdi, r13d; mov r14d, 1; mov r13d, 1; mov eax, 3; syscall; 
0x000000000044f930: movsxd rdi, r14d; mov eax, 3; syscall; 
0x0000000000450087: movsxd rdi, r15d; mov eax, 3; syscall; 
0x000000000043077f: movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000047378e: movsxd rdx, eax; mov rdx, rcx; mov eax, 0x106; syscall; 
0x00000000004583b8: movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000046be55: movsxd rdx, ebx; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000413cd6: movsxd rdx, ecx; mov eax, 2; syscall; 
0x000000000040e3bc: movsxd rdx, edi; mov eax, 0xea; movsxd rdi, ecx; syscall; 
0x0000000000440969: movsxd rdx, edx; syscall; 
0x0000000000440918: movsxd rdx, esi; mov rdx, rbx; mov rsi, r13; mov rdi, r12; mov eax, 9; syscall; 
0x000000000047c30a: movsxd rdx, esp; lea rsi, qword ptr [rbp - 0x430]; movsxd rdi, dword ptr [rbp - 0x46c]; mov eax, 0x14; syscall; 
0x000000000047c309: movsxd rdx, r12d; lea rsi, qword ptr [rbp - 0x430]; movsxd rdi, dword ptr [rbp - 0x46c]; mov eax, 0x14; syscall; 
0x000000000040e3b9: movsxd rsi, eax; movsxd rdx, edi; mov eax, 0xea; movsxd rdi, ecx; syscall; 
0x000000000040e3a1: movsxd rsi, eax; test esi, esi; jne 0xe3d8; mov eax, 0xba; syscall; 
0x00000000004c1591: movsxd rsi, ebp; call qword ptr [rsi]; 
0x000000000043ff67: movsxd rsi, esi; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x000000000043dc0c: movsxd rsi, esi; ret 0x7520; 
0x0000000000452f50: movsxd rsp, edx; mov rdx, r12; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x00000000004040a5: movsxd rsp, esp; mov rdi, r12; mov eax, 3; syscall; 
0x000000000048bffe: movups xmm0, xmmword ptr [rsp - 4]; ret; 
0x000000000048c044: movups xmm0, xmmword ptr [rsp - 8]; ret; 
0x000000000045030c: movzx eax, al; mov dword ptr [rbx + 0x40], eax; xor eax, eax; pop rbx; ret; 
0x000000000049bd45: movzx eax, al; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x000000000048ca5c: movzx eax, al; neg eax; ret; 
0x000000000048c806: movzx eax, al; pop rbx; pop rbp; pop r12; ret; 
0x0000000000473875: movzx eax, al; ret; 
0x0000000000426c93: movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000041495c: movzx eax, bpl; pop rbx; pop rbp; pop r12; ret; 
0x0000000000455f7a: movzx eax, byte ptr [rax + 0x4b40e0]; mov rax, qword ptr [rax*8 + 0x4b3a20]; jmp rax; 
0x0000000000455fcb: movzx eax, byte ptr [rax + 0x4b40e0]; mov rax, qword ptr [rax*8 + 0x4b3b20]; jmp rax; 
0x00000000004580bb: movzx eax, byte ptr [rax + 0x4b40e0]; mov rax, qword ptr [rax*8 + 0x4b3c20]; jmp rax; 
0x0000000000456bee: movzx eax, byte ptr [rax + 0x4b40e0]; mov rax, qword ptr [rax*8 + 0x4b3f20]; jmp rax; 
0x00000000004625c7: movzx eax, byte ptr [rax + 0x4b4a60]; mov dword ptr [rbp - 0x1088], 1; mov rax, qword ptr [rax*8 + 0x4b45a0]; jmp rax; 
0x00000000004620d9: movzx eax, byte ptr [rax + 0x4b4a60]; mov dword ptr [rbp - 0x1090], 1; mov dword ptr [rbp - 0x1070], 0; mov rax, qword ptr [rax*8 + 0x4b44a0]; jmp rax; 
0x0000000000462186: movzx eax, byte ptr [rax + 0x4b4a60]; mov dword ptr [rbp - 0x1090], 1; mov dword ptr [rbp - 0x1070], 1; mov rax, qword ptr [rax*8 + 0x4b44a0]; jmp rax; 
0x0000000000460dbf: movzx eax, byte ptr [rax + 0x4b4a60]; mov dword ptr [rbp - 0x1090], 1; mov rax, qword ptr [rax*8 + 0x4b43a0]; jmp rax; 
0x000000000046232c: movzx eax, byte ptr [rax + 0x4b4a60]; mov dword ptr [rbp - 0x10a0], 1; mov rax, qword ptr [rax*8 + 0x4b48a0]; jmp rax; 
0x00000000004624df: movzx eax, byte ptr [rax + 0x4b4a60]; mov dword ptr [rbp - 0x10a8], 1; mov rax, qword ptr [rax*8 + 0x4b48a0]; jmp rax; 
0x0000000000462459: movzx eax, byte ptr [rax + 0x4b4a60]; mov dword ptr [rbp - 0x10ac], 0x20; mov dword ptr [rbp - 0x1098], 1; mov rax, qword ptr [rax*8 + 0x4b48a0]; jmp rax; 
0x00000000004624a1: movzx eax, byte ptr [rax + 0x4b4a60]; mov dword ptr [rbp - 0x10b0], 1; mov rax, qword ptr [rax*8 + 0x4b48a0]; jmp rax; 
0x0000000000460e55: movzx eax, byte ptr [rax + 0x4b4a60]; mov dword ptr [rbp - 0x10b8], 1; mov rax, qword ptr [rax*8 + 0x4b48a0]; jmp rax; 
0x0000000000462605: movzx eax, byte ptr [rax + 0x4b4a60]; mov dword ptr [rbp - 0x10c0], 1; mov dword ptr [rbp - 0x1088], 0; mov rax, qword ptr [rax*8 + 0x4b44a0]; jmp rax; 
0x0000000000460e93: movzx eax, byte ptr [rax + 0x4b4a60]; mov dword ptr [rbp - 0x10c8], 1; mov rax, qword ptr [rax*8 + 0x4b48a0]; jmp rax; 
0x000000000042eedd: movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000004165f6: movzx eax, byte ptr [rax - 1]; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x0000000000413c03: movzx eax, byte ptr [rax]; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x000000000041281d: movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000415b1f: movzx eax, byte ptr [rax]; pop rbx; ret; 
0x0000000000413a9a: movzx eax, byte ptr [rax]; ret; 
0x000000000049db29: movzx eax, byte ptr [rcx]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000042353b: movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x00000000004951bd: movzx eax, byte ptr [rdi + rdx]; lea rdx, qword ptr [rip + 0x13238]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000492bdd: movzx eax, byte ptr [rdi + rdx]; lea rdx, qword ptr [rip + 0x15818]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000049122d: movzx eax, byte ptr [rdi + rdx]; lea rdx, qword ptr [rip + 0x171c8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000438a18: movzx eax, byte ptr [rdi + rdx]; lea rdx, qword ptr [rip + 0x6f9dd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042ccc8: movzx eax, byte ptr [rdi + rdx]; lea rdx, qword ptr [rip + 0x7b72d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042b658: movzx eax, byte ptr [rdi + rdx]; lea rdx, qword ptr [rip + 0x7cd9d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000429aa8: movzx eax, byte ptr [rdi + rdx]; lea rdx, qword ptr [rip + 0x7e94d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042ed6f: movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x00000000004233f8: movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000043dc30: movzx eax, byte ptr [rdi - 0x10]; movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x000000000043dc90: movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000043dc80: movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000043dc70: movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000043dc60: movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000043dc50: movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000043dc40: movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000043dfea: movzx eax, byte ptr [rdi - 1]; cmp al, byte ptr [rsi - 1]; jne 0x3e165; xor eax, eax; ret; 
0x000000000042feb0: movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000042fc63: movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000043dc17: movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x00000000004951e3: movzx eax, byte ptr [rdi]; lea rdx, qword ptr [rip + 0x13213]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000492c03: movzx eax, byte ptr [rdi]; lea rdx, qword ptr [rip + 0x157f3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000491253: movzx eax, byte ptr [rdi]; lea rdx, qword ptr [rip + 0x171a3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000048f283: movzx eax, byte ptr [rdi]; lea rdx, qword ptr [rip + 0x19173]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042cce3: movzx eax, byte ptr [rdi]; lea rdx, qword ptr [rip + 0x7b713]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042b673: movzx eax, byte ptr [rdi]; lea rdx, qword ptr [rip + 0x7cd83]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000429ac3: movzx eax, byte ptr [rdi]; lea rdx, qword ptr [rip + 0x7e933]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042f010: movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000426c70: movzx eax, byte ptr [rdi]; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x0000000000423413: movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x00000000004157bd: movzx eax, byte ptr [rdx]; pop rbx; ret; 
0x0000000000412830: movzx eax, byte ptr [rdx]; ret; 
0x000000000041495d: movzx eax, ch; pop rbx; pop rbp; pop r12; ret; 
0x000000000043ee87: movzx eax, cl; pop rbx; ret; 
0x00000000004477e1: movzx eax, dh; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000043eeaf: movzx eax, dl; pop rbx; ret; 
0x00000000004477e0: movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000049c09e: movzx ebx, bl; movsxd rax, dword ptr [r8 + r11*4]; add rax, r8; jmp rax; 
0x000000000043e26a: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x3e260; ret; 
0x000000000043e31a: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x3e310; ret; 
0x000000000043e5da: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x3e5d0; sub rax, 1; ret; 
0x00000000004233f4: movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042efc6: movzx ecx, byte ptr [rsi + rdx]; test al, al; jne 0x2efb0; xor eax, eax; sub eax, ecx; ret; 
0x000000000042feb4: movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x0000000000423410: movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000042f013: movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x00000000004165a3: movzx ecx, dh; cmp eax, ecx; je 0x165c8; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x00000000004165a2: movzx ecx, sil; cmp eax, ecx; je 0x165c8; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x000000000042eee1: movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000043e48a: movzx edx, byte ptr [rsi + rax + 3]; test dl, dl; jne 0x3e480; lea rax, qword ptr [rcx - 1]; ret; 
0x00000000004914c8: movzx edx, byte ptr [rsi + rcx]; lea rcx, qword ptr [rip + 0x16f2d]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000048f568: movzx edx, byte ptr [rsi + rcx]; lea rcx, qword ptr [rip + 0x18e8d]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000042b87f: movzx edx, byte ptr [rsi + rcx]; lea rcx, qword ptr [rip + 0x7cb76]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000429d4f: movzx edx, byte ptr [rsi + rcx]; lea rcx, qword ptr [rip + 0x7e6a6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000042353f: movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000042ed73: movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000042417e: movzx edx, byte ptr [rsi + rdx]; test r8d, r8d; je 0x24188; xchg eax, edx; sub eax, edx; ret; 
0x000000000043dc34: movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x000000000043dc94: movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000043dc84: movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000043dc74: movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000043dc64: movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000043dc54: movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000043dc44: movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x0000000000435ac0: movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042fc67: movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000043dc1b: movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x00000000004361a0: movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x0000000000426c73: movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x0000000000426c99: movzx edx, dl; sub eax, edx; ret; 
0x0000000000435a40: movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x0000000000436130: movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000415ba2: movzx esi, byte ptr [r14]; mov rdi, r12; lea rbx, qword ptr [r14 + 1]; call qword ptr [rax + 0x18]; 
0x0000000000415ba3: movzx esi, byte ptr [rsi]; mov rdi, r12; lea rbx, qword ptr [r14 + 1]; call qword ptr [rax + 0x18]; 
0x000000000049c09d: movzx r11d, r11b; movsxd rax, dword ptr [r8 + r11*4]; add rax, r8; jmp rax; 
0x0000000000473874: movzx rax, al; ret; 
0x000000000046e2e7: mul byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; push rdi; xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x000000000049cfb3: mul byte ptr [rsi - 0x70]; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000048181e: mulps xmm0, xmm0; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000484a1d: mulsd xmm0, xmm0; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000048181d: mulss xmm0, xmm0; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000046b7d7: neg byte ptr [rbp + 0x41]; pop rsp; pop r13; pop r14; ret; 
0x0000000000444fb1: neg eax; mov dword ptr fs:[0xffffffffffffffd0], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000412dde: neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000040e3f7: neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000041363d: neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x0000000000400423: neg eax; mov dword ptr fs:[rdx], eax; xor esi, esi; mov edi, 0x4a2aa4; mov eax, 2; syscall; 
0x00000000004173af: neg eax; ret; 
0x0000000000400480: neg ecx; mov dword ptr fs:[rax], r9d; mov rdi, r8; mov eax, 3; syscall; 
0x0000000000440049: neg edx; cmp dword ptr [rsp + 0x10], 2; cmove eax, edx; add rsp, 0x60; pop rbx; ret; 
0x000000000043ffa1: neg edx; cmp dword ptr [rsp - 0x58], 2; cmove eax, edx; ret; 
0x000000000045054f: neg edx; mov dword ptr fs:[rax], edx; mov eax, 0xffffffff; add rsp, 0xd0; ret; 
0x0000000000410246: neg edx; test dword ptr [rbx], 0x8000; je 0x10258; mov eax, edx; pop rbx; ret; 
0x000000000048c242: neg edx; test dword ptr [rbx], 0x8000; je 0x8c250; mov eax, edx; pop rbx; ret; 
0x000000000040047f: neg r9d; mov dword ptr fs:[rax], r9d; mov rdi, r8; mov eax, 3; syscall; 
0x0000000000444fb0: neg rax; mov dword ptr fs:[0xffffffffffffffd0], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000046f058: nop dword ptr [rax + rax]; add rax, 3; ret; 
0x00000000004799ab: nop dword ptr [rax + rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000480dcb: nop dword ptr [rax + rax]; add rsp, 8; ret; 
0x0000000000424313: nop dword ptr [rax + rax]; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000426af8: nop dword ptr [rax + rax]; bsf eax, eax; lea rax, qword ptr [rax + rdi + 0x10]; ret; 
0x000000000042d868: nop dword ptr [rax + rax]; bsf eax, eax; lea rax, qword ptr [rax + rdi - 0x10]; ret; 
0x000000000042419b: nop dword ptr [rax + rax]; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000049828b: nop dword ptr [rax + rax]; call rbx; 
0x000000000043e6fb: nop dword ptr [rax + rax]; cmp dl, 8; jb 0x3e710; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x000000000043fedb: nop dword ptr [rax + rax]; cmp dword ptr [rip + 0x296935], 0; jne 0x3fefd; mov eax, 1; syscall; 
0x000000000043fe7b: nop dword ptr [rax + rax]; cmp dword ptr [rip + 0x296995], 0; jne 0x3fe9d; mov eax, 0; syscall; 
0x00000000004434bb: nop dword ptr [rax + rax]; cmp eax, -1; jne 0x434b8; xor eax, eax; leave; ret; 
0x00000000004422f3: nop dword ptr [rax + rax]; cmp qword ptr [r13 + 0x10], 0; jne 0x4181d; mov esi, 3; mov rdi, r13; call rbx; 
0x00000000004422d3: nop dword ptr [rax + rax]; cmp qword ptr [r13 + 0x10], 0; jne 0x41d4a; mov esi, 3; mov rdi, r13; call rbx; 
0x0000000000442333: nop dword ptr [rax + rax]; cmp qword ptr [r14 + 0x10], 0; jne 0x41841; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442393: nop dword ptr [rax + rax]; cmp qword ptr [r14 + 0x10], 0; jne 0x41966; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442373: nop dword ptr [rax + rax]; cmp qword ptr [r14 + 0x10], 0; jne 0x41abf; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442413: nop dword ptr [rax + rax]; cmp qword ptr [r14 + 0x10], 0; jne 0x41d6e; mov esi, 3; mov rdi, r14; call rbx; 
0x00000000004423d3: nop dword ptr [rax + rax]; cmp qword ptr [r14 + 0x10], 0; jne 0x41fec; mov esi, 3; mov rdi, r14; call rbx; 
0x00000000004423b3: nop dword ptr [rax + rax]; cmp qword ptr [r14 + 0x10], 0; jne 0x42111; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442573: nop dword ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x41861; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004425d3: nop dword ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x418da; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442613: nop dword ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x41986; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004425f3: nop dword ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x419ff; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442533: nop dword ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x41c7d; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442453: nop dword ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x41d8e; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442433: nop dword ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x41e07; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004424f3: nop dword ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x41f2c; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004424d3: nop dword ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x4200c; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004424b3: nop dword ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x42085; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442473: nop dword ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x421aa; mov esi, 3; mov rdi, r15; call rbx; 
0x000000000043c9b8: nop dword ptr [rax + rax]; lea rax, qword ptr [rdi + 0xa]; ret; 
0x000000000043c9c8: nop dword ptr [rax + rax]; lea rax, qword ptr [rdi + 0xb]; ret; 
0x000000000043c9d8: nop dword ptr [rax + rax]; lea rax, qword ptr [rdi + 0xc]; ret; 
0x000000000043c9e8: nop dword ptr [rax + rax]; lea rax, qword ptr [rdi + 0xd]; ret; 
0x000000000043c9f8: nop dword ptr [rax + rax]; lea rax, qword ptr [rdi + 0xe]; ret; 
0x000000000043c938: nop dword ptr [rax + rax]; lea rax, qword ptr [rdi + 1]; ret; 
0x000000000043c948: nop dword ptr [rax + rax]; lea rax, qword ptr [rdi + 2]; ret; 
0x000000000043c958: nop dword ptr [rax + rax]; lea rax, qword ptr [rdi + 3]; ret; 
0x000000000043c968: nop dword ptr [rax + rax]; lea rax, qword ptr [rdi + 4]; ret; 
0x000000000043c978: nop dword ptr [rax + rax]; lea rax, qword ptr [rdi + 5]; ret; 
0x000000000043c988: nop dword ptr [rax + rax]; lea rax, qword ptr [rdi + 6]; ret; 
0x000000000043c998: nop dword ptr [rax + rax]; lea rax, qword ptr [rdi + 8]; ret; 
0x000000000043c9a8: nop dword ptr [rax + rax]; lea rax, qword ptr [rdi + 9]; ret; 
0x000000000043c928: nop dword ptr [rax + rax]; lea rax, qword ptr [rdi]; ret; 
0x000000000043c388: nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, qword ptr [rdi]; ret; 
0x000000000043bd68: nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000043c3ab: nop dword ptr [rax + rax]; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, qword ptr [rdi + 2]; ret; 
0x000000000043bd78: nop dword ptr [rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000421c38: nop dword ptr [rax + rax]; mov eax, 0x16; ret; 
0x00000000004736cb: nop dword ptr [rax + rax]; mov eax, 0x3f; syscall; 
0x00000000004736cb: nop dword ptr [rax + rax]; mov eax, 0x3f; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x0000000000443268: nop dword ptr [rax + rax]; mov eax, 0x63; syscall; 
0x0000000000473708: nop dword ptr [rax + rax]; mov eax, 0x68; syscall; 
0x0000000000473708: nop dword ptr [rax + rax]; mov eax, 0x68; syscall; ret; 
0x00000000004736f8: nop dword ptr [rax + rax]; mov eax, 0x6b; syscall; 
0x00000000004736f8: nop dword ptr [rax + rax]; mov eax, 0x6b; syscall; ret; 
0x0000000000473718: nop dword ptr [rax + rax]; mov eax, 0x6c; syscall; 
0x0000000000473718: nop dword ptr [rax + rax]; mov eax, 0x6c; syscall; ret; 
0x00000000004409a8: nop dword ptr [rax + rax]; mov eax, 0xb; syscall; 
0x00000000004171d8: nop dword ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x000000000047d533: nop dword ptr [rax + rax]; mov eax, 1; ret; 
0x000000000049d78b: nop dword ptr [rax + rax]; mov eax, 2; add rsp, 8; ret; 
0x000000000049d77b: nop dword ptr [rax + rax]; mov eax, 4; add rsp, 8; ret; 
0x000000000049b898: nop dword ptr [rax + rax]; mov eax, 5; ret; 
0x0000000000443228: nop dword ptr [rax + rax]; mov eax, 8; syscall; 
0x0000000000416f18: nop dword ptr [rax + rax]; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000049a798: nop dword ptr [rax + rax]; mov eax, dword ptr [rip + 0x23c11a]; ret; 
0x0000000000435928: nop dword ptr [rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043bd9b: nop dword ptr [rax + rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x000000000049cf58: nop dword ptr [rax + rax]; mov qword ptr [rdi + 0x98], rsi; ret; 
0x00000000004501a8: nop dword ptr [rax + rax]; mov rax, -0x10; add rax, qword ptr fs:[0]; ret; 
0x00000000004501c8: nop dword ptr [rax + rax]; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x00000000004501e8: nop dword ptr [rax + rax]; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x000000000043fdb3: nop dword ptr [rax + rax]; mov rax, -0x30; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000473973: nop dword ptr [rax + rax]; mov rax, -0x30; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x00000000004171c8: nop dword ptr [rax + rax]; mov rax, -1; ret; 
0x0000000000450328: nop dword ptr [rax + rax]; mov rax, 0xf; syscall; 
0x000000000046f078: nop dword ptr [rax + rax]; mov rax, 1; ret; 
0x000000000046f088: nop dword ptr [rax + rax]; mov rax, 2; ret; 
0x000000000046f098: nop dword ptr [rax + rax]; mov rax, 3; ret; 
0x000000000046f0a8: nop dword ptr [rax + rax]; mov rax, 4; ret; 
0x000000000046f0b8: nop dword ptr [rax + rax]; mov rax, 5; ret; 
0x000000000046f0c8: nop dword ptr [rax + rax]; mov rax, 6; ret; 
0x000000000046f0d8: nop dword ptr [rax + rax]; mov rax, 7; ret; 
0x000000000046d303: nop dword ptr [rax + rax]; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000046d16b: nop dword ptr [rax + rax]; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x000000000046c87b: nop dword ptr [rax + rax]; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000041379b: nop dword ptr [rax + rax]; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000417a5b: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000046d728: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000417248: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000049cf28: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000049cf68: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x000000000049cfc8: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x000000000049cfb8: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000049cf78: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x000000000041566b: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000415bf8: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0xd8]; mov rax, qword ptr [rax + 0x40]; jmp rax; 
0x0000000000413a8b: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 8]; cmp rax, qword ptr [rdi + 0x10]; jae 0x13aa0; movzx eax, byte ptr [rax]; ret; 
0x00000000004462f8: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x290621]; ret; 
0x0000000000417228: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x2b3e89]; ret; 
0x0000000000417258: nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x000000000043c41b: nop dword ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, qword ptr [rdi + 8]; ret; 
0x000000000043bdfb: nop dword ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000043f4e8: nop dword ptr [rax + rax]; mov rdi, rdx; mov eax, esi; syscall; 
0x00000000004505bb: nop dword ptr [rax + rax]; mov rdx, -0x30; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000043bddb: nop dword ptr [rax + rax]; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000041e813: nop dword ptr [rax + rax]; mov rsi, qword ptr [rsp + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x00000000004271e8: nop dword ptr [rax + rax]; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x000000000043dc8b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000043dc7b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000043dc6b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000043dc5b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000043dc4b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000043dc3b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x0000000000412828: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdx]; ret; 
0x00000000004477db: nop dword ptr [rax + rax]; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000435ab8: nop dword ptr [rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000435a38: nop dword ptr [rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000043f4a4: nop dword ptr [rax + rax]; nop dword ptr [rax]; mov eax, 0x25; syscall; 
0x0000000000435921: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004501c1: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x00000000004501e1: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x0000000000450321: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x000000000049cf21: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000435ab1: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000435a31: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x00000000004737d6: nop dword ptr [rax + rax]; nop; mov eax, 0x15; syscall; 
0x00000000004409e6: nop dword ptr [rax + rax]; nop; mov eax, 0x1c; syscall; 
0x00000000004736e6: nop dword ptr [rax + rax]; nop; mov eax, 0x66; syscall; 
0x00000000004409c6: nop dword ptr [rax + rax]; nop; mov eax, 0xa; syscall; 
0x00000000004008e8: nop dword ptr [rax + rax]; pop rbp; ret; 
0x000000000048c783: nop dword ptr [rax + rax]; pop rbx; ret; 
0x000000000049d0eb: nop dword ptr [rax + rax]; ret; 
0x0000000000416653: nop dword ptr [rax + rax]; sub r8, rcx; lea eax, dword ptr [r8 - 1]; ret; 
0x000000000046d473: nop dword ptr [rax + rax]; sub r8, rcx; sar r8, 2; lea eax, dword ptr [r8 - 1]; ret; 
0x0000000000421d2b: nop dword ptr [rax + rax]; test edi, edi; je 0x21d40; mov eax, 0x16; ret; 
0x000000000049acd3: nop dword ptr [rax + rax]; xor eax, eax; add rsp, 8; ret; 
0x000000000043ee68: nop dword ptr [rax + rax]; xor eax, eax; pop rbx; ret; 
0x0000000000412598: nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000401308: nop dword ptr [rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000043c768: nop dword ptr [rax + rax]; xor rax, rax; ret; 
0x000000000046f04c: nop dword ptr [rax]; add rax, 1; ret; 
0x000000000043060c: nop dword ptr [rax]; and eax, 0xff; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000049f30c: nop dword ptr [rax]; and esi, 2; jne 0x9f31b; mov eax, 8; ret; 
0x0000000000426ae9: nop dword ptr [rax]; bsf eax, eax; add rax, rdi; ret; 
0x0000000000426b09: nop dword ptr [rax]; bsf eax, eax; lea rax, qword ptr [rax + rdi + 0x20]; ret; 
0x0000000000426b2c: nop dword ptr [rax]; bsf eax, eax; sub rdx, rax; jbe 0x26b60; lea rax, qword ptr [rdi + rax + 0x10]; ret; 
0x0000000000401195: nop dword ptr [rax]; call qword ptr [rbx + 0x10]; 
0x00000000004980e9: nop dword ptr [rax]; call rax; 
0x000000000049cdd4: nop dword ptr [rax]; cmp byte ptr [r9 + 0xdf], 0; je 0x9cd92; add rsp, 0x18; ret; 
0x000000000048110c: nop dword ptr [rax]; cmp byte ptr [rsp + 0xf], 0; jne 0x81120; xor eax, eax; add rsp, 0x48; ret; 
0x000000000048129c: nop dword ptr [rax]; cmp byte ptr [rsp + 0xf], 0; jne 0x812b0; xor eax, eax; add rsp, 0x48; ret; 
0x000000000043e72d: nop dword ptr [rax]; cmp dl, 1; jb 0x3e737; mov byte ptr [rdi], cl; ret; 
0x000000000047398c: nop dword ptr [rax]; cmp dword ptr [rip + 0x262e85], 0; jne 0x739ad; mov eax, 0x14; syscall; 
0x000000000043fe1c: nop dword ptr [rax]; cmp dword ptr [rip + 0x2969f5], 0; jne 0x3fe3d; mov eax, 2; syscall; 
0x000000000041577d: nop dword ptr [rax]; cmp eax, -1; je 0x15735; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000004158ed: nop dword ptr [rax]; cmp eax, -1; je 0x158a5; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000004422b4: nop dword ptr [rax]; cmp qword ptr [r13 + 0x10], 0; jne 0x41a9b; mov esi, 3; mov rdi, r13; call rbx; 
0x0000000000415a5d: nop dword ptr [rax]; cmp qword ptr [rdi + 0x38], 0; je 0x15a70; ret; 
0x000000000041bfdc: nop dword ptr [rax]; mov byte ptr [rsp + 0x20], r11b; mov qword ptr [rsp + 0x18], r8; mov qword ptr [rsp + 0x10], r10; call rax; 
0x000000000041e6a1: nop dword ptr [rax]; mov dword ptr [rip + 0x2aef56], 0; ret; 
0x000000000044ebcd: nop dword ptr [rax]; mov eax, 0; test rax, rax; je 0x4ebe1; mov edi, 0x6cd720; call rax; 
0x000000000047d944: nop dword ptr [rax]; mov eax, 0; test rax, rax; je 0x7d959; mov edi, 0x6cc140; call rax; 
0x000000000049881d: nop dword ptr [rax]; mov eax, 0; test rax, rax; je 0x98831; mov edi, 0x6cc140; call rax; 
0x000000000043fd29: nop dword ptr [rax]; mov eax, 0x18; syscall; 
0x000000000043f4ac: nop dword ptr [rax]; mov eax, 0x25; syscall; 
0x000000000043f4ac: nop dword ptr [rax]; mov eax, 0x25; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x000000000049ab2d: nop dword ptr [rax]; mov eax, 0x26; syscall; 
0x000000000049ab2d: nop dword ptr [rax]; mov eax, 0x26; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x00000000004407cd: nop dword ptr [rax]; mov eax, 0x61; syscall; 
0x00000000004407cd: nop dword ptr [rax]; mov eax, 0x61; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x000000000046fdad: nop dword ptr [rax]; mov eax, 0xc9; syscall; 
0x000000000046fdad: nop dword ptr [rax]; mov eax, 0xc9; syscall; ret; 
0x0000000000415ae9: nop dword ptr [rax]; mov eax, 0xffffffff; ret; 
0x00000000004115bd: nop dword ptr [rax]; mov eax, dword ptr [rdx]; ret; 
0x0000000000444dad: nop dword ptr [rax]; mov eax, dword ptr [rip + 0x291b5a]; test eax, eax; je 0x44dc0; ret; 
0x00000000004431bd: nop dword ptr [rax]; mov eax, dword ptr [rip + 0x2936fa]; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x000000000043eeb4: nop dword ptr [rax]; mov eax, ecx; shr eax, 0xe; and eax, 0x3fc00; pop rbx; ret; 
0x0000000000473929: nop dword ptr [rax]; mov ecx, 0xc; mov eax, ecx; syscall; 
0x000000000043bdcd: nop dword ptr [rax]; mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x000000000044560d: nop dword ptr [rax]; mov edx, 8; mov eax, edx; ret; 
0x0000000000436049: nop dword ptr [rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x000000000041623c: nop dword ptr [rax]; mov qword ptr [rdi + 0xa0], -1; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000049cf11: nop dword ptr [rax]; mov qword ptr [rdi + rsi*8], rdx; add rsp, 8; ret; 
0x0000000000476bf1: nop dword ptr [rax]; mov qword ptr [rsi], -1; xor eax, eax; ret; 
0x0000000000473085: nop dword ptr [rax]; mov rax, -0x30; mov dword ptr fs:[rax], 0x14; movsxd rdi, ebx; mov eax, 3; syscall; 
0x000000000045057d: nop dword ptr [rax]; mov rax, -0x30; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000049a061: nop dword ptr [rax]; mov rax, -0x30; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x0000000000471981: nop dword ptr [rax]; mov rax, -0x30; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000041d4d9: nop dword ptr [rax]; mov rax, -0x30; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x00000000004730ac: nop dword ptr [rax]; mov rax, -0x30; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x000000000048c1a1: nop dword ptr [rax]; mov rax, -0x30; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000045018c: nop dword ptr [rax]; mov rax, -0x48; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000480df9: nop dword ptr [rax]; mov rax, qword ptr [rax + 8]; ret; 
0x000000000048c9ad: nop dword ptr [rax]; mov rax, qword ptr [rbx + 0x18]; mov qword ptr [rax], rdi; pop rbx; ret; 
0x0000000000414e74: nop dword ptr [rax]; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000049cead: nop dword ptr [rax]; mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000046d1a9: nop dword ptr [rax]; mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x6d1c0; ret; 
0x000000000049ec25: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x22f121]; mov qword ptr [rip + 0x22f11a], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000044d66c: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x280089]; ret; 
0x000000000049acfc: nop dword ptr [rax]; mov rax, qword ptr [rsi + 0xa8]; add rsp, 8; ret; 
0x0000000000416ead: nop dword ptr [rax]; mov rax, qword ptr [rsi + 0xd8]; mov rdi, rbx; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000049d7fd: nop dword ptr [rax]; mov rax, qword ptr [rsi + 8]; add rsp, 8; ret; 
0x000000000046eb49: nop dword ptr [rax]; mov rax, rdi; ret; 
0x000000000043be1d: nop dword ptr [rax]; mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000043be2d: nop dword ptr [rax]; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x000000000045d2f4: nop dword ptr [rax]; mov rdi, qword ptr [rdi + 0x218]; movsxd rbx, edx; mov rdx, rbx; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000040e3ed: nop dword ptr [rax]; mov rdx, -0x30; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000435e89: nop dword ptr [rax]; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x0000000000420155: nop dword ptr [rax]; mov rdx, qword ptr [rsp + 0x68]; mov rsi, r12; mov rdi, rbx; call rax; 
0x0000000000498544: nop dword ptr [rax]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x000000000043be7c: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000043c4fd: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, qword ptr [rdi + 0x10]; ret; 
0x000000000043be69: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000004125d9: nop dword ptr [rax]; movsxd rdi, dword ptr [rdi + 0x70]; mov eax, 3; syscall; 
0x000000000044e7b1: nop dword ptr [rax]; movsxd rdi, edi; mov rax, qword ptr [rdi*8 + 0x6cca40]; ret; 
0x000000000044f949: nop dword ptr [rax]; movsxd rdi, r14d; mov eax, 3; syscall; 
0x0000000000426c6d: nop dword ptr [rax]; movzx eax, byte ptr [rdi]; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x0000000000436199: nop dword ptr [rax]; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x0000000000436129: nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000444fa9: nop dword ptr [rax]; neg rax; mov dword ptr fs:[0xffffffffffffffd0], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000042d862: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; bsf eax, eax; lea rax, qword ptr [rax + rdi - 0x10]; ret; 
0x000000000043bd73: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000417203: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x000000000046d723: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000417243: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x68]; ret; 
0x0000000000415bf3: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0xd8]; mov rax, qword ptr [rax + 0x40]; jmp rax; 
0x0000000000417222: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rip + 0x2b3e89]; ret; 
0x000000000043e602: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; xor eax, eax; ret; 
0x0000000000400935: nop dword ptr [rax]; pop rbp; ret; 
0x0000000000420d04: nop dword ptr [rax]; pop rbx; mov rsi, r12; pop rbp; pop r12; jmp rax; 
0x000000000041f214: nop dword ptr [rax]; pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000043f06c: nop dword ptr [rax]; pop rbx; ret; 
0x000000000040f1cd: nop dword ptr [rax]; shl rax, 5; mov rax, qword ptr [r13 + rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000046df9d: nop dword ptr [rax]; test rsi, rsi; jne 0x6dfa9; xor rax, rax; ret; 
0x000000000043e6e9: nop dword ptr [rax]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000049f16d: nop dword ptr [rax]; xor eax, eax; add rsp, 8; ret; 
0x000000000041d4f1: nop dword ptr [rax]; xor eax, eax; pop rbx; ret; 
0x0000000000411e04: nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000042d8a9: nop dword ptr [rax]; xor rax, rax; ret; 
0x000000000046f057: nop dword ptr cs:[rax + rax]; add rax, 3; ret; 
0x000000000042d867: nop dword ptr cs:[rax + rax]; bsf eax, eax; lea rax, qword ptr [rax + rdi - 0x10]; ret; 
0x000000000043c9b7: nop dword ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 0xa]; ret; 
0x000000000043c9c7: nop dword ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 0xb]; ret; 
0x000000000043c9d7: nop dword ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 0xc]; ret; 
0x000000000043c9e7: nop dword ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 0xd]; ret; 
0x000000000043c9f7: nop dword ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 0xe]; ret; 
0x000000000043c937: nop dword ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 1]; ret; 
0x000000000043c947: nop dword ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 2]; ret; 
0x000000000043c957: nop dword ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 3]; ret; 
0x000000000043c967: nop dword ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 4]; ret; 
0x000000000043c977: nop dword ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 5]; ret; 
0x000000000043c987: nop dword ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 6]; ret; 
0x000000000043c997: nop dword ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 8]; ret; 
0x000000000043c9a7: nop dword ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 9]; ret; 
0x000000000043c927: nop dword ptr cs:[rax + rax]; lea rax, qword ptr [rdi]; ret; 
0x000000000043c387: nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; lea rax, qword ptr [rdi]; ret; 
0x000000000043bd67: nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000043bd77: nop dword ptr cs:[rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000004409a7: nop dword ptr cs:[rax + rax]; mov eax, 0xb; syscall; 
0x0000000000417207: nop dword ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x0000000000416f17: nop dword ptr cs:[rax + rax]; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x0000000000435927: nop dword ptr cs:[rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000049cf57: nop dword ptr cs:[rax + rax]; mov qword ptr [rdi + 0x98], rsi; ret; 
0x00000000004501c7: nop dword ptr cs:[rax + rax]; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x00000000004501e7: nop dword ptr cs:[rax + rax]; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x00000000004171c7: nop dword ptr cs:[rax + rax]; mov rax, -1; ret; 
0x0000000000450327: nop dword ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x000000000046f077: nop dword ptr cs:[rax + rax]; mov rax, 1; ret; 
0x000000000046d727: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000417247: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000049cf27: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000049cfb7: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x0000000000415bf7: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0xd8]; mov rax, qword ptr [rax + 0x40]; jmp rax; 
0x00000000004462f7: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rip + 0x290621]; ret; 
0x0000000000417227: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rip + 0x2b3e89]; ret; 
0x0000000000417257: nop dword ptr cs:[rax + rax]; mov rax, rdi; ret; 
0x00000000004271e7: nop dword ptr cs:[rax + rax]; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000435ab7: nop dword ptr cs:[rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000435a37: nop dword ptr cs:[rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000043f4a3: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0x25; syscall; 
0x00000000004737d5: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x15; syscall; 
0x00000000004409e5: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x1c; syscall; 
0x00000000004736e5: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x66; syscall; 
0x00000000004409c5: nop dword ptr cs:[rax + rax]; nop; mov eax, 0xa; syscall; 
0x000000000043e607: nop dword ptr cs:[rax + rax]; xor eax, eax; ret; 
0x0000000000401307: nop dword ptr cs:[rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000043c767: nop dword ptr cs:[rax + rax]; xor rax, rax; ret; 
0x0000000000480dca: nop word ptr [rax + rax]; add rsp, 8; ret; 
0x0000000000426af7: nop word ptr [rax + rax]; bsf eax, eax; lea rax, qword ptr [rax + rdi + 0x10]; ret; 
0x000000000049828a: nop word ptr [rax + rax]; call rbx; 
0x000000000043e6fa: nop word ptr [rax + rax]; cmp dl, 8; jb 0x3e710; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x00000000004434ba: nop word ptr [rax + rax]; cmp eax, -1; jne 0x434b8; xor eax, eax; leave; ret; 
0x00000000004422f2: nop word ptr [rax + rax]; cmp qword ptr [r13 + 0x10], 0; jne 0x4181d; mov esi, 3; mov rdi, r13; call rbx; 
0x00000000004422d2: nop word ptr [rax + rax]; cmp qword ptr [r13 + 0x10], 0; jne 0x41d4a; mov esi, 3; mov rdi, r13; call rbx; 
0x0000000000442332: nop word ptr [rax + rax]; cmp qword ptr [r14 + 0x10], 0; jne 0x41841; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442392: nop word ptr [rax + rax]; cmp qword ptr [r14 + 0x10], 0; jne 0x41966; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442372: nop word ptr [rax + rax]; cmp qword ptr [r14 + 0x10], 0; jne 0x41abf; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442412: nop word ptr [rax + rax]; cmp qword ptr [r14 + 0x10], 0; jne 0x41d6e; mov esi, 3; mov rdi, r14; call rbx; 
0x00000000004423d2: nop word ptr [rax + rax]; cmp qword ptr [r14 + 0x10], 0; jne 0x41fec; mov esi, 3; mov rdi, r14; call rbx; 
0x00000000004423b2: nop word ptr [rax + rax]; cmp qword ptr [r14 + 0x10], 0; jne 0x42111; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442572: nop word ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x41861; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004425d2: nop word ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x418da; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442612: nop word ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x41986; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004425f2: nop word ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x419ff; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442532: nop word ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x41c7d; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442452: nop word ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x41d8e; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442432: nop word ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x41e07; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004424f2: nop word ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x41f2c; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004424d2: nop word ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x4200c; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004424b2: nop word ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x42085; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442472: nop word ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x421aa; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004736ca: nop word ptr [rax + rax]; mov eax, 0x3f; syscall; 
0x00000000004736ca: nop word ptr [rax + rax]; mov eax, 0x3f; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x0000000000443267: nop word ptr [rax + rax]; mov eax, 0x63; syscall; 
0x000000000046c937: nop word ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x000000000047d532: nop word ptr [rax + rax]; mov eax, 1; ret; 
0x000000000049d78a: nop word ptr [rax + rax]; mov eax, 2; add rsp, 8; ret; 
0x000000000049d77a: nop word ptr [rax + rax]; mov eax, 4; add rsp, 8; ret; 
0x0000000000443227: nop word ptr [rax + rax]; mov eax, 8; syscall; 
0x000000000049a797: nop word ptr [rax + rax]; mov eax, dword ptr [rip + 0x23c11a]; ret; 
0x000000000043bd9a: nop word ptr [rax + rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x00000000004501a7: nop word ptr [rax + rax]; mov rax, -0x10; add rax, qword ptr fs:[0]; ret; 
0x000000000043fdb2: nop word ptr [rax + rax]; mov rax, -0x30; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000473972: nop word ptr [rax + rax]; mov rax, -0x30; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000046d302: nop word ptr [rax + rax]; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000041379a: nop word ptr [rax + rax]; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000041566a: nop word ptr [rax + rax]; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000413a8a: nop word ptr [rax + rax]; mov rax, qword ptr [rdi + 8]; cmp rax, qword ptr [rdi + 0x10]; jae 0x13aa0; movzx eax, byte ptr [rax]; ret; 
0x000000000043bdfa: nop word ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000043f4e7: nop word ptr [rax + rax]; mov rdi, rdx; mov eax, esi; syscall; 
0x00000000004505ba: nop word ptr [rax + rax]; mov rdx, -0x30; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000412827: nop word ptr [rax + rax]; movzx eax, byte ptr [rdx]; ret; 
0x00000000004477da: nop word ptr [rax + rax]; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000004008e7: nop word ptr [rax + rax]; pop rbp; ret; 
0x0000000000416652: nop word ptr [rax + rax]; sub r8, rcx; lea eax, dword ptr [r8 - 1]; ret; 
0x000000000046d472: nop word ptr [rax + rax]; sub r8, rcx; sar r8, 2; lea eax, dword ptr [r8 - 1]; ret; 
0x000000000049d79a: nop word ptr [rax + rax]; xor eax, eax; add rsp, 8; ret; 
0x000000000043ee67: nop word ptr [rax + rax]; xor eax, eax; pop rbx; ret; 
0x0000000000413e0a: nop word ptr [rax + rax]; xor eax, eax; ret; 
0x000000000046f056: nop word ptr cs:[rax + rax]; add rax, 3; ret; 
0x000000000042d866: nop word ptr cs:[rax + rax]; bsf eax, eax; lea rax, qword ptr [rax + rdi - 0x10]; ret; 
0x000000000043c9b6: nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 0xa]; ret; 
0x000000000043c9c6: nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 0xb]; ret; 
0x000000000043c9d6: nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 0xc]; ret; 
0x000000000043c9e6: nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 0xd]; ret; 
0x000000000043c9f6: nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 0xe]; ret; 
0x000000000043c936: nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 1]; ret; 
0x000000000043c946: nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 2]; ret; 
0x000000000043c956: nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 3]; ret; 
0x000000000043c966: nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 4]; ret; 
0x000000000043c976: nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 5]; ret; 
0x000000000043c986: nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 6]; ret; 
0x000000000043c996: nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 8]; ret; 
0x000000000043c9a6: nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 9]; ret; 
0x000000000043c926: nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi]; ret; 
0x000000000043c386: nop word ptr cs:[rax + rax]; mov byte ptr [rdi], dh; lea rax, qword ptr [rdi]; ret; 
0x000000000043bd66: nop word ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000043bd76: nop word ptr cs:[rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000004409a6: nop word ptr cs:[rax + rax]; mov eax, 0xb; syscall; 
0x0000000000417206: nop word ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x0000000000416f16: nop word ptr cs:[rax + rax]; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x0000000000435926: nop word ptr cs:[rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000049cf56: nop word ptr cs:[rax + rax]; mov qword ptr [rdi + 0x98], rsi; ret; 
0x00000000004501c6: nop word ptr cs:[rax + rax]; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x00000000004501e6: nop word ptr cs:[rax + rax]; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x00000000004171c6: nop word ptr cs:[rax + rax]; mov rax, -1; ret; 
0x0000000000450326: nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x000000000046f076: nop word ptr cs:[rax + rax]; mov rax, 1; ret; 
0x000000000046d726: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000417246: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000049cf26: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000049cfb6: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x0000000000415bf6: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0xd8]; mov rax, qword ptr [rax + 0x40]; jmp rax; 
0x00000000004462f6: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rip + 0x290621]; ret; 
0x0000000000417226: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rip + 0x2b3e89]; ret; 
0x0000000000417256: nop word ptr cs:[rax + rax]; mov rax, rdi; ret; 
0x00000000004271e6: nop word ptr cs:[rax + rax]; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000435ab6: nop word ptr cs:[rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000435a36: nop word ptr cs:[rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000043f4a2: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0x25; syscall; 
0x00000000004737d4: nop word ptr cs:[rax + rax]; nop; mov eax, 0x15; syscall; 
0x00000000004409e4: nop word ptr cs:[rax + rax]; nop; mov eax, 0x1c; syscall; 
0x00000000004736e4: nop word ptr cs:[rax + rax]; nop; mov eax, 0x66; syscall; 
0x00000000004409c4: nop word ptr cs:[rax + rax]; nop; mov eax, 0xa; syscall; 
0x000000000043e606: nop word ptr cs:[rax + rax]; xor eax, eax; ret; 
0x0000000000401306: nop word ptr cs:[rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000043c766: nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x0000000000410e98: nop; add byte ptr [rax], 0; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x0000000000413e7c: nop; add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x00000000004958e7: nop; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; jl 0x95913; js 0x95932; call rsp; 
0x0000000000495bfc: nop; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; jl 0x95c28; js 0x95c47; call rsp; 
0x0000000000495fc3: nop; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; jl 0x95fef; js 0x9600e; call rsp; 
0x00000000004351eb: nop; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x000000000046d87b: nop; add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x18; mov rdi, r12; call rbx; 
0x0000000000495c2e: nop; add byte ptr [rax], al; add byte ptr [rbx + 0x3950245c], cl; ret; 
0x000000000046b4cb: nop; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000046d959: nop; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; lea rdx, qword ptr [rsp + 0x18]; lea r9, qword ptr [rsp + 0x10]; call rbx; 
0x000000000042f31c: nop; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004c8095: nop; add byte ptr [rax], al; test al, 0x8f; sti; jmp qword ptr [rsi]; 
0x000000000041bbaa: nop; add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; push rax; adc dh, dh; ret 0xf0f; 
0x0000000000470ce6: nop; add dword ptr [rax], eax; add byte ptr [rcx], bh; ror dword ptr [rdi], -0x6c; ret; 
0x00000000004bff6d: nop; add dword ptr [rsi + rcx + 0x10], ecx; je 0xbff7e; ret; 
0x000000000043f0cf: nop; add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x000000000044578f: nop; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004be3c8: nop; and al, 0xfd; push qword ptr [rax + 0x26]; std; call qword ptr [rax + 0x28]; 
0x0000000000426adf: nop; bsf eax, eax; lea rax, qword ptr [rax + rdi - 0x10]; ret; 
0x0000000000426b3f: nop; bsf eax, eax; sub rdx, rax; jbe 0x26b60; lea rax, qword ptr [rdi + rax + 0x20]; ret; 
0x0000000000426b4f: nop; bsf eax, eax; sub rdx, rax; jbe 0x26b60; lea rax, qword ptr [rdi + rax + 0x30]; ret; 
0x000000000043c30f: nop; bsf rdx, rdx; lea r11, qword ptr [rip + 0x686b5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000049a8ff: nop; call rax; 
0x00000000004a4944: nop; cmp al, 0xf9; call qword ptr [rax + 0x10fff93e]; and ecx, edi; jmp qword ptr [rax]; 
0x00000000004a4940: nop; cmp bh, cl; call qword ptr [rax - 0x6f0006c4]; stc; call qword ptr [rax]; 
0x000000000043e71f: nop; cmp dl, 2; jb 0x3e730; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x00000000004737ff: nop; cmp dword ptr [rip + 0x263015], 0; jne 0x7381d; mov eax, 3; syscall; 
0x00000000004a3e94: nop; div edi; jmp qword ptr [rax - 8]; 
0x00000000004813af: nop; jmp rdx; 
0x000000000044639d: nop; jo 0x463e4; add byte ptr [rdi + 0x6cd6d8], bh; call rax; 
0x000000000044649c: nop; jo 0x464e3; add byte ptr [rdi + 0x6cd6d8], bh; call rax; 
0x000000000045b03f: nop; lea eax, dword ptr [rdi - 1]; xor edx, edx; div ecx; add eax, r8d; ret; 
0x00000000004a43d8: nop; leave; clc; jmp rax; 
0x0000000000400a60: nop; leave; ret; 
0x00000000004a42d8: nop; loope 0xa42d3; push qword ptr [rax - 0x1d]; clc; call qword ptr [rax - 0x1b]; 
0x00000000004a4000: nop; mov al, bh; jmp rax; 
0x000000000043227f: nop; mov dl, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004798bf: nop; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x000000000043245f: nop; mov dx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000043263f: nop; mov dx, word ptr [rsi - 3]; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000044e8ef: nop; mov eax, 0; test rax, rax; je 0x4e908; mov edi, 0x6cd720; call rax; 
0x000000000040099f: nop; mov eax, 0; test rax, rax; je 0x998; call rax; 
0x00000000004737df: nop; mov eax, 0x15; syscall; 
0x00000000004737df: nop; mov eax, 0x15; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x00000000004409ef: nop; mov eax, 0x1c; syscall; 
0x00000000004409ef: nop; mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x00000000004736ef: nop; mov eax, 0x66; syscall; 
0x00000000004736ef: nop; mov eax, 0x66; syscall; ret; 
0x00000000004409cf: nop; mov eax, 0xa; syscall; 
0x00000000004409cf: nop; mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x00000000004432e4: nop; mov eax, 0xca; syscall; 
0x000000000041785f: nop; mov eax, 0xffffffff; ret; 
0x0000000000410b2f: nop; mov eax, dword ptr [rdx]; ret; 
0x000000000043281f: nop; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043c3bf: nop; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, qword ptr [rdi + 3]; ret; 
0x000000000044324f: nop; mov r10, rcx; mov eax, 0x19; syscall; 
0x000000000045059f: nop; mov r10d, 8; movsxd rdi, edi; mov eax, 0xe; syscall; 
0x000000000044e79f: nop; mov rax, -0x30; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000047d53f: nop; mov rax, -0x30; pop rbx; mov eax, dword ptr fs:[rax]; ret; 
0x00000000004125cf: nop; mov rax, -1; pop rbx; ret; 
0x000000000041657f: nop; mov rax, -1; ret; 
0x00000000004159df: nop; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000004165ff: nop; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x30]; 
0x000000000046c66f: nop; mov rax, qword ptr [rdi + 0xd8]; push rbx; mov rbx, rdi; call qword ptr [rax + 0x20]; 
0x000000000046d52f: nop; mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000049ed7f: nop; mov rax, qword ptr [rip + 0x22efc9]; mov qword ptr [rip + 0x22efc2], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x0000000000417b74: nop; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000043be0f: nop; mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000043be3f: nop; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000043be4f: nop; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x000000000043fd9f: nop; mov rdx, -0x30; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000043c40f: nop; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, qword ptr [rdi + 7]; ret; 
0x00000000004123bf: nop; mov rdx, r8; mov rsi, r13; mov rdi, r14; mov eax, r9d; syscall; 
0x000000000041f53f: nop; mov rsi, qword ptr [rsp + 0x28]; mov rdi, rbp; call rax; 
0x000000000043beaf: nop; movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000043be5f: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000044f92f: nop; movsxd rdi, r14d; mov eax, 3; syscall; 
0x0000000000450320: nop; nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x000000000046f055: nop; nop word ptr cs:[rax + rax]; add rax, 3; ret; 
0x000000000043c9b5: nop; nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 0xa]; ret; 
0x000000000043c9c5: nop; nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 0xb]; ret; 
0x000000000043c9d5: nop; nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 0xc]; ret; 
0x000000000043c9e5: nop; nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 0xd]; ret; 
0x000000000043c9f5: nop; nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 0xe]; ret; 
0x000000000043c935: nop; nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 1]; ret; 
0x000000000043c945: nop; nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 2]; ret; 
0x000000000043c955: nop; nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 3]; ret; 
0x000000000043c965: nop; nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 4]; ret; 
0x000000000043c975: nop; nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 5]; ret; 
0x000000000043c985: nop; nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 6]; ret; 
0x000000000043c995: nop; nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 8]; ret; 
0x000000000043c9a5: nop; nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 9]; ret; 
0x000000000043c925: nop; nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi]; ret; 
0x0000000000416f15: nop; nop word ptr cs:[rax + rax]; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000049cf55: nop; nop word ptr cs:[rax + rax]; mov qword ptr [rdi + 0x98], rsi; ret; 
0x00000000004171c5: nop; nop word ptr cs:[rax + rax]; mov rax, -1; ret; 
0x000000000046f075: nop; nop word ptr cs:[rax + rax]; mov rax, 1; ret; 
0x000000000049cfb5: nop; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x0000000000417255: nop; nop word ptr cs:[rax + rax]; mov rax, rdi; ret; 
0x000000000043c765: nop; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x00000000004c1270: nop; pop rbp; cmc; jmp qword ptr [rdx]; 
0x0000000000400d1e: nop; pop rbp; ret; 
0x0000000000440454: nop; push rdi; add byte ptr [rax + 0x63], cl; jl 0x40480; adc byte ptr [rax + 0x101], bh; syscall; 
0x000000000040a18c: nop; ret 0xffff; 
0x00000000004a4390: nop; ret; 
0x00000000004bea68: nop; sar ebp, -1; movabs al, byte ptr [0x18fffdc128fffdc1]; ret 0xfffd; 
0x00000000004a462c: nop; sbb bh, cl; jmp qword ptr [rax]; 
0x00000000004a4414: nop; sbb eax, 0x1d20fff9; stc; push qword ptr [rax + 0x40fff91c]; sbb al, 0xf9; call rax; 
0x00000000004a4948: nop; stc; call qword ptr [rax]; 
0x00000000004a4948: nop; stc; call qword ptr [rax]; and ecx, edi; jmp qword ptr [rax]; 
0x00000000004be440: nop; std; cld; jmp rax; 
0x00000000004c7850: nop; sti; jmp qword ptr [rdx]; 
0x0000000000416f4f: nop; sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000426b6f: nop; test dword ptr [rip + 0x2a6b16], 0x200; jne 0x26b84; lea rax, qword ptr [rip + 0x1d]; ret; 
0x00000000004a43c4: nop; xlatb; clc; jmp rax; 
0x0000000000426c9f: nop; xor eax, eax; ret; 
0x0000000000426b5f: nop; xor rax, rax; ret; 
0x000000000044e061: not byte ptr [rbx + 0x74]; or eax, dword ptr [rbx + 0x67403fe]; pop rbx; ret; 
0x0000000000445651: not eax; xor edx, edx; add eax, 2; push rax; call rbx; 
0x000000000048cbe9: or ah, byte ptr [rax + rax]; add byte ptr [rdx], al; add byte ptr [rax], al; jne 0x8cbf9; lea rax, qword ptr [rip + 0x67]; ret; 
0x000000000048cc3c: or ah, byte ptr [rax + rax]; add byte ptr [rdx], al; add byte ptr [rax], al; jne 0x8cc4c; lea rax, qword ptr [rip + 4]; ret; 
0x000000000046b6f2: or al, 0; add byte ptr [rax + 1], bh; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000042a9c7: or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042c03f: or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004bfcf5: or al, 0; add byte ptr [rax - 9], bl; hlt; call qword ptr [rax]; 
0x00000000004bfd0d: or al, 0; add byte ptr [rax - 9], dl; hlt; call qword ptr [rdx]; 
0x0000000000473982: or al, 0; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000473931: or al, 0; add byte ptr [rax], al; mov eax, ecx; syscall; 
0x000000000041d4ea: or al, 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004738ff: or al, 0; add rsp, 0x30; mov eax, ebx; pop rbx; ret; 
0x00000000004233f6: or al, 0x16; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042efc8: or al, 0x16; test al, al; jne 0x2efb0; xor eax, eax; sub eax, ecx; ret; 
0x000000000041d642: or al, 0x18; mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041d4d2: or al, 0x18; mov rax, r8; pop rbx; ret; 
0x000000000041c0a8: or al, 0x24; call rdx; 
0x0000000000444aa1: or al, 0x24; je 0x44aac; mov edi, 0x6cc140; call rax; 
0x00000000004c158c: or al, 0x25; add byte ptr [rax], al; adc byte ptr [rbx - 0xb], ah; call qword ptr [rsi]; 
0x000000000040127a: or al, 0x41; call rsp; 
0x00000000004463bf: or al, 0x48; add esp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x00000000004810a0: or al, 0x48; add esp, 0x38; ret; 
0x000000000049a145: or al, 0x48; mov eax, dword ptr [rbx + 0xd8]; mov ecx, ebp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x00000000004012ce: or al, 0x48; mov eax, dword ptr [rsp + 0x18]; call rax; 
0x000000000049a592: or al, 0x48; mov edx, dword ptr [rip + 0x23359e]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000047d11b: or al, 0x5b; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000048cb43: or al, 0x5b; pop rbp; pop r12; ret; 
0x000000000049562f: or al, 0x5d; pop r12; pop r14; ret; 
0x00000000004c6e8c: or al, 0x7e; add byte ptr [rax], al; jo 0xc6e5b; cli; call qword ptr [rcx]; 
0x000000000046ab3a: or al, 0x7e; ret; 
0x000000000045df79: or al, 0x83; ret; 
0x000000000045987c: or al, 0x85; sal byte ptr [rbp + 5], 0xf6; ret 0x7450; 
0x0000000000429ab4: or al, 0x8a; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000436309: or al, 0x8b; mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000482afb: or al, 0x8d; push rcx; rol byte ptr [rax - 0x6df0f506], 1; ret 0xb60f; 
0x0000000000473ab8: or al, 0x8e; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000042efff: or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000043bc2b: or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000004ca317: or al, 0xa5; add ebp, eax; add ebp, esi; add al, byte ptr [rax]; ret; 
0x000000000049ada3: or al, 0xb6; add rcx, r14; jmp rcx; 
0x000000000043bc2f: or al, 0xb; jmp rcx; 
0x0000000000481097: or al, 0xe8; ret; 
0x0000000000435cc3: or al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x00000000004271e3: or al, 0xf3; ret; 
0x000000000046b25b: or al, 0xf6; ret 0xf04; 
0x000000000045defc: or al, 0xf6; ret 0xf08; 
0x000000000049d777: or al, 0xf7; jmp qword ptr [rsi + 0xf]; 
0x000000000049cf05: or al, 0xf7; jne 0x9cef3; mov qword ptr [rcx], rdx; add rsp, 8; ret; 
0x00000000004a4811: or al, 0xf9; call qword ptr [rax]; 
0x00000000004a484d: or al, 0xf9; jmp qword ptr [rax + 0xc]; 
0x00000000004a488d: or al, 0xf9; jmp qword ptr [rax]; 
0x00000000004a480d: or al, 0xf9; ljmp ptr [rdx + 0xc]; stc; call qword ptr [rax]; 
0x00000000004a4651: or al, 0xf9; push qword ptr [rax + 0x14]; stc; push rax; adc edi, ecx; jmp qword ptr [rax + 0x13]; 
0x000000000043397a: or al, 7; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004c9304: or al, 7; or byte ptr [rcx + 0xb], al; add esp, dword ptr [rsi]; add dword ptr [rdx], ecx; ret; 
0x000000000048170b: or al, bh; jmp qword ptr [rsi - 0x70]; 
0x0000000000450711: or al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; adc byte ptr [r8 + 0x39], r9b; ret; 
0x000000000045072d: or al, byte ptr [rax]; add byte ptr [rax - 0x75], cl; jl 0x50758; or byte ptr [rax - 0x7d], cl; call qword ptr [rbx]; 
0x000000000042368d: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042abd1: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004236b1: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000049cc1e: or al, byte ptr [rax]; add byte ptr [rax], al; mov edi, 1; call rax; 
0x00000000004409d1: or al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000004409d1: or al, byte ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x00000000004aea75: or al, byte ptr [rax]; add byte ptr [rdx + rcx + 0xabf0000], bh; add byte ptr [rax], al; ret 0xa; 
0x00000000004aea6d: or al, byte ptr [rax]; add byte ptr [rsi - 0x46fffff6], dh; or al, byte ptr [rax]; add byte ptr [rdx + rcx + 0xabf0000], bh; add byte ptr [rax], al; ret 0xa; 
0x000000000048c3be: or al, byte ptr [rbp + 0x64cb75c9]; mov dword ptr [rdx], 5; pop rbx; ret; 
0x0000000000408b96: or al, byte ptr [rbx - 0x7bf0fd07]; ret; 
0x00000000004976f0: or al, byte ptr [rbx - 0x7cb7fe40]; ret 0x8008; 
0x0000000000482627: or al, byte ptr [rcx + 0xf]; xchg eax, edx; ret 0x8348; 
0x00000000004c7d83: or al, byte ptr [rcx]; ret; 
0x00000000004921c7: or al, byte ptr es:[rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043fe40: or al, ch; fidiv dword ptr [rax + rax]; add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 2; syscall; 
0x000000000043fea0: or al, ch; jp 0x3fed8; add byte ptr [rax], al; mov qword ptr [rsp], rax; mov eax, 0; syscall; 
0x00000000004800bd: or al, ch; lea edi, dword ptr [rsi + 1]; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000040ca58: or al, ch; ret 0xff99; 
0x000000000046ddd8: or al, ch; ret 1; 
0x0000000000409657: or al, ch; ret; 
0x000000000043ff00: or al, ch; sbb dh, byte ptr [rax + rax]; add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 1; syscall; 
0x000000000048170a: or al, dil; jmp qword ptr [rsi - 0x70]; 
0x0000000000479d9b: or bh, bh; adc eax, 0x2523e6; xor eax, eax; add rsp, 8; ret; 
0x0000000000415a5a: or bl, ch; mov edx, 0x48001f0f; cmp dword ptr [rdi + 0x38], 0; je 0x15a70; ret; 
0x0000000000435e83: or bl, dh; movq qword ptr [rdi], mm1; ret; 
0x00000000004505b7: or bl, dh; ret; 
0x000000000040ac05: or byte ptr [eax], al; add byte ptr [rbx - 0x7bf0fe08], al; ret 8; 
0x0000000000412136: or byte ptr [r10 + 1], dil; mov rsi, rbx; mov rdi, r12; mov eax, r9d; syscall; 
0x00000000004975c0: or byte ptr [r11 - 0x72b6fd18], r8b; jl 0x9758e; adc byte ptr [rax - 0x77], cl; retf 0x8b48; xor cl, byte ptr [rax - 0x7d]; ret 0xf08; 
0x000000000042730c: or byte ptr [r11 - 0x72b7ef16], r8b; jbe 0x27325; lea rdi, qword ptr [rdi + 0x10]; jne 0x27300; mov rax, rdi; ret; 
0x000000000041281b: or byte ptr [r15], cl; mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000415986: or byte ptr [r15], cl; mov dh, 2; pop rbx; ret; 
0x000000000047b0e1: or byte ptr [r8 + 0x29], cl; ror byte ptr [rcx - 0x77], 1; add ch, cl; ret 0xfffd; 
0x0000000000411047: or byte ptr [r8 + 0x29], r9b; ret; 
0x0000000000413a92: or byte ptr [r8 + 0x3b], r9b; adc byte ptr [r11 + 6], r14b; movzx eax, byte ptr [rax]; ret; 
0x000000000047ccbf: or byte ptr [r8 - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000043a0d8: or byte ptr [r8 - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000498536: or byte ptr [r8 - 0x77], cl; ret; 
0x000000000041564c: or byte ptr [r8 - 0x77], cl; xor byte ptr [r8 - 0x77], cl; and byte ptr [r9 + 0x5bc03113], cl; ret; 
0x000000000040f102: or byte ptr [r8 - 0x77], r9b; ret 0xc148; 
0x00000000004413f7: or byte ptr [r8 - 0x7d], r9b; ret; 
0x00000000004110fc: or byte ptr [r8 - 9], r9b; fimul dword ptr [rax - 0x77]; ror dword ptr [rax + 0x29], cl; ret; 
0x00000000004923a2: or byte ptr [r8], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000049ad9d: or byte ptr [r8], r8b; add byte ptr [rcx + 0x63], cl; or al, 0xb6; add rcx, r14; jmp rcx; 
0x0000000000472c93: or byte ptr [r9 + 0x39], cl; ret 0x8e0f; 
0x000000000049c627: or byte ptr [r9 + 0x63], cl; add al, 0x86; add rax, r14; jmp rax; 
0x000000000043a197: or byte ptr [r9 - 0x76b7f7be], cl; clc; ret; 
0x000000000046cc1f: or byte ptr [r9 - 0x77], r9b; ret; 
0x00000000004177db: or byte ptr [rax + 0x29], cl; ret 0x149; 
0x0000000000411048: or byte ptr [rax + 0x29], cl; ret; 
0x000000000047b0e2: or byte ptr [rax + 0x29], cl; ror byte ptr [rcx - 0x77], 1; add ch, cl; ret 0xfffd; 
0x0000000000411032: or byte ptr [rax + 0x2b], cl; adc dword ptr [rax - 0x3f], ecx; cli; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x2948; 
0x000000000041c939: or byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000048ac85: or byte ptr [rax + 0x39], cl; ret 0x8949; 
0x00000000004430a5: or byte ptr [rax + 0x39], cl; ret; 
0x0000000000413a93: or byte ptr [rax + 0x3b], cl; adc byte ptr [r11 + 6], r14b; movzx eax, byte ptr [rax]; ret; 
0x0000000000440156: or byte ptr [rax + 0x4f], bh; syscall; 
0x00000000004c6cc2: or byte ptr [rax + 0xb], cl; push rdx; ret; 
0x000000000046dda7: or byte ptr [rax + 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x000000000047e65b: or byte ptr [rax + 1], bh; pop rbx; pop rbp; ret; 
0x000000000041bc47: or byte ptr [rax + 1], cl; ret 0x8948; 
0x00000000004046dc: or byte ptr [rax + 1], cl; ret; 
0x000000000049839c: or byte ptr [rax + 3], cl; add ecx, dword ptr [rcx + rcx*4 - 0x16]; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000443459: or byte ptr [rax + 5], bh; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x00000000004c0bef: or byte ptr [rax + rax], al; add byte ptr [rbx + rbx], dh; add byte ptr [rax + 0x42], bl; cmc; call qword ptr [rcx + 2]; 
0x00000000004c13ff: or byte ptr [rax + rax], dl; add byte ptr [rax], al; test byte ptr [rbx], ah; add byte ptr [rax], al; sbb byte ptr [rdi - 0xb], bl; jmp qword ptr [rax]; 
0x0000000000480e13: or byte ptr [rax + rcx*2 + 0x2b], ah; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000480e12: or byte ptr [rax + rcx*2 + 0x2b], spl; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004c3948: or byte ptr [rax + rdi*8], dl; call qword ptr [rbx]; 
0x00000000004708bc: or byte ptr [rax - 0x39], cl; ret; 
0x0000000000426b7b: or byte ptr [rax - 0x73], cl; add eax, 0x1d; ret; 
0x0000000000426b8f: or byte ptr [rax - 0x73], cl; add eax, 0x8449; ret; 
0x00000000004267b2: or byte ptr [rax - 0x73], cl; push rax; add eax, ebp; add byte ptr fs:[rax], al; add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x0000000000419563: or byte ptr [rax - 0x75], cl; adc byte ptr [rcx - 0x7d], al; ret 0x4801; 
0x000000000047cbc8: or byte ptr [rax - 0x75], cl; add eax, 0x259800; ret; 
0x0000000000440f31: or byte ptr [rax - 0x75], cl; cmp byte ptr [rax - 0x77], cl; and al, 8; call rbx; 
0x0000000000440151: or byte ptr [rax - 0x75], cl; jl 0x4017a; or byte ptr [rax + 0x4f], bh; syscall; 
0x000000000047b9b1: or byte ptr [rax - 0x75], cl; mov byte ptr [r8 - 0x77], r9b; or byte ptr [rax - 0x77], cl; ror byte ptr [rax - 0x7d], 1; ret 0x4801; 
0x000000000049cf02: or byte ptr [rax - 0x75], cl; or al, 0xf7; jne 0x9cef3; mov qword ptr [rcx], rdx; add rsp, 8; ret; 
0x000000000049d5a7: or byte ptr [rax - 0x75], cl; or byte ptr [rdx + 1], dil; sbb eax, eax; cmp qword ptr [rsi + 8], rcx; cmova eax, edx; ret; 
0x00000000004748e0: or byte ptr [rax - 0x75], cl; xor al, ch; mov bh, 0x29; sti; dec dword ptr [rax + 0x39]; ret; 
0x000000000049d5a6: or byte ptr [rax - 0x75], r9b; or byte ptr [rdx + 1], dil; sbb eax, eax; cmp qword ptr [rsi + 8], rcx; cmova eax, edx; ret; 
0x000000000046c384: or byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x77], cl; jo 0x6c39c; mov qword ptr [rax + 0x40], rcx; ret; 
0x00000000004110c2: or byte ptr [rax - 0x77], cl; add al, 0x24; mov rbx, qword ptr [r15 + 0x98]; mov rdi, rbx; call qword ptr [rbx + 0x20]; 
0x0000000000400cc4: or byte ptr [rax - 0x77], cl; add eax, 0x2cd6e4; nop; leave; ret; 
0x000000000040e7ca: or byte ptr [rax - 0x77], cl; add ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000410ee9: or byte ptr [rax - 0x77], cl; and byte ptr [rax - 0x77], cl; sbb byte ptr [rax - 0x77], cl; sub byte ptr [rax - 0x77], cl; ret 0x9e9; 
0x000000000043a0dd: or byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000004103c7: or byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x000000000047ccc0: or byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000044083c: or byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; ret; 
0x00000000004426d8: or byte ptr [rax - 0x77], cl; fsubp st(0); mov edi, 0x49ffffe3; mov edi, dword ptr [rdi]; call rbx; 
0x000000000041c0a5: or byte ptr [rax - 0x77], cl; or al, 0x24; call rdx; 
0x000000000043a0d9: or byte ptr [rax - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000040e85d: or byte ptr [rax - 0x77], cl; out dx, al; mov rdi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x30]; lea r15, qword ptr [rbx + r14]; call rax; 
0x000000000041fea5: or byte ptr [rax - 0x77], cl; out dx, eax; pop rbx; pop rbp; jmp rax; 
0x00000000004182ca: or byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; ret; 
0x000000000047ba10: or byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000040f103: or byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000465b5d: or byte ptr [rax - 0x77], cl; ret; 
0x000000000047b9b9: or byte ptr [rax - 0x77], cl; ror byte ptr [rax - 0x7d], 1; ret 0x4801; 
0x000000000041564d: or byte ptr [rax - 0x77], cl; xor byte ptr [r8 - 0x77], cl; and byte ptr [r9 + 0x5bc03113], cl; ret; 
0x000000000047ba0f: or byte ptr [rax - 0x77], r9b; ret 0x8948; 
0x000000000041d508: or byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000450734: or byte ptr [rax - 0x7d], cl; call qword ptr [rbx]; 
0x000000000042d326: or byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000042d3ae: or byte ptr [rax - 0x7d], cl; ret 0x4802; 
0x000000000046b6be: or byte ptr [rax - 0x7d], cl; ret 0x4803; 
0x000000000047bc78: or byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045d0a2: or byte ptr [rax - 0x7d], cl; ret 0x8504; 
0x0000000000441327: or byte ptr [rax - 0x7d], cl; ret; 
0x000000000049ab53: or byte ptr [rax - 0x80], al; call qword ptr [rax + 0x49]; 
0x0000000000452741: or byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000411948: or byte ptr [rax - 1], bh; pop rbx; pop rbp; ret; 
0x00000000004110fd: or byte ptr [rax - 9], cl; fimul dword ptr [rax - 0x77]; ror dword ptr [rax + 0x29], cl; ret; 
0x00000000004238ec: or byte ptr [rax], 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000418174: or byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x0000000000418135: or byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x8948; 
0x00000000004597f3: or byte ptr [rax], al; add byte ptr [rax - 0x12743], al; jmp qword ptr [rdi - 0x75]; 
0x00000000004238ed: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042ad71: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000423911: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000041610c: or byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret; 
0x000000000041e626: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x1be; 
0x0000000000416e0c: or byte ptr [rax], al; add byte ptr [rax], al; add cl, ch; sar ebp, -1; jmp qword ptr [rsi + 0x2e]; 
0x000000000049d762: or byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000445611: or byte ptr [rax], al; add byte ptr [rax], al; mov eax, edx; ret; 
0x00000000004505a2: or byte ptr [rax], al; add byte ptr [rax], al; movsxd rdi, edi; mov eax, 0xe; syscall; 
0x0000000000450422: or byte ptr [rax], al; add byte ptr [rax], al; movsxd rdi, edi; mov eax, ecx; syscall; 
0x000000000043ef30: or byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000049f316: or byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000443231: or byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x0000000000443231: or byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x000000000040abfd: or byte ptr [rax], al; add byte ptr [rbx - 0x7bf0fc08], al; or byte ptr [eax], al; add byte ptr [rbx - 0x7bf0fe08], al; ret 8; 
0x000000000040ac06: or byte ptr [rax], al; add byte ptr [rbx - 0x7bf0fe08], al; ret 8; 
0x000000000049ad9e: or byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; or al, 0xb6; add rcx, r14; jmp rcx; 
0x000000000042fd40: or byte ptr [rax], al; add byte ptr [rip + 0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000426b8c: or byte ptr [rax], al; je 0x26b98; lea rax, qword ptr [rip + 0x8449]; ret; 
0x000000000041b5d2: or byte ptr [rax], al; mov edi, 0x4a34a0; mov eax, 2; syscall; 
0x0000000000442eb1: or byte ptr [rax], al; mov edi, 0x4a58bd; mov eax, ebx; syscall; 
0x0000000000442ee0: or byte ptr [rax], al; mov edi, 0x4a58c8; mov eax, ebx; syscall; 
0x000000000044ffe3: or byte ptr [rax], al; mov edi, 0x4a7820; mov eax, ecx; syscall; 
0x0000000000441d18: or byte ptr [rax], al; mov edx, 1; je 0x42260; xor esi, esi; mov rdi, r12; call rbx; 
0x00000000004417eb: or byte ptr [rax], al; mov edx, 1; je 0x42280; xor esi, esi; mov rdi, r12; call rbx; 
0x0000000000441a8e: or byte ptr [rax], al; mov edx, 2; je 0x422b8; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441d3d: or byte ptr [rax], al; mov edx, 2; je 0x422d8; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441810: or byte ptr [rax], al; mov edx, 2; je 0x422f8; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441834: or byte ptr [rax], al; mov edx, 3; je 0x42338; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441bd7: or byte ptr [rax], al; mov edx, 3; je 0x42358; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441ab2: or byte ptr [rax], al; mov edx, 3; je 0x42378; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441959: or byte ptr [rax], al; mov edx, 3; je 0x42398; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442104: or byte ptr [rax], al; mov edx, 3; je 0x423b8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441fdf: or byte ptr [rax], al; mov edx, 3; je 0x423d8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441d61: or byte ptr [rax], al; mov edx, 3; je 0x42418; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441dfa: or byte ptr [rax], al; mov edx, 4; je 0x42438; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441d81: or byte ptr [rax], al; mov edx, 4; je 0x42458; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044219d: or byte ptr [rax], al; mov edx, 4; je 0x42478; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442078: or byte ptr [rax], al; mov edx, 4; je 0x424b8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441fff: or byte ptr [rax], al; mov edx, 4; je 0x424d8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441f1f: or byte ptr [rax], al; mov edx, 4; je 0x424f8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441c70: or byte ptr [rax], al; mov edx, 4; je 0x42538; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441bf7: or byte ptr [rax], al; mov edx, 4; je 0x42558; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441854: or byte ptr [rax], al; mov edx, 4; je 0x42578; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441ad2: or byte ptr [rax], al; mov edx, 4; je 0x425b8; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004418cd: or byte ptr [rax], al; mov edx, 4; je 0x425d8; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004419f2: or byte ptr [rax], al; mov edx, 4; je 0x425f8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441979: or byte ptr [rax], al; mov edx, 4; je 0x42618; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044024c: or byte ptr [rax], al; mov esi, 0x4a5790; mov rdi, -0x64; mov eax, 0x101; syscall; 
0x0000000000440451: or byte ptr [rax], al; mov esi, 0x4a5790; movsxd rdi, dword ptr [rsp + 0x10]; mov eax, 0x101; syscall; 
0x000000000044f9de: or byte ptr [rax], al; mov rdi, r13; mov eax, r15d; syscall; 
0x000000000042c42e: or byte ptr [rax], r8b; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000049e500: or byte ptr [rbp + 0x39], cl; ret 0x4776; 
0x000000000048a62c: or byte ptr [rbp + 0x39], cl; sal dword ptr [rbp + rsi*2 + 0x4c], -0x77; ret 0xf749; 
0x00000000004981c9: or byte ptr [rbp + 0x440f4cf6], al; ret; 
0x0000000000478dd4: or byte ptr [rbp + 0x7b850fc0], al; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004104aa: or byte ptr [rbp + 0xb], dh; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000416f42: or byte ptr [rbp + 0xb], dh; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000049cea2: or byte ptr [rbp - 0x12], dh; mov rax, qword ptr [rax]; add rsp, 8; ret; 
0x0000000000482983: or byte ptr [rbp - 0x57f2faf], cl; or cl, byte ptr [rdi]; xchg eax, edx; ret 0xb60f; 
0x000000000044108e: or byte ptr [rbp - 0x7b], al; test byte ptr [rax - 0x75], 0x7d; add byte ptr [rcx + 0xf], al; lahf; ret; 
0x000000000047cc0c: or byte ptr [rbp - 0x7b], cl; sal byte ptr [rbp - 0x32], 0xf3; ret; 
0x00000000004c1258: or byte ptr [rbp - 0xb], bl; call qword ptr [rsi]; 
0x00000000004c44e8: or byte ptr [rbp - 8], dh; call qword ptr [rcx]; 
0x000000000041e820: or byte ptr [rbx + 0x5d], bl; jmp rax; 
0x0000000000406173: or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000401ff5: or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004135da: or byte ptr [rbx + 0x5d], bl; sub rax, rdx; ret; 
0x000000000049d6e6: or byte ptr [rbx + 0x634801eb], al; ret; 
0x0000000000458587: or byte ptr [rbx - 0x1776cf3b], al; pop rbx; pop rbp; ret; 
0x00000000004975c1: or byte ptr [rbx - 0x72b6fd18], al; jl 0x9758e; adc byte ptr [rax - 0x77], cl; retf 0x8b48; xor cl, byte ptr [rax - 0x7d]; ret 0xf08; 
0x000000000042730d: or byte ptr [rbx - 0x72b7ef16], al; jbe 0x27325; lea rdi, qword ptr [rdi + 0x10]; jne 0x27300; mov rax, rdi; ret; 
0x00000000004100d1: or byte ptr [rbx - 0x76fefbbe], al; ret 0xe281; 
0x000000000046d40a: or byte ptr [rbx - 0x77c03be], cl; push qword ptr [rbx + rax - 0x7d]; and ebp, edi; pop rbx; ret; 
0x00000000004433c4: or byte ptr [rbx], al; add byte ptr [rax], al; mov esi, 0x80; syscall; 
0x00000000004798c9: or byte ptr [rbx], al; add byte ptr [rax], al; ret; 
0x000000000048be7b: or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x0000000000472c94: or byte ptr [rcx + 0x39], cl; ret 0x8e0f; 
0x000000000045cee9: or byte ptr [rcx + 0x415d5bd0], cl; pop rsp; pop r13; ret; 
0x00000000004994da: or byte ptr [rcx + 0x415d5be8], cl; pop rsp; pop r13; ret; 
0x000000000049c628: or byte ptr [rcx + 0x63], cl; add al, 0x86; add rax, r14; jmp rax; 
0x00000000004c76cc: or byte ptr [rcx + 0xb], al; add byte ptr [rax + rax], cl; add byte ptr [rsi + rax*4], dl; add al, ch; sti; jmp qword ptr [rbp + 1]; 
0x00000000004c9306: or byte ptr [rcx + 0xb], al; add esp, dword ptr [rsi]; add dword ptr [rdx], ecx; ret; 
0x000000000046a67b: or byte ptr [rcx + 0xf], al; mov dh, 0x40; add dword ptr [rcx - 0x77], eax; ret 0xe883; 
0x0000000000482d39: or byte ptr [rcx + 1], cl; fmul qword ptr [rcx + 0xf]; mov esi, 0xbe0f2414; ret 0x8349; 
0x0000000000499f9b: or byte ptr [rcx + 1], cl; ret 0x894c; 
0x000000000049827f: or byte ptr [rcx + 3], cl; sbb al, byte ptr [rbx + 0xa3c0fe0]; jne 0x9823d; nop word ptr [rax + rax]; call rbx; 
0x000000000048af20: or byte ptr [rcx + rax - 0x3e], cl; mov rax, rdx; pop rbx; ret; 
0x0000000000411571: or byte ptr [rcx + rcx*4 + 0x48], cl; adc byte ptr [rdi - 1], dl; jo 0x115b2; mov rdi, rbp; lea r8, qword ptr [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x0000000000415033: or byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000042704a: or byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000400485: or byte ptr [rcx + rcx*4 - 0x39], cl; mov eax, 3; syscall; 
0x00000000004173a4: or byte ptr [rcx + rdx + 0x31], dh; rol byte ptr [rbx - 0x6af00002], 0xc0; neg eax; ret; 
0x000000000048be82: or byte ptr [rcx - 0x2feeb728], cl; pop rbp; pop rbx; ret; 
0x000000000041233a: or byte ptr [rcx - 0x74b777bb], cl; or cl, byte ptr [rax - 0x7d]; ret; 
0x000000000043a198: or byte ptr [rcx - 0x76b7f7be], cl; clc; ret; 
0x0000000000440088: or byte ptr [rcx - 0x77], al; sar byte ptr [rsi + 7], 0x48; movsxd rdi, ebx; mov eax, 0x48; syscall; 
0x00000000004824e2: or byte ptr [rcx - 0x77], cl; ret 0x44c6; 
0x000000000046cc20: or byte ptr [rcx - 0x77], cl; ret; 
0x0000000000410229: or byte ptr [rcx - 0x7d], al; add al, 1; mov rax, qword ptr [rdx + 0xd8]; mov rbx, rdx; mov rdi, rdx; call qword ptr [rax + 0x60]; 
0x00000000004509b3: or byte ptr [rcx - 0x7d], cl; ret 0xf301; 
0x000000000040e91a: or byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000449619: or byte ptr [rcx - 0xa], al; ret; 
0x00000000004c8cb8: or byte ptr [rcx - 0xd], bh; jmp qword ptr [rsi]; 
0x000000000044e5e9: or byte ptr [rcx], al; add byte ptr [rax], al; test rax, rax; je 0x4e5f9; mov edi, 0x6cd720; call rax; 
0x000000000045bdc1: or byte ptr [rcx], al; ret 0xd529; 
0x000000000044343e: or byte ptr [rcx], dh; rcr byte ptr [rbx + 0x41], 0x5c; pop r13; pop rbp; ret; 
0x0000000000452700: or byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x000000000041830b: or byte ptr [rcx], dh; ror byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; ret; 
0x00000000004bccde: or byte ptr [rdi + 0x26], al; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x0000000000479e4b: or byte ptr [rdi + 0x315], 4; add rsp, 8; ret; 
0x0000000000479d87: or byte ptr [rdi + 0x315], 4; xor eax, eax; ret; 
0x00000000004799a1: or byte ptr [rdi + 0x6cc100], bh; pop rbx; pop rbp; jmp rax; 
0x0000000000480c31: or byte ptr [rdi + 0x6cc140], bh; call rax; 
0x00000000004c090b: or byte ptr [rdi + 0xb], al; add dh, byte ptr [rbp + 0x41180e0a]; ret; 
0x00000000004c5da4: or byte ptr [rdi + 0xb], al; jae 0xc5db3; ret; 
0x00000000004c1efd: or byte ptr [rdi + 0xb], al; pop rsp; add byte ptr [rax], al; add byte ptr [rsi + rbp - 0x32e80000], al; cmc; jmp rdx; 
0x0000000000481319: or byte ptr [rdi + r8 + 0x48], sil; mov dword ptr [rax], 0x6ccac0; add rsp, 0x48; ret; 
0x000000000048131a: or byte ptr [rdi + rax + 0x48], dh; mov dword ptr [rax], 0x6ccac0; add rsp, 0x48; ret; 
0x0000000000464be8: or byte ptr [rdi + rcx - 0x4a], al; sub byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000048c384: or byte ptr [rdi], 0x84; mov ch, 0; add byte ptr [rax], al; mov rax, rdx; pop rbx; ret; 
0x000000000044a5e9: or byte ptr [rdi], 0x85; or dword ptr [rip - 0x72b80000], eax; add cl, byte ptr [rax + 0x39]; ret; 
0x000000000044a94a: or byte ptr [rdi], 0x85; push rsi; add eax, 0x8d490000; add r9b, byte ptr [r8 + 0x39]; ret; 
0x000000000044a605: or byte ptr [rdi], 0x85; test dword ptr [rax + rax], 0x428d4800; add ecx, dword ptr [rax + 0x39]; ret; 
0x000000000044a9a3: or byte ptr [rdi], 0x94; ret 0x8348; 
0x0000000000433bb7: or byte ptr [rdi], al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000044dbe9: or byte ptr [rdi], cl; mov bh, 0x43; add al, 0x29; ret 0x8941; 
0x000000000041281c: or byte ptr [rdi], cl; mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000415b1e: or byte ptr [rdi], cl; mov dh, 0; pop rbx; ret; 
0x000000000046acb1: or byte ptr [rdi], cl; mov dh, 0x42; add dword ptr [rcx - 0x77], eax; ret 0xe883; 
0x000000000049a379: or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x0000000000415987: or byte ptr [rdi], cl; mov dh, 2; pop rbx; ret; 
0x000000000049c96b: or byte ptr [rdi], cl; test byte ptr [rbx - 0x18000000], bl; cdq; sbb dh, bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000498d08: or byte ptr [rdi], cl; test byte ptr [rcx - 0x75000000], dh; adc byte ptr [r13 - 0x497bf040], al; add dword ptr [rax], eax; add byte ptr [rax + 1], cl; ret; 
0x000000000044e874: or byte ptr [rdi], cl; test dh, dl; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004566c6: or byte ptr [rdi], cl; xchg eax, esp; ret 0x9522; 
0x0000000000433332: or byte ptr [rdx + 0x1b], dh; mov rcx, qword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x000000000043e881: or byte ptr [rdx + 0xa], dh; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x00000000004c6803: or byte ptr [rdx + 0xb], cl; add byte ptr [rax], al; add byte ptr fs:[rax], al; add byte ptr [rdi + rsi*2 - 0x67500000], cl; cli; jmp qword ptr [rax + 1]; 
0x00000000004c660d: or byte ptr [rdx + 0xb], cl; add byte ptr fs:[rax], al; add byte ptr [rbp + rsi*2 - 0x70e80000], dl; cli; jmp rdx; 
0x000000000043e702: or byte ptr [rdx + 0xb], dh; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x00000000004362f3: or byte ptr [rdx + 0xf], dh; mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000412137: or byte ptr [rdx + 1], bh; mov rsi, rbx; mov rdi, r12; mov eax, r9d; syscall; 
0x000000000049d5ab: or byte ptr [rdx + 1], bh; sbb eax, eax; cmp qword ptr [rsi + 8], rcx; cmova eax, edx; ret; 
0x000000000049d5aa: or byte ptr [rdx + 1], dil; sbb eax, eax; cmp qword ptr [rsi + 8], rcx; cmova eax, edx; ret; 
0x000000000049c622: or byte ptr [rip + 0x438b5877], al; or byte ptr [rcx + 0x63], cl; add al, 0x86; add rax, r14; jmp rax; 
0x000000000047a26b: or byte ptr [rip - 0x74b30e8b], ah; cmp ecx, dword ptr [rax - 0x75]; adc byte ptr [r8 - 0x7d], cl; ret; 
0x00000000004c7d7a: or byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0xd; add eax, dword ptr [rbx]; or al, byte ptr [rcx]; ret; 
0x00000000004c7db2: or byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0xd; add eax, dword ptr [rdx]; cld; ret; 
0x00000000004c7dea: or byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0xd; add eax, dword ptr [rdx]; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004a4840: or byte ptr [rsi], 0xf9; push rax; or eax, 0xd60fff9; stc; call rax; 
0x00000000004004cc: or byte ptr [rsi], al; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x000000000047f4f6: or byte ptr [rsp + 0x5b], dh; ret; 
0x00000000004a43e4: or ch, 0xf8; call rax; 
0x00000000004c93b1: or ch, bh; call qword ptr [rbx + 2]; 
0x00000000004952b7: or cl, byte ptr [rax + 0x29]; ret 0x8941; 
0x000000000044d770: or cl, byte ptr [rax + 0x39]; ret 0x3a76; 
0x000000000041280e: or cl, byte ptr [rax + 1]; ret 0x8948; 
0x0000000000413057: or cl, byte ptr [rax + 1]; ret 0x8949; 
0x0000000000410ee5: or cl, byte ptr [rax - 0x77]; or byte ptr [rax - 0x77], cl; and byte ptr [rax - 0x77], cl; sbb byte ptr [rax - 0x77], cl; sub byte ptr [rax - 0x77], cl; ret 0x9e9; 
0x000000000046d6bf: or cl, byte ptr [rax - 0x77]; ret; 
0x0000000000425e3a: or cl, byte ptr [rax - 0x7d]; ret 0x4801; 
0x0000000000453247: or cl, byte ptr [rax - 0x7d]; ret 0x8d04; 
0x00000000004105dc: or cl, byte ptr [rax - 0x7d]; ret; 
0x0000000000482ac3: or cl, byte ptr [rbp - 0x57f2faf]; or cl, byte ptr [rdi]; xchg eax, edx; ret 0xb60f; 
0x000000000046c697: or cl, byte ptr [rbx + 0x5bd08910]; ret; 
0x0000000000415a7c: or cl, byte ptr [rbx + 0xc097]; add byte ptr [rbp + 0x48497ed2], al; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x0000000000400538: or cl, byte ptr [rcx + 0x1c829f0]; sar dword ptr [rcx], 1; ret 0xffb8; 
0x000000000047a709: or cl, byte ptr [rdi]; test byte ptr [rbx + rcx], bl; add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r15]; call rax; 
0x000000000047afa9: or cl, byte ptr [rdi]; test byte ptr [rcx + 0x48000005], ah; mov eax, dword ptr [rbx + 0x10]; add rax, qword ptr [r15]; call rax; 
0x0000000000482989: or cl, byte ptr [rdi]; xchg eax, edx; ret 0xb60f; 
0x000000000046b0c2: or cl, ch; ret 0xfffc; 
0x0000000000408898: or cl, ch; ret; 
0x0000000000408698: or cl, ch; retf; idiv bh; jmp qword ptr [rsi - 0x70]; 
0x000000000049a545: or cl, cl; cmove rax, rdx; ret; 
0x0000000000423539: or dh, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000435da3: or dh, bl; movq qword ptr [rdi], mm1; ret; 
0x000000000049ecf5: or dh, bl; ret; 
0x000000000041195f: or dh, byte ptr [rax + rdi*4 + 0x48]; add esp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000498287: or dh, byte ptr [rbp - 0x4d]; nop word ptr [rax + rax]; call rbx; 
0x000000000046d466: or dh, byte ptr [rdi + rcx + 0x48]; cmp esi, ecx; jb 0x6d460; lea eax, dword ptr [rdx + rdi]; ret; 
0x0000000000416646: or dh, byte ptr [rdi + rcx + 0x48]; cmp esi, ecx; jne 0x16640; lea eax, dword ptr [rdx + rdi]; ret; 
0x0000000000414959: or dh, byte ptr [rsp + rdi*2 + 0x40]; movzx eax, ch; pop rbx; pop rbp; pop r12; ret; 
0x000000000041c513: or dh, dh; ret 0x7404; 
0x000000000041c487: or dh, dh; ret 0xf04; 
0x0000000000402fce: or dh, dh; ret 0xfdf; 
0x000000000040e2a7: or dword ptr [rax + rax*8 - 0x38b7938c], eax; ret 0xfff0; 
0x000000000040297a: or dword ptr [rax - 0x73], ecx; mov ebx, 0x80; call rax; 
0x000000000047eeec: or dword ptr [rax - 0x75], ecx; mov ebp, 0xffffff78; call rax; 
0x00000000004242ce: or dword ptr [rax - 1], ecx; ret 0xc148; 
0x0000000000401d16: or dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; add eax, 0x2c9370; xor eax, eax; ret; 
0x000000000042381d: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042c2df: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000423777: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000048c113: or dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0xd8; ret; 
0x0000000000410c5f: or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000440964: or dword ptr [rax], eax; add byte ptr [rax], al; movsxd r10, r10d; syscall; 
0x0000000000440924: or dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x00000000004120b2: or dword ptr [rax], eax; add byte ptr [rdi + 0x4a2ac7], bh; mov eax, 2; syscall; 
0x0000000000473133: or dword ptr [rax], eax; mov eax, ecx; sub rsp, 0x98; syscall; 
0x0000000000472fc3: or dword ptr [rax], eax; movsxd rdi, edi; mov eax, ecx; sub rsp, 0x98; syscall; 
0x0000000000401931: or dword ptr [rbp - 0x4a], esi; xor edx, edx; mov esi, 0x20001; mov edi, 0x4a1e23; mov eax, 2; syscall; 
0x0000000000482aa3: or dword ptr [rbp - 0x57f2faf], ecx; or cl, byte ptr [rdi]; xchg eax, edx; ret 0xb60f; 
0x0000000000430436: or dword ptr [rbp - 0xcffffff], 0xf; outsd dx, dword ptr [rsi]; push rdi; ret 0xff3; 
0x00000000004115ae: or dword ptr [rbx], 0x20; mov eax, 0xffffffff; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000412e50: or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000048a77c: or dword ptr [rcx + 0x39], ecx; ret 0x870f; 
0x0000000000420816: or dword ptr [rcx - 0x7d], ecx; cli; adc al, 0x77; and ecx, dword ptr [rcx - 0x7d]; ret 0xeb5b; 
0x00000000004209fc: or dword ptr [rcx - 0x7d], ecx; ret 0xe977; 
0x0000000000401e34: or dword ptr [rcx], esi; idiv byte ptr [rdi + 1]; call rax; 
0x00000000004422b3: or dword ptr [rdi], 0x4900401f; cmp dword ptr [rbp + 0x10], 0; jne 0x41a9b; mov esi, 3; mov rdi, r13; call rbx; 
0x000000000046b507: or dword ptr [rdi], 0x841f; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x0000000000433a37: or dword ptr [rdi], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000040e2a3: or dword ptr [rdi], ecx; mov dh, 0x40; or dword ptr [rax + rax*8 - 0x38b7938c], eax; ret 0xfff0; 
0x0000000000400d4c: or dword ptr [rdi], ecx; xchg dword ptr [rdi + 0x48000001], esp; mov eax, dword ptr [rax*8 + 0x4a1ca8]; jmp rax; 
0x0000000000443261: or dword ptr [rdx + 0x1d], 0; add bl, al; nop word ptr [rax + rax]; mov eax, 0x63; syscall; 
0x000000000049da79: or dword ptr [rdx + 0x74], edi; adc esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000047d529: or dword ptr [rip + 0x24ec40], 1; pop rbx; ret; 
0x000000000044a5ec: or dword ptr [rip - 0x72b80000], eax; add cl, byte ptr [rax + 0x39]; ret; 
0x0000000000440007: or dword ptr [rsi + rbx + 0x48], esi; movsxd rsi, esi; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x0000000000480325: or dword ptr [rsi - 0x18], esi; cmp ecx, r8d; je 0x802a0; mov eax, r8d; sub eax, ecx; ret; 
0x00000000004c7d80: or eax, 0x10a0303; ret; 
0x000000000049a162: or eax, 0x10c48348; mov rax, rsi; pop rbx; pop rbp; pop r12; ret; 
0x00000000004c7de0: or eax, 0x1370303; ret; 
0x0000000000492baf: or eax, 0x1584c; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000004914ce: or eax, 0x16f2d; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000004911ff: or eax, 0x171fc; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000048f56e: or eax, 0x18e8d; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000043c681: or eax, 0x1c478d48; ret; 
0x0000000000410c50: or eax, 0x20; mov dword ptr [rdi], eax; mov rax, -0x30; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000479d79: or eax, 0x25c642; test byte ptr [rax + 0x314], 4; jne 0x79d98; or byte ptr [rdi + 0x315], 4; xor eax, eax; ret; 
0x00000000004162c2: or eax, 0x28c48348; pop rbx; pop rbp; ret; 
0x00000000004c7d70: or eax, 0x34b0303; ret; 
0x00000000004c7da8: or eax, 0x35b0303; ret; 
0x00000000004c92e7: or eax, 0x38f4806; mov es, word ptr [rcx*4 + 0x48068c05]; add dword ptr [rdi], 3; pop rbx; add cl, byte ptr [rdx]; ret; 
0x00000000004c7667: or eax, 0x38f4806; mov es, word ptr [rcx*4 + 0x4b068c05]; add dword ptr [rdi], 3; mov bl, 2; ret; 
0x000000000046d70a: or eax, 0x3b484a8b; cmove r8, rcx; ret; 
0x000000000046a6aa: or eax, 0x401f0f08; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000046adb2: or eax, 0x401f0f08; add byte ptr [rax - 0x7d], cl; ret 0x8b04; 
0x0000000000413de3: or eax, 0x40; mov r12d, dword ptr fs:[rbp]; mov dword ptr [rdi], eax; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x48]; 
0x000000000042d902: or eax, 0x48c0bc0f; lea eax, dword ptr [rdi + rax]; ret; 
0x000000000047d816: or eax, 0x48d88948; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000046e0a5: or eax, 0x48fad348; test edx, edx; je 0x6e0d0; bsf rax, rdx; ret; 
0x0000000000442140: or eax, 0x5ba; add byte ptr [rax - 0x77], cl; fsubp st(0); ret 0xffe8; 
0x0000000000442040: or eax, 0x5ba; add byte ptr [rax - 0x77], cl; fsubp st(0); ret 0xffe9; 
0x00000000004336bf: or eax, 0x63490007; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043c678: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, qword ptr [rdi + 0x1c]; ret; 
0x000000000043bfc8: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000042cc9a: or eax, 0x7b761; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000042b885: or eax, 0x7cb76; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000042b62a: or eax, 0x7cdd1; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000429d55: or eax, 0x7e6a6; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000482b17: or eax, 0x80d0518d; cli; or cl, byte ptr [rdi]; xchg eax, edx; ret 0xb60f; 
0x000000000042a827: or eax, 0x83480000; ret 0x4910; 
0x000000000042a891: or eax, 0x83480000; ret 0xe910; 
0x00000000004a1aed: or eax, 0x834825eb; ret 0x4810; 
0x000000000048cab3: or eax, 0x8948ffff; sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x00000000004a4889: or eax, 0xcc0fff9; stc; jmp qword ptr [rax]; 
0x00000000004a4849: or eax, 0xcd0fff9; stc; jmp qword ptr [rax + 0xc]; 
0x00000000004a4809: or eax, 0xcdafff9; stc; ljmp ptr [rdx + 0xc]; stc; call qword ptr [rax]; 
0x00000000004a4885: or eax, 0xd50fff9; stc; inc eax; or al, 0xf9; jmp qword ptr [rax]; 
0x00000000004a4845: or eax, 0xd60fff9; stc; call rax; 
0x00000000004aee79: or eax, 0xdbf0000; add byte ptr [rax], al; ret 0xd; 
0x0000000000435c4a: or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000044185e: or eax, 0xf6310000; mov rdi, r15; call rbx; 
0x0000000000435c53: or eax, 0xf7f0ff3; ret; 
0x0000000000433354: or eax, 0xfc164c8b; mov esi, dword ptr [rsi]; mov dword ptr [rdi], esi; mov dword ptr [rdi + rdx - 4], ecx; ret; 
0x0000000000444fbc: or eax, 0xffffffff; ret; 
0x00000000004191fc: or eax, 1; mov qword ptr [rdi + 0x58], rcx; mov dword ptr [rdi + 4], eax; ret; 
0x00000000004191f9: or eax, 2; or eax, 1; mov qword ptr [rdi + 0x58], rcx; mov dword ptr [rdi + 4], eax; ret; 
0x00000000004c9307: or eax, dword ptr [r11]; add dword ptr es:[rdx], ecx; ret; 
0x00000000004c6bda: or eax, dword ptr [r8]; add byte ptr [rax], al; add byte ptr [rax + rax], al; add byte ptr [rbx + rdi*2], ah; add al, cl; ret; 
0x00000000004c76cd: or eax, dword ptr [r8]; add byte ptr [rax], r8b; add byte ptr [rsi + rax*4], dl; add al, ch; sti; jmp qword ptr [rbp + 1]; 
0x00000000004bfc3d: or eax, dword ptr [rax]; add al, al; cmc; hlt; call qword ptr [rbx]; 
0x00000000004c6805: or eax, dword ptr [rax]; add byte ptr [rax + rax], ah; add byte ptr [rdi + rsi*2 - 0x67500000], cl; cli; jmp qword ptr [rax + 1]; 
0x00000000004235bd: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042aa31: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004235e1: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000045eb9f: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004c6bdb: or eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + rax], al; add byte ptr [rbx + rdi*2], ah; add al, cl; ret; 
0x00000000004409b1: or eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000004409b1: or eax, dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x00000000004c76ce: or eax, dword ptr [rax]; add byte ptr [rax], r8b; add byte ptr [rsi + rax*4], dl; add al, ch; sti; jmp qword ptr [rbp + 1]; 
0x000000000044e064: or eax, dword ptr [rbx + 0x67403fe]; pop rbx; ret; 
0x00000000004c9308: or eax, dword ptr [rbx]; add dword ptr es:[rdx], ecx; ret; 
0x00000000004338be: or eax, dword ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000045eb9e: or eax, dword ptr fs:[rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000042da17: or eax, ecx; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, qword ptr [rdi + rax]; ret; 
0x000000000042da1e: or eax, edx; bsf rax, rax; lea rax, qword ptr [rdi + rax]; ret; 
0x000000000042d5cc: or eax, esp; mov qword ptr [r10 + 0x18], r8; pop rbx; pop rbp; pop r12; ret; 
0x00000000004409de: or ebp, 0x45; add byte ptr [rax], al; ret; 
0x00000000004407de: or ebp, 0x47; add byte ptr [rax], al; ret; 
0x0000000000416f44: or ebp, dword ptr [rbx]; push rax; sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x0000000000412898: or ebp, eax; ret 0xc1; 
0x00000000004a0ac4: or ebp, ecx; xchg eax, esi; fcompi st(7); jmp qword ptr [rsi + 0xf]; 
0x00000000004be455: or ebp, edi; push qword ptr [rax + 0xb]; std; push qword ptr [rax - 0x17]; cld; jmp qword ptr [rax]; 
0x00000000004c1eff: or ebx, dword ptr [rax + rax]; add byte ptr [rsi + rbp - 0x32e80000], al; cmc; jmp rdx; 
0x000000000046bf44: or ebx, dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000004ca35f: or ebx, eax; add dword ptr [rbx], eax; cmc; add al, byte ptr [rax]; ret; 
0x000000000049f871: or ebx, ebp; and al, byte ptr [rax]; jne 0x9f858; pop rbx; ret; 
0x0000000000435e13: or ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x000000000048c19e: or ebx, esi; ret; 
0x0000000000414aa7: or ecx, 0x20; mov dword ptr [rdi], ecx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000041de99: or ecx, dword ptr [rax - 0x3f]; out dx, al; add ecx, dword ptr [rax - 0x77]; ret 0xce31; 
0x00000000004196b4: or ecx, dword ptr [rax - 0x3f]; out dx, eax; add ecx, dword ptr [rax - 0x77]; ret 0xcf31; 
0x000000000049cfa4: or ecx, dword ptr [rax - 0x75]; and al, 0x10; add rsp, 0x28; ret; 
0x00000000004104ac: or ecx, dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000004487b5: or ecx, dword ptr [rax - 0x7d]; rol byte ptr [rax + rcx*2], 0x83; ret; 
0x0000000000482adf: or ecx, dword ptr [rbp - 0x57f2faf]; or cl, byte ptr [rdi]; xchg eax, edx; ret 0xb60f; 
0x000000000046bf03: or ecx, dword ptr [rcx + rcx*4 - 0x1a]; cmovne rbp, rdx; mov rdi, rbx; mov rdx, rbp; call qword ptr [rax + 0x58]; 
0x00000000004c5d6e: or ecx, dword ptr [rdx + 0xa]; ret; 
0x000000000042d314: or ecx, edx; mov qword ptr [rdi], r9; pop rbx; ret; 
0x000000000042eed7: or ecx, esi; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000450282: or edi, eax; mov word ptr [rsp - 2], di; fldcw word ptr [rsp - 2]; ret; 
0x00000000004be459: or edi, ebp; push qword ptr [rax - 0x17]; cld; jmp qword ptr [rax]; 
0x000000000043bd63: or edi, edi; loope 0x3bdcd; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000043c383: or edi, edi; loope 0x3c3ed; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; lea rax, qword ptr [rdi]; ret; 
0x000000000041185e: or edx, 0x20; mov dword ptr [rdi], edx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000044095e: or edx, 0x40; xor edi, edi; mov eax, 9; movsxd r10, r10d; syscall; 
0x000000000048bff7: or edx, eax; mov dword ptr [rsp - 4], edx; movss xmm0, dword ptr [rsp - 4]; ret; 
0x000000000048c03c: or edx, eax; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x00000000004244bf: or edx, ecx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000046e150: or edx, ecx; bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000048c039: or edx, ecx; or rdx, rax; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x000000000048bff5: or edx, esi; or edx, eax; mov dword ptr [rsp - 4], edx; movss xmm0, dword ptr [rsp - 4]; ret; 
0x00000000004138f4: or esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000049cb35: or esi, 2; mov rdx, qword ptr [r12]; mov edi, 1; call rax; 
0x00000000004c5da6: or esi, dword ptr [rbx + 0xa]; ret; 
0x000000000048bf0b: or esi, eax; mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x0000000000435d33: or esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x00000000004a1390: or esi, esi; jmp qword ptr [rsi + 0x2e]; 
0x00000000004c660f: or esp, dword ptr [rax + rax]; add byte ptr [rbp + rsi*2 - 0x70e80000], dl; cli; jmp rdx; 
0x00000000004115af: or esp, dword ptr [rax]; mov eax, 0xffffffff; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000412e51: or esp, dword ptr [rax]; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000482aa2: or qword ptr [rbp - 0x57f2faf], rcx; or cl, byte ptr [rdi]; xchg eax, edx; ret 0xb60f; 
0x000000000044095d: or r10d, 0x40; xor edi, edi; mov eax, 9; movsxd r10, r10d; syscall; 
0x0000000000435e82: or r11b, r14b; movq qword ptr [rdi], mm1; ret; 
0x00000000004c1efe: or r11d, dword ptr [r8 + r8]; add byte ptr [rsi + rbp - 0x32e80000], al; cmc; jmp rdx; 
0x0000000000435e12: or r11d, r14d; movq qword ptr [rdi], mm1; ret; 
0x000000000048cc3b: or r12b, byte ptr [r8 + rax]; add byte ptr [rdx], al; add byte ptr [rax], al; jne 0x8cc4c; lea rax, qword ptr [rip + 4]; ret; 
0x0000000000423538: or r14b, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000435da2: or r14b, r11b; movq qword ptr [rdi], mm1; ret; 
0x00000000004c5da5: or r14d, dword ptr [r11 + 0xa]; ret; 
0x0000000000435d32: or r14d, r11d; movq qword ptr [rdi], mm1; ret; 
0x00000000004338bd: or r8, qword ptr [r15]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000042d5cb: or r8, r12; mov qword ptr [r10 + 0x18], r8; pop rbx; pop rbp; pop r12; ret; 
0x000000000042d313: or r9, r10; mov qword ptr [rdi], r9; pop rbx; ret; 
0x000000000044d76f: or r9b, byte ptr [r8 + 0x39]; ret 0x3a76; 
0x000000000046b0c1: or r9b, r13b; ret 0xfffc; 
0x00000000004c5d6d: or r9d, dword ptr [r10 + 0xa]; ret; 
0x00000000004c7ddf: or rax, 0x1370303; ret; 
0x00000000004c7d6f: or rax, 0x34b0303; ret; 
0x00000000004c7da7: or rax, 0x35b0303; ret; 
0x000000000046a6a9: or rax, 0x401f0f08; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000046adb1: or rax, 0x401f0f08; add byte ptr [rax - 0x7d], cl; ret 0x8b04; 
0x00000000004336be: or rax, 0x63490007; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000482b16: or rax, 0xffffffff80d0518d; cli; or cl, byte ptr [rdi]; xchg eax, edx; ret 0xb60f; 
0x0000000000444fbb: or rax, 0xffffffffffffffff; ret; 
0x00000000004920a2: or rax, qword ptr [r8]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004c6804: or rax, qword ptr [rax]; add byte ptr [rax + rax], ah; add byte ptr [rdi + rsi*2 - 0x67500000], cl; cli; jmp qword ptr [rax + 1]; 
0x000000000042da16: or rax, rcx; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, qword ptr [rdi + rax]; ret; 
0x000000000042da1d: or rax, rdx; bsf rax, rax; lea rax, qword ptr [rdi + rax]; ret; 
0x0000000000482ade: or rcx, qword ptr [rbp - 0x57f2faf]; or cl, byte ptr [rdi]; xchg eax, edx; ret 0xb60f; 
0x000000000042eed6: or rcx, rsi; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000048c03b: or rdx, rax; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x00000000004244be: or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000046e14f: or rdx, rcx; bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000048c038: or rdx, rcx; or rdx, rax; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x000000000048bf0a: or rsi, rax; mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x00000000004c660e: or rsp, qword ptr [rax + r8]; add byte ptr [rbp + rsi*2 - 0x70e80000], dl; cli; jmp rdx; 
0x0000000000479d9e: out 0x23, al; and eax, 0x48c03100; add esp, 8; ret; 
0x0000000000416475: out 0x31, eax; imul al; sbb dword ptr [rbx - 0x7cb70042], -0x3c; sub byte ptr [rbx + 0x5d], bl; ret; 
0x000000000045027b: out 0x3f, eax; pcmpgtd mm4, qword ptr [rip - 0x38f60f40]; mov word ptr [rsp - 2], di; fldcw word ptr [rsp - 2]; ret; 
0x0000000000443340: out 0x41, eax; and ebx, 0xffffffbb; cmp r11d, 0xa; je 0x4334c; ret; 
0x00000000004506a3: out 0x41, eax; call rdi; 
0x0000000000412142: out 0x44, eax; mov eax, ecx; syscall; 
0x00000000004042cd: out 0x44, eax; mov eax, edx; syscall; 
0x000000000047e609: out 0x48, al; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000046bf06: out 0x48, al; cmovne ebp, edx; mov rdi, rbx; mov rdx, rbp; call qword ptr [rax + 0x58]; 
0x000000000048beeb: out 0x48, al; mov dword ptr [rdi], esi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000045efe2: out 0x48, al; mov eax, dword ptr [rcx + 0xd8]; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000045ea89: out 0x48, al; mov eax, dword ptr [rdi + 0xd8]; mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x0000000000420fe6: out 0x48, al; mov edi, eax; pop rbx; pop rbp; pop r12; jmp rcx; 
0x000000000049a151: out 0x48, al; mov edi, ebx; call qword ptr [rax + 0x48]; 
0x000000000046bf36: out 0x48, al; mov edi, ebx; call qword ptr [rax + 0x58]; 
0x0000000000413ea2: out 0x48, al; mov edi, ebx; call qword ptr [rax + 0x78]; 
0x000000000042015f: out 0x48, al; mov edi, ebx; call rax; 
0x000000000046d7a0: out 0x48, eax; lea edx, dword ptr [rsp + 0x18]; lea r9, qword ptr [rsp + 0x10]; call rbx; 
0x000000000046f8f9: out 0x48, eax; lea edx, dword ptr [rsp + 0x20]; lea r9, qword ptr [rsp + 0x28]; lea rsi, qword ptr [rsp + 0x30]; call rbx; 
0x0000000000445f95: out 0x48, eax; mov eax, dword ptr [rbp - 0x58]; call rax; 
0x0000000000415ba8: out 0x49, eax; lea ebx, dword ptr [rsi + 1]; call qword ptr [rax + 0x18]; 
0x00000000004322c6: out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004500bb: out 0x4c, al; mov edi, esi; call 0x409b0; movsxd rdi, r15d; mov eax, 3; syscall; 
0x00000000004557ed: out 0x4c, al; sub ecx, esp; mov rdi, rbx; mov rdx, rcx; mov qword ptr [rbp - 0x4b0], rcx; call qword ptr [rax + 0x38]; 
0x000000000046f7fc: out 0x4c, eax; lea ecx, dword ptr [rsp + 0x60]; lea rsi, qword ptr [rsp + 0x30]; call rbx; 
0x00000000004320f6: out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004321f2: out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000043213e: out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000046fb76: out 0x4d, eax; mov ecx, edi; call rbx; 
0x0000000000420546: out 0x5b, al; pop rbp; pop r12; jmp rax; 
0x0000000000416613: out 0x5b, al; ret; 
0x000000000047c06a: out 0x5b, eax; pop rbp; pop r12; pop r13; jmp rax; 
0x0000000000420d0b: out 0x5d, al; pop r12; jmp rax; 
0x00000000004983e5: out 0x89, al; out dx, eax; call qword ptr [rbx]; 
0x00000000004983a5: out 0x89, al; out dx, eax; call rax; 
0x0000000000403a5b: out 0x89, eax; ret 0x8948; 
0x00000000004040a9: out 0xb8, eax; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000440922: out 0xb8, eax; or dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x00000000004a4198: out 0xbb, al; clc; jmp rsi; 
0x00000000004a419c: out 0xbc, al; clc; jmp rsi; 
0x00000000004a41a0: out 0xbd, al; clc; jmp qword ptr [rsi - 0x42]; 
0x00000000004a41a8: out 0xbe, al; clc; jmp qword ptr [rsi - 0x41]; 
0x00000000004a41b0: out 0xbf, al; clc; jmp qword ptr [rsi - 0x40]; 
0x00000000004a41cc: out 0xc3, al; clc; jmp qword ptr [rdi - 0x3c]; 
0x00000000004bb1c0: out 0xcf, eax; movsb byte ptr [rdi], byte ptr [rsi]; in eax, 0x24; outsd dx, dword ptr es:[rsi]; ret 0x5ae4; 
0x000000000049cf9a: out 0xe8, al; movabs al, byte ptr [0xb74c0854800001f]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000442b03: out 0xe8, eax; push rdi; mov edi, 0x8b48fffd; jge 0x42b0d; call rbx; 
0x000000000049efe8: out 0xe8, eax; ret 0xffe7; 
0x000000000043561a: out 0xf3, al; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000043569a: out 0xf3, eax; movq qword ptr [rdi - 0x10], mm1; ret; 
0x00000000004bcee8: out 0xf5, eax; mov ch, 0xab; ret; 
0x00000000004a4265: out 0xf8, eax; call rax; 
0x00000000004a42c5: out 0xf8, eax; jmp qword ptr [rax - 0x17]; 
0x00000000004a4389: out 0xf8, eax; jmp rax; 
0x000000000044054a: out 0xfd, al; dec dword ptr [rax - 0x77]; ret; 
0x00000000004646db: out 0xff, al; jmp qword ptr [rsi - 0x70]; 
0x00000000004105b4: out 0xff, al; push rax; cmp byte ptr [rax + 0x39], cl; ret; 
0x000000000045fcb7: out 0xff, eax; jmp qword ptr [rsi + 0xf]; 
0x000000000047d7a1: out 0xff, eax; jmp qword ptr [rsi - 0x70]; 
0x0000000000405cf9: out 1, al; add byte ptr [rax + 0x29], cl; ret; 
0x0000000000405c05: out 1, eax; add byte ptr [rax + 0x29], cl; ret; 
0x000000000049f311: out 2, al; jne 0x9f31b; mov eax, 8; ret; 
0x0000000000401912: out 3, al; add byte ptr [rbx - 0x7bf00008], al; in eax, 0; add byte ptr [rax], al; add rsp, 0x98; ret; 
0x0000000000429d57: out 7, al; add byte ptr [rbx + 0x148b8104], cl; xchg eax, ecx; sub eax, edx; ret; 
0x000000000042d189: out dx, al; adc byte ptr [rax - 0x75], cl; sbb byte ptr [rax - 0x7d], r9b; ret 0x4802; 
0x000000000045954a: out dx, al; add dword ptr [rcx - 0x7f], ecx; jmp qword ptr [rax - 0x67]; 
0x000000000041de9c: out dx, al; add ecx, dword ptr [rax - 0x77]; ret 0xce31; 
0x00000000004009a9: out dx, al; call rax; 
0x00000000004a0c8f: out dx, al; cli; dec dword ptr [rax - 0x75]; cmp ecx, dword ptr [rax - 0x75]; imul ebx, dword ptr [rax], -0x18; ret 0xf7dd; 
0x0000000000435a20: out dx, al; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000413028: out dx, al; mov eax, r13d; syscall; 
0x00000000004322ca: out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000049cea4: out dx, al; mov rax, qword ptr [rax]; add rsp, 8; ret; 
0x000000000045ec90: out dx, al; mov rax, qword ptr [rcx + 0xd8]; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000045f5fc: out dx, al; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000040e860: out dx, al; mov rdi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x30]; lea r15, qword ptr [rbx + r14]; call rax; 
0x000000000046be27: out dx, al; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000044091f: out dx, al; mov rdi, r12; mov eax, 9; syscall; 
0x00000000004123c5: out dx, al; mov rdi, r14; mov eax, r9d; syscall; 
0x000000000043f67f: out dx, al; mov rdi, r8; mov eax, r9d; syscall; 
0x000000000046b5c1: out dx, al; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000412ed5: out dx, al; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000413803: out dx, al; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000435a2a: out dx, al; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000042c18e: out dx, al; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000046de04: out dx, al; sti; jmp qword ptr [rsi + 0xf]; 
0x0000000000430990: out dx, al; sub rdi, 0x40; lea r11, qword ptr [rip + 0x738b3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000041f025: out dx, eax; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x000000000045b92d: out dx, eax; add eax, dword ptr [rax]; add al, ch; fisubr dword ptr [rdx]; sti; jmp qword ptr [rsi + 0x2e]; 
0x0000000000400f62: out dx, eax; add eax, dword ptr [rax]; nop; pop rbp; ret; 
0x00000000004196b7: out dx, eax; add ecx, dword ptr [rax - 0x77]; ret 0xcf31; 
0x000000000049ed84: out dx, eax; and al, byte ptr [rax]; mov qword ptr [rip + 0x22efc2], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000049ed8b: out dx, eax; and al, byte ptr [rax]; mov qword ptr [rsi + 0x28], rax; ret; 
0x0000000000440f79: out dx, eax; call 0x1ea60; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000440cb8: out dx, eax; call 0x1ea60; mov rdi, qword ptr [rbp]; call rbx; 
0x000000000046cb34: out dx, eax; call 0x6da80; mov rax, qword ptr [r13 + 0xd8]; mov esi, ebx; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x000000000046cb45: out dx, eax; call qword ptr [rax + 0x18]; 
0x000000000046d102: out dx, eax; call qword ptr [rax + 0x20]; 
0x000000000046b7f7: out dx, eax; call qword ptr [rax + 0x38]; 
0x00000000004106f7: out dx, eax; call qword ptr [rbp + 0x20]; 
0x00000000004983e7: out dx, eax; call qword ptr [rbx]; 
0x000000000041f547: out dx, eax; call rax; 
0x0000000000441821: out dx, eax; call rbx; 
0x00000000004be429: out dx, eax; cld; inc dword ptr [rax]; cld; call qword ptr [rax - 0xc]; 
0x00000000004c2379: out dx, eax; cmc; call qword ptr [rdx]; 
0x0000000000435aa0: out dx, eax; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000430a53: out dx, eax; lea r11, qword ptr [rip + 0x737f4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430994: out dx, eax; lea r11, qword ptr [rip + 0x738b3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000041157c: out dx, eax; lea r8, qword ptr [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x000000000044f9e2: out dx, eax; mov eax, r15d; syscall; 
0x000000000044faf3: out dx, eax; mov eax, r8d; syscall; 
0x00000000004320fa: out dx, eax; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004321f6: out dx, eax; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000432142: out dx, eax; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000410775: out dx, eax; mov r9, qword ptr [rax + 0x10]; lea r8, qword ptr [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x0000000000410bf4: out dx, eax; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000435aaa: out dx, eax; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000042c28d: out dx, eax; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000041fea8: out dx, eax; pop rbx; pop rbp; jmp rax; 
0x00000000004165be: out dx, eax; pop rbx; ret; 
0x000000000042f083: out dx, eax; push rsi; adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042f098: out dx, eax; push rsi; and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042f0ad: out dx, eax; push rsi; xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043e3b3: out dx, eax; ret 0xf66; 
0x000000000040a12d: out dx, eax; ret 0xffff; 
0x000000000042d185: out dx, eax; sbb byte ptr [rax - 0x7d], cl; out dx, al; adc byte ptr [rax - 0x75], cl; sbb byte ptr [rax - 0x7d], r9b; ret 0x4802; 
0x000000000043059c: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x2373; 
0x0000000000430585: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x000000000043056e: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x5173; 
0x000000000042f02a: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000041e6ab: out dx, eax; sub al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000042f2ff: out dx, eax; xchg eax, esi; add byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042f3bc: out dx, eax; xchg eax, esi; lock add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042f36b: out dx, eax; xchg eax, esi; rol byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000044fac1: out dx, eax; xor eax, eax; syscall; 
0x000000000042a19e: outsb dx, byte ptr [rsi]; adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ecf1: outsb dx, byte ptr [rsi]; add al, bpl; push rsi; xor bh, ah; jmp qword ptr [rsi + 0xf]; 
0x000000000044f982: outsb dx, byte ptr [rsi]; add byte ptr [rax - 0x77], cl; ret 0x8840; 
0x000000000044f97a: outsb dx, byte ptr [rsi]; add byte ptr [rdi + r9 - 0x4a], al; mov dl, 0x78; outsb dx, byte ptr [rsi]; add byte ptr [rax - 0x77], cl; ret 0x8840; 
0x000000000043c7de: outsb dx, byte ptr [rsi]; add dword ptr [rax], eax; add dh, dh; ret 0x7504; 
0x00000000004bad4c: outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x00000000004a3fb9: outsb dx, byte ptr [rsi]; clc; inc eax; outsd dx, dword ptr [rsi]; clc; jmp qword ptr [rax + 0x71]; 
0x0000000000462d1e: outsb dx, byte ptr [rsi]; cmp bl, bh; jmp qword ptr [rsi + 0xf]; 
0x00000000004bcac3: outsb dx, byte ptr [rsi]; ja 0xbca49; ret 0x48f; 
0x000000000040a1ae: outsb dx, byte ptr [rsi]; ret 0xffff; 
0x00000000004ba804: outsb dx, byte ptr [rsi]; sahf; ret 0x38ae; 
0x0000000000426803: outsb dx, byte ptr [rsi]; sub al, byte ptr [rax]; adc byte ptr [rdx + 0x426230], bh; mov eax, 0x43e180; cmove rax, rdx; ret; 
0x000000000042764a: outsb dx, byte ptr [rsi]; xor byte ptr [rbx + rcx*4 + 0x76], cl; cmp byte ptr [rax + 0xf], cl; ret; 
0x00000000004914d0: outsd dx, dword ptr [rsi]; add dword ptr [rax], eax; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000430118: outsd dx, dword ptr [rsi]; call 0xf69e9d1; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004a3fbd: outsd dx, dword ptr [rsi]; clc; jmp qword ptr [rax + 0x71]; 
0x000000000043674c: outsd dx, dword ptr [rsi]; cli; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000004300fd: outsd dx, dword ptr [rsi]; fdiv dword ptr [rdx - 0x10f09928]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042fefd: outsd dx, dword ptr [rsi]; fdiv qword ptr [rdx - 0x10f09924]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004221b8: outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x0000000000427c6e: outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0xf10; 
0x000000000043007d: outsd dx, dword ptr [rsi]; fnstenv dword ptr [rdx - 0x10f09927]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042fdc7: outsd dx, dword ptr [rsi]; movabs rbp, 0xf66d1ef0f66bdb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042fec7: outsd dx, dword ptr [rsi]; movabs rsp, 0xf66d1ef0f66bcb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004368a4: outsd dx, dword ptr [rsi]; pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x000000000042fffd: outsd dx, dword ptr [rsi]; push rdi; fidiv dword ptr [rdx - 0x10f09926]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042fdfd: outsd dx, dword ptr [rsi]; push rdi; fnsave dword ptr [rdx - 0x10f09923]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043043d: outsd dx, dword ptr [rsi]; push rdi; ret 0xff3; 
0x000000000043039d: outsd dx, dword ptr [rsi]; push rdi; ret; 
0x000000000046e2ea: outsd dx, dword ptr [rsi]; push rdi; xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x000000000043c026: outsd dx, dword ptr [rsi]; push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000042fc2d: outsd dx, dword ptr [rsi]; push rsi; fbstp dword ptr [rdx - 0x10f09921]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042fcfd: outsd dx, dword ptr [rsi]; push rsi; fidiv word ptr [rdx - 0x10f09922]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043c676: outsd dx, dword ptr [rsi]; push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, qword ptr [rdi + 0x1c]; ret; 
0x000000000043bfc6: outsd dx, dword ptr [rsi]; push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000043c006: outsd dx, dword ptr [rsi]; push rsi; psllq mm1, qword ptr [rdi]; jg 0x3c014; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000004bb1c6: outsd dx, dword ptr [rsi]; ret 0x5ae4; 
0x000000000046e33a: outsd dx, dword ptr [rsi]; ret 0xf66; 
0x000000000043e35c: outsd dx, dword ptr [rsi]; ret; 
0x000000000043045d: outsd dx, dword ptr [rsi]; sal byte ptr [rdx - 0x10f0992e], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043057e: outsd dx, dword ptr [rsi]; sal byte ptr [rdx - 0x10f09930], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x00000000004303bd: outsd dx, dword ptr [rsi]; sal qword ptr [rdx - 0x10f0992d], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004304fd: outsd dx, dword ptr [rsi]; sal qword ptr [rdx - 0x10f0992f], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004bb1c5: outsd dx, dword ptr es:[rsi]; ret 0x5ae4; 
0x000000000041b80f: paddd mm7, mm7; dec dword ptr [rax - 0x39]; ret 0xffd0; 
0x0000000000426acf: pcmpeqb mm1, qword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0x26b30; xor rax, rax; ret; 
0x000000000046f044: pcmpeqb mm3, qword ptr [rcx]; add rax, 2; ret; 
0x000000000046f02f: pcmpeqb mm3, qword ptr [rsi]; ret; 
0x000000000042435b: pcmpeqb mm4, mm0; pmovmskb edx, xmm4; test edx, edx; je 0x2436a; bsf eax, edx; ret; 
0x0000000000426ace: pcmpeqb xmm1, xmmword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0x26b30; xor rax, rax; ret; 
0x000000000042435a: pcmpeqb xmm4, xmm0; pmovmskb edx, xmm4; test edx, edx; je 0x2436a; bsf eax, edx; ret; 
0x00000000004bc5c5: pcmpeqw mm5, qword ptr [rbp + r12*2 - 0x5f]; mov cs, edi; ret 0x8b36; 
0x00000000004bc5c6: pcmpeqw mm5, qword ptr [rbp - 0x5f]; mov cs, edi; ret 0x8b36; 
0x0000000000414aab: pcmpgtb mm0, mm7; add byte ptr [rcx], cl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000045027d: pcmpgtd mm4, qword ptr [rip - 0x38f60f40]; mov word ptr [rsp - 2], di; fldcw word ptr [rsp - 2]; ret; 
0x00000000004914c7: pi2fd mm6, qword ptr [rsi - 0x72b7f1ec]; sub eax, 0x8b00016f; add al, 0x81; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000042d8fc: pmovmskb eax, mm0; test eax, eax; je 0x2d910; bsf eax, eax; lea rax, qword ptr [rdi + rax]; ret; 
0x0000000000426a2c: pmovmskb eax, mm1; bsf eax, eax; lea rax, qword ptr [rdi + rax + 0x30]; ret; 
0x0000000000426ad4: pmovmskb eax, mm1; test eax, eax; jne 0x26b30; xor rax, rax; ret; 
0x0000000000426a94: pmovmskb eax, mm1; test eax, eax; jne 0x26b50; xor rax, rax; ret; 
0x000000000042d8fb: pmovmskb eax, xmm0; test eax, eax; je 0x2d910; bsf eax, eax; lea rax, qword ptr [rdi + rax]; ret; 
0x0000000000426a2b: pmovmskb eax, xmm1; bsf eax, eax; lea rax, qword ptr [rdi + rax + 0x30]; ret; 
0x0000000000426ad3: pmovmskb eax, xmm1; test eax, eax; jne 0x26b30; xor rax, rax; ret; 
0x0000000000426a93: pmovmskb eax, xmm1; test eax, eax; jne 0x26b50; xor rax, rax; ret; 
0x000000000042435f: pmovmskb edx, mm4; test edx, edx; je 0x2436a; bsf eax, edx; ret; 
0x000000000042435e: pmovmskb edx, xmm4; test edx, edx; je 0x2436a; bsf eax, edx; ret; 
0x00000000004c92ea: pop qword ptr [rbx]; mov es, word ptr [rcx*4 + 0x48068c05]; add dword ptr [rdi], 3; pop rbx; add cl, byte ptr [rdx]; ret; 
0x00000000004c766a: pop qword ptr [rbx]; mov es, word ptr [rcx*4 + 0x4b068c05]; add dword ptr [rdi], 3; mov bl, 2; ret; 
0x00000000004432f5: pop r10; ret; 
0x000000000041f21a: pop r12; jmp rax; 
0x0000000000420fec: pop r12; jmp rcx; 
0x0000000000440a6f: pop r12; mov esi, 2; jmp rax; 
0x0000000000440a89: pop r12; mov esi, 3; jmp rax; 
0x000000000047c06d: pop r12; pop r13; jmp rax; 
0x00000000004878dc: pop r12; pop r13; pop r14; fmul st(0); ret; 
0x000000000048785a: pop r12; pop r13; pop r14; fmulp st(1); ret; 
0x000000000044223b: pop r12; pop r13; pop r14; pop r15; jmp rax; 
0x00000000004028c3: pop r12; pop r13; pop r14; pop r15; pop rbp; ret; 
0x0000000000401c9f: pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000000401dc2: pop r12; pop r13; pop r14; ret; 
0x000000000040ff15: pop r12; pop r13; pop rbp; ret; 
0x0000000000406176: pop r12; pop r13; ret; 
0x000000000049555c: pop r12; pop r14; ret; 
0x0000000000473e61: pop r12; pop rbp; ret; 
0x000000000040060a: pop r12; ret; 
0x0000000000496d88: pop r12; sar rax, 3; pop r13; pop r14; pop r15; ret; 
0x000000000047c06f: pop r13; jmp rax; 
0x00000000004878de: pop r13; pop r14; fmul st(0); ret; 
0x000000000048785c: pop r13; pop r14; fmulp st(1); ret; 
0x000000000044223d: pop r13; pop r14; pop r15; jmp rax; 
0x00000000004028c5: pop r13; pop r14; pop r15; pop rbp; ret; 
0x0000000000401ca1: pop r13; pop r14; pop r15; ret; 
0x0000000000401dc4: pop r13; pop r14; ret; 
0x000000000040ff17: pop r13; pop rbp; ret; 
0x0000000000406178: pop r13; ret; 
0x00000000004878e0: pop r14; fmul st(0); ret; 
0x000000000048785e: pop r14; fmulp st(1); ret; 
0x000000000044223f: pop r14; pop r15; jmp rax; 
0x00000000004028c7: pop r14; pop r15; pop rbp; ret; 
0x0000000000401ca3: pop r14; pop r15; ret; 
0x0000000000401dc6: pop r14; ret; 
0x0000000000442241: pop r15; jmp rax; 
0x00000000004028c9: pop r15; pop rbp; ret; 
0x0000000000401ca5: pop r15; ret; 
0x0000000000419201: pop r8; mov dword ptr [rdi + 4], eax; ret; 
0x00000000004c4965: pop rax; add byte ptr [rax], al; js 0xc4901; clc; jmp rbx; 
0x00000000004c48d5: pop rax; add byte ptr [rax], al; pop rax; xchg eax, edi; clc; call qword ptr [rdx]; 
0x0000000000492be5: pop rax; add dword ptr [rax], eax; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000492bb1: pop rax; add dword ptr [rax], eax; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000045025a: pop rax; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x00000000004c7518: pop rax; and edi, ebx; jmp qword ptr [rdi]; 
0x00000000004c72a8: pop rax; cli; cli; jmp rdi; 
0x00000000004c0bf8: pop rax; cmc; call qword ptr [rcx + 2]; 
0x00000000004bfcf8: pop rax; div esp; call qword ptr [rax]; 
0x00000000004c2c28: pop rax; mov ch, 0xf7; call qword ptr [rbx + 4]; 
0x0000000000419202: pop rax; mov dword ptr [rdi + 4], eax; ret; 
0x000000000049c625: pop rax; mov eax, dword ptr [rbx + 8]; movsxd rax, dword ptr [r14 + rax*4]; add rax, r14; jmp rax; 
0x0000000000480f86: pop rax; pop rdx; pop rbx; ret; 
0x00000000004c58d8: pop rax; pop rsp; cli; jmp qword ptr [rdx + 1]; 
0x000000000040a1c4: pop rax; ret 0xffff; 
0x000000000041fe44: pop rax; ret; 
0x00000000004be479: pop rax; std; jmp rax; 
0x00000000004c81f8: pop rax; xchg eax, ecx; sti; call qword ptr [rax]; 
0x00000000004c48d8: pop rax; xchg eax, edi; clc; call qword ptr [rdx]; 
0x00000000004c4e35: pop rbp; add byte ptr [rax], al; test al, 0xb7; clc; call qword ptr [rcx + 0x1c]; 
0x00000000004c1259: pop rbp; cmc; call qword ptr [rsi]; 
0x00000000004c1271: pop rbp; cmc; jmp qword ptr [rdx]; 
0x00000000004bf719: pop rbp; hlt; call qword ptr [rax]; 
0x000000000041e822: pop rbp; jmp rax; 
0x0000000000419622: pop rbp; mov dword ptr [r12 + 0x14], eax; pop r12; ret; 
0x00000000004008df: pop rbp; mov edi, 0x6ccb50; jmp rax; 
0x000000000041f219: pop rbp; pop r12; jmp rax; 
0x0000000000420feb: pop rbp; pop r12; jmp rcx; 
0x0000000000440a6e: pop rbp; pop r12; mov esi, 2; jmp rax; 
0x0000000000440a88: pop rbp; pop r12; mov esi, 3; jmp rax; 
0x000000000047c06c: pop rbp; pop r12; pop r13; jmp rax; 
0x00000000004878db: pop rbp; pop r12; pop r13; pop r14; fmul st(0); ret; 
0x0000000000487859: pop rbp; pop r12; pop r13; pop r14; fmulp st(1); ret; 
0x000000000044223a: pop rbp; pop r12; pop r13; pop r14; pop r15; jmp rax; 
0x0000000000401c9e: pop rbp; pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000000401dc1: pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000406175: pop rbp; pop r12; pop r13; ret; 
0x000000000049555b: pop rbp; pop r12; pop r14; ret; 
0x0000000000400609: pop rbp; pop r12; ret; 
0x00000000004878df: pop rbp; pop r14; fmul st(0); ret; 
0x000000000048785d: pop rbp; pop r14; fmulp st(1); ret; 
0x000000000044223e: pop rbp; pop r14; pop r15; jmp rax; 
0x00000000004028c6: pop rbp; pop r14; pop r15; pop rbp; ret; 
0x0000000000401ca2: pop rbp; pop r14; pop r15; ret; 
0x0000000000401dc5: pop rbp; pop r14; ret; 
0x000000000040ff18: pop rbp; pop rbp; ret; 
0x000000000048be88: pop rbp; pop rbx; ret; 
0x00000000004004d1: pop rbp; ret; 
0x000000000048ac22: pop rbp; ror byte ptr [rax - 0x77], 0x14; ret; 
0x00000000004be481: pop rbp; std; jmp qword ptr [rax + 0x5f]; 
0x00000000004135dc: pop rbp; sub rax, rdx; ret; 
0x000000000040fba3: pop rbx; add al, 0; add rsp, 0xd8; ret; 
0x00000000004c92f6: pop rbx; add cl, byte ptr [rdx]; ret; 
0x000000000043ec43: pop rbx; add rax, 1; pop rbp; pop r12; pop r13; ret; 
0x00000000004b9d98: pop rbx; and dword ptr [rsi + rbp*2 - 0x7a], edi; lahf; ret 0x871e; 
0x000000000043eedc: pop rbx; and eax, 0x3fc00; ret; 
0x000000000043ef0f: pop rbx; and eax, 0x7ff80000; ret; 
0x00000000004c58a1: pop rbx; cli; jmp rax; 
0x00000000004b9d96: pop rbx; cmc; pop rbx; and dword ptr [rsi + rbp*2 - 0x7a], edi; lahf; ret 0x871e; 
0x000000000049a01a: pop rbx; jmp rax; 
0x000000000049562b: pop rbx; mov dword ptr [r10 + 0xc], edi; pop rbp; pop r12; pop r14; ret; 
0x0000000000411afe: pop rbx; mov eax, 0xffffffff; pop rbp; pop r12; ret; 
0x000000000045d0f9: pop rbx; mov eax, 1; pop rbp; pop r12; pop r13; ret; 
0x000000000047d547: pop rbx; mov eax, dword ptr fs:[rax]; ret; 
0x000000000043ef73: pop rbx; mov eax, eax; ret; 
0x000000000046b5da: pop rbx; mov eax, edx; pop rbp; pop r12; ret; 
0x000000000045b0fe: pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000047f4de: pop rbx; mov edi, 0x6cc140; jmp rax; 
0x0000000000400703: pop rbx; mov qword ptr [rip + 0x2cb9a5], rax; pop rbp; pop r12; ret; 
0x000000000041166a: pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000415776: pop rbx; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x00000000004158e6: pop rbx; mov rax, qword ptr [rax + 0x28]; jmp rax; 
0x000000000046be67: pop rbx; mov rax, rbp; pop rbp; pop r12; pop r13; ret; 
0x0000000000420d08: pop rbx; mov rsi, r12; pop rbp; pop r12; jmp rax; 
0x000000000040ff14: pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000473e60: pop rbx; pop r12; pop rbp; ret; 
0x000000000041e821: pop rbx; pop rbp; jmp rax; 
0x000000000041f218: pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000000420fea: pop rbx; pop rbp; pop r12; jmp rcx; 
0x0000000000440a6d: pop rbx; pop rbp; pop r12; mov esi, 2; jmp rax; 
0x0000000000440a87: pop rbx; pop rbp; pop r12; mov esi, 3; jmp rax; 
0x000000000047c06b: pop rbx; pop rbp; pop r12; pop r13; jmp rax; 
0x0000000000401dc0: pop rbx; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000406174: pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000049555a: pop rbx; pop rbp; pop r12; pop r14; ret; 
0x0000000000400608: pop rbx; pop rbp; pop r12; ret; 
0x00000000004004d0: pop rbx; pop rbp; ret; 
0x00000000004135db: pop rbx; pop rbp; sub rax, rdx; ret; 
0x00000000004bd080: pop rbx; ret 0x6f9; 
0x0000000000401395: pop rbx; ret; 
0x000000000046f6c9: pop rbx; sub rax, rbp; pop rbp; pop r12; ret; 
0x000000000044133a: pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000048c778: pop rbx; xor esi, esi; mov edi, dword ptr [rip + 0x241243]; jmp rax; 
0x0000000000420c02: pop rcx; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; pop r12; ret; 
0x0000000000431ef3: pop rcx; and eax, dword ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004bad46: pop rcx; cmp byte ptr [rbx + rdi*2], bh; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x000000000047d309: pop rcx; dec dword ptr [rax + 0x63]; ret; 
0x00000000004368a5: pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x0000000000436278: pop rcx; jmp qword ptr [rdx - 0xf]; 
0x000000000048181f: pop rcx; rcr byte ptr [rbp + 0x41], 0x5c; pop r13; pop r14; ret; 
0x0000000000481931: pop rcx; shl byte ptr [rdi + rax*8], 0x22; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x000000000046fda0: pop rdi; add byte ptr [r15 + 0x4b5e18], dil; call 0x1f50; nop dword ptr [rax]; mov eax, 0xc9; syscall; 
0x00000000004c4fc5: pop rdi; add byte ptr [rax], al; cmp al, bl; clc; call qword ptr [rbx]; 
0x00000000004c4ff5: pop rdi; add byte ptr [rax], al; cmp al, bl; clc; call qword ptr [rdx]; 
0x00000000004c4fdd: pop rdi; add byte ptr [rax], al; fdivr st(0); call qword ptr [rax]; 
0x000000000042c91d: pop rdi; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004a3f95: pop rdi; clc; jmp qword ptr [rax]; 
0x00000000004c1421: pop rdi; cmc; call qword ptr [rsi]; 
0x00000000004c1409: pop rdi; cmc; jmp qword ptr [rax]; 
0x00000000004c1439: pop rdi; cmc; jmp qword ptr [rdi + 1]; 
0x0000000000432699: pop rdi; in al, dx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004324a9: pop rdi; in eax, dx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004bc33e: pop rdi; insd dword ptr [rdi], dx; test eax, 0x7d4c8c5d; ret 0xd8f; 
0x0000000000442242: pop rdi; jmp rax; 
0x00000000004bb301: pop rdi; mov dh, 0x4e; ret 0x474c; 
0x000000000049ee8e: pop rdi; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000004322c9: pop rdi; out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004320f9: pop rdi; out dx, eax; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004321f5: pop rdi; out dx, eax; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000432141: pop rdi; out dx, eax; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004028ca: pop rdi; pop rbp; ret; 
0x0000000000401ca6: pop rdi; ret; 
0x00000000004c7c71: pop rdi; sti; jmp qword ptr [rdx + 9]; 
0x00000000004c58d5: pop rdx; add byte ptr [rax], al; pop rax; pop rsp; cli; jmp qword ptr [rdx + 1]; 
0x000000000043f4c0: pop rdx; add byte ptr [rax], al; ret; 
0x000000000045d8f2: pop rdx; cli; jmp qword ptr [rsi + 0x2e]; 
0x00000000004c1181: pop rdx; cmc; jmp qword ptr [rsi + 2]; 
0x00000000004625c0: pop rdx; ja 0x60750; movzx eax, byte ptr [rax + 0x4b4a60]; mov dword ptr [rbp - 0x1088], 1; mov rax, qword ptr [rax*8 + 0x4b45a0]; jmp rax; 
0x0000000000460db8: pop rdx; ja 0x60750; movzx eax, byte ptr [rax + 0x4b4a60]; mov dword ptr [rbp - 0x1090], 1; mov rax, qword ptr [rax*8 + 0x4b43a0]; jmp rax; 
0x0000000000462325: pop rdx; ja 0x60750; movzx eax, byte ptr [rax + 0x4b4a60]; mov dword ptr [rbp - 0x10a0], 1; mov rax, qword ptr [rax*8 + 0x4b48a0]; jmp rax; 
0x00000000004624d8: pop rdx; ja 0x60750; movzx eax, byte ptr [rax + 0x4b4a60]; mov dword ptr [rbp - 0x10a8], 1; mov rax, qword ptr [rax*8 + 0x4b48a0]; jmp rax; 
0x000000000046249a: pop rdx; ja 0x60750; movzx eax, byte ptr [rax + 0x4b4a60]; mov dword ptr [rbp - 0x10b0], 1; mov rax, qword ptr [rax*8 + 0x4b48a0]; jmp rax; 
0x0000000000460e4e: pop rdx; ja 0x60750; movzx eax, byte ptr [rax + 0x4b4a60]; mov dword ptr [rbp - 0x10b8], 1; mov rax, qword ptr [rax*8 + 0x4b48a0]; jmp rax; 
0x0000000000460e8c: pop rdx; ja 0x60750; movzx eax, byte ptr [rax + 0x4b4a60]; mov dword ptr [rbp - 0x10c8], 1; mov rax, qword ptr [rax*8 + 0x4b48a0]; jmp rax; 
0x00000000004bbf21: pop rdx; je 0xbbee8; ret 0xacfc; 
0x00000000004bad44: pop rdx; jp 0xbada0; cmp byte ptr [rbx + rdi*2], bh; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x000000000049827e: pop rdx; or byte ptr [rcx + 3], cl; sbb al, byte ptr [rbx + 0xa3c0fe0]; jne 0x9823d; nop word ptr [rax + rax]; call rbx; 
0x00000000004bcee7: pop rdx; out 0xf5, eax; mov ch, 0xab; ret; 
0x00000000004432f4: pop rdx; pop r10; ret; 
0x0000000000480f87: pop rdx; pop rbx; ret; 
0x0000000000443319: pop rdx; pop rsi; ret; 
0x00000000004432f6: pop rdx; ret; 
0x00000000004beb44: pop rdx; retf; std; jmp rsp; 
0x00000000004beb40: pop rdx; retf; std; lcall ptr [rdx - 0x35]; std; jmp rsp; 
0x00000000004be47d: pop rdx; std; jmp qword ptr [rax]; 
0x000000000042c81e: pop rsi; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000047c543: pop rsi; add dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; ret 0xf48; 
0x0000000000426b9c: pop rsi; add dword ptr [rax], eax; ret; 
0x000000000046f61a: pop rsi; add r8b, bpl; sub ecx, edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000427642: pop rsi; and byte ptr [rbx + rcx*4 + 0x66], cl; sub byte ptr [rbx + rcx*4 + 0x6e], cl; xor byte ptr [rbx + rcx*4 + 0x76], cl; cmp byte ptr [rax + 0xf], cl; ret; 
0x00000000004c13d1: pop rsi; cmc; jmp qword ptr [rax]; 
0x00000000004878e1: pop rsi; fmul st(0); ret; 
0x000000000048785f: pop rsi; fmulp st(1); ret; 
0x00000000004a1c6b: pop rsi; idiv edi; add byte ptr [rax], al; sub rsp, 8; add rsp, 8; ret; 
0x000000000042d325: pop rsi; or byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000442240: pop rsi; pop r15; jmp rax; 
0x00000000004028c8: pop rsi; pop r15; pop rbp; ret; 
0x0000000000401ca4: pop rsi; pop r15; ret; 
0x0000000000401dc7: pop rsi; ret; 
0x00000000004bb07c: pop rsi; sar byte ptr [rip + 0x733db8a1], 0xd7; jo 0xbb0f7; mov ebp, 0xfb67d10d; ret; 
0x0000000000476ef8: pop rsi; sti; dec dword ptr [rax - 0x77]; ret; 
0x00000000004c7c31: pop rsi; sti; jmp qword ptr [rdx]; 
0x000000000042a3b0: pop rsp; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004c4e30: pop rsp; add byte ptr [rax], al; add byte ptr [rbp + rbx*2 - 0x48580000], dh; clc; call qword ptr [rcx + 0x1c]; 
0x00000000004c1f00: pop rsp; add byte ptr [rax], al; add byte ptr [rsi + rbp - 0x32e80000], al; cmc; jmp rdx; 
0x000000000042b0b0: pop rsp; add eax, 0x83480000; ret 0xe910; 
0x000000000041bfe2: pop rsp; and al, 0x20; mov qword ptr [rsp + 0x18], r8; mov qword ptr [rsp + 0x10], r10; call rax; 
0x0000000000480eee: pop rsp; and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000480e7c: pop rsp; and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x50; jmp qword ptr [rax]; 
0x00000000004a3fcd: pop rsp; clc; call rax; 
0x00000000004a3fcd: pop rsp; clc; call rax; js 0xa3fcb; jmp qword ptr [rax]; 
0x00000000004c58d9: pop rsp; cli; jmp qword ptr [rdx + 1]; 
0x00000000004c28dc: pop rsp; cmp byte ptr [rax], al; add byte ptr [rax], al; jb 0xc28d9; call qword ptr [rax]; 
0x00000000004c88dc: pop rsp; cwde; add byte ptr [rax], al; push rax; cld; call qword ptr [rax + 1]; 
0x000000000044230e: pop rsp; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000041f21b: pop rsp; jmp rax; 
0x0000000000420fed: pop rsp; jmp rcx; 
0x00000000004723e0: pop rsp; mov ch, 0x25; add byte ptr [rdi], cl; adc dword ptr [rsi + 0x48000000], -0x77; fmul dword ptr [rax - 0x7d]; ret; 
0x0000000000440a70: pop rsp; mov esi, 2; jmp rax; 
0x0000000000440a8a: pop rsp; mov esi, 3; jmp rax; 
0x0000000000423910: pop rsp; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000047c06e: pop rsp; pop r13; jmp rax; 
0x00000000004878dd: pop rsp; pop r13; pop r14; fmul st(0); ret; 
0x000000000048785b: pop rsp; pop r13; pop r14; fmulp st(1); ret; 
0x000000000044223c: pop rsp; pop r13; pop r14; pop r15; jmp rax; 
0x00000000004028c4: pop rsp; pop r13; pop r14; pop r15; pop rbp; ret; 
0x0000000000401ca0: pop rsp; pop r13; pop r14; pop r15; ret; 
0x0000000000401dc3: pop rsp; pop r13; pop r14; ret; 
0x000000000040ff16: pop rsp; pop r13; pop rbp; ret; 
0x0000000000406177: pop rsp; pop r13; ret; 
0x000000000049555d: pop rsp; pop r14; ret; 
0x0000000000473e62: pop rsp; pop rbp; ret; 
0x00000000004c4fdc: pop rsp; pop rdi; add byte ptr [rax], al; fdivr st(0); call qword ptr [rax]; 
0x000000000040060b: pop rsp; ret; 
0x0000000000496d89: pop rsp; sar rax, 3; pop r13; pop r14; pop r15; ret; 
0x00000000004c8e25: popfq; add byte ptr [rax], al; js 0xc8e8e; cld; call qword ptr [rax]; 
0x000000000044216f: popfq; call 0x4bf2174; add byte ptr [rax], al; add byte ptr [rsi + 2], bh; mov rdi, r15; call rbx; 
0x00000000004a40d9: popfq; clc; call qword ptr [rax - 0x4f000762]; lahf; clc; call rax; 
0x000000000047817b: popfq; clc; jmp qword ptr [rsi - 0x70]; 
0x00000000004c8ef1: popfq; cld; call qword ptr [rax]; 
0x000000000045d4fa: popfq; cld; dec dword ptr [rax - 0x39]; ret 0xffb0; 
0x000000000043eed4: popfq; lea eax, dword ptr [rcx*4]; pop rbx; and eax, 0x3fc00; ret; 
0x000000000049c449: popfq; ret 0xf45; 
0x000000000045318f: popfq; ret; 
0x000000000048f6a0: popfq; sbb eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004015fb: popfq; shr byte ptr [rax + rax], 0xf6; ret 0x7420; 
0x00000000004604a9: popfq; sub bh, 0xff; dec dword ptr [rcx + 0x39]; ret; 
0x000000000045729f: popfq; test byte ptr [rcx], al; add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rcx - 0x77]; ret 0x8b4c; 
0x0000000000435b72: psllq mm1, qword ptr [r15]; jg 0x35b87; ret; 
0x0000000000435b73: psllq mm1, qword ptr [rdi]; jg 0x35b87; ret; 
0x000000000043bea6: psllq mm1, qword ptr [rdi]; jg 0x3beb2; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000043bf07: psllq mm1, qword ptr [rdi]; jg 0x3bf13; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000043c008: psllq mm1, qword ptr [rdi]; jg 0x3c014; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000043c536: psllq mm1, qword ptr [rdi]; jg 0x3c542; mov dword ptr [rdi + 0xf], ecx; lea rax, qword ptr [rdi + 0x12]; ret; 
0x000000000043c5b7: psllq mm1, qword ptr [rdi]; jg 0x3c5c3; mov qword ptr [rdi + 0xf], rcx; lea rax, qword ptr [rdi + 0x16]; ret; 
0x000000000043c6b8: psllq mm1, qword ptr [rdi]; jg 0x3c6c4; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, qword ptr [rdi + 0x1e]; ret; 
0x00000000004a46fd: psubw mm7, mm7; mov dl, 0xe; stc; jmp qword ptr [rdx]; 
0x00000000004a483d: psubw mm7, mm7; or byte ptr [rsi], 0xf9; push rax; or eax, 0xd60fff9; stc; call rax; 
0x000000000044cbcc: push -0x18917; jmp qword ptr [rsi + 0xf]; 
0x0000000000474056: push -0x2d17ffb5; ret 0xfff8; 
0x000000000043326c: push -0x30; vmovdqu xmmword ptr [rdx - 0x20], xmm14; vmovdqu xmmword ptr [rdx - 0x10], xmm15; ret; 
0x00000000004332cf: push -0x30; vmovdqu xmmword ptr [rdx - 0x20], xmm6; vmovdqu xmmword ptr [rdx - 0x10], xmm7; ret; 
0x00000000004bad4a: push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x000000000043ef2b: push -0x47ffb5b5; or byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000047402f: push -0x617ffb5; ret 0xfff8; 
0x000000000041657b: push -0x6f995915; mov rax, -1; ret; 
0x000000000045374f: push -0x76000005; ret 0x8941; 
0x0000000000495e3e: push -0x7a000006; ror byte ptr [rdi], cl; xchg eax, ebp; ret 0xb60f; 
0x0000000000463a6f: push -0x7c000006; ret 0x8908; 
0x000000000046858a: push -0x9000007; ret 0xf02; 
0x0000000000415528: push -0x9617; jmp qword ptr [rsi - 0x70]; 
0x000000000043c7c4: push -0x9ffffff; ret 0x7501; 
0x00000000004739b2: push -7; cld; dec dword ptr [rax - 0x77]; add al, 0x24; mov eax, 0x14; syscall; 
0x000000000046f681: push 0; lea rcx, qword ptr [rax + 4]; lea r9, qword ptr [rsp + 0x20]; lea rdx, qword ptr [rsp + 0x28]; lea rsi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000004455c0: push 0; mov rdx, rbp; mov rsi, qword ptr [rsp + 0x18]; mov r9, r14; call rbx; 
0x000000000044b9dd: push 0x14bf004a; push 0x66e8004a; sti; jmp qword ptr [rsi + 0xf]; 
0x00000000004c0117: push 0x2600e41; mov ecx, 0x41380e0a; ret; 
0x000000000040e2a2: push 0x40b60f09; or dword ptr [rax + rax*8 - 0x38b7938c], eax; ret 0xfff0; 
0x00000000004003ce: push 0x48004a2a; mov edi, ebx; mov eax, 1; syscall; 
0x000000000049cd98: push 0x48; add esp, 0x18; ret; 
0x000000000042015c: push 0x48e6894c; mov edi, ebx; call rax; 
0x00000000004c589d: push 0x5bb00000; cli; jmp rax; 
0x000000000046d1e2: push 0x60894c30; cmp byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x000000000044b9e2: push 0x66e8004a; sti; jmp qword ptr [rsi + 0xf]; 
0x00000000004bcac2: push 0x6e; ja 0xbca49; ret 0x48f; 
0x0000000000449df5: push 0x78bf004a; imul ecx, dword ptr [rdx], 0xfb814ee8; jmp qword ptr [rsi + 0xf]; 
0x00000000004038dd: push 0xb828; add byte ptr [rax], al; test rax, rax; je 0x38fa; mov edi, 0x6ccfe0; call rax; 
0x00000000004a4810: push 0xc; stc; call qword ptr [rax]; 
0x000000000046841c: push 0xffffff9; xchg eax, esp; ret; 
0x000000000046f5de: push 1; xor ecx, ecx; xor edx, edx; lea r9, qword ptr [rsp + 0x20]; lea rsi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000045b041: push qword ptr [r9]; sal bh, cl; int1; add eax, r8d; ret; 
0x00000000004a4653: push qword ptr [rax + 0x14]; stc; push rax; adc edi, ecx; jmp qword ptr [rax + 0x13]; 
0x00000000004be3ab: push qword ptr [rax + 0x17]; std; call qword ptr [rax + 0x19]; 
0x00000000004be3cb: push qword ptr [rax + 0x26]; std; call qword ptr [rax + 0x28]; 
0x00000000004a422f: push qword ptr [rax + 0x30fff8bf]; sar al, 0xff; rol al, 0xf8; call qword ptr [rax - 0x3f]; 
0x0000000000411577: push qword ptr [rax + 0x38]; mov rdi, rbp; lea r8, qword ptr [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x0000000000410770: push qword ptr [rax + 0x38]; mov rdi, rbp; mov r9, qword ptr [rax + 0x10]; lea r8, qword ptr [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x00000000004a4633: push qword ptr [rax + 0x40fff919]; sbb ecx, edi; call rax; 
0x00000000004a441b: push qword ptr [rax + 0x40fff91c]; sbb al, 0xf9; call rax; 
0x00000000004a3fcb: push qword ptr [rax + 0x5c]; clc; call rax; 
0x00000000004a3fcb: push qword ptr [rax + 0x5c]; clc; call rax; js 0xa3fcb; jmp qword ptr [rax]; 
0x00000000004a499f: push qword ptr [rax + 0x75]; stc; call qword ptr [rax - 0x4f00068b]; jne 0xa49a4; call rax; 
0x00000000004a49bf: push qword ptr [rax + 0x76]; stc; call qword ptr [rax - 0x4f00068a]; jbe 0xa49c4; call rax; 
0x00000000004a3fd7: push qword ptr [rax + 0x7b]; clc; inc eax; jl 0xa3fd7; call qword ptr [rax]; 
0x00000000004be457: push qword ptr [rax + 0xb]; std; push qword ptr [rax - 0x17]; cld; jmp qword ptr [rax]; 
0x00000000004a487f: push qword ptr [rax + 0xe]; stc; jmp rax; 
0x00000000004a43ab: push qword ptr [rax + 0xfff8cf]; sar eax, 1; call qword ptr [rax - 0x2e]; 
0x00000000004a43ff: push qword ptr [rax + 0xfff8d6]; fdivr st(0); call qword ptr [rax - 0x27]; 
0x00000000004be427: push qword ptr [rax + 0xfffcef]; cld; call qword ptr [rax - 0xc]; 
0x0000000000440aeb: push qword ptr [rax + rcx + 0x48]; mov esi, ebx; call 0x40aa0; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000440b2c: push qword ptr [rax + rcx + 0x48]; mov esi, ebx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004be45b: push qword ptr [rax - 0x17]; cld; jmp qword ptr [rax]; 
0x00000000004a42db: push qword ptr [rax - 0x1d]; clc; call qword ptr [rax - 0x1b]; 
0x00000000004a435b: push qword ptr [rax - 0x1e]; clc; jmp qword ptr [rax - 0x1c]; 
0x00000000004a4373: push qword ptr [rax - 0x22]; clc; inc dword ptr [rax - 0x20]; clc; jmp qword ptr [rax]; 
0x00000000004a43ef: push qword ptr [rax - 0x2f]; clc; inc eax; sar al, cl; call qword ptr [rax]; 
0x00000000004a439b: push qword ptr [rax - 0x36]; clc; inc eax; retf; clc; call qword ptr [rax]; 
0x00000000004a4243: push qword ptr [rax - 0x3e]; clc; call qword ptr [rax]; 
0x00000000004a4243: push qword ptr [rax - 0x3e]; clc; call qword ptr [rax]; ret; 
0x00000000004a4973: push qword ptr [rax - 0x3f00068c]; je 0xa4974; call rax; 
0x00000000004a402f: push qword ptr [rax - 0x3f0007b5]; clc; call rax; 
0x00000000004a40f7: push qword ptr [rax - 0x5a]; clc; call qword ptr [rax - 0x4f000759]; test al, 0xf8; call rax; 
0x00000000004a40d7: push qword ptr [rax - 0x63]; clc; call qword ptr [rax - 0x4f000762]; lahf; clc; call rax; 
0x00000000004be3c3: push qword ptr [rax - 0x6f0002de]; and al, 0xfd; push qword ptr [rax + 0x26]; std; call qword ptr [rax + 0x28]; 
0x00000000004a42d3: push qword ptr [rax - 0x6f000721]; loope 0xa42d3; push qword ptr [rax - 0x1d]; clc; call qword ptr [rax - 0x1b]; 
0x00000000004a3ebf: push qword ptr [rax]; clc; inc dword ptr [rax + 1]; clc; call qword ptr [rax]; 
0x00000000004a400f: push qword ptr [rax]; cmp edi, eax; inc dword ptr [rax + 0x3d]; clc; call qword ptr [rax + 0x3f]; 
0x00000000004a49b7: push qword ptr [rax]; jbe 0xa49b4; call qword ptr [rax + 0x76]; 
0x00000000004a4953: push qword ptr [rax]; je 0xa4950; inc dword ptr [rax + 0x74]; stc; call qword ptr [rax + 0x74]; 
0x000000000049acc3: push qword ptr [rax]; jne 0x9aceb; mov rax, qword ptr [rsi + 0xb0]; add rsp, 8; ret; 
0x000000000049d7c7: push qword ptr [rax]; jne 0x9d7f0; mov rax, qword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x000000000049d827: push qword ptr [rax]; jne 0x9d850; mov rax, qword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x00000000004a4993: push qword ptr [rax]; jne 0xa4990; call qword ptr [rax + 0x75]; 
0x00000000004a4993: push qword ptr [rax]; jne 0xa4990; call qword ptr [rax + 0x75]; stc; jmp qword ptr [rax + 0x75]; 
0x00000000004a4a0f: push qword ptr [rax]; jnp 0xa4a0c; inc dword ptr [rax + 0x7b]; stc; jmp qword ptr [rax + 0x7b]; 
0x00000000004a49e7: push qword ptr [rax]; jp 0xa49e4; inc dword ptr [rax + 0x7a]; stc; call qword ptr [rax + 0x7a]; 
0x00000000004a40ef: push qword ptr [rax]; movsb byte ptr [rdi], byte ptr [rsi]; clc; call qword ptr [rax - 0x5b]; 
0x00000000004a4233: push qword ptr [rax]; sar al, 0xff; rol al, 0xf8; call qword ptr [rax - 0x3f]; 
0x00000000004a4233: push qword ptr [rax]; sar al, 0xff; rol al, 0xf8; call qword ptr [rax - 0x3f]; clc; jmp rax; 
0x00000000004a4613: push qword ptr [rax]; sbb eax, 0x1cc0fff9; stc; call qword ptr [rax + 0x1c]; 
0x00000000004a4613: push qword ptr [rax]; sbb eax, 0x1cc0fff9; stc; call qword ptr [rax + 0x1c]; stc; jmp rax; 
0x00000000004a443b: push qword ptr [rax]; sbb ecx, edi; inc eax; sbb cl, bh; call qword ptr [rax + 0x18]; 
0x00000000004be3b3: push qword ptr [rax]; sbb edi, ebp; call qword ptr [rax]; 
0x00000000004be3b3: push qword ptr [rax]; sbb edi, ebp; call qword ptr [rax]; sbb eax, 0x1ef0fffd; std; call rax; 
0x00000000004be3d3: push qword ptr [rax]; sub bh, ch; call qword ptr [rax]; 
0x00000000004273f9: push qword ptr [rbp + 0x14]; and edx, 7; jne 0x272a6; mov rax, rdi; ret; 
0x00000000004275e3: push qword ptr [rbp + 0x1a]; and edx, 0x3f; jne 0x272a6; mov rax, rdi; ret; 
0x000000000043e148: push qword ptr [rbp + 0x1a]; xor eax, eax; ret; 
0x000000000041165b: push qword ptr [rbp + 2]; pop rbx; ret; 
0x00000000004c7d9b: push qword ptr [rbp + 4]; add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x35b0303; ret; 
0x0000000000415f6d: push qword ptr [rbp + rax - 0xa]; ret 0x7401; 
0x000000000046d275: push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x000000000046e0a3: push qword ptr [rbp + rcx + 0x48]; sar edx, cl; test rdx, rdx; je 0x6e0d0; bsf rax, rdx; ret; 
0x0000000000466856: push qword ptr [rbp + rcx - 0x18]; ret 0xfb83; 
0x00000000004a47c7: push qword ptr [rbp + rcx - 7]; jmp rsp; 
0x000000000044014a: push qword ptr [rbp + rdi*4 + 0x48]; mov dword ptr [rsp + 8], edi; mov rdi, qword ptr [rsp + 8]; mov eax, 0x4f; syscall; 
0x000000000046d21d: push qword ptr [rbp + rdi*4 - 0xa]; ret 0x7508; 
0x00000000004a12d4: push qword ptr [rbp + rdx + 0x48]; mov eax, dword ptr [rdi + 0x20]; test rax, rax; je 0xa12e7; call rax; 
0x0000000000416611: push qword ptr [rbp - 0x1a]; pop rbx; ret; 
0x00000000004434c2: push qword ptr [rbp - 0xd]; xor eax, eax; leave; ret; 
0x0000000000403ba5: push qword ptr [rbx + 0x4c]; mov dword ptr [rbp - 0x90], eax; mov qword ptr [rbp - 0x88], rcx; mov edi, 0x6cd060; call rax; 
0x00000000004c7d63: push qword ptr [rbx + 4]; add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x34b0303; ret; 
0x00000000004165b9: push qword ptr [rbx + rax - 0x7d]; and ebp, edi; pop rbx; ret; 
0x00000000004a0ac2: push qword ptr [rbx + rcx - 0x17]; xchg eax, esi; fcompi st(7); jmp qword ptr [rsi + 0xf]; 
0x0000000000412896: push qword ptr [rbx + rcx - 0x18]; ret 0xc1; 
0x000000000046f81a: push qword ptr [rbx + rdx*2 - 0x7b]; ror byte ptr [rdi], 0x95; ret 0xe883; 
0x000000000047ccd7: push qword ptr [rcx]; fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000411b31: push qword ptr [rcx]; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x00000000004a417f: push qword ptr [rcx]; ret 0xfff8; 
0x000000000047d439: push qword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000045b042: push qword ptr [rcx]; sal bh, cl; int1; add eax, r8d; ret; 
0x00000000004019a4: push qword ptr [rcx]; sar byte ptr [rsi + 0x20000], cl; mov edi, 0x4a1e2d; mov eax, 2; syscall; 
0x000000000043f4fc: push qword ptr [rdi + 0x21]; hlt; mov rdi, rdx; mov eax, r8d; syscall; 
0x000000000044001c: push qword ptr [rdi + 0x41]; add rsp, 0x60; pop rbx; ret; 
0x00000000004733bc: push qword ptr [rdi + 9]; pop rbx; ret; 
0x0000000000415a96: push qword ptr [rdi + rax + 0x5b]; pop rbp; pop r12; ret; 
0x0000000000403ff1: push qword ptr [rdx + rbp - 0x47]; add al, byte ptr [rax]; add byte ptr [rax], al; xor esi, esi; mov eax, ecx; syscall; 
0x00000000004a45af: push qword ptr [rdx + rbx]; stc; inc esp; sbb ecx, edi; call qword ptr [rcx + rbx - 7]; jmp rsp; 
0x00000000004a46fb: push qword ptr [rdx]; psubw mm7, mm7; mov dl, 0xe; stc; jmp qword ptr [rdx]; 
0x00000000004a44e7: push qword ptr [rdx]; sbb edi, ecx; inc edx; sbb bh, cl; call qword ptr [rdx + 0x1a]; 
0x0000000000413633: push qword ptr [rsi + 0x1a]; mov rdx, -0x30; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000004a4453: push qword ptr [rsi + 0x1d]; stc; inc dword ptr [rsi]; sbb eax, 0x1c96fff9; stc; jmp qword ptr [rsi]; 
0x00000000004a4463: push qword ptr [rsi + 0x46fff91b]; sbb edi, ecx; call rsi; 
0x0000000000464956: push qword ptr [rsi + rcx - 0x18]; ret 0xfba2; 
0x000000000047366d: push qword ptr [rsi + rsi - 0x77]; ret 0xe283; 
0x000000000049d772: push qword ptr [rsp + rbp*8 - 0x18]; xchg eax, esi; or al, 0xf7; jmp qword ptr [rsi + 0xf]; 
0x00000000004484bc: push r13; mov r9, qword ptr [rsp + 0x38]; mov rsi, qword ptr [rsp + 0x30]; mov rdi, qword ptr [rsp + 0x28]; call rbx; 
0x0000000000416223: push r8; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x00000000004156cf: push r8; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000416f51: push rax; adc byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x000000000041bbb0: push rax; adc dh, dh; ret 0xf0f; 
0x00000000004a4657: push rax; adc edi, ecx; jmp qword ptr [rax + 0x13]; 
0x0000000000418d24: push rax; add al, 0; add byte ptr [rcx - 0xa], al; ret; 
0x000000000046d381: push rax; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x0000000000416224: push rax; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x00000000004156d0: push rax; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000043fecd: push rax; add byte ptr [rax], al; ret; 
0x000000000045c3e0: push rax; add dword ptr [rax - 0x77], ecx; push rbx; sub dh, al; add byte ptr [rip - 0x2fd17], ch; jmp qword ptr [rsi - 0x70]; 
0x00000000004593ac: push rax; add dword ptr [rax - 0x77], ecx; push rbx; sub dh, al; add byte ptr [rip - 0x42117], ch; jmp qword ptr [rsi + 0xf]; 
0x000000000045bf90: push rax; add dword ptr [rax - 0x77], ecx; push rbx; sub dh, al; add byte ptr [rip - 0xa8d17], ch; jmp qword ptr [rsi - 0x70]; 
0x0000000000468568: push rax; add dword ptr [rbx - 0x7cf0f706], eax; xchg eax, edx; add byte ptr [rax], al; add dh, dh; ret 0x7504; 
0x000000000041afef: push rax; add eax, 0xf6410000; ret 0xf01; 
0x00000000004267b5: push rax; add eax, ebp; add byte ptr fs:[rax], al; add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x000000000046d197: push rax; and cl, ch; sar dh, 0xff; jmp qword ptr [rsi - 0x70]; 
0x0000000000445658: push rax; call rbx; 
0x00000000004c88e0: push rax; cld; call qword ptr [rax + 1]; 
0x00000000004c0f99: push rax; cmc; jmp qword ptr [rbx]; 
0x00000000004105b6: push rax; cmp byte ptr [rax + 0x39], cl; ret; 
0x00000000004bfd10: push rax; div esp; call qword ptr [rdx]; 
0x00000000004bef24: push rax; iretd; std; call qword ptr [rax - 0x31]; 
0x00000000004a495c: push rax; je 0xa4958; jmp qword ptr [rax + 0x74]; 
0x00000000004a4983: push rax; je 0xa4980; inc dword ptr [rax]; jne 0xa4984; call qword ptr [rax]; 
0x0000000000480e8c: push rax; jmp qword ptr [rax]; 
0x000000000049d7f3: push rax; jne 0x9d7e3; xor eax, eax; add rsp, 8; ret; 
0x000000000049d853: push rax; jne 0x9d843; xor eax, eax; add rsp, 8; ret; 
0x00000000004a4998: push rax; jne 0xa4994; jmp qword ptr [rax + 0x75]; 
0x00000000004a49af: push rax; jne 0xa49ac; call qword ptr [rax]; 
0x00000000004a49db: push rax; jns 0xa49d8; inc dword ptr [rax]; jp 0xa49dc; call qword ptr [rax]; 
0x00000000004a49f0: push rax; jp 0xa49ec; jmp qword ptr [rax + 0x7a]; 
0x000000000044772a: push rax; mov dword ptr [rax + 0x54], edx; ret; 
0x00000000004110bd: push rax; mov qword ptr [rsp + 8], r14; mov qword ptr [rsp], rax; mov rbx, qword ptr [r15 + 0x98]; mov rdi, rbx; call qword ptr [rbx + 0x20]; 
0x00000000004116fd: push rax; mov rax, qword ptr [rsp + 0x18]; lea r8, qword ptr [rsp + 0x20]; mov rdi, rax; call qword ptr [rax + 8]; 
0x000000000049a496: push rax; mov rax, rbx; pop rbx; ret; 
0x000000000044b692: push rax; mov rdi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000046d79d: push rax; mov rdi, r12; lea rdx, qword ptr [rsp + 0x18]; lea r9, qword ptr [rsp + 0x10]; call rbx; 
0x000000000046c995: push rax; mov rdx, rdi; jbe 0x6c907; mov eax, dword ptr [rsi]; pop rbx; ret; 
0x00000000004a40e7: push rax; movabs eax, dword ptr [0xa430fff8a310fff8]; clc; call qword ptr [rax - 0x5b]; 
0x0000000000419562: push rax; or byte ptr [rax - 0x75], cl; adc byte ptr [rcx - 0x7d], al; ret 0x4801; 
0x000000000046c383: push rax; or byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x77], cl; jo 0x6c39c; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000416f41: push rax; or byte ptr [rbp + 0xb], dh; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000041c512: push rax; or dh, dh; ret 0x7404; 
0x000000000041c486: push rax; or dh, dh; ret 0xf04; 
0x000000000042381c: push rax; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004a4888: push rax; or eax, 0xcc0fff9; stc; jmp qword ptr [rax]; 
0x00000000004a4843: push rax; or eax, 0xd60fff9; stc; call rax; 
0x00000000004484bb: push rax; push r13; mov r9, qword ptr [rsp + 0x38]; mov rsi, qword ptr [rsp + 0x30]; mov rdi, qword ptr [rsp + 0x28]; call rbx; 
0x0000000000433603: push rax; push rax; vmovdqu xmmword ptr [rax + 0x60], xmm11; vmovdqu xmmword ptr [rax + 0x70], xmm12; ret; 
0x000000000044a33b: push rax; push rbp; mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x00000000004c79a0: push rax; push rbx; sti; jmp rdi; 
0x000000000044772c: push rax; push rsp; ret; 
0x0000000000401340: push rax; ret; 
0x00000000004a461c: push rax; sbb al, 0xf9; jmp rax; 
0x000000000040f18b: push rax; sbb byte ptr [rax - 0x75], cl; jo 0xf1b1; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000040f1b3: push rax; sbb byte ptr [rax - 0x75], cl; js 0xf1d9; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000416f46: push rax; sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x000000000046d2ea: push rax; sbb byte ptr [rcx + 0x5bc0310b], cl; ret; 
0x00000000004a4444: push rax; sbb cl, bh; jmp rax; 
0x00000000004be3b0: push rax; sbb ebp, edi; push qword ptr [rax]; sbb edi, ebp; call qword ptr [rax]; 
0x00000000004c7871: push rax; sti; jmp qword ptr [rdx]; 
0x000000000046d2e6: push rax; sub byte ptr [rax - 0x77], cl; push rax; sbb byte ptr [rcx + 0x5bc0310b], cl; ret; 
0x00000000004be3d0: push rax; sub ch, bh; push qword ptr [rax]; sub bh, ch; call qword ptr [rax]; 
0x0000000000433604: push rax; vmovdqu xmmword ptr [rax + 0x60], xmm11; vmovdqu xmmword ptr [rax + 0x70], xmm12; ret; 
0x00000000004c8210: push rax; xchg eax, ecx; sti; call qword ptr [rdx]; 
0x00000000004165b5: push rax; xor byte ptr [rbx + 0x374fff8], al; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x000000000041660d: push rax; xor byte ptr [rbx - 0x198a0008], al; pop rbx; ret; 
0x000000000049f8e7: push rbp; adc byte ptr [rcx - 0x75], cl; sbb byte ptr [r8 - 0x7d], r9b; ret; 
0x000000000048b37f: push rbp; add byte ptr [rax + 1], cl; ror byte ptr [rax + 0x39], 1; ret 0x8949; 
0x000000000041d35a: push rbp; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x0000000000441181: push rbp; add byte ptr [rcx + 0xf], al; lahf; ret; 
0x000000000049cc1b: push rbp; add byte ptr [rsi + 0xa], bh; mov edi, 1; call rax; 
0x000000000049d165: push rbp; add byte ptr [rsi + 1], bh; mov edi, 1; call rax; 
0x000000000047d378: push rbp; add dword ptr [rax + 0x39], ecx; ret 0x1272; 
0x000000000044a33c: push rbp; mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x00000000004484bd: push rbp; mov r9, qword ptr [rsp + 0x38]; mov rsi, qword ptr [rsp + 0x30]; mov rdi, qword ptr [rsp + 0x28]; call rbx; 
0x00000000004114b2: push rbp; mov rcx, qword ptr [rsp + 0x18]; mov qword ptr [rsp + 0x10], r10; lea r8, qword ptr [rsp + 0x30]; lea rsi, qword ptr [rsp + 0x20]; call qword ptr [rbx + 8]; 
0x000000000043bcf7: push rbp; mov word ptr [rsi], es; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000004907e8: push rbp; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004735b0: push rbp; push rbx; mov rbx, rsi; sub rsp, 8; syscall; 
0x00000000004c7626: push rbp; ret; 
0x000000000046da51: push rbp; ror byte ptr [rcx + rcx*4 - 1], 0x45; xor eax, eax; call rbx; 
0x0000000000426ada: push rbp; xor rax, rax; ret; 
0x0000000000401199: push rbx; adc byte ptr [rax - 0x7d], cl; ret; 
0x000000000043f46e: push rbx; adc byte ptr [rdi + rdx*8 + 0x48], dh; add esp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004343f9: push rbx; add al, byte ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004764c6: push rbx; add dword ptr [rdx + rdx*8 - 0x7cb7eb8c], eax; ret; 
0x00000000004340f9: push rbx; add eax, 0x63490007; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004241f9: push rbx; add qword ptr [rax], rax; ret; 
0x00000000004a4041: push rbx; clc; inc dword ptr [rax]; push rsi; clc; call qword ptr [rax]; 
0x000000000047cbb3: push rbx; clc; jmp qword ptr [rsi + 0x2e]; 
0x00000000004346f9: push rbx; inc dword ptr [rsi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000044e062: push rbx; je 0x4e070; cmp esi, 3; je 0x4e070; pop rbx; ret; 
0x000000000046d1e9: push rbx; je 0x6d247; pop rbp; pop r12; ret; 
0x000000000046d28e: push rbx; je 0x6d2ec; pop rbp; pop r12; ret; 
0x000000000048c7a1: push rbx; je 0x8c810; mov esi, 0x48c500; mov edi, 0x6cd9c0; call rax; 
0x00000000004733a5: push rbx; mov ebx, dword ptr [rdi]; call 0x1ea60; movsxd rdi, ebx; mov eax, 3; syscall; 
0x000000000047312a: push rbx; mov ecx, 2; mov esi, 0x90800; mov eax, ecx; sub rsp, 0x98; syscall; 
0x000000000041091a: push rbx; mov rax, qword ptr [rbx + 0xd8]; mov rsi, r14; mov rdi, rbx; sub rdx, r14; call qword ptr [rax + 0x70]; 
0x000000000044fb90: push rbx; mov rax, qword ptr [rdi + 0x20]; mov rbx, rdi; test rax, rax; je 0x4fb9f; call rax; 
0x0000000000415e56: push rbx; mov rax, qword ptr [rdi + 0xd8]; mov rbx, rdi; mov rbp, rdx; call qword ptr [rax + 0x60]; 
0x0000000000415b07: push rbx; mov rbx, rdi; call qword ptr [rax + 0x20]; 
0x00000000004735b1: push rbx; mov rbx, rsi; sub rsp, 8; syscall; 
0x000000000046b25a: push rbx; or al, 0xf6; ret 0xf04; 
0x00000000004177da: push rbx; or byte ptr [rax + 0x29], cl; ret 0x149; 
0x0000000000433df9: push rbx; or byte ptr [rdi], al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000415b1d: push rbx; or byte ptr [rdi], cl; mov dh, 0; pop rbx; ret; 
0x0000000000433af9: push rbx; or eax, dword ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000040df19: push rbx; ret; 
0x00000000004c79a1: push rbx; sti; jmp rdi; 
0x0000000000414a74: push rbx; sub cl, ch; ret 0xfffe; 
0x000000000045c3e4: push rbx; sub dh, al; add byte ptr [rip - 0x2fd17], ch; jmp qword ptr [rsi - 0x70]; 
0x00000000004593b0: push rbx; sub dh, al; add byte ptr [rip - 0x42117], ch; jmp qword ptr [rsi + 0xf]; 
0x000000000045bf94: push rbx; sub dh, al; add byte ptr [rip - 0xa8d17], ch; jmp qword ptr [rsi - 0x70]; 
0x0000000000412bf1: push rbx; sub rdx, rsi; mov rdi, rbx; call rax; 
0x000000000046a896: push rbx; xor al, 0xbe; add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x000000000043fe39: push rcx; add byte ptr [rax], al; ret; 
0x00000000004bb1a5: push rcx; call qword ptr [rsi]; 
0x000000000043647f: push rcx; jl 0x364ca; adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000436486: push rcx; jl 0x364d1; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000043648d: push rcx; jl 0x364d8; adc dword ptr [rcx - 1], edi; ret; 
0x00000000004365e6: push rcx; jl 0x36631; adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x00000000004365ed: push rcx; jl 0x36638; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x00000000004365f4: push rcx; jl 0x3663f; adc dword ptr [rcx + 7], edi; ret; 
0x000000000041301e: push rcx; movsxd rdi, dword ptr [r14 + 0x70]; mov rdx, rbx; mov rsi, rbp; mov eax, r13d; syscall; 
0x000000000049e4ff: push rcx; or byte ptr [rbp + 0x39], cl; ret 0x4776; 
0x0000000000482985: push rcx; rol byte ptr [rax - 0x6df0f506], 1; ret 0xb60f; 
0x00000000004be46d: push rcx; std; jmp qword ptr [rax]; 
0x00000000004c7919: push rcx; sti; jmp rsi; 
0x000000000043c3ea: push rdi; add al, 0x48; lea eax, dword ptr [rdi + 5]; ret; 
0x0000000000435cd9: push rdi; add al, 0x48; mov dword ptr [rdi], ecx; ret; 
0x0000000000440455: push rdi; add byte ptr [rax + 0x63], cl; jl 0x40480; adc byte ptr [rax + 0x101], bh; syscall; 
0x0000000000492c0a: push rdi; add dword ptr [rax], eax; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043e842: push rdi; add dword ptr [rdx - 0xf], esp; jl 0x3e890; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043c49c: push rdi; add eax, 0xc478d48; ret; 
0x000000000049c04d: push rdi; add ecx, dword ptr [rax + 0x63]; ret; 
0x0000000000431f42: push rdi; call 0xfffffffff062a894; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000431f80: push rdi; call 0xfffffffff062a8d2; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000431fb8: push rdi; call 0xfffffffff062a90a; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000431ff6: push rdi; call 0xfffffffff062a948; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043202e: push rdi; call 0xfffffffff062a980; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432056: push rdi; call 0xfffffffff062a9a8; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043207e: push rdi; call 0xfffffffff062a9d0; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000431f88: push rdi; clc; ret; 
0x0000000000432100: push rdi; cld; ret; 
0x0000000000432c27: push rdi; cli; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004355b9: push rdi; cmc; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042fffe: push rdi; fidiv dword ptr [rdx - 0x10f09926]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000045054e: push rdi; fisub dword ptr [rcx + rcx*4 + 0x10]; mov eax, 0xffffffff; add rsp, 0xd0; ret; 
0x000000000042fdfe: push rdi; fnsave dword ptr [rdx - 0x10f09923]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000412ddd: push rdi; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000040e3f6: push rdi; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x000000000041363c: push rdi; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, -1; ret; 
0x0000000000400422: push rdi; fsub dword ptr [rcx + rcx*4 + 2]; xor esi, esi; mov edi, 0x4a2aa4; mov eax, 2; syscall; 
0x0000000000435539: push rdi; hlt; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432695: push rdi; in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004324a5: push rdi; in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043538a: push rdi; int1; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000432c66: push rdi; loope 0x32cb5; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432cae: push rdi; loope 0x32cfd; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432cec: push rdi; loope 0x32d3b; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432d24: push rdi; loope 0x32d73; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432d62: push rdi; loope 0x32db1; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432d9a: push rdi; loope 0x32de9; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432dc2: push rdi; loope 0x32e11; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004300c8: push rdi; mov eax, 0xf66b8b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042ff48: push rdi; mov ebx, 0xf66bbb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000430048: push rdi; mov ecx, 0xf66b9b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000442b05: push rdi; mov edi, 0x8b48fffd; jge 0x42b0d; call rbx; 
0x000000000042ffc8: push rdi; mov edx, 0xf66bab2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004155e0: push rdi; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000415614: push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x000000000043541a: push rdi; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000045df78: push rdi; or al, 0x83; ret; 
0x000000000045defb: push rdi; or al, 0xf6; ret 0xf08; 
0x000000000048be7a: push rdi; or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x0000000000499f9a: push rdi; or byte ptr [rcx + 1], cl; ret 0x894c; 
0x000000000048be81: push rdi; or byte ptr [rcx - 0x2feeb728], cl; pop rbp; pop rbx; ret; 
0x000000000043c680: push rdi; or eax, 0x1c478d48; ret; 
0x00000000004322c5: push rdi; out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004320f5: push rdi; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004321f1: push rdi; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000043213d: push rdi; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000411576: push rdi; push qword ptr [rax + 0x38]; mov rdi, rbp; lea r8, qword ptr [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x000000000041076f: push rdi; push qword ptr [rax + 0x38]; mov rdi, rbp; mov r9, qword ptr [rax + 0x10]; lea r8, qword ptr [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x00000000004a3ebd: push rdi; push qword ptr [rax]; clc; inc dword ptr [rax + 1]; clc; call qword ptr [rax]; 
0x00000000004116fc: push rdi; push rax; mov rax, qword ptr [rsp + 0x18]; lea r8, qword ptr [rsp + 0x20]; mov rdi, rax; call qword ptr [rax + 8]; 
0x00000000004017c2: push rdi; ret 0; 
0x000000000043043e: push rdi; ret 0xff3; 
0x000000000043039e: push rdi; ret; 
0x00000000004155d8: push rdi; sbb byte ptr [rax - 0x75], cl; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000432e27: push rdi; stc; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043264a: push rdi; std; mov word ptr [rdi - 2], cx; ret; 
0x00000000004c7a99: push rdi; sti; call rsi; 
0x0000000000432a27: push rdi; sti; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000410fcf: push rdi; sub rdx, rsi; mov rdi, r15; call rax; 
0x000000000046e2eb: push rdi; xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x000000000043fd40: push rdx; add byte ptr [rax], al; ret; 
0x0000000000473afa: push rdx; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000443301: push rdx; mov dword ptr [rdi], 0; mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x0000000000431d99: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x724a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431c49: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x725f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431af9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x72749]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431859: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x729e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431709: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x72b39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004315b9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x72c89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431469: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x72dd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431319: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x72f29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004311c9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x73079]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430f29: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x73319]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430dd9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x73469]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430c89: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x735b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000045246a: push rdx; ret 0xfffc; 
0x00000000004c6cc5: push rdx; ret; 
0x00000000004a44f0: push rdx; sbb bh, cl; jmp rdx; 
0x0000000000447726: push rdx; sbb ecx, dword ptr [rcx + 0x50895048]; push rsp; ret; 
0x00000000004c7939: push rdx; sti; call qword ptr [rsi]; 
0x00000000004c7969: push rdx; sti; jmp qword ptr [rdx]; 
0x000000000046d3c8: push rdx; xor byte ptr [rbx + 0x374fff8], al; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x000000000043c6d7: push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, qword ptr [rdi + 0x1f]; ret; 
0x000000000043c027: push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000043bf86: push rsi; adc byte ptr [rbx + 0xff3174e], cl; jg 0x3bf96; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000043bfa6: push rsi; adc byte ptr [rbx + 0xff3184e], cl; jg 0x3bfb6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000042f084: push rsi; adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043e989: push rsi; add ah, byte ptr [rdx - 0xf]; jl 0x3e9d7; adc dword ptr [rsi + 3], edx; ret; 
0x000000000046c7b2: push rsi; add al, 0x48; mov dword ptr [rax], edx; mov eax, dword ptr [rsi]; pop rbx; ret; 
0x0000000000435cd2: push rsi; add al, 0x48; mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000047cab5: push rsi; add al, 0x4c; cmp edx, eax; jne 0x7ca5b; mov eax, dword ptr [rsi + 4]; ret; 
0x00000000004341b6: push rsi; add al, byte ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000435f71: push rsi; add cl, byte ptr [rbx + 0x257890e]; mov dword ptr [rdi], ecx; ret; 
0x0000000000435fe1: push rsi; add dword ptr [rbx + 0x157890e], ecx; mov dword ptr [rdi], ecx; ret; 
0x000000000043e982: push rsi; add dword ptr [rdx - 0xf], esp; jl 0x3e9d0; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000435c62: push rsi; add eax, 0x480e8b48; mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000043c495: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; lea rax, qword ptr [rdi + 0xc]; ret; 
0x000000000043be35: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; ret; 
0x000000000043ea1f: push rsi; add eax, 0x487cf162; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000433eb6: push rsi; add eax, 0x63490007; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000044a94d: push rsi; add eax, 0x8d490000; add r9b, byte ptr [r8 + 0x39]; ret; 
0x0000000000435f01: push rsi; add ecx, dword ptr [rbx + 0x357890e]; mov dword ptr [rdi], ecx; ret; 
0x000000000043c403: push rsi; add ecx, dword ptr [rcx + 0x357890f]; lea rax, qword ptr [rdi + 6]; ret; 
0x000000000043bdd3: push rsi; add ecx, dword ptr [rcx + 0x357890f]; ret; 
0x000000000042f099: push rsi; and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004a4045: push rsi; clc; call qword ptr [rax]; 
0x0000000000432096: push rsi; clc; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004329ea: push rsi; clc; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432bea: push rsi; clc; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432dea: push rsi; clc; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043207a: push rsi; clc; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432a06: push rsi; clc; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432c06: push rsi; clc; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432e06: push rsi; clc; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004320b2: push rsi; clc; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432821: push rsi; cld; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432259: push rsi; cld; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432439: push rsi; cld; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432619: push rsi; cld; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004327f9: push rsi; cld; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432455: push rsi; cld; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432635: push rsi; cld; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432815: push rsi; cld; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432275: push rsi; cld; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e81a: push rsi; cld; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000432c21: push rsi; cli; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004bcac0: push rsi; cli; push 0x6e; ja 0xbca49; ret 0x48f; 
0x00000000004355b2: push rsi; cmc; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043dc86: push rsi; cmc; sub eax, edx; ret; 
0x000000000042fc2e: push rsi; fbstp dword ptr [rdx - 0x10f09921]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042fcfe: push rsi; fidiv word ptr [rdx - 0x10f09922]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000435532: push rsi; hlt; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043dc76: push rsi; hlt; sub eax, edx; ret; 
0x00000000004344b6: push rsi; inc dword ptr [rsi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000435382: push rsi; int1; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043dc46: push rsi; int1; sub eax, edx; ret; 
0x00000000004bc79d: push rsi; jnp 0xbc7b6; mov dl, 0x9f; sub edi, esi; int 0x6b; ret; 
0x000000000042fbf8: push rsi; mov edi, 0xf66bfb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042fcc8: push rsi; mov esi, 0xf66beb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004354a2: push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000435412: push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042d3ad: push rsi; or byte ptr [rax - 0x7d], cl; ret 0x4802; 
0x0000000000433bb6: push rsi; or byte ptr [rdi], al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043c677: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, qword ptr [rdi + 0x1c]; ret; 
0x000000000043bfc7: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000041e6aa: push rsi; out dx, eax; sub al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004bbf20: push rsi; pop rdx; je 0xbbee8; ret 0xacfc; 
0x000000000043c007: push rsi; psllq mm1, qword ptr [rdi]; jg 0x3c014; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000043c6b7: push rsi; psllq mm1, qword ptr [rdi]; jg 0x3c6c4; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, qword ptr [rdi + 0x1e]; ret; 
0x00000000004a13e6: push rsi; ret 0x22; 
0x000000000046858d: push rsi; ret 0xf02; 
0x000000000045fa18: push rsi; ret 0xf10; 
0x000000000041f722: push rsi; ret; 
0x00000000004a41b7: push rsi; sar al, 0xff; xchg cl, al; clc; call qword ptr [rsi]; 
0x00000000004a41b7: push rsi; sar al, 0xff; xchg cl, al; clc; call qword ptr [rsi]; ret 0xfff8; 
0x0000000000432e21: push rsi; stc; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432642: push rsi; std; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000043e821: push rsi; std; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000432a21: push rsi; sti; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043dc56: push rsi; sub eax, edx; ret; 
0x0000000000434db6: push rsi; test byte ptr [rsi], 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004356b2: push rsi; test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x000000000043ecf6: push rsi; xor bh, ah; jmp qword ptr [rsi + 0xf]; 
0x000000000042f0ae: push rsi; xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004c1430: push rsp; add byte ptr [rax], al; add byte ptr [rbx + 0x5f680000], dh; cmc; jmp qword ptr [rdi + 1]; 
0x00000000004c5b10: push rsp; add byte ptr [rax], al; add byte ptr [rsp + rbx*2 + 0x63680000], dh; cli; jmp qword ptr [rsi + 1]; 
0x0000000000473889: push rsp; add byte ptr [rax], al; mov eax, 0x10; sub rsp, 0x30; mov rdx, rsp; syscall; 
0x00000000004c44e5: push rsp; add byte ptr [rax], al; or byte ptr [rbp - 8], dh; call qword ptr [rcx]; 
0x000000000047154b: push rsp; add byte ptr es:[rbp - 0x16738a40], al; imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000041bfec: push rsp; and al, 0x10; call rax; 
0x00000000004114ba: push rsp; and al, 0x10; lea r8, qword ptr [rsp + 0x30]; lea rsi, qword ptr [rsp + 0x20]; call qword ptr [rbx + 8]; 
0x000000000044002a: push rsp; and al, 0x10; mov esi, 0x10; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x000000000049a33a: push rsp; and al, 0x10; mov rax, rdx; add rsp, 0x28; ret; 
0x000000000046d7a3: push rsp; and al, 0x18; lea r9, qword ptr [rsp + 0x10]; call rbx; 
0x000000000048cb1f: push rsp; and al, 0x18; mov rax, rdx; add rsp, 0x38; ret; 
0x000000000046f8fc: push rsp; and al, 0x20; lea r9, qword ptr [rsp + 0x28]; lea rsi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000046f2a2: push rsp; and al, 0x20; lea r9, qword ptr [rsp + 0x28]; lea rsi, qword ptr [rsp + 0x30]; lea rcx, qword ptr [rax + 1]; call rbx; 
0x000000000046f68e: push rsp; and al, 0x28; lea rsi, qword ptr [rsp + 0x40]; call rbx; 
0x0000000000481100: push rsp; and al, 0x38; add rax, qword ptr [rdx + 8]; add rsp, 0x48; ret; 
0x000000000045050e: push rsp; and al, 0x38; mov qword ptr [r8 + 0x90], rdx; add rsp, 0xd0; ret; 
0x0000000000480ef3: push rsp; and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000480e81: push rsp; and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x50; jmp qword ptr [rax]; 
0x0000000000447f91: push rsp; and al, 0x48; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004488f4: push rsp; and al, 0x48; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000448cda: push rsp; and al, 0x48; mov rdi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000046fcf1: push rsp; and al, 0x48; mov rdi, r12; call rbx; 
0x000000000044b690: push rsp; and al, 0x50; mov rdi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000044a784: push rsp; and al, 0x60; mov rdi, qword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000041ee62: push rsp; and al, 0x68; call rax; 
0x000000000042015a: push rsp; and al, 0x68; mov rsi, r12; mov rdi, rbx; call rax; 
0x000000000043ff82: push rsp; and al, 0xa8; mov esi, 0x10; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x000000000048c040: push rsp; and al, 0xf8; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x000000000048bffa: push rsp; and al, 0xfc; movss xmm0, dword ptr [rsp - 4]; ret; 
0x000000000041b8f5: push rsp; and eax, 0x950f4100; ret; 
0x00000000004b9c05: push rsp; jmp qword ptr [rbx - 0x40]; 
0x000000000041c79a: push rsp; ret; 
0x00000000004a45b8: push rsp; sbb ecx, edi; jmp rsp; 
0x00000000004be471: push rsp; std; jmp qword ptr [rax + 0x56]; 
0x00000000004bc6ea: push rsp; syscall; 
0x00000000004c76d4: push rsp; xchg byte ptr [rax], al; add al, ch; sti; jmp qword ptr [rbp + 1]; 
0x000000000043c378: push rsp; xchg byte ptr [rsi], al; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000048c524: pushfq; adc al, 0x24; add al, ah; fldcw word ptr [rax + rax + 0x48]; add esp, 8; ret; 
0x000000000042a070: pushfq; adc eax, 0x83480000; ret 0xe910; 
0x00000000004c8cb5: pushfq; add byte ptr [rax], al; or byte ptr [rcx - 0xd], bh; jmp qword ptr [rsi]; 
0x00000000004c8cfd: pushfq; add byte ptr [rax], al; xor byte ptr [rsp + rdi*8], bh; jmp qword ptr [rdx]; 
0x0000000000447c20: pushfq; and al, 0x80; add byte ptr [rax], al; add dh, dh; ret 0x4801; 
0x000000000047cbc3: pushfq; and eax, 0x8750000; mov rax, qword ptr [rip + 0x259800]; ret; 
0x00000000004c141c: pushfq; and eax, dword ptr [rax]; add byte ptr [rax], ah; pop rdi; cmc; call qword ptr [rsi]; 
0x00000000004c68f9: pushfq; cli; jmp rdi; 
0x00000000004c671c: pushfq; jbe 0xc671f; add byte ptr [rax - 0x6d], al; cli; jmp qword ptr [rax]; 
0x000000000047db14: pushfq; jne 0x7db62; add al, ch; ret; 
0x0000000000414bac: pushfq; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000046c66d: pushfq; nop; mov rax, qword ptr [rdi + 0xd8]; push rbx; mov rbx, rdi; call qword ptr [rax + 0x20]; 
0x000000000042ad70: pushfq; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000471153: pushfq; ret 0xb60f; 
0x000000000049c410: pushfq; ret 0xf45; 
0x00000000004484ba: rcl byte ptr [rax + 0x41], cl; push rbp; mov r9, qword ptr [rsp + 0x38]; mov rsi, qword ptr [rsp + 0x30]; mov rdi, qword ptr [rsp + 0x28]; call rbx; 
0x000000000044a33a: rcl byte ptr [rax + 0x55], cl; mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x00000000004a4610: rcl byte ptr [rsi], 0xf9; push qword ptr [rax]; sbb eax, 0x1cc0fff9; stc; call qword ptr [rax + 0x1c]; 
0x00000000004a43f4: rcl dl, 0xf8; call qword ptr [rax]; 
0x00000000004bbf1f: rcl dword ptr [rsi + 0x5a], cl; je 0xbbee8; ret 0xacfc; 
0x00000000004a4370: rcr ah, 0xf8; push qword ptr [rax - 0x22]; clc; inc dword ptr [rax - 0x20]; clc; jmp qword ptr [rax]; 
0x00000000004a4440: rcr byte ptr [rax], 0xf9; call qword ptr [rax + 0x18]; 
0x00000000004a4440: rcr byte ptr [rax], 0xf9; call qword ptr [rax + 0x18]; stc; jmp rax; 
0x00000000004a463c: rcr byte ptr [rax], 1; stc; jmp qword ptr [rax + 0x18]; 
0x000000000046b82a: rcr byte ptr [rbp + 0x41], 0x5c; pop r13; pop r14; ret; 
0x000000000044133c: rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x000000000046b5dc: rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x000000000048be87: rcr byte ptr [rbp + 0x5b], 1; ret; 
0x0000000000400962: rcr byte ptr [rbp - 0x3a], 1; add eax, 0x2cc1f5; add ebx, esi; ret; 
0x0000000000443440: rcr byte ptr [rbx + 0x41], 0x5c; pop r13; pop rbp; ret; 
0x000000000041802f: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; pop r14; ret; 
0x000000000041f65e: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x0000000000495559: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r14; ret; 
0x000000000040f3ee: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000045ceeb: rcr byte ptr [rbx + 0x5d], 1; pop r12; pop r13; ret; 
0x000000000041f113: rcr byte ptr [rbx + 0x5d], 1; pop r12; ret; 
0x00000000004182cd: rcr byte ptr [rbx + 0x5d], 1; ret; 
0x00000000004a4424: rcr byte ptr [rbx], 1; stc; jmp qword ptr [rax + 0x1b]; 
0x00000000004a4618: rcr byte ptr [rcx + rdi*8], 0xff; push rax; sbb al, 0xf9; jmp rax; 
0x00000000004bc33d: rcr byte ptr [rdi + 0x6d], cl; test eax, 0x7d4c8c5d; ret 0xd8f; 
0x00000000004a42f0: rcr ch, 0xf8; inc dword ptr [rax + 0x60fff8df]; loope 0xa42f3; inc dword ptr [rax - 0x1d]; clc; jmp qword ptr [rax]; 
0x000000000048a389: rcr dword ptr [rcx], -0x40; and eax, 2; sub eax, 1; ret; 
0x000000000042aa2c: rcr dword ptr [rdx], 0xf; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042c679: rcr dword ptr [rdx], 0xf; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000042be99: rcr dword ptr [rdx], 0xf; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000042c289: rcr dword ptr [rdx], 0xf; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042baa9: rcr dword ptr [rdx], 0xf; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b58c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042ad6c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000042a54c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x000000000042bc48: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042b0ac: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042a88c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042a06c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000042b24c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x000000000042c139: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b959: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042ca69: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a3ac: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042a4e2: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b1e2: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042ad02: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042c03a: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042c96a: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042b522: rcr dword ptr [rdx], 0xf; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a822: rcr dword ptr [rdx], 0xf; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x000000000042a342: rcr dword ptr [rdx], 0xf; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b042: rcr dword ptr [rdx], 0xf; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x000000000042c18a: rcr dword ptr [rdx], 0xf; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042b9aa: rcr dword ptr [rdx], 0xf; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000433476: rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000043e7a8: rep stosb byte ptr [rdi], al; mov rax, rsi; sub rax, rdx; vzeroupper; ret; 
0x00000000004005d9: repe cmpsb byte ptr [rsi], byte ptr [rdi]; jne 0x5de; ret; 
0x0000000000400624: ret 0; 
0x000000000045022b: ret 0x100; 
0x000000000046b20f: ret 0x107; 
0x00000000004af280: ret 0x10; 
0x000000000047ef16: ret 0x10eb; 
0x000000000041c7c2: ret 0x110; 
0x000000000048be5c: ret 0x114d; 
0x0000000000447ed8: ret 0x1189; 
0x0000000000446c6b: ret 0x11e9; 
0x000000000047d37c: ret 0x1272; 
0x000000000046604a: ret 0x12; 
0x000000000040b89a: ret 0x131; 
0x000000000049e2b3: ret 0x1374; 
0x00000000004767ad: ret 0x1376; 
0x000000000040b29a: ret 0x137; 
0x000000000040ae9a: ret 0x13b; 
0x000000000040a79a: ret 0x142; 
0x0000000000473941: ret 0x1477; 
0x000000000041be91: ret 0x148; 
0x0000000000416622: ret 0x149; 
0x000000000041a7a3: ret 0x14c; 
0x000000000043684f: ret 0x14d; 
0x0000000000403ae6: ret 0x14e8; 
0x0000000000407b9a: ret 0x16e; 
0x000000000042452a: ret 0x17; 
0x000000000043678c: ret 0x180f; 
0x000000000044fcc6: ret 0x1874; 
0x0000000000426b45: ret 0x1876; 
0x0000000000418165: ret 0x18eb; 
0x000000000046fe9f: ret 0x190; 
0x0000000000481592: ret 0x1a75; 
0x00000000004bc89a: ret 0x1ad4; 
0x00000000004bb02d: ret 0x1b49; 
0x000000000041e62f: ret 0x1be; 
0x00000000004b0f50: ret 0x1d4; 
0x00000000004b16e8: ret 0x1d5; 
0x0000000000401345: ret 0x1d89; 
0x0000000000448823: ret 0x1e76; 
0x000000000044a3b7: ret 0x1f0f; 
0x000000000041f29e: ret 0x1f76; 
0x0000000000450147: ret 0x200; 
0x0000000000447a1c: ret 0x2176; 
0x00000000004242c8: ret 0x2288; 
0x000000000049ed36: ret 0x22; 
0x00000000004a0e06: ret 0x22bb; 
0x000000000049ed8a: ret 0x22ef; 
0x00000000004305a2: ret 0x2373; 
0x000000000043fe57: ret 0x23e8; 
0x00000000004aff58: ret 0x24; 
0x0000000000415149: ret 0x2501; 
0x000000000047b6aa: ret 0x251f; 
0x000000000047f1fa: ret 0x2571; 
0x000000000041e7dd: ret 0x2575; 
0x00000000004707fe: ret 0x25; 
0x000000000046a5b8: ret 0x26; 
0x000000000045d18a: ret 0x2706; 
0x0000000000401ae6: ret 0x2773; 
0x000000000046e0e6: ret 0x2774; 
0x0000000000431d56: ret 0x280f; 
0x0000000000426b35: ret 0x2876; 
0x00000000004995e8: ret 0x28f5; 
0x000000000046890d: ret 0x2941; 
0x000000000041103d: ret 0x2948; 
0x000000000049c39a: ret 0x2949; 
0x00000000004334c1: ret 0x294c; 
0x000000000041315b: ret 0x294d; 
0x000000000041f1ab: ret 0x2a75; 
0x000000000041c0ca: ret 0x2aff; 
0x0000000000410cdf: ret 0x2b48; 
0x0000000000446f0e: ret 0x2b49; 
0x000000000043ee42: ret 0x2b77; 
0x000000000043eae7: ret 0x2c76; 
0x0000000000400943: ret 0x2c; 
0x0000000000401eba: ret 0x2ca2; 
0x0000000000401c06: ret 0x2d47; 
0x000000000046adf5: ret 0x2e66; 
0x0000000000465fd4: ret 0x2e; 
0x0000000000446df5: ret 0x3101; 
0x0000000000403ef6: ret 0x3145; 
0x0000000000478932: ret 0x314c; 
0x00000000004b0448: ret 0x33; 
0x00000000004046a1: ret 0x348; 
0x000000000044ce4b: ret 0x349; 
0x00000000004815e8: ret 0x357e; 
0x000000000048243a: ret 0x372; 
0x00000000004bc17a: ret 0x3827; 
0x0000000000495d32: ret 0x3840; 
0x00000000004106ff: ret 0x3841; 
0x000000000044109f: ret 0x3845; 
0x0000000000426b25: ret 0x3876; 
0x00000000004441d9: ret 0x3880; 
0x0000000000415a2b: ret 0x389; 
0x00000000004ba806: ret 0x38ae; 
0x000000000048c366: ret 0x38b; 
0x0000000000450721: ret 0x3948; 
0x000000000041da92: ret 0x3949; 
0x000000000044dc66: ret 0x394c; 
0x00000000004535e8: ret 0x394d; 
0x000000000043e262: ret 0x3a01; 
0x000000000043058b: ret 0x3a73; 
0x000000000044d773: ret 0x3a76; 
0x0000000000443431: ret 0x3b01; 
0x000000000046fdca: ret 0x3bba; 
0x000000000040edbe: ret 0x3ce8; 
0x000000000047475f: ret 0x3d01; 
0x0000000000446635: ret 0x3d83; 
0x000000000044ffbd: ret 0x3de8; 
0x00000000004991d7: ret 0x3e8; 
0x0000000000472c82: ret 0x3e9; 
0x000000000045a3cc: ret 0x3ee8; 
0x000000000049c11f: ret 0x3ee9; 
0x0000000000419b42: ret 0x4007; 
0x000000000046f2b6: ret 0x408d; 
0x0000000000480c4f: ret 0x40bf; 
0x0000000000446a20: ret 0x4101; 
0x0000000000455c00: ret 0x4108; 
0x00000000004576c8: ret 0x4110; 
0x0000000000477acc: ret 0x412f; 
0x00000000004477ee: ret 0x41c3; 
0x000000000042ef1a: ret 0x4266; 
0x0000000000470de2: ret 0x428d; 
0x000000000044d76a: ret 0x4372; 
0x000000000044e1fb: ret 0x4389; 
0x00000000004468df: ret 0x438b; 
0x0000000000473837: ret 0x43e8; 
0x0000000000411d33: ret 0x4401; 
0x0000000000456187: ret 0x440f; 
0x000000000046cf67: ret 0x4410; 
0x0000000000495821: ret 0x448d; 
0x00000000004a67c9: ret 0x44; 
0x00000000004824e5: ret 0x44c6; 
0x000000000046ab72: ret 0x4502; 
0x0000000000476458: ret 0x4574; 
0x000000000046b6b8: ret 0x45f6; 
0x00000000004bb304: ret 0x474c; 
0x000000000049e503: ret 0x4776; 
0x000000000045aff3: ret 0x47e9; 
0x00000000004030fa: ret 0x4801; 
0x000000000042d191: ret 0x4802; 
0x000000000042d26d: ret 0x4803; 
0x0000000000404a80: ret 0x4804; 
0x000000000042d23d: ret 0x4805; 
0x000000000042d225: ret 0x4806; 
0x0000000000424253: ret 0x4808; 
0x000000000044fcd4: ret 0x4809; 
0x00000000004594b4: ret 0x480f; 
0x000000000041b9f9: ret 0x4810; 
0x000000000044d640: ret 0x4811; 
0x0000000000453c32: ret 0x481e; 
0x000000000041b93b: ret 0x4820; 
0x000000000045c6fc: ret 0x482d; 
0x00000000004451ef: ret 0x4830; 
0x0000000000401ae2: ret 0x4838; 
0x000000000042ee26: ret 0x4840; 
0x0000000000424368: ret 0x48c3; 
0x000000000046ff7d: ret 0x48d; 
0x000000000047c6b4: ret 0x48e9; 
0x00000000004bcac6: ret 0x48f; 
0x000000000040378e: ret 0x4901; 
0x000000000044ca23: ret 0x4904; 
0x000000000042d4ae: ret 0x4906; 
0x0000000000457d38: ret 0x4908; 
0x0000000000472d19: ret 0x4909; 
0x00000000004235c2: ret 0x4910; 
0x0000000000421836: ret 0x4920; 
0x00000000004207b0: ret 0x4930; 
0x0000000000498724: ret 0x4976; 
0x00000000004475d1: ret 0x4a60; 
0x0000000000475582: ret 0x4b30; 
0x000000000046f614: ret 0x4b5e; 
0x0000000000475d70: ret 0x4b61; 
0x0000000000406105: ret 0x4c01; 
0x000000000042d3f1: ret 0x4c02; 
0x000000000044d52f: ret 0x4c04; 
0x0000000000468655: ret 0x4c08; 
0x0000000000453326: ret 0x4c40; 
0x00000000004494f0: ret 0x4c88; 
0x0000000000447901: ret 0x4d02; 
0x00000000004bc527: ret 0x4e27; 
0x0000000000472537: ret 0x4eb; 
0x00000000004456a8: ret 0x4ee9; 
0x00000000004464fe: ret 0x4f74; 
0x0000000000430574: ret 0x5173; 
0x000000000044fad3: ret 0x527e; 
0x000000000046b438: ret 0x5389; 
0x000000000045bbeb: ret 0x53e9; 
0x0000000000495abd: ret 0x5438; 
0x000000000048c066: ret 0x5488; 
0x000000000044daea: ret 0x5489; 
0x000000000045b843: ret 0x548b; 
0x00000000004ba78c: ret 0x5508; 
0x0000000000405d0f: ret 0x5525; 
0x0000000000421ca2: ret 0x575; 
0x00000000004767bb: ret 0x576; 
0x00000000004bca58: ret 0x5803; 
0x000000000040ef7b: ret 0x589; 
0x00000000004ba460: ret 0x591c; 
0x00000000004bb1c7: ret 0x5ae4; 
0x000000000044a7e1: ret 0x5c77; 
0x00000000004bcef2: ret 0x62c1; 
0x000000000045d0b3: ret 0x6348; 
0x0000000000412362: ret 0x6349; 
0x000000000043ff17: ret 0x63e8; 
0x000000000049b350: ret 0x65e9; 
0x00000000004828b7: ret 0x6610; 
0x0000000000426ab2: ret 0x6620; 
0x000000000044771f: ret 0x6680; 
0x00000000004243b5: ret 0x66c3; 
0x000000000047d38e: ret 0x674; 
0x00000000004ba47f: ret 0x67b2; 
0x000000000049783d: ret 0x6876; 
0x000000000049e702: ret 0x68e8; 
0x000000000043f82d: ret 0x6b8; 
0x000000000049c3f7: ret 0x6be9; 
0x0000000000443855: ret 0x6c; 
0x00000000004bd081: ret 0x6f9; 
0x000000000043350e: ret 0x7280; 
0x000000000047ed69: ret 0x728d; 
0x000000000043ecab: ret 0x72e9; 
0x0000000000415f71: ret 0x7401; 
0x000000000041f39f: ret 0x7402; 
0x000000000041c515: ret 0x7404; 
0x0000000000411853: ret 0x7408; 
0x0000000000401600: ret 0x7420; 
0x0000000000459882: ret 0x7450; 
0x000000000042f54a: ret 0x74b; 
0x000000000043c7c9: ret 0x7501; 
0x000000000043c7d6: ret 0x7502; 
0x0000000000427269: ret 0x7504; 
0x000000000043dc04: ret 0x7508; 
0x000000000043c79b: ret 0x7510; 
0x0000000000427264: ret 0x7518; 
0x000000000043c7a8: ret 0x7520; 
0x000000000043c7b5: ret 0x7540; 
0x000000000047bd01: ret 0x758b; 
0x000000000042f462: ret 0x7677; 
0x0000000000446f02: ret 0x774; 
0x000000000048a64a: ret 0x777; 
0x000000000049c1eb: ret 0x77e9; 
0x000000000041be2a: ret 0x7ae9; 
0x0000000000447a4a: ret 0x7b8; 
0x0000000000426a42: ret 0x7e20; 
0x00000000004221bc: ret 0x7f10; 
0x0000000000462536: ret 0x7f3c; 
0x0000000000423399: ret 0x8000; 
0x000000000047253c: ret 0x8001; 
0x000000000047b475: ret 0x8005; 
0x00000000004976f6: ret 0x8008; 
0x0000000000472f22: ret 0x8010; 
0x000000000047c5ae: ret 0x8018; 
0x0000000000478e78: ret 0x804; 
0x000000000043382e: ret 0x80; 
0x00000000004751c0: ret 0x8116; 
0x0000000000469bab: ret 0x8148; 
0x000000000045b804: ret 0x8166; 
0x000000000041a8fc: ret 0x820f; 
0x0000000000404860: ret 0x8301; 
0x0000000000465401: ret 0x8308; 
0x000000000042f030: ret 0x830f; 
0x000000000043eb70: ret 0x8341; 
0x00000000004031e0: ret 0x8348; 
0x000000000041bef3: ret 0x8349; 
0x0000000000499d99: ret 0x8364; 
0x00000000004686a7: ret 0x83e8; 
0x0000000000473da2: ret 0x8401; 
0x0000000000411ca0: ret 0x840; 
0x0000000000418179: ret 0x840f; 
0x000000000043ec10: ret 0x8444; 
0x000000000049c367: ret 0x8445; 
0x000000000045d0a5: ret 0x8504; 
0x000000000046b2c6: ret 0x8508; 
0x0000000000413872: ret 0x850f; 
0x0000000000471045: ret 0x8545; 
0x0000000000419c12: ret 0x8548; 
0x000000000044fae5: ret 0x854d; 
0x000000000045a67c: ret 0x858b; 
0x0000000000457f1d: ret 0x85c6; 
0x0000000000455f6a: ret 0x85c7; 
0x000000000049b5e8: ret 0x85e9; 
0x00000000004012de: ret 0x860f; 
0x0000000000450435: ret 0x870f; 
0x00000000004b9d9e: ret 0x871e; 
0x000000000046253d: ret 0x875; 
0x0000000000426b55: ret 0x876; 
0x000000000044f4ca: ret 0x87e9; 
0x00000000004824e0: ret 0x87e; 
0x00000000004984e4: ret 0x87f6; 
0x0000000000448a31: ret 0x8804; 
0x000000000045ed72: ret 0x880f; 
0x000000000044f987: ret 0x8840; 
0x0000000000447e32: ret 0x8901; 
0x0000000000463a74: ret 0x8908; 
0x0000000000401386: ret 0x890f; 
0x000000000044dbef: ret 0x8941; 
0x0000000000400669: ret 0x8944; 
0x0000000000411d1b: ret 0x8945; 
0x0000000000403a5d: ret 0x8948; 
0x0000000000410acd: ret 0x8949; 
0x00000000004042c7: ret 0x894c; 
0x00000000004469ff: ret 0x894d; 
0x000000000048af1b: ret 0x894e; 
0x00000000004661ac: ret 0x89e9; 
0x000000000046adba: ret 0x8b04; 
0x0000000000473a93: ret 0x8b05; 
0x00000000004bc5ce: ret 0x8b36; 
0x000000000044fd5a: ret 0x8b41; 
0x0000000000400a2e: ret 0x8b48; 
0x0000000000411496: ret 0x8b49; 
0x000000000048ae9e: ret 0x8b4a; 
0x0000000000412000: ret 0x8b4c; 
0x0000000000480cde: ret 0x8b; 
0x0000000000476a13: ret 0x8be9; 
0x0000000000462fd5: ret 0x8d01; 
0x000000000045324a: ret 0x8d04; 
0x000000000045a3b0: ret 0x8d0f; 
0x000000000040db1f: ret 0x8d48; 
0x0000000000403a76: ret 0x8d49; 
0x000000000046489e: ret 0x8d4a; 
0x0000000000411fb6: ret 0x8d4c; 
0x000000000041d244: ret 0x8d4e; 
0x0000000000410fe1: ret 0x8e0f; 
0x0000000000401c7e: ret 0x900; 
0x0000000000421de5: ret 0x90c3; 
0x0000000000412f8b: ret 0x938b; 
0x0000000000468560: ret 0x940f; 
0x0000000000483136: ret 0x941; 
0x000000000046e388: ret 0x94c; 
0x000000000048c7ff: ret 0x950f; 
0x00000000004566c9: ret 0x9522; 
0x0000000000404108: ret 0x953d; 
0x00000000004bb3f3: ret 0x9576; 
0x0000000000464310: ret 0x9589; 
0x000000000041be41: ret 0x976; 
0x00000000004bd059: ret 0x990e; 
0x0000000000481669: ret 0x9e74; 
0x0000000000410ef8: ret 0x9e9; 
0x000000000047cab9: ret 0x9f75; 
0x000000000048a2a0: ret 0xa074; 
0x00000000004bb0e3: ret 0xa514; 
0x00000000004aea80: ret 0xa; 
0x00000000004bb567: ret 0xac65; 
0x000000000049e9be: ret 0xace8; 
0x00000000004bbf24: ret 0xacfc; 
0x000000000043ec96: ret 0xaf0f; 
0x00000000004739c7: ret 0xb3e8; 
0x000000000041c7ff: ret 0xb48b; 
0x0000000000403049: ret 0xb60f; 
0x0000000000470dfb: ret 0xb70f; 
0x0000000000460a09: ret 0xb848; 
0x000000000044fb25: ret 0xb87f; 
0x000000000043f760: ret 0xb8; 
0x0000000000427137: ret 0xb8c3; 
0x000000000046fd32: ret 0xb8e9; 
0x00000000004673f2: ret 0xb908; 
0x00000000004bb42e: ret 0xb9b9; 
0x0000000000456eed: ret 0xbb41; 
0x000000000048a772: ret 0xbc41; 
0x000000000049c785: ret 0xbc80; 
0x00000000004614be: ret 0xbd83; 
0x00000000004675e0: ret 0xbe08; 
0x00000000004bb184: ret 0xbe57; 
0x000000000045b8d8: ret 0xbf07; 
0x00000000004669c1: ret 0xbf08; 
0x0000000000423259: ret 0xc000; 
0x000000000048793e: ret 0xc001; 
0x00000000004878f2: ret 0xc002; 
0x00000000004137b3: ret 0xc031; 
0x0000000000474300: ret 0xc084; 
0x0000000000426900: ret 0xc085; 
0x0000000000443b96: ret 0xc141; 
0x000000000040f106: ret 0xc148; 
0x000000000041289a: ret 0xc1; 
0x000000000046fe9d: ret 0xc269; 
0x000000000045bda6: ret 0xc283; 
0x0000000000430444: ret 0xc2b2; 
0x000000000043eeb1: ret 0xc35b; 
0x000000000043feb7: ret 0xc3e8; 
0x00000000004b9222: ret 0xc4c3; 
0x00000000004bad38: ret 0xc4ff; 
0x00000000004335a8: ret 0xc580; 
0x000000000049c39d: ret 0xc5e9; 
0x00000000004651e0: ret 0xc6e9; 
0x0000000000421ce1: ret 0xc6eb; 
0x0000000000438ca0: ret 0xc748; 
0x000000000041caa5: ret 0xc789; 
0x0000000000415a1c: ret 0xc883; 
0x0000000000497343: ret 0xc931; 
0x0000000000444019: ret 0xc985; 
0x0000000000424221: ret 0xc9ff; 
0x0000000000463d6d: ret 0xcb73; 
0x00000000004ba7ca: ret 0xcca7; 
0x00000000004bc8ad: ret 0xcd11; 
0x000000000041dea0: ret 0xce31; 
0x0000000000405514: ret 0xce80; 
0x0000000000463645: ret 0xce83; 
0x00000000004196bb: ret 0xcf31; 
0x0000000000495c4a: ret 0xd021; 
0x0000000000442f2f: ret 0xd029; 
0x000000000043341c: ret 0xd073; 
0x0000000000405d1e: ret 0xd089; 
0x000000000046cba5: ret 0xd108; 
0x0000000000469579: ret 0xd129; 
0x000000000049afb6: ret 0xd284; 
0x0000000000468477: ret 0xd309; 
0x0000000000481a4b: ret 0xd348; 
0x000000000045bdc3: ret 0xd529; 
0x00000000004695f0: ret 0xd629; 
0x000000000046fbed: ret 0xd721; 
0x0000000000469502: ret 0xd729; 
0x000000000043ec9b: ret 0xd889; 
0x0000000000480363: ret 0xd8f7; 
0x00000000004bc345: ret 0xd8f; 
0x0000000000400806: ret 0xd975; 
0x0000000000471a6e: ret 0xd9be; 
0x00000000004aee80: ret 0xd; 
0x0000000000495a10: ret 0xda38; 
0x0000000000410245: ret 0xdaf7; 
0x0000000000448f61: ret 0xdb85; 
0x00000000004bc426: ret 0xdcd9; 
0x0000000000473480: ret 0xdd72; 
0x00000000004bb3a2: ret 0xde5d; 
0x00000000004115d5: ret 0xde74; 
0x000000000049bf62: ret 0xde89; 
0x00000000004ba131: ret 0xde9e; 
0x00000000004699c8: ret 0xdee9; 
0x0000000000423119: ret 0xe000; 
0x000000000043c759: ret 0xe074; 
0x0000000000447a3d: ret 0xe077; 
0x0000000000443cab: ret 0xe083; 
0x000000000044bfc3: ret 0xe183; 
0x0000000000444df2: ret 0xe1eb; 
0x0000000000447ecb: ret 0xe277; 
0x000000000040e35c: ret 0xe281; 
0x0000000000401482: ret 0xe283; 
0x000000000046ed30: ret 0xe575; 
0x0000000000418157: ret 0xe675; 
0x00000000004588f3: ret 0xe680; 
0x00000000004bc546: ret 0xe71f; 
0x0000000000401ad8: ret 0xe72; 
0x0000000000453780: ret 0xe783; 
0x0000000000476c75: ret 0xe874; 
0x000000000045a265: ret 0xe87f; 
0x0000000000455b02: ret 0xe883; 
0x000000000047705e: ret 0xe8c0; 
0x00000000004007be: ret 0xe8c1; 
0x0000000000426053: ret 0xe901; 
0x0000000000403312: ret 0xe902; 
0x000000000044a9a9: ret 0xe904; 
0x0000000000495641: ret 0xe907; 
0x00000000004242b6: ret 0xe908; 
0x0000000000429ed6: ret 0xe910; 
0x0000000000453d29: ret 0xe920; 
0x0000000000420853: ret 0xe96e; 
0x00000000004ba8a7: ret 0xe970; 
0x00000000004815ac: ret 0xe974; 
0x00000000004209ff: ret 0xe977; 
0x000000000043ee3a: ret 0xea81; 
0x0000000000458877: ret 0xeac0; 
0x0000000000401361: ret 0xeac1; 
0x00000000004235e6: ret 0xeb10; 
0x000000000042081f: ret 0xeb5b; 
0x000000000040ed7a: ret 0xeb72; 
0x00000000004029a8: ret 0xebe8; 
0x00000000004bd058: ret 0xec2; 
0x0000000000499579: ret 0xec75; 
0x00000000004793a8: ret 0xed75; 
0x000000000044bb1e: ret 0xed85; 
0x000000000044697f: ret 0xee75; 
0x00000000004bccfa: ret 0xef32; 
0x00000000004191e6: ret 0xef75; 
0x0000000000422fd9: ret 0xf000; 
0x000000000040dce8: ret 0xf001; 
0x0000000000402ffa: ret 0xf01; 
0x000000000041abc6: ret 0xf02; 
0x000000000041c489: ret 0xf04; 
0x000000000045defe: ret 0xf08; 
0x000000000045ad87: ret 0xf0e9; 
0x0000000000473f06: ret 0xf0eb; 
0x000000000041bbb3: ret 0xf0f; 
0x0000000000422172: ret 0xf10; 
0x000000000046a7e5: ret 0xf229; 
0x00000000004509b6: ret 0xf301; 
0x000000000045df3a: ret 0xf40; 
0x0000000000470fcd: ret 0xf43; 
0x000000000049c411: ret 0xf45; 
0x000000000046cbca: ret 0xf48; 
0x000000000045b344: ret 0xf4c; 
0x000000000040331b: ret 0xf4e9; 
0x000000000047367e: ret 0xf631; 
0x0000000000421f89: ret 0xf66; 
0x000000000043ea5c: ret 0xf685; 
0x000000000041c7e3: ret 0xf710; 
0x00000000004275dc: ret 0xf748; 
0x000000000046e7d0: ret 0xf749; 
0x000000000048b985: ret 0xf74; 
0x000000000048748a: ret 0xf7aa; 
0x000000000048458a: ret 0xf7d9; 
0x00000000004a0c9a: ret 0xf7dd; 
0x000000000048066a: ret 0xf7fc; 
0x0000000000422e99: ret 0xf800; 
0x00000000004334ce: ret 0xf80; 
0x00000000004ba010: ret 0xf869; 
0x000000000047798a: ret 0xf8a5; 
0x00000000004a46d8: ret 0xf913; 
0x00000000004a44ec: ret 0xf91a; 
0x0000000000404c9a: ret 0xf929; 
0x000000000048943a: ret 0xfa38; 
0x000000000045a789: ret 0xfa80; 
0x0000000000483546: ret 0xfa81; 
0x0000000000475c9a: ret 0xfa8d; 
0x0000000000405d32: ret 0xfac1; 
0x00000000004681ca: ret 0xfad6; 
0x00000000004a0c4a: ret 0xfaf4; 
0x000000000046685a: ret 0xfb83; 
0x000000000046495a: ret 0xfba2; 
0x0000000000445f27: ret 0xfba5; 
0x0000000000422d59: ret 0xfc00; 
0x0000000000484a86: ret 0xfc01; 
0x0000000000484a3a: ret 0xfc02; 
0x000000000043ffaa: ret 0xfc3; 
0x0000000000470a0a: ret 0xfd28; 
0x000000000045873a: ret 0xfd45; 
0x0000000000447b10: ret 0xfd83; 
0x00000000004beadc: ret 0xfdc8; 
0x0000000000402fd0: ret 0xfdf; 
0x0000000000422c19: ret 0xfe00; 
0x000000000041fc6a: ret 0xfe06; 
0x0000000000497efa: ret 0xfe3f; 
0x000000000046df4a: ret 0xfe4d; 
0x000000000043eb93: ret 0xfe83; 
0x00000000004333ee: ret 0xfec5; 
0x0000000000422ad9: ret 0xff00; 
0x00000000004353e1: ret 0xff2; 
0x000000000042ee4a: ret 0xff3; 
0x0000000000422999: ret 0xff80; 
0x0000000000481886: ret 0xff81; 
0x000000000048183a: ret 0xff82; 
0x000000000040ca5a: ret 0xff99; 
0x0000000000469b60: ret 0xff9f; 
0x0000000000453312: ret 0xffb0; 
0x0000000000400540: ret 0xffb8; 
0x0000000000487827: ret 0xffbf; 
0x0000000000422859: ret 0xffc0; 
0x00000000004203ba: ret 0xffcd; 
0x00000000004003e6: ret 0xffd0; 
0x0000000000421b1e: ret 0xffdf; 
0x0000000000422719: ret 0xffe0; 
0x0000000000408e0a: ret 0xffe2; 
0x000000000049efea: ret 0xffe7; 
0x000000000044214a: ret 0xffe8; 
0x000000000044204a: ret 0xffe9; 
0x000000000045aa2c: ret 0xffee; 
0x000000000040f5fc: ret 0xffef; 
0x000000000040e2ae: ret 0xfff0; 
0x00000000004c2a79: ret 0xfff6; 
0x00000000004c2ec1: ret 0xfff7; 
0x0000000000422499: ret 0xfff8; 
0x000000000046967d: ret 0xfffa; 
0x000000000043fb69: ret 0xfffb; 
0x0000000000422359: ret 0xfffc; 
0x0000000000442771: ret 0xfffd; 
0x0000000000405ac8: ret 0xfffe; 
0x000000000040a12e: ret 0xffff; 
0x0000000000410a01: ret 1; 
0x000000000041a78a: ret 2; 
0x0000000000430202: ret 3; 
0x0000000000426c09: ret 4; 
0x000000000041b0d6: ret 5; 
0x0000000000419830: ret 6; 
0x00000000004b2f24: ret 7; 
0x000000000040ac0e: ret 8; 
0x000000000043d20a: ret 9; 
0x00000000004001c0: ret; 
0x00000000004586c2: retf 0; add byte ptr [rbp - 0x7b], cl; in al, 0xf; test byte ptr [rcx - 0x77000000], dh; ret 0xe283; 
0x000000000043346d: retf 0x1073; mov rcx, rdx; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004976e8: retf 0x1b8; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; or al, byte ptr [rbx - 0x7cb7fe40]; ret 0x8008; 
0x00000000004434b2: retf 0x1f8; sbb eax, 0; leave; ret; 
0x000000000049a55a: retf 0x2335; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000499d72: retf 0x233c; add byte ptr [rbx + 0x233cc405], cl; add byte ptr [rcx - 0x75], al; adc bh, byte ptr [rcx]; ret 0x850f; 
0x000000000040f193: retf 0x6411; xor rdx, qword ptr [0x30]; call rdx; 
0x0000000000481321: retf 0x6c; add rsp, 0x48; ret; 
0x000000000048c917: retf 0x6c; add rsp, 8; ret; 
0x000000000044e7c0: retf 0x6c; ret; 
0x00000000004ba802: retf 0x6ee8; sahf; ret 0x38ae; 
0x000000000042f742: retf 0x749; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000048bcc6: retf 0x77f; call 0x8b620; leave; ret; 
0x000000000044573b: retf 0x8348; ret; 
0x0000000000423735: retf 0x8349; ret 0x7f10; 
0x000000000042a137: retf 0x8349; ret 0xf10; 
0x000000000048db2f: retf 0x850f; call qword ptr [rsi]; 
0x0000000000461560: retf 0x8948; lea eax, dword ptr [rax + 0x48ffffef]; mov esi, dword ptr [rbp - 0x1090]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000454122: retf 0x8948; lea eax, dword ptr [rax + 0x4cfffffb]; mov esi, ebx; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000044fabe: retf 0x894c; out dx, eax; xor eax, eax; syscall; 
0x000000000044faed: retf 0x894c; salc; mov rdi, r13; mov eax, r8d; syscall; 
0x0000000000447809: retf 0x894d; ret; 
0x00000000004975cc: retf 0x8b48; xor cl, byte ptr [rax - 0x7d]; ret 0xf08; 
0x000000000043c2fd: retf 0x8d4c; sbb eax, 0x686cb; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bcdd: retf 0x8d4c; sbb eax, 0x68c6b; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000048c03a: retf 0x948; ret 0x8948; 
0x0000000000495c72: retf 0x9e0f; ret 0xe8c1; 
0x0000000000416eaa: retf 0xdfeb; nop dword ptr [rax]; mov rax, qword ptr [rsi + 0xd8]; mov rdi, rbx; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000004244c0: retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000046e151: retf 0xf4c; stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000042ffe6: retf 0xf66; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004a1092: retf 0xf7d9; dec dword ptr [rax - 0x77]; fucompi st(0); ret 0xf7d9; 
0x000000000046ff78: retf 0xfac1; add ch, byte ptr [rcx]; ret 0x48d; 
0x000000000045e1b3: retf 0xfff8; jmp qword ptr [rsi + 0xf]; 
0x00000000004a439d: retf 0xfff8; ror bl, 0xf8; call qword ptr [rax]; 
0x0000000000472be3: retf 0xfffd; jmp qword ptr [rsi + 0xf]; 
0x0000000000411063: retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x000000000041db6a: retf 1; add byte ptr [rcx - 0xa], al; ret 0xf01; 
0x000000000041a46a: retf 5; add byte ptr [rbx + rdi + 0x25], cl; ret; 
0x0000000000491622: retf; adc eax, 0x83480000; ret 0xe910; 
0x000000000044332d: retf; add al, byte ptr [rcx + 0x39]; ret; 
0x0000000000492822: retf; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004a0b59: retf; and al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000004a43a1: retf; clc; call qword ptr [rax]; 
0x00000000004a43a1: retf; clc; call qword ptr [rax]; int 0xf8; jmp qword ptr [rax - 0x32]; 
0x000000000040869a: retf; idiv bh; jmp qword ptr [rsi - 0x70]; 
0x00000000004018c1: retf; idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x000000000041d4cd: retf; jb 0x1d4a8; mov byte ptr [r8 + rbx], r9b; mov rax, r8; pop rbx; ret; 
0x000000000043f70c: retf; lea rsi, qword ptr [rsp + 0x10]; mov edi, 1; mov eax, 0xe5; syscall; 
0x000000000048c3c2: retf; mov dword ptr fs:[rdx], 5; pop rbx; ret; 
0x0000000000491f22: retf; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000492222: retf; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004ba78b: retf; ret 0x5508; 
0x00000000004a420c: retf; ret; 
0x00000000004beb45: retf; std; jmp rsp; 
0x00000000004beb41: retf; std; lcall ptr [rdx - 0x35]; std; jmp rsp; 
0x000000000043c301: retf; xchg byte ptr [rsi], al; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000004a4238: rol al, 0xf8; call qword ptr [rax - 0x3f]; 
0x00000000004a4238: rol al, 0xf8; call qword ptr [rax - 0x3f]; clc; jmp rax; 
0x00000000004a4394: rol bh, 1; clc; jmp qword ptr [rax]; 
0x000000000042ee22: rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x000000000046e0e2: rol byte ptr [rax + 0x49], 0x39; ret 0x2774; 
0x0000000000414a69: rol byte ptr [rax + rax*8 - 0x7d7af1], 0xff; dec dword ptr [rax - 0x75]; push rbx; sub cl, ch; ret 0xfffe; 
0x00000000004b2920: rol byte ptr [rax + rax], 0; ret 4; 
0x00000000004487b8: rol byte ptr [rax + rcx*2], 0x83; ret; 
0x0000000000482986: rol byte ptr [rax - 0x6df0f506], 1; ret 0xb60f; 
0x000000000049cf43: rol byte ptr [rax], 0; add byte ptr [rax - 0x3f], cl; call 0x4810588d; mov eax, dword ptr [rdi + 0x98]; ret; 
0x0000000000415a7f: rol byte ptr [rax], 0; add byte ptr [rbp + 0x48497ed2], al; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x00000000004611c5: rol byte ptr [rax], 0; add byte ptr [rbx - 0x106f43], al; call qword ptr [rax]; 
0x000000000042f36d: rol byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000049ce46: rol byte ptr [rax], 1; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x000000000040fda4: rol byte ptr [rax], 1; add byte ptr [rax], al; mov eax, esi; pop rbx; ret; 
0x000000000045051b: rol byte ptr [rax], 1; add byte ptr [rax], al; ret; 
0x000000000045ecf6: rol byte ptr [rax], cl; add byte ptr [rax + 0x39], cl; ret; 
0x000000000042d832: rol byte ptr [rbp + 0x664975c0], 0xf; xlatb; ret 0xc085; 
0x0000000000464bc1: rol byte ptr [rbp - 0x3f60f025], 0x29; ret; 
0x000000000047d86e: rol byte ptr [rbp - 0x77], 0xc7; mov r14, r9; je 0x7d88c; mov qword ptr [rbp - 0xa8], rdx; mov edi, 0x6cc140; call rax; 
0x000000000048a38b: rol byte ptr [rbx - 0x177cfd20], 1; ret; 
0x00000000004437f6: rol byte ptr [rbx - 0x24e6fe08], 0x83; ret; 
0x00000000004173a8: rol byte ptr [rbx - 0x6af00002], 0xc0; neg eax; ret; 
0x000000000046f0a2: rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x000000000043ee31: rol byte ptr [rcx + 0xbeff], cl; add byte ptr [rdi], cl; lahf; ret 0xea81; 
0x000000000044d11b: rol byte ptr [rcx + rcx*2], 0x39; ret; 
0x000000000041b621: rol byte ptr [rcx + rcx*4 + 5], 0x37; add dword ptr [rbx], ebp; add byte ptr [rcx + rcx*4 - 0x31], cl; mov eax, 3; syscall; 
0x00000000004153e0: rol byte ptr [rcx - 0x76b7ffd5], 0x1d; movsd dword ptr [rdi], dword ptr [rsi]; sub dword ptr [rbx], 0x83c88900; ret 0x2501; 
0x00000000004413c7: rol byte ptr [rcx - 0x77], 0xdd; mov rax, qword ptr [rbp - 0x48]; call rax; 
0x000000000049cd87: rol byte ptr [rcx - 0xa], 0x81; mov dword ptr [rax], 0x75400000; cmp qword ptr [r9 + 0x38], 0; je 0x9ce03; add rsp, 0x18; ret; 
0x000000000046f082: rol byte ptr [rcx], 0; add byte ptr [rax], al; ret; 
0x000000000047d21c: rol byte ptr [rcx], 0x48; mov dword ptr [rbx + 0x10], eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000047cae6: rol byte ptr [rcx], 0x48; mov dword ptr [rip + 0x2598e1], eax; add rsp, 8; ret; 
0x000000000043ec46: rol byte ptr [rcx], 0x5d; pop r12; pop r13; ret; 
0x000000000044ec32: rol byte ptr [rcx], 0x83; ret 0x4801; 
0x00000000004145a3: rol byte ptr [rcx], 0xe9; sar ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000043eca7: rol byte ptr [rcx], 0xf; scasd eax, dword ptr [rdi]; ret 0x72e9; 
0x000000000043ec92: rol byte ptr [rcx], 0xf; scasd eax, dword ptr [rdi]; ret 0xaf0f; 
0x000000000043341e: rol byte ptr [rcx], 1; ret 0x148; 
0x000000000046f0e2: rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x00000000004c9f50: rol byte ptr [rdx - 3], 1; call qword ptr [rcx + 1]; 
0x000000000046f092: rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x00000000004172b7: rol byte ptr [rdx], 0; add rsp, 0x80; mov qword ptr [rip + 0x2b62e0], rdx; add dword ptr [rip + 0x2b62d5], 1; ret; 
0x0000000000445656: rol byte ptr [rdx], 0x50; call rbx; 
0x0000000000496987: rol byte ptr [rdx], 1; add byte ptr [rax], al; ret; 
0x000000000046f0d2: rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x00000000004be450: rol byte ptr [rsi], 1; std; jmp qword ptr [rax]; 
0x000000000043326d: rol ch, 1; jp 0x332f0; jb 0x33253; vmovdqu xmmword ptr [rdx - 0x10], xmm15; ret; 
0x0000000000443879: rol cl, 0x6c; add byte ptr [rax - 0x39], cl; adc byte ptr [rax], sil; cmp byte ptr [rax + rax + 0x48], al; mov dword ptr [rax + 8], edx; ret; 
0x00000000004b9220: rol cl, 0xc2; ret; 
0x0000000000470dcf: rol cl, cl; cli; add ch, byte ptr [rcx]; ret 0x48d; 
0x000000000046f02c: rol dword ptr [rax + 0x1e740fe1], 1; ret; 
0x000000000043c75f: rol dword ptr [rbp + 0x661075c0], cl; nop; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x0000000000426a96: rol dword ptr [rbp - 0x4e7af040], 0; add byte ptr [rax], al; xor rax, rax; ret; 
0x0000000000400593: rol dword ptr [rbx + rbp*8], -0x34; mov qword ptr [rdi], rcx; ret; 
0x00000000004ba5aa: rol dword ptr [rdi + 0x42923bbd], 1; jmp qword ptr [rdx - 0x71]; 
0x00000000004a4184: rol edx, -8; jmp qword ptr [rcx - 0x3d]; 
0x00000000004713cb: rol esp, 0x25; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004a43a0: ror bl, 0xf8; call qword ptr [rax]; 
0x00000000004a43a0: ror bl, 0xf8; call qword ptr [rax]; int 0xf8; jmp qword ptr [rax - 0x32]; 
0x0000000000430a4f: ror byte ptr [r8 - 0x7d], 0xef; lea r11, qword ptr [rip + 0x737f4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004268ac: ror byte ptr [rax + 0x29], 0xc2; jbe 0x26b60; add rax, rdi; add rax, rcx; ret; 
0x0000000000426b22: ror byte ptr [rax + 0x29], 0xc2; jbe 0x26b60; add rax, rdi; ret; 
0x0000000000426b32: ror byte ptr [rax + 0x29], 0xc2; jbe 0x26b60; lea rax, qword ptr [rdi + rax + 0x10]; ret; 
0x0000000000426b42: ror byte ptr [rax + 0x29], 0xc2; jbe 0x26b60; lea rax, qword ptr [rdi + rax + 0x20]; ret; 
0x0000000000426b52: ror byte ptr [rax + 0x29], 0xc2; jbe 0x26b60; lea rax, qword ptr [rdi + rax + 0x30]; ret; 
0x00000000004244c7: ror byte ptr [rax + 0x29], 1; clc; ret; 
0x00000000004113ea: ror byte ptr [rax + 0x29], 1; ret; 
0x000000000047c5f9: ror byte ptr [rax + 0x29], cl; ret 0x3949; 
0x0000000000447a0a: ror byte ptr [rax + 0x29], cl; ret 0x8348; 
0x00000000004432c8: ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x000000000048ad86: ror byte ptr [rax + 0x39], 1; ret 0x8949; 
0x0000000000401ad5: ror byte ptr [rax + 0x39], 1; ret 0xe72; 
0x000000000049bd47: ror byte ptr [rax + 0x63], 0x44; test dword ptr [rax], eax; add rax, rbp; jmp rax; 
0x00000000004441d5: ror byte ptr [rax + 0xf], 0x44; ret 0x3880; 
0x0000000000470750: ror byte ptr [rax + 0xf], 0xaf; ret; 
0x00000000004432c2: ror byte ptr [rax + 0xf], cl; sal byte ptr [rcx], 1; ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x000000000042d70c: ror byte ptr [rax + 1], 0xf8; add rax, rcx; ret; 
0x0000000000426af2: ror byte ptr [rax + 1], 0xf8; ret; 
0x0000000000481666: ror byte ptr [rax + 1], cl; ret 0x9e74; 
0x00000000004815a9: ror byte ptr [rax + 1], cl; ret 0xe974; 
0x00000000004244c4: ror byte ptr [rax + 1], cl; ror byte ptr [rax + 0x29], 1; clc; ret; 
0x0000000000401d12: ror byte ptr [rax + 5], 0; or dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; add eax, 0x2c9370; xor eax, eax; ret; 
0x000000000042da15: ror byte ptr [rax + 9], 0xc8; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, qword ptr [rdi + rax]; ret; 
0x00000000004aed28: ror byte ptr [rax + rax], 0; ret; 
0x0000000000426c95: ror byte ptr [rax - 0x2d], 0xfa; movzx edx, dl; sub eax, edx; ret; 
0x0000000000424406: ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x24420; bsf rax, rdx; ret; 
0x00000000004243a5: ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x24430; bsf rax, rdx; ret; 
0x000000000049a576: ror byte ptr [rax - 0x3f], 0xe9; adc byte ptr [rax + 0xf], cl; scasd eax, dword ptr [rdi]; ret 0xf48; 
0x000000000045e8aa: ror byte ptr [rax - 0x3f], 1; clc; add cl, byte ptr [rax + 0x29]; ret; 
0x00000000004955e8: ror byte ptr [rax - 0x73], 0x14; add byte ptr [rax + 1], cl; ret 0x8d48; 
0x0000000000426ae2: ror byte ptr [rax - 0x73], 0x44; cmp al, dh; ret; 
0x0000000000426b12: ror byte ptr [rax - 0x73], 0x44; cmp byte ptr [rax], ah; ret; 
0x0000000000426b02: ror byte ptr [rax - 0x73], 0x44; cmp byte ptr [rax], dl; ret; 
0x000000000041c797: ror byte ptr [rax - 0x73], 0x54; ret; 
0x0000000000438c23: ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; call qword ptr [rbx]; 
0x0000000000438c5f: ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x000000000043317b: ror byte ptr [rax - 0x73], 0x7f; ror byte ptr [rax - 0x7d], 0xea; lea r11, qword ptr [rip + 0x710c5]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043f118: ror byte ptr [rax - 0x73], 1; call 0x4160327c; pop rbp; pop rbp; ret; 
0x000000000041caaf: ror byte ptr [rax - 0x73], 1; push rsp; ret; 
0x000000000048ac23: ror byte ptr [rax - 0x77], 0x14; ret; 
0x0000000000452d4b: ror byte ptr [rax - 0x77], 0xc7; mov byte ptr [rsi], dl; jne 0x52d38; mov rax, rsi; ret; 
0x000000000045a3c9: ror byte ptr [rax - 0x77], 1; ret 0x3ee8; 
0x00000000004133e5: ror byte ptr [rax - 0x77], 1; ret 0x8b48; 
0x0000000000472bb5: ror byte ptr [rax - 0x77], 1; ret 0x8d48; 
0x000000000040e359: ror byte ptr [rax - 0x77], 1; ret 0xe281; 
0x0000000000421732: ror byte ptr [rax - 0x77], 1; xor dword ptr [rax + 0xf], ecx; scasd eax, dword ptr [rdi]; ret 0x8948; 
0x000000000041830d: ror byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; ret; 
0x0000000000413e31: ror byte ptr [rax - 0x7b], 0xd2; jne 0x13e40; ret; 
0x000000000048c7f9: ror byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x000000000041072f: ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000473870: ror byte ptr [rax - 0x7d], 0xc4; movzx rax, al; ret; 
0x0000000000421c2c: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000041d646: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000049a375: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x00000000004702e9: ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000049da7e: ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000048ca57: ror byte ptr [rax - 0x7d], 0xc4; sub byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x000000000043317f: ror byte ptr [rax - 0x7d], 0xea; lea r11, qword ptr [rip + 0x710c5]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004330bf: ror byte ptr [rax - 0x7d], 0xea; sfence; lea r11, qword ptr [rip + 0x71182]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430a50: ror byte ptr [rax - 0x7d], 0xef; lea r11, qword ptr [rip + 0x737f4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000047b9bc: ror byte ptr [rax - 0x7d], 1; ret 0x4801; 
0x0000000000457a32: ror byte ptr [rax - 0x7d], 1; ret 0x4820; 
0x000000000047ac32: ror byte ptr [rax - 0x7d], 1; ret; 
0x000000000048c23a: ror byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rdi]; xchg eax, esp; ret 0xdaf7; 
0x000000000047eb3d: ror byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x0000000000449fa3: ror byte ptr [rax - 0x7d], cl; ret 0x4906; 
0x000000000047280e: ror byte ptr [rax - 0x7d], cl; ret 0x4c01; 
0x00000000004494e4: ror byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x000000000041ccab: ror byte ptr [rax - 0x7f], cl; sti; add byte ptr [rax - 0x6af0ff94], bh; ret 0x8348; 
0x0000000000419b3c: ror byte ptr [rax - 1], 1; dec dword ptr [rax - 0x7d]; ret 0x4007; 
0x000000000048c4ea: ror byte ptr [rax - 9], cl; cmc; pop rbx; pop rbp; pop r12; ret; 
0x0000000000412339: ror byte ptr [rax], 0x89; mov byte ptr [r8 - 0x75], r9b; or cl, byte ptr [rax - 0x7d]; ret; 
0x000000000049a544: ror byte ptr [rax], cl; leave; cmove rax, rdx; ret; 
0x000000000043c2b6: ror byte ptr [rbp + rcx*4 + 0x1d], cl; adc al, byte ptr [rdi + 0x63490006]; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bcbb: ror byte ptr [rbp + rcx*4 + 0x1d], cl; lea ecx, dword ptr [rsi + rax + 0xc634900]; xchg eax, ebx; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000047674d: ror byte ptr [rbp + rcx*4 + 0x4a], cl; dec dword ptr [rcx + 0x29]; ret 0x8d49; 
0x000000000046f5e3: ror byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x20; lea rsi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000049e4fc: ror byte ptr [rbp - 0x75], 0x51; or byte ptr [rbp + 0x39], cl; ret 0x4776; 
0x00000000004a4034: ror byte ptr [rbp - 8], 0xff; ror byte ptr [rdi - 8], 1; jmp rax; 
0x0000000000425cf3: ror byte ptr [rcx + 0x29], cl; sal dword ptr [rsi + 0xb], cl; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000448820: ror byte ptr [rcx + 0x39], cl; ret 0x1e76; 
0x0000000000447a19: ror byte ptr [rcx + 0x39], cl; ret 0x2176; 
0x0000000000447ea0: ror byte ptr [rcx + 0x39], cl; ret 0x2876; 
0x0000000000452e5e: ror byte ptr [rcx + 1], 0xd8; add rsp, 0x20; mov rax, r8; pop rbx; ret; 
0x000000000045d0e4: ror byte ptr [rcx + rcx*4 + 0x2f], 0x5b; pop rbp; pop r12; pop r13; ret; 
0x00000000004042f4: ror byte ptr [rcx + rcx*4 - 0x19], 1; mov eax, 3; syscall; 
0x00000000004042c4: ror byte ptr [rcx + rcx*4 - 0x3e], cl; mov rsi, r9; mov rdi, r12; mov eax, r10d; syscall; 
0x000000000046fceb: ror byte ptr [rcx + rcx*4 - 0xa], 0x48; lea edx, dword ptr [rsp + 0x48]; mov rdi, r12; call rbx; 
0x000000000046d796: ror byte ptr [rcx + rcx*4 - 0xf], 0x48; lea esi, dword ptr [rbp + 0x50]; mov rdi, r12; lea rdx, qword ptr [rsp + 0x18]; lea r9, qword ptr [rsp + 0x10]; call rbx; 
0x000000000046d952: ror byte ptr [rcx + rcx*4 - 0xf], 0x48; lea esi, dword ptr [rbp + 0x90]; mov rdi, r12; lea rdx, qword ptr [rsp + 0x18]; lea r9, qword ptr [rsp + 0x10]; call rbx; 
0x000000000046f8f3: ror byte ptr [rcx + rcx*4 - 0xf], 0x4c; mov edi, esp; lea rdx, qword ptr [rsp + 0x20]; lea r9, qword ptr [rsp + 0x28]; lea rsi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000046da52: ror byte ptr [rcx + rcx*4 - 1], 0x45; xor eax, eax; call rbx; 
0x000000000046f7f3: ror byte ptr [rcx + rcx*4 - 7], 0x4c; mov edx, ebp; mov rdi, r12; lea r9, qword ptr [rsp + 0x60]; lea rsi, qword ptr [rsp + 0x30]; call rbx; 
0x00000000004a484c: ror byte ptr [rcx + rdi*8], 1; jmp qword ptr [rax + 0xc]; 
0x000000000046e39c: ror byte ptr [rcx - 0x3e], 0x48; cmovne ecx, edi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, qword ptr [rcx + rsi]; ret; 
0x000000000045030e: ror byte ptr [rcx - 0x3fcebfbd], 0x5b; ret; 
0x00000000004110f5: ror byte ptr [rcx - 0x75], 1; adc byte ptr [r9 + 0x2b], r9b; or byte ptr [r8 - 9], r9b; fimul dword ptr [rax - 0x77]; ror dword ptr [rax + 0x29], cl; ret; 
0x000000000047b0e5: ror byte ptr [rcx - 0x77], 1; add ch, cl; ret 0xfffd; 
0x000000000043eae4: ror byte ptr [rcx - 0x77], 1; ret 0x2c76; 
0x0000000000411ffa: ror byte ptr [rcx - 0x77], 4; and al, 0x74; ret 0x8b4c; 
0x0000000000427419: ror byte ptr [rdi + rcx + 0x47], 1; ret 0x894c; 
0x00000000004a4038: ror byte ptr [rdi - 8], 1; jmp rax; 
0x0000000000450332: ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x000000000044fadb: ror byte ptr [rdi], 0x1f; add byte ptr [rcx + 0x29], cl; ror dword ptr [rcx + 1], 1; ret 0x854d; 
0x00000000004431cc: ror byte ptr [rdi], 0x44; ret 0x66c3; 
0x0000000000470df8: ror byte ptr [rdi], 0x48; ret 0xb70f; 
0x00000000004408d7: ror byte ptr [rdi], 0x49; adc al, 0x24; add rsp, 0x18; mov eax, edx; ret; 
0x000000000041e85d: ror byte ptr [rdi], 0x84; cmc; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000446494: ror byte ptr [rdi], 0x84; cmc; add dword ptr [rax], eax; add byte ptr [rsi + 0x447090], bh; mov edi, 0x6cd6d8; call rax; 
0x0000000000446395: ror byte ptr [rdi], 0x84; movsb byte ptr [rdi], byte ptr [rsi]; add byte ptr [rax], al; add byte ptr [rsi + 0x447090], bh; mov edi, 0x6cd6d8; call rax; 
0x0000000000473af7: ror byte ptr [rdi], 0x84; push rdx; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x000000000046a41b: ror byte ptr [rdi], 0x84; ret; 
0x000000000044726c: ror byte ptr [rdi], 0x84; test dword ptr [rdx], 0x83480000; ret; 
0x000000000041ff0c: ror byte ptr [rdi], 0x85; add r8b, byte ptr [r8]; add byte ptr [rbp - 0x7b], cl; in al, 0xf; xchg eax, esp; ret 0x8548; 
0x0000000000438c2a: ror byte ptr [rdi], 0x85; call qword ptr [rbx]; 
0x0000000000426a98: ror byte ptr [rdi], 0x85; mov cl, 0; add byte ptr [rax], al; xor rax, rax; ret; 
0x000000000045aa29: ror byte ptr [rdi], 0x85; ret 0xffee; 
0x0000000000438c66: ror byte ptr [rdi], 0x85; ret; 
0x0000000000458a37: ror byte ptr [rdi], 0x8a; ret 8; 
0x0000000000489588: ror byte ptr [rdi], 0x8f; ret; 
0x0000000000442f2c: ror byte ptr [rdi], 0x92; ret 0xd029; 
0x000000000049637c: ror byte ptr [rdi], 0x94; ret 0x3840; 
0x0000000000495aba: ror byte ptr [rdi], 0x94; ret 0x5438; 
0x000000000041be27: ror byte ptr [rdi], 0x94; ret 0x7ae9; 
0x0000000000462533: ror byte ptr [rdi], 0x94; ret 0x7f3c; 
0x000000000048c7fc: ror byte ptr [rdi], 0x94; ret 0x950f; 
0x0000000000468474: ror byte ptr [rdi], 0x94; ret 0xd309; 
0x0000000000495a0d: ror byte ptr [rdi], 0x94; ret 0xda38; 
0x000000000047386d: ror byte ptr [rdi], 0x94; ror byte ptr [rax - 0x7d], 0xc4; movzx rax, al; ret; 
0x0000000000450308: ror byte ptr [rdi], 0x94; ror byte ptr [rdi], 0xb6; ror byte ptr [rcx - 0x3fcebfbd], 0x5b; ret; 
0x000000000046fd2f: ror byte ptr [rdi], 0x95; ret 0xb8e9; 
0x000000000046fbea: ror byte ptr [rdi], 0x95; ret 0xd721; 
0x0000000000410242: ror byte ptr [rdi], 0x95; ret 0xdaf7; 
0x000000000046f81e: ror byte ptr [rdi], 0x95; ret 0xe883; 
0x000000000049a372: ror byte ptr [rdi], 0x95; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x000000000048ca54: ror byte ptr [rdi], 0x95; ror byte ptr [rax - 0x7d], 0xc4; sub byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x00000000004106fc: ror byte ptr [rdi], 0x9f; ret 0x3841; 
0x00000000004955e5: ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x73], 0x14; add byte ptr [rax + 1], cl; ret 0x8d48; 
0x000000000045030b: ror byte ptr [rdi], 0xb6; ror byte ptr [rcx - 0x3fcebfbd], 0x5b; ret; 
0x0000000000419c39: ror byte ptr [rdi], 1; test byte ptr [rax], dh; add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x000000000044d08e: ror byte ptr [rdi], 1; test byte ptr [rdi - 0x16000003], dl; cmp ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000004763d5: ror byte ptr [rdi], cl; test ah, bl; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000046e03b: ror byte ptr [rdi], cl; test byte ptr [rsi + 0x48000000], bl; bsf eax, edx; ret; 
0x00000000004243ab: ror byte ptr [rdi], cl; test byte ptr [rsi], bh; add byte ptr [rax], al; bsf rax, rdx; ret; 
0x0000000000495d2f: ror byte ptr [rdi], cl; xchg eax, ebp; ret 0x3840; 
0x0000000000495e43: ror byte ptr [rdi], cl; xchg eax, ebp; ret 0xb60f; 
0x0000000000458a36: ror byte ptr cs:[rdi], 0x8a; ret 8; 
0x00000000004a43e8: ror dh, 1; clc; jmp qword ptr [rax]; 
0x000000000046e29a: ror dword ptr [rax + 0x21], -0x32; je 0x6e3d0; bsr rsi, rsi; lea rax, qword ptr [rdi + rsi]; ret; 
0x0000000000411103: ror dword ptr [rax + 0x29], cl; ret; 
0x0000000000495c6f: ror dword ptr [rax + 0x39], 1; retf 0x9e0f; ret 0xe8c1; 
0x00000000004244b9: ror dword ptr [rax - 0x3f], -0x1f; and byte ptr [rax + 9], cl; retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000047ba0c: ror dword ptr [rax - 0x75], 0x46; or byte ptr [rax - 0x77], cl; ret 0x8948; 
0x0000000000440f3b: ror dword ptr [rax - 0x75], cl; and al, 8; mov rdi, rax; call 0x1ea60; mov rdi, qword ptr [r15]; call rbx; 
0x000000000048bc13: ror dword ptr [rax - 0x77], 0x34; ret 0x8348; 
0x000000000047001b: ror dword ptr [rax - 0x77], 0x4f; and byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000045aff0: ror dword ptr [rax - 0x77], 1; ret 0x47e9; 
0x0000000000433472: ror dword ptr [rax - 0x77], 1; sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000440f76: ror dword ptr [rax - 0x77], cl; out dx, eax; call 0x1ea60; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000498291: ror dword ptr [rax - 0x77], cl; ret; 
0x0000000000410238: ror dword ptr [rax - 0x77], cl; xlatb; call qword ptr [rax + 0x60]; 
0x0000000000424402: ror dword ptr [rax - 0x7d], -0x20; ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x24420; bsf rax, rdx; ret; 
0x00000000004243a1: ror dword ptr [rax - 0x7d], -0x20; ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x24430; bsf rax, rdx; ret; 
0x000000000040f2f8: ror dword ptr [rax - 0x7d], 1; ret 0x4801; 
0x0000000000405b02: ror dword ptr [rax - 0x7d], cl; ret; 
0x00000000004173a3: ror dword ptr [rax], 0x74; adc dword ptr [rcx], esi; rol byte ptr [rbx - 0x6af00002], 0xc0; neg eax; ret; 
0x000000000044fae2: ror dword ptr [rcx + 1], 1; ret 0x854d; 
0x000000000042d315: ror dword ptr [rcx + rcx*4 + 0xf], 1; pop rbx; ret; 
0x00000000004428ae: ror dword ptr [rcx + rcx*4 - 0x11], cl; call 0x1ea60; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000440cb5: ror dword ptr [rcx + rcx*4 - 0x11], cl; call 0x1ea60; mov rdi, qword ptr [rbp]; call rbx; 
0x000000000046be56: ror dword ptr [rcx + rcx*4 - 0x12], cl; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000442b00: ror dword ptr [rcx + rcx*4 - 0x19], cl; call 0x1ea60; mov rdi, qword ptr [rbp]; call rbx; 
0x0000000000440b73: ror dword ptr [rcx + rcx*4 - 1], cl; call 0x1ea60; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000440b80: ror dword ptr [rcx + rcx*4 - 9], cl; call 0x1ea60; mov rdi, qword ptr [r13]; call rbx; 
0x000000000048af18: ror dword ptr [rcx + rdx - 0x3e], 0x4e; mov dword ptr [rdi + rbx*8 + 8], ecx; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000042d30f: ror dword ptr [rcx - 0x2d], -0x1f; or r9, r10; mov qword ptr [rdi], r9; pop rbx; ret; 
0x000000000043c757: ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000433979: ror dword ptr [rdi + rax], cl; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000049a573: ror dword ptr [rdi], -0x49; ror byte ptr [rax - 0x3f], 0xe9; adc byte ptr [rax + 0xf], cl; scasd eax, dword ptr [rdi]; ret 0xf48; 
0x0000000000481a48: ror dword ptr [rdi], -0x6b; ret 0xd348; 
0x0000000000470ceb: ror dword ptr [rdi], -0x6c; ret; 
0x00000000004955e2: ror dword ptr [rdi], -0x6c; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x73], 0x14; add byte ptr [rax + 1], cl; ret 0x8d48; 
0x000000000042fbd8: ror dword ptr [rdi], -0x7b; adc byte ptr [rdx], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004302e4: ror dword ptr [rdi], -0x7b; add al, 3; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004300b6: ror dword ptr [rdi], -0x7b; add eax, 0xc0310000; ret; 
0x0000000000430036: ror dword ptr [rdi], -0x7b; cmpsb byte ptr [rsi], byte ptr [rdi]; add eax, 0xc0310000; ret; 
0x0000000000430374: ror dword ptr [rdi], -0x7b; je 0x3037b; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042fe6b: ror dword ptr [rdi], -0x7b; jno 0x2fe77; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042ff33: ror dword ptr [rdi], -0x7b; mov ch, 6; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042fbb0: ror dword ptr [rdi], -0x7b; sub al, 0xa; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042f239: ror dword ptr [rsi + 7], cl; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000040f1da: ror eax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000040f192: ror edx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000040f1d9: ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000040f191: ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x00000000004c8eed: sahf; add byte ptr [rax], al; mov al, 0x9d; cld; call qword ptr [rax]; 
0x0000000000447a14: sahf; add dword ptr [rax], eax; add byte ptr [rcx], dh; ror byte ptr [rcx + 0x39], cl; ret 0x2176; 
0x000000000041e7fe: sahf; fcos; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000470fd3: sahf; in al, 0x4b; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004ba652: sahf; int 0xe0; fdivr st(4); test al, 0x97; xchg eax, esp; ret; 
0x000000000042c2de: sahf; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000048b261: sahf; ret 0x148; 
0x00000000004ba805: sahf; ret 0x38ae; 
0x0000000000451c30: sahf; ret 0x8348; 
0x0000000000495c74: sahf; ret 0xe8c1; 
0x000000000049c423: sahf; ret 0xf45; 
0x000000000047ed1e: sahf; sar edi, 1; jmp qword ptr [rsi + 0xf]; 
0x00000000004173ae: sal bh, 0xd8; ret; 
0x000000000043ef89: sal bh, 0xf1; pop rbx; mov eax, eax; ret; 
0x0000000000423397: sal bh, 1; ret 0x8000; 
0x0000000000423257: sal bh, 1; ret 0xc000; 
0x0000000000423117: sal bh, 1; ret 0xe000; 
0x0000000000422fd7: sal bh, 1; ret 0xf000; 
0x0000000000422e97: sal bh, 1; ret 0xf800; 
0x0000000000422d57: sal bh, 1; ret 0xfc00; 
0x0000000000422c17: sal bh, 1; ret 0xfe00; 
0x0000000000422ad7: sal bh, 1; ret 0xff00; 
0x0000000000422997: sal bh, 1; ret 0xff80; 
0x0000000000422857: sal bh, 1; ret 0xffc0; 
0x0000000000422717: sal bh, 1; ret 0xffe0; 
0x00000000004225d7: sal bh, 1; ret 0xfff0; 
0x0000000000422497: sal bh, 1; ret 0xfff8; 
0x0000000000422357: sal bh, 1; ret 0xfffc; 
0x0000000000422217: sal bh, 1; ret 0xfffe; 
0x000000000045b044: sal bh, cl; int1; add eax, r8d; ret; 
0x000000000043e7a7: sal bl, 0xaa; mov rax, rsi; sub rax, rdx; vzeroupper; ret; 
0x000000000046fa3f: sal bl, 1; ret; 
0x000000000040e29d: sal byte ptr [rax + rdi*2 + 0x4c], 0x8d; push 0x40b60f09; or dword ptr [rax + rax*8 - 0x38b7938c], eax; ret 0xfff0; 
0x000000000048c775: sal byte ptr [rax + rdx + 0x5b], 0x31; test byte ptr [rbx + 0x2412433d], 0; jmp rax; 
0x000000000043c761: sal byte ptr [rbp + 0x10], 0x66; nop; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x000000000048106a: sal byte ptr [rbp + 0x1b], 0x48; cmp dword ptr [rsp + 0x28], 0; jne 0x81080; add rsp, 0x38; ret; 
0x000000000047d51f: sal byte ptr [rbp + 0x1e], 0x48; mov dword ptr [rbx], 0; or dword ptr [rip + 0x24ec40], 1; pop rbx; ret; 
0x000000000041fa7b: sal byte ptr [rbp + 0x2a], 0x48; mov eax, dword ptr [rip + 0x2adb6b]; test rax, rax; je 0x1fa8c; call rax; 
0x0000000000415d06: sal byte ptr [rbp + 0x30], 0x48; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x000000000046c76b: sal byte ptr [rbp + 0x35], 0x48; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x28]; jmp rax; 
0x000000000046c923: sal byte ptr [rbp + 0x3d], 0x48; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000042d852: sal byte ptr [rbp + 0x4b], 0x66; pmovmskb eax, mm1; bsf eax, eax; lea rax, qword ptr [rdi + rax + 0x30]; ret; 
0x000000000047c112: sal byte ptr [rbp + 0x4b], 0x89; ret; 
0x0000000000426ad8: sal byte ptr [rbp + 0x55], 0x48; xor eax, eax; ret; 
0x000000000049ecf3: sal byte ptr [rbp + 0xa], 0xf3; ret; 
0x000000000046d708: sal byte ptr [rbp + 0xd], 0x8b; cmp rcx, qword ptr [rdx + 0x4c]; cmove eax, ecx; ret; 
0x0000000000498062: sal byte ptr [rbp + 3], cl; mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x000000000049ecd8: sal byte ptr [rbp + 5], 0xf3; ret; 
0x000000000045987e: sal byte ptr [rbp + 5], 0xf6; ret 0x7450; 
0x00000000004432e1: sal byte ptr [rbp + 8], 1; nop; mov eax, 0xca; syscall; 
0x0000000000413e34: sal byte ptr [rbp + 9], cl; ret; 
0x00000000004413be: sal byte ptr [rbp + rax*2 + 0x48], 0x8b; xor byte ptr [rax - 0x75], cl; jge 0x41388; mov r13d, ebx; mov rax, qword ptr [rbp - 0x48]; call rax; 
0x000000000046f028: sal byte ptr [rbp + rdx - 0x78], cl; rol dword ptr [rax + 0x1e740fe1], 1; ret; 
0x00000000004432f1: sal byte ptr [rbp - 0x10], 0x5a; pop r10; ret; 
0x0000000000416f05: sal byte ptr [rbp - 0x10], 0xf3; ret; 
0x000000000043e490: sal byte ptr [rbp - 0x13], cl; lea rax, qword ptr [rcx - 1]; ret; 
0x000000000042efcb: sal byte ptr [rbp - 0x1e], 0x31; shr byte ptr [rcx], 0xc8; ret; 
0x0000000000496980: sal byte ptr [rbp - 0x24], cl; mov dword ptr fs:[0x2d0], eax; ret; 
0x00000000004042f2: sal byte ptr [rbp - 0x30], 0x4c; mov edi, esp; mov eax, 3; syscall; 
0x000000000047cc0f: sal byte ptr [rbp - 0x32], 0xf3; ret; 
0x000000000047154f: sal byte ptr [rbp - 0x74], 0xe9; imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x00000000004a49ac: sal byte ptr [rbp - 7], 1; push rax; jne 0xa49ac; call qword ptr [rax]; 
0x000000000049cfa2: sal byte ptr [rbx + rcx + 0x48], 0x8b; and al, 0x10; add rsp, 0x28; ret; 
0x00000000004983cd: sal byte ptr [rbx - 0x7d], 0xe8; add dword ptr [rbp + rcx*4 + 0x74], ecx; ret; 
0x0000000000401e32: sal byte ptr [rcx + rcx + 0x31], 0xf6; mov edi, 1; call rax; 
0x000000000047eeea: sal byte ptr [rcx + rcx + 0x48], 0x8b; mov ebp, 0xffffff78; call rax; 
0x0000000000402978: sal byte ptr [rcx + rcx + 0x48], 0x8d; mov ebx, 0x80; call rax; 
0x00000000004a4978: sal byte ptr [rcx + rdi*8 - 1], 0xd0; je 0xa4978; jmp rax; 
0x0000000000480c2a: sal byte ptr [rcx + rdx + 0x48], 0x89; je 0x80c55; or byte ptr [rdi + 0x6cc140], bh; call rax; 
0x000000000042440c: sal byte ptr [rcx + rdx + 0x48], cl; bsf eax, edx; ret; 
0x000000000047857e: sal byte ptr [rcx + rdx + 0x4c], cl; mov dword ptr [rsp], eax; lea rdi, qword ptr [rax + 0x6cc1e0]; call rdx; 
0x0000000000473aae: sal byte ptr [rcx + rdx - 0x77], cl; shl dword ptr [rbx], 0x4e; adc byte ptr [rax - 0x73], cl; or al, 0x8e; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000044564e: sal byte ptr [rcx], 0xc9; not eax; xor edx, edx; add eax, 2; push rax; call rbx; 
0x00000000004432c6: sal byte ptr [rcx], 1; ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x000000000043ef69: sal byte ptr [rcx], 1; shl byte ptr [rip + 0x3fffc00], cl; div ecx; pop rbx; mov eax, eax; ret; 
0x000000000044d6ad: sal byte ptr [rcx], cl; idiv byte ptr [rdi + 0x4a6d28]; mov eax, ecx; syscall; 
0x00000000004417d2: sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], 0xc3; call rax; 
0x0000000000414f66: sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], 0xdf; call qword ptr [rax + 0x58]; 
0x000000000048c910: sal byte ptr [rdi + rax + 0x48], 0xc7; add al, ah; retf 0x6c; add rsp, 8; ret; 
0x000000000046a88d: sal byte ptr [rdi + rdi*4 + 0x48], 0x8d; lea rdx, qword ptr [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x00000000004a400c: sal byte ptr [rdi - 8], 0xff; xor byte ptr [rbx], bh; clc; inc dword ptr [rax + 0x3d]; clc; call qword ptr [rax + 0x3f]; 
0x000000000046e0ab: sal byte ptr [rdx + 0x48], cl; bsf eax, edx; ret; 
0x000000000043ff63: sal byte ptr [rdx + rbx + 0x48], 0x63; test byte ptr [rax + 0x63], 0xff; mov eax, 0x48; syscall; 
0x000000000047ea51: sal byte ptr [rdx + rcx + 0x49], cl; mov eax, dword ptr [rbp]; add rax, qword ptr [rdx + 8]; call rax; 
0x00000000004242c3: sal byte ptr [rdx + rdx + 0x48], 0xff; ret 0x2288; 
0x000000000043045f: sal byte ptr [rdx - 0x10f0992e], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000430580: sal byte ptr [rdx - 0x10f09930], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x000000000042d707: sal byte ptr [rsi + rdx + 0xf], 0xbc; ror byte ptr [rax + 1], 0xf8; add rax, rcx; ret; 
0x00000000004a49cc: sal byte ptr [rsi - 7], 1; inc eax; jns 0xa49cc; call rax; 
0x00000000004a49cc: sal byte ptr [rsi - 7], 1; inc eax; jns 0xa49cc; call rax; jns 0xa49d0; jmp rax; 
0x00000000004761d1: sal byte ptr [rsp + 0x48], 0x83; ret; 
0x000000000040e2a9: sal byte ptr [rsp + rbp*2 + 0x48], 0xc7; ret 0xfff0; 
0x00000000004040a1: sal byte ptr [rsp + rbx + 0x4d], 0x63; in al, 0x4c; mov edi, esp; mov eax, 3; syscall; 
0x000000000048cb41: sal byte ptr [rsp + rcx + 0x5b], 0x5d; pop r12; ret; 
0x00000000004bfc40: sal ch, 0xf4; call qword ptr [rbx]; 
0x000000000048a62f: sal dword ptr [rbp + rsi*2 + 0x4c], -0x77; ret 0xf749; 
0x0000000000441cfa: sal dword ptr [rcx], cl; sar byte ptr [rsi + 1], cl; mov rdi, rbp; call rbx; 
0x00000000004004c4: sal dword ptr [rdx + rdx*4 - 0x15], -0x43; add rsp, 0x608; pop rbx; pop rbp; ret; 
0x00000000004303bf: sal dword ptr [rdx - 0x10f0992d], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004304ff: sal dword ptr [rdx - 0x10f0992f], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000047e607: sal dword ptr [rdx - 0x1a], 1; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000425cf6: sal dword ptr [rsi + 0xb], cl; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000433475: sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004303be: sal qword ptr [rdx - 0x10f0992d], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004304fe: sal qword ptr [rdx - 0x10f0992f], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000434336: salc; add byte ptr [rdi], al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043c796: salc; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x000000000044e877: salc; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000434036: salc; add eax, dword ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004350da: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x6f56b]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433835: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x70e10]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004336d9: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x70f6c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000432fd8: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x7126d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430839: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x73a0c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430774: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x73ad1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000042fa4f: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x746b6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f9d5: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x74730]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f946: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x747bf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f73b: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x749ca]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f609: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x74afc]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f543: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x74bc2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f4c5: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x74c40]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f42e: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x74cd7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f232: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x74ed3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f101: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x75004]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042eff2: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x75113]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000049f751: salc; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004a4401: salc; clc; inc dword ptr [rax]; fdivr st(0); call qword ptr [rax - 0x27]; 
0x000000000043e70b: salc; clc; ret; 
0x000000000043560b: salc; lddqu xmm0, xmmword ptr [rsi - 0x1a]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434f32: salc; lea r11, qword ptr [rip + 0x6f4d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434db2: salc; lea r11, qword ptr [rip + 0x6f656]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434e75: salc; lea r11, qword ptr [rip + 0x6f7d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434c32: salc; lea r11, qword ptr [rip + 0x6f7d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434cf5: salc; lea r11, qword ptr [rip + 0x6f953]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434ab2: salc; lea r11, qword ptr [rip + 0x6f956]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434b75: salc; lea r11, qword ptr [rip + 0x6fad3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434932: salc; lea r11, qword ptr [rip + 0x6fad6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004349f6: salc; lea r11, qword ptr [rip + 0x6fc52]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004347b2: salc; lea r11, qword ptr [rip + 0x6fc56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434875: salc; lea r11, qword ptr [rip + 0x6fdd3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434632: salc; lea r11, qword ptr [rip + 0x6fdd6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004346f5: salc; lea r11, qword ptr [rip + 0x6ff53]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004344b2: salc; lea r11, qword ptr [rip + 0x6ff56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434575: salc; lea r11, qword ptr [rip + 0x700d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434332: salc; lea r11, qword ptr [rip + 0x700d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004343f5: salc; lea r11, qword ptr [rip + 0x70253]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004341b2: salc; lea r11, qword ptr [rip + 0x70256]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434275: salc; lea r11, qword ptr [rip + 0x703d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434032: salc; lea r11, qword ptr [rip + 0x703d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004340f5: salc; lea r11, qword ptr [rip + 0x70553]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433eb2: salc; lea r11, qword ptr [rip + 0x70556]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433f75: salc; lea r11, qword ptr [rip + 0x706d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433d32: salc; lea r11, qword ptr [rip + 0x706d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433df5: salc; lea r11, qword ptr [rip + 0x70853]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433bb2: salc; lea r11, qword ptr [rip + 0x70856]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433c75: salc; lea r11, qword ptr [rip + 0x709d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433a32: salc; lea r11, qword ptr [rip + 0x709d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004338b9: salc; lea r11, qword ptr [rip + 0x70b4f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433af5: salc; lea r11, qword ptr [rip + 0x70b53]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433975: salc; lea r11, qword ptr [rip + 0x70cd3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431e51: salc; lea r11, qword ptr [rip + 0x723f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431d01: salc; lea r11, qword ptr [rip + 0x72547]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431bb1: salc; lea r11, qword ptr [rip + 0x72697]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431a61: salc; lea r11, qword ptr [rip + 0x727e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431911: salc; lea r11, qword ptr [rip + 0x72937]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004317c1: salc; lea r11, qword ptr [rip + 0x72a87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431671: salc; lea r11, qword ptr [rip + 0x72bd7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004313d1: salc; lea r11, qword ptr [rip + 0x72e77]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431281: salc; lea r11, qword ptr [rip + 0x72fc7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431131: salc; lea r11, qword ptr [rip + 0x73117]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430fe1: salc; lea r11, qword ptr [rip + 0x73267]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430e91: salc; lea r11, qword ptr [rip + 0x733b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430d41: salc; lea r11, qword ptr [rip + 0x73507]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430bf1: salc; lea r11, qword ptr [rip + 0x73657]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043092b: salc; lea r11, qword ptr [rip + 0x7391d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043fd8d: salc; mov eax, 4; syscall; 
0x000000000043fddc: salc; mov eax, 5; syscall; 
0x000000000047373d: salc; mov eax, 6; syscall; 
0x000000000044faf0: salc; mov rdi, r13; mov eax, r8d; syscall; 
0x000000000047337c: salc; mov rdx, -0x30; movsxd rdi, ebp; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x0000000000440919: salc; mov rdx, rbx; mov rsi, r13; mov rdi, r12; mov eax, 9; syscall; 
0x00000000004bccd2: salc; movabs al, byte ptr [0xc8c62d12fc87aa3c]; lodsb al, byte ptr [rsi]; or byte ptr [rdi + 0x26], al; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x0000000000433a36: salc; or dword ptr [rdi], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004ba78a: salc; retf; ret 0x5508; 
0x00000000004a446c: salc; sbb bh, cl; jmp qword ptr [rsi + 0x1a]; 
0x00000000004beb99: salc; std; call rsp; 
0x0000000000400cc9: salc; sub al, 0; nop; leave; ret; 
0x000000000043528d: salc; sub rdi, rdx; lea r11, qword ptr [rip + 0x6f178]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434c36: salc; test dword ptr [rsi], 0x14634900; xchg eax, ebx; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004a4235: sar al, 0xff; rol al, 0xf8; call qword ptr [rax - 0x3f]; 
0x00000000004a4235: sar al, 0xff; rol al, 0xf8; call qword ptr [rax - 0x3f]; clc; jmp rax; 
0x00000000004a41b9: sar al, 0xff; xchg cl, al; clc; call qword ptr [rsi]; 
0x00000000004a41b9: sar al, 0xff; xchg cl, al; clc; call qword ptr [rsi]; ret 0xfff8; 
0x00000000004a43ed: sar al, 1; push qword ptr [rax - 0x2f]; clc; inc eax; sar al, cl; call qword ptr [rax]; 
0x00000000004a43f5: sar al, cl; call qword ptr [rax]; 
0x00000000004275e0: sar bh, 0xff; push qword ptr [rbp + 0x1a]; and edx, 0x3f; jne 0x272a6; mov rax, rdi; ret; 
0x000000000048bfaa: sar bh, 0xff; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000046855a: sar bl, 0xff; dec dword ptr [rax + 0x39]; ret 0x940f; 
0x000000000046691c: sar bl, 0xff; dec dword ptr [rax - 0x77]; ret 0x348; 
0x0000000000466f63: sar bl, 0xff; dec dword ptr [rcx + 0x29]; fmul dword ptr [rax - 0x77]; ret 0x348; 
0x0000000000463d33: sar bl, 0xff; inc esi; add al, 1; add dword ptr [rax - 0x7d], ecx; ret 0xf01; 
0x00000000004125c3: sar byte ptr [rax + 0xa], 0x48; mov dword ptr [rbx + 0x90], eax; pop rbx; ret; 
0x000000000048c19c: sar byte ptr [rax + 9], 0xf3; ret; 
0x000000000044a5e7: sar byte ptr [rax + rax*4], 0xf; test dword ptr [rcx], ecx; add eax, 0x8d480000; add cl, byte ptr [rax + 0x39]; ret; 
0x000000000044a965: sar byte ptr [rax + rax*4], 0xf; test dword ptr [rdi], ebp; add eax, 0x8d490000; add r9d, dword ptr [r8 + 0x39]; ret; 
0x000000000044a603: sar byte ptr [rax + rax*4], 0xf; test edi, esi; add al, 0; add byte ptr [rax - 0x73], cl; add ecx, dword ptr [rax + 0x39]; ret; 
0x000000000044a9a1: sar byte ptr [rax + rax*4], 0xf; xchg eax, esp; ret 0x8348; 
0x00000000004a3fdc: sar byte ptr [rax + rdi*8 - 1], 0x10; jle 0xa3fdb; jmp qword ptr [rax + 0x7f]; 
0x000000000044086a: sar byte ptr [rax - 0x3b], 0x48; add esp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000004a3fd0: sar byte ptr [rax - 8], 1; jmp qword ptr [rax]; 
0x00000000004c4030: sar byte ptr [rbx], 0xf8; call qword ptr [rbx + 5]; 
0x00000000004a49d0: sar byte ptr [rcx - 7], 0xff; sar byte ptr [rcx - 7], 1; jmp rax; 
0x00000000004a49d4: sar byte ptr [rcx - 7], 1; jmp rax; 
0x0000000000444ded: sar byte ptr [rcx], cl; ret; 
0x000000000047db12: sar byte ptr [rdi + 0x4b759c], 0xe8; ret; 
0x000000000047db9c: sar byte ptr [rdi + 0x4be2f8], 0x83; ret; 
0x00000000004796db: sar byte ptr [rdx + 1], cl; mov esi, 0x81; add rdi, 0x1c; mov eax, 0xca; syscall; 
0x0000000000421dd5: sar byte ptr [rdx], 0x48; lea eax, dword ptr [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000004bb07d: sar byte ptr [rip + 0x733db8a1], 0xd7; jo 0xbb0f7; mov ebp, 0xfb67d10d; ret; 
0x00000000004019a6: sar byte ptr [rsi + 0x20000], cl; mov edi, 0x4a1e2d; mov eax, 2; syscall; 
0x0000000000401935: sar byte ptr [rsi + 0x20001], cl; mov edi, 0x4a1e23; mov eax, 2; syscall; 
0x0000000000415a84: sar byte ptr [rsi + 0x49], cl; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x0000000000441cfc: sar byte ptr [rsi + 1], cl; mov rdi, rbp; call rbx; 
0x000000000044008b: sar byte ptr [rsi + 7], 0x48; movsxd rdi, ebx; mov eax, 0x48; syscall; 
0x000000000044e0b1: sar byte ptr [rsi + 8], 0x83; call 0x84869bb; pop rbx; ret; 
0x00000000004bb19f: sar byte ptr [rsi + rax*2], 0xf8; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x0000000000436887: sar ch, 0xff; jmp qword ptr [rdx - 0xf]; 
0x00000000004145a6: sar ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000004429e9: sar ch, 0xff; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004429dc: sar ch, 0xff; mov rdi, qword ptr [r14]; call rbx; 
0x000000000040afb6: sar cl, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000046d19a: sar dh, 0xff; jmp qword ptr [rsi - 0x70]; 
0x00000000004a3eb8: sar dh, 1; idiv edi; movabs al, byte ptr [0x40fff80070fff7ff]; add eax, edi; call qword ptr [rax]; 
0x0000000000413cd7: sar dword ptr [rax + 2], 1; syscall; 
0x0000000000436245: sar dword ptr [rax + rcx*2 + 0x11], 1; imul edi, ebp, 0x487cd162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000043624c: sar dword ptr [rax + rcx*2 + 0x11], 1; jno 0x36250; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000436253: sar dword ptr [rax + rcx*2 + 0x11], 1; jns 0x36258; ret; 
0x000000000040053e: sar dword ptr [rcx], 1; ret 0xffb8; 
0x00000000004033fe: sar dword ptr [rdi + 0x6ccfe0], cl; call rbx; 
0x0000000000481019: sar dword ptr [rdi + rdi*8 - 1], cl; mov qword ptr [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000441a6d: sar dword ptr [rdx + 1], cl; mov esi, 1; mov rdi, r12; call rbx; 
0x0000000000441ceb: sar dword ptr [rdx + 1], cl; mov esi, 2; mov rdi, r12; call rbx; 
0x0000000000441939: sar dword ptr [rdx + 2], cl; mov esi, 1; mov rdi, r13; call rbx; 
0x0000000000441a5e: sar dword ptr [rdx + 2], cl; mov esi, 2; mov rdi, r13; call rbx; 
0x00000000004418b1: sar dword ptr [rdx + 3], cl; mov esi, 1; mov rdi, r14; call rbx; 
0x000000000044192a: sar dword ptr [rdx + 3], cl; mov esi, 2; mov rdi, r14; call rbx; 
0x00000000004a4241: sar eax, -1; jo 0xa4208; clc; call qword ptr [rax]; 
0x00000000004a4241: sar eax, -1; jo 0xa4208; clc; call qword ptr [rax]; ret; 
0x00000000004a4201: sar eax, -1; mov eax, edx; clc; ljmp ptr [rbx]; ret; 
0x00000000004a43b1: sar eax, 1; call qword ptr [rax - 0x2e]; 
0x00000000004a43f1: sar eax, 1; inc eax; sar al, cl; call qword ptr [rax]; 
0x0000000000400701: sar eax, 1; pop rbx; mov qword ptr [rip + 0x2cb9a5], rax; pop rbp; pop r12; ret; 
0x000000000046d47c: sar eax, 2; lea eax, dword ptr [r8 - 1]; ret; 
0x0000000000411444: sar eax, 2; mov qword ptr [rsp + 0x20], rax; call qword ptr [rbx + 0x30]; 
0x000000000046063a: sar eax, 2; mov rdi, r14; mov rdx, rax; mov rax, qword ptr [r14 + 0xd8]; call qword ptr [rax + 0x38]; 
0x0000000000496d8b: sar eax, 3; pop r13; pop r14; pop r15; ret; 
0x0000000000426c91: sar eax, cl; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x0000000000416e12: sar ebp, -1; jmp qword ptr [rsi + 0x2e]; 
0x00000000004428b4: sar ebp, -1; mov rdi, qword ptr [r12]; call rbx; 
0x00000000004428a6: sar ebp, -1; mov rdi, qword ptr [r13]; call rbx; 
0x0000000000442899: sar ebp, -1; mov rdi, qword ptr [r14]; call rbx; 
0x00000000004bea69: sar ebp, -1; movabs al, byte ptr [0x18fffdc128fffdc1]; ret 0xfffd; 
0x00000000004bea8d: sar ebp, -1; sub cl, al; std; jmp rsp; 
0x00000000004bea6d: sar ebp, -1; sub cl, al; std; lcall ptr [rax]; ret 0xfffd; 
0x00000000004baf03: sar ecx, 1; jnp 0xbaec0; ret; 
0x000000000047ed1f: sar edi, 1; jmp qword ptr [rsi + 0xf]; 
0x0000000000460164: sar edi, 2; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000047f46d: sar edi, cl; call qword ptr [rbx - 0xa]; 
0x000000000040da34: sar edi, cl; jmp qword ptr [rsi + 0xf]; 
0x000000000045dc8e: sar edx, 2; call qword ptr [rax + 0x38]; 
0x0000000000426c97: sar edx, cl; movzx edx, dl; sub eax, edx; ret; 
0x0000000000424408: sar edx, cl; test rdx, rdx; je 0x24420; bsf rax, rdx; ret; 
0x00000000004243a7: sar edx, cl; test rdx, rdx; je 0x24430; bsf rax, rdx; ret; 
0x000000000046e0a7: sar edx, cl; test rdx, rdx; je 0x6e0d0; bsf rax, rdx; ret; 
0x000000000046e037: sar edx, cl; test rdx, rdx; je 0x6e0e0; bsf rax, rdx; ret; 
0x0000000000460163: sar r15, 2; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000046d47b: sar r8, 2; lea eax, dword ptr [r8 - 1]; ret; 
0x0000000000411443: sar r8, 2; mov qword ptr [rsp + 0x20], rax; call qword ptr [rbx + 0x30]; 
0x0000000000400700: sar rax, 1; pop rbx; mov qword ptr [rip + 0x2cb9a5], rax; pop rbp; pop r12; ret; 
0x0000000000460639: sar rax, 2; mov rdi, r14; mov rdx, rax; mov rax, qword ptr [r14 + 0xd8]; call qword ptr [rax + 0x38]; 
0x0000000000496d8a: sar rax, 3; pop r13; pop r14; pop r15; ret; 
0x0000000000426c90: sar rax, cl; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000045dc8d: sar rdx, 2; call qword ptr [rax + 0x38]; 
0x0000000000426c96: sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x0000000000424407: sar rdx, cl; test rdx, rdx; je 0x24420; bsf rax, rdx; ret; 
0x00000000004243a6: sar rdx, cl; test rdx, rdx; je 0x24430; bsf rax, rdx; ret; 
0x000000000046e0a6: sar rdx, cl; test rdx, rdx; je 0x6e0d0; bsf rax, rdx; ret; 
0x000000000046e036: sar rdx, cl; test rdx, rdx; je 0x6e0e0; bsf rax, rdx; ret; 
0x00000000004c0d45: sbb al, 0; add byte ptr [rax + 0x49], cl; cmc; call qword ptr [rsi]; 
0x00000000004c29c0: sbb al, 0; add byte ptr [rax], al; cmp dword ptr [rax], r8d; add al, bl; test al, 0xf6; jmp qword ptr [rsi]; 
0x00000000004c9a20: sbb al, 0; add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; test eax, 0x34980000; std; jmp qword ptr [rcx]; 
0x00000000004409f1: sbb al, 0; add byte ptr [rax], al; syscall; 
0x00000000004409f1: sbb al, 0; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x00000000004c4900: sbb al, 0; add byte ptr [rax], al; test byte ptr [rax], bl; add byte ptr [rax], bl; ret 0xfffd; 
0x000000000047d140: sbb al, 0x19; cli; jmp qword ptr [rsi - 0x70]; 
0x00000000004040a3: sbb al, 0x4d; movsxd rsp, esp; mov rdi, r12; mov eax, 3; syscall; 
0x00000000004c589c: sbb al, 0x68; add byte ptr [rax], al; mov al, 0x5b; cli; jmp rax; 
0x00000000004195f3: sbb al, 0x74; add eax, 0x5c415d5b; ret; 
0x00000000004c799c: sbb al, 0x89; add byte ptr [rax], al; push rax; push rbx; sti; jmp rdi; 
0x000000000047074e: sbb al, 0x89; ror byte ptr [rax + 0xf], 0xaf; ret; 
0x000000000048c4e0: sbb al, 0x97; clc; dec dword ptr [rax + 0x39]; ret; 
0x000000000047a70c: sbb al, 0xb; add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r15]; call rax; 
0x00000000004bef6c: sbb al, 0xd8; std; ljmp ptr [rdi + rdx*8 - 3]; inc dword ptr [rdi + rdx*8]; std; call rsp; 
0x00000000004c3ac1: sbb al, 0xf8; jmp qword ptr [rdx]; 
0x00000000004a4619: sbb al, 0xf9; call qword ptr [rax + 0x1c]; 
0x00000000004a4619: sbb al, 0xf9; call qword ptr [rax + 0x1c]; stc; jmp rax; 
0x00000000004a44dd: sbb al, 0xf9; call qword ptr [rdx]; 
0x00000000004a4421: sbb al, 0xf9; call rax; 
0x00000000004a4421: sbb al, 0xf9; call rax; sbb edi, ecx; jmp qword ptr [rax + 0x1b]; 
0x00000000004a441d: sbb al, 0xf9; inc dword ptr [rax + 0x1c]; stc; call rax; 
0x00000000004a441d: sbb al, 0xf9; inc dword ptr [rax + 0x1c]; stc; call rax; sbb edi, ecx; jmp qword ptr [rax + 0x1b]; 
0x00000000004a445d: sbb al, 0xf9; jmp qword ptr [rsi]; 
0x00000000004a461d: sbb al, 0xf9; jmp rax; 
0x00000000004a4461: sbb al, 0xf9; push qword ptr [rsi + 0x46fff91b]; sbb edi, ecx; call rsi; 
0x00000000004764c3: sbb al, 0xf; mov dh, 0x53; add dword ptr [rdx + rdx*8 - 0x7cb7eb8c], eax; ret; 
0x0000000000498282: sbb al, byte ptr [rbx + 0xa3c0fe0]; jne 0x9823d; nop word ptr [rax + rax]; call rbx; 
0x0000000000461775: sbb al, byte ptr [rcx - 0x7d]; ret; 
0x000000000048c111: sbb al, ch; or dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0xd8; ret; 
0x00000000004a0c98: sbb al, ch; ret 0xf7dd; 
0x00000000004a1090: sbb al, ch; retf 0xf7d9; dec dword ptr [rax - 0x77]; fucompi st(0); ret 0xf7d9; 
0x000000000045d281: sbb al, ch; test eax, 0x48ffff84; add esp, 0xd8; ret; 
0x000000000049a7a2: sbb al, cl; and eax, dword ptr [rax]; ret; 
0x00000000004a42f4: sbb bh, 0xf8; jmp qword ptr [rax - 0x1f]; 
0x00000000004c3a49: sbb bh, al; call qword ptr [rax]; 
0x0000000000480c45: sbb bh, byte ptr [rax]; test rax, rax; je 0x80c12; mov edi, 0x6cc140; call rax; 
0x00000000004a4431: sbb bh, cl; call qword ptr [rax]; 
0x00000000004a44ed: sbb bh, cl; call qword ptr [rdx + 0x1a]; 
0x00000000004a44ed: sbb bh, cl; call qword ptr [rdx + 0x1a]; stc; jmp rdx; 
0x00000000004a45b1: sbb bh, cl; inc esp; sbb ecx, edi; call qword ptr [rcx + rbx - 7]; jmp rsp; 
0x00000000004a462d: sbb bh, cl; jmp qword ptr [rax]; 
0x00000000004a446d: sbb bh, cl; jmp qword ptr [rsi + 0x1a]; 
0x00000000004a44f1: sbb bh, cl; jmp rdx; 
0x00000000004a4631: sbb bh, cl; push qword ptr [rax + 0x40fff919]; sbb ecx, edi; call rax; 
0x00000000004b9c85: sbb bl, byte ptr [rsi]; ret; 
0x00000000004159db: sbb bl, ch; fldenv dword ptr [rsi - 0x70]; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000043c65a: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, qword ptr [rdi + 0x1b]; ret; 
0x000000000043bfaa: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000043c61b: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, qword ptr [rdi + 0x19]; ret; 
0x000000000043bf6b: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000043c659: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, qword ptr [rdi + 0x1b]; ret; 
0x000000000043bfa9: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000043c61a: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, qword ptr [rdi + 0x19]; ret; 
0x000000000043bf6a: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000049e4f8: sbb byte ptr [r13 + 0x31], r8b; ror byte ptr [rbp - 0x75], 0x51; or byte ptr [rbp + 0x39], cl; ret 0x4776; 
0x0000000000480f84: sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x0000000000415610: sbb byte ptr [r8 - 0x77], r9b; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x000000000049f8eb: sbb byte ptr [r8 - 0x7d], r9b; ret; 
0x0000000000415ece: sbb byte ptr [r8], al; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000041119a: sbb byte ptr [r9 - 0x77], r9b; sub byte ptr [r8 + 1], r9b; ret 0x8949; 
0x000000000048c7f6: sbb byte ptr [r9], sil; ror byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x00000000004167bd: sbb byte ptr [rax + 0x39], cl; and byte ptr [rsi + 0x1d], sil; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000047a35b: sbb byte ptr [rax + 0x39], cl; ret; 
0x0000000000480f85: sbb byte ptr [rax + 0x5a], bl; pop rbx; ret; 
0x0000000000417b73: sbb byte ptr [rax + 0x5bd88948], dl; pop rbp; pop r12; ret; 
0x000000000043f48a: sbb byte ptr [rax + 1], bh; pop rbx; pop rbp; ret; 
0x000000000049e4f2: sbb byte ptr [rax + rax], al; add byte ptr [rbx + rcx*4 + 0x4d], cl; sbb byte ptr [rbp + 0x31], al; ror byte ptr [rbp - 0x75], 0x51; or byte ptr [rbp + 0x39], cl; ret 0x4776; 
0x0000000000447f8e: sbb byte ptr [rax - 0x73], cl; push rsp; and al, 0x48; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004488f1: sbb byte ptr [rax - 0x73], cl; push rsp; and al, 0x48; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000448ce1: sbb byte ptr [rax - 0x75], cl; and al, 0x28; call rax; 
0x000000000040f18c: sbb byte ptr [rax - 0x75], cl; jo 0xf1b1; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000040f1b4: sbb byte ptr [rax - 0x75], cl; js 0xf1d9; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x00000000004155d9: sbb byte ptr [rax - 0x75], cl; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000415609: sbb byte ptr [rax - 0x77], cl; adc byte ptr [r8 - 0x77], r9b; sbb byte ptr [r8 - 0x77], r9b; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x000000000046be3a: sbb byte ptr [rax - 0x77], cl; call 0x5c481b9d; pop r13; ret; 
0x000000000044e1da: sbb byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x00000000004018bc: sbb byte ptr [rax - 0x77], cl; fucompi st(0); retf; idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x00000000004127e4: sbb byte ptr [rax - 0x77], cl; jae 0x127f9; mov qword ptr [rbx + 0x30], rsi; mov qword ptr [rbx + 0x28], rsi; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x0000000000415611: sbb byte ptr [rax - 0x77], cl; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000410ef1: sbb byte ptr [rax - 0x77], cl; sub byte ptr [rax - 0x77], cl; ret 0x9e9; 
0x000000000041e8f7: sbb byte ptr [rax - 0x77], cl; xor dword ptr [rax - 0x7d], ecx; ret 0x4810; 
0x000000000042d186: sbb byte ptr [rax - 0x7d], cl; out dx, al; adc byte ptr [rax - 0x75], cl; sbb byte ptr [rax - 0x7d], r9b; ret 0x4802; 
0x000000000042d18e: sbb byte ptr [rax - 0x7d], cl; ret 0x4802; 
0x000000000044a084: sbb byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x000000000049f8ec: sbb byte ptr [rax - 0x7d], cl; ret; 
0x000000000042d18d: sbb byte ptr [rax - 0x7d], r9b; ret 0x4802; 
0x0000000000415ecf: sbb byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000043fd31: sbb byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x000000000043fd31: sbb byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x0000000000444c28: sbb byte ptr [rax], bh; test rax, rax; je 0x44c3a; mov edi, 0x6cc140; call rax; 
0x000000000049a3d9: sbb byte ptr [rax], bh; test rax, rax; je 0x9a3eb; mov edi, 0x6cc140; call rax; 
0x000000000049e4f9: sbb byte ptr [rbp + 0x31], al; ror byte ptr [rbp - 0x75], 0x51; or byte ptr [rbp + 0x39], cl; ret 0x4776; 
0x000000000046fce8: sbb byte ptr [rbp + 0x31], al; ror byte ptr [rcx + rcx*4 - 0xa], 0x48; lea edx, dword ptr [rsp + 0x48]; mov rdi, r12; call rbx; 
0x0000000000411702: sbb byte ptr [rbp + rcx*4 + 0x44], cl; and al, 0x20; mov rdi, rax; call qword ptr [rax + 8]; 
0x000000000046d7a5: sbb byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x10; call rbx; 
0x00000000004455c9: sbb byte ptr [rbp - 0x77], cl; int1; call rbx; 
0x0000000000417723: sbb byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000042d5d1: sbb byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000004115b9: sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000042763f: sbb byte ptr [rbx + rcx*4 + 0x5e], cl; and byte ptr [rbx + rcx*4 + 0x66], cl; sub byte ptr [rbx + rcx*4 + 0x6e], cl; xor byte ptr [rbx + rcx*4 + 0x76], cl; cmp byte ptr [rax + 0xf], cl; ret; 
0x0000000000416f47: sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x000000000046d2eb: sbb byte ptr [rcx + 0x5bc0310b], cl; ret; 
0x000000000047a279: sbb byte ptr [rcx + 3], cl; add al, 0x24; call rax; 
0x000000000041bfe9: sbb byte ptr [rcx + rcx*4 + 0x54], cl; and al, 0x10; call rax; 
0x00000000004114b7: sbb byte ptr [rcx + rcx*4 + 0x54], cl; and al, 0x10; lea r8, qword ptr [rsp + 0x30]; lea rsi, qword ptr [rsp + 0x20]; call qword ptr [rbx + 8]; 
0x000000000046d883: sbb byte ptr [rcx + rcx*4 - 0x19], cl; call rbx; 
0x0000000000417702: sbb byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000041d643: sbb byte ptr [rcx + rcx*4 - 0x40], cl; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041d4d3: sbb byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; ret; 
0x0000000000411493: sbb byte ptr [rcx - 0x77], cl; ret 0x8b49; 
0x000000000041119b: sbb byte ptr [rcx - 0x77], cl; sub byte ptr [r8 + 1], r9b; ret 0x8949; 
0x000000000046d8d7: sbb byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x000000000048c7f7: sbb byte ptr [rcx], dh; ror byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x00000000004116fb: sbb byte ptr [rdi + 0x50], dl; mov rax, qword ptr [rsp + 0x18]; lea r8, qword ptr [rsp + 0x20]; mov rdi, rax; call qword ptr [rax + 8]; 
0x00000000004c1408: sbb byte ptr [rdi - 0xb], bl; jmp qword ptr [rax]; 
0x000000000041f022: sbb byte ptr [rdi], cl; test edi, ebp; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x00000000004a4430: sbb byte ptr [rdx], 0xf9; call qword ptr [rax]; 
0x000000000045d2fb: sbb byte ptr [rdx], al; add byte ptr [rax], al; movsxd rbx, edx; mov rdx, rbx; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x00000000004c5e68: sbb byte ptr [rsi + 0x200e4103], al; add dword ptr [rax + rbp*2], 0xa; ret; 
0x00000000004c0e18: sbb byte ptr [rsi + 0x200e4103], al; add dword ptr [rsi], 0xa; ret; 
0x00000000004c0a08: sbb byte ptr [rsi + 0x200e4403], al; add dword ptr [rdx + rax], -0xc; ret; 
0x00000000004c3360: sbb byte ptr [rsi + 0x200e4403], al; add dword ptr [rsp + rbp*2], 0xa; ret; 
0x000000000046f619: sbb byte ptr [rsi + 0x4b], bl; add al, ch; sub ecx, edi; jmp qword ptr [rsi + 0xf]; 
0x00000000004a4310: sbb ch, 0xf8; inc dword ptr [rax - 0x21]; clc; jmp qword ptr [rax]; 
0x000000000049a7d4: sbb ch, ah; std; dec dword ptr [rax - 0x77]; add ebx, dword ptr [rax + 0x5a]; pop rbx; ret; 
0x00000000004736e0: sbb ch, bh; inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x66; syscall; 
0x00000000004c1f08: sbb ch, cl; cmc; jmp rdx; 
0x00000000004a4441: sbb cl, bh; call qword ptr [rax + 0x18]; 
0x00000000004a4441: sbb cl, bh; call qword ptr [rax + 0x18]; stc; jmp rax; 
0x00000000004a463d: sbb cl, bh; jmp qword ptr [rax + 0x18]; 
0x00000000004a4501: sbb cl, bh; jmp qword ptr [rdx]; 
0x00000000004a4445: sbb cl, bh; jmp rax; 
0x000000000043ff65: sbb cl, byte ptr [rax + 0x63]; test byte ptr [rax + 0x63], 0xff; mov eax, 0x48; syscall; 
0x0000000000413635: sbb cl, byte ptr [rax - 0x39]; ret 0xffd0; 
0x0000000000423f8d: sbb cl, byte ptr [rdi]; xchg ah, bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042aa2d: sbb cl, byte ptr [rdi]; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000423b7d: sbb cl, byte ptr [rdi]; xchg ah, ch; add eax, 0x83480000; ret 0xeb10; 
0x0000000000423689: sbb cl, byte ptr [rdi]; xchg al, ah; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000423e99: sbb cl, byte ptr [rdi]; xchg al, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042c67a: sbb cl, byte ptr [rdi]; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000042be9a: sbb cl, byte ptr [rdi]; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000042c28a: sbb cl, byte ptr [rdi]; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042baaa: sbb cl, byte ptr [rdi]; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b58d: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042ad6d: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000042390d: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042a54d: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x0000000000423c4d: sbb cl, byte ptr [rdi]; xchg byte ptr [rax - 0x7cb80000], bl; ret 0xeb10; 
0x0000000000423f69: sbb cl, byte ptr [rdi]; xchg byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042bc49: sbb cl, byte ptr [rdi]; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000424039: sbb cl, byte ptr [rdi]; xchg byte ptr [rax], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b0ad: sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042a88d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042a06d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000042b24d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x0000000000423ded: sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004235dd: sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rcx - 0x7cb80000], cl; ret 0xeb10; 
0x00000000004239dd: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi + rax - 0x7cb80000], cl; ret 0xeb10; 
0x000000000042c13a: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b95a: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042ca6a: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000423ebd: sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rax - 0x7cb80000], ch; ret 0xeb10; 
0x00000000004236ad: sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x000000000042a3ad: sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042374f: sbb cl, byte ptr [rdi]; xchg byte ptr [rdx], bl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000423aad: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi + rax - 0x7cb80000], bh; ret 0xeb10; 
0x000000000042a4e3: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b1e3: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042ad03: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042c03b: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042c96b: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000423d1d: sbb cl, byte ptr [rdi]; xchg byte ptr [rsp + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042b523: sbb cl, byte ptr [rdi]; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a823: sbb cl, byte ptr [rdi]; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x000000000042a343: sbb cl, byte ptr [rdi]; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b043: sbb cl, byte ptr [rdi]; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x000000000042c18b: sbb cl, byte ptr [rdi]; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042b9ab: sbb cl, byte ptr [rdi]; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000423773: sbb cl, byte ptr [rdi]; xchg dh, dh; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000049c974: sbb dh, bh; jmp qword ptr [rsi + 0xf]; 
0x000000000043ff02: sbb dh, byte ptr [rax + rax]; add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 1; syscall; 
0x000000000049ec32: sbb dh, cl; and al, byte ptr [rax]; mov qword ptr [rsi + 0x28], rax; ret; 
0x0000000000413cce: sbb dh, dh; je 0x13cd5; je 0x13d40; movsxd rdx, ecx; mov eax, 2; syscall; 
0x000000000048f8f8: sbb dword ptr [r8], r8d; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000419c36: sbb dword ptr [rax + 0x39], ecx; ror byte ptr [rdi], 1; test byte ptr [rax], dh; add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x000000000049d7dc: sbb dword ptr [rax - 0x80], eax; call qword ptr [rax]; 
0x000000000048f881: sbb dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000048f8f9: sbb dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000443254: sbb dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000443254: sbb dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x0000000000453fc8: sbb dword ptr [rbx - 0x4a743], eax; call qword ptr [rax]; 
0x0000000000416479: sbb dword ptr [rbx - 0x7cb70042], -0x3c; sub byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004bc53d: sbb dword ptr [rbx], edx; mov ch, 0x99; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x000000000045a677: sbb dword ptr [rcx], eax; add byte ptr [rax - 0x77], cl; ret 0x858b; 
0x000000000043e167: sbb eax, -1; ret; 
0x0000000000413b40: sbb eax, 0; add byte ptr [rax], al; call qword ptr [rax + 0x20]; 
0x0000000000455e6d: sbb eax, 0; add byte ptr [rax], al; mov dword ptr [rbp - 0x4d8], r9d; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000049a148: sbb eax, 0; add byte ptr [rax], al; mov ecx, ebp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x00000000004137a2: sbb eax, 0; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004136fa: sbb eax, 0; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; mov rbp, r12; call qword ptr [rax + 0x18]; 
0x0000000000413981: sbb eax, 0; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x00000000004165ac: sbb eax, 0; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x0000000000415a89: sbb eax, 0; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x000000000041576e: sbb eax, 0; add byte ptr [rax], al; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x00000000004158de: sbb eax, 0; add byte ptr [rax], al; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x28]; jmp rax; 
0x0000000000454dda: sbb eax, 0; add byte ptr [rax], al; mov rdx, r12; mov rsi, r8; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000046b5b7: sbb eax, 0; add byte ptr [rax], al; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000412ecb: sbb eax, 0; add byte ptr [rax], al; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000453e3d: sbb eax, 0; add byte ptr [rax], al; mov rdx, r13; mov rsi, qword ptr [rbp - 0x4a8]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004137f9: sbb eax, 0; add byte ptr [rax], al; mov rdx, r14; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000413e98: sbb eax, 0; add byte ptr [rax], al; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x00000000004564b2: sbb eax, 0; add byte ptr [rax], al; mov rsi, qword ptr [rbp - 0x4e0]; mov rdi, rbx; mov rdx, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x00000000004133eb: sbb eax, 0; add byte ptr [rax], al; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x000000000041091e: sbb eax, 0; add byte ptr [rax], al; mov rsi, r14; mov rdi, rbx; sub rdx, r14; call qword ptr [rax + 0x70]; 
0x00000000004583b2: sbb eax, 0; add byte ptr [rax], al; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004138ef: sbb eax, 0; add byte ptr [rax], al; or esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004539fc: sbb eax, 0; add byte ptr [rax], al; sub rdx, rsi; call qword ptr [rax + 0x38]; 
0x0000000000414f60: sbb eax, 0; add byte ptr [rax], al; xor edx, edx; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x000000000040ff92: sbb eax, 0; add byte ptr [rax], al; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x00000000004434b5: sbb eax, 0; leave; ret; 
0x00000000004a4459: sbb eax, 0x1c96fff9; stc; jmp qword ptr [rsi]; 
0x00000000004a4419: sbb eax, 0x1cb0fff9; stc; inc dword ptr [rax + 0x1c]; stc; call rax; 
0x00000000004a4615: sbb eax, 0x1cc0fff9; stc; call qword ptr [rax + 0x1c]; 
0x00000000004a4615: sbb eax, 0x1cc0fff9; stc; call qword ptr [rax + 0x1c]; stc; jmp rax; 
0x00000000004a4415: sbb eax, 0x1d20fff9; stc; push qword ptr [rax + 0x40fff91c]; sbb al, 0xf9; call rax; 
0x00000000004be3b9: sbb eax, 0x1ef0fffd; std; call rax; 
0x000000000049f870: sbb eax, 0x22dd0b; jne 0x9f858; pop rbx; ret; 
0x0000000000435c45: sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435c40: sbb eax, 0x477f0ff3; sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000045ec93: sbb eax, 0x48000000; mov edi, ecx; call qword ptr [rax + 0x38]; 
0x0000000000413d87: sbb eax, 0x63488a74; std; mov eax, 3; syscall; 
0x0000000000443263: sbb eax, 0x66c30000; nop dword ptr [rax + rax]; mov eax, 0x63; syscall; 
0x000000000043c377: sbb eax, 0x68654; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043c342: sbb eax, 0x68689; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043c316: sbb eax, 0x686b5; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043c300: sbb eax, 0x686cb; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043c2de: sbb eax, 0x686ed; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043c2b9: sbb eax, 0x68712; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043c29c: sbb eax, 0x6872f; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043c244: sbb eax, 0x68787; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bd57: sbb eax, 0x68bf4; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bd22: sbb eax, 0x68c29; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bcf6: sbb eax, 0x68c55; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bce0: sbb eax, 0x68c6b; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bcbe: sbb eax, 0x68c8d; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bc99: sbb eax, 0x68cb2; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bc7c: sbb eax, 0x68ccf; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bc24: sbb eax, 0x68d27; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000435293: sbb eax, 0x6f178; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434f35: sbb eax, 0x6f4d6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004350e0: sbb eax, 0x6f56b; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434db5: sbb eax, 0x6f656; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434e78: sbb eax, 0x6f7d3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434c35: sbb eax, 0x6f7d6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434cf8: sbb eax, 0x6f953; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434ab5: sbb eax, 0x6f956; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434b78: sbb eax, 0x6fad3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434935: sbb eax, 0x6fad6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004349f9: sbb eax, 0x6fc52; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004347b5: sbb eax, 0x6fc56; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434878: sbb eax, 0x6fdd3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434635: sbb eax, 0x6fdd6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004346f8: sbb eax, 0x6ff53; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004344b5: sbb eax, 0x6ff56; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434578: sbb eax, 0x700d3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434335: sbb eax, 0x700d6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004343f8: sbb eax, 0x70253; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004341b5: sbb eax, 0x70256; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434278: sbb eax, 0x703d3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434035: sbb eax, 0x703d6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004340f8: sbb eax, 0x70553; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433eb5: sbb eax, 0x70556; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433f78: sbb eax, 0x706d3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433d35: sbb eax, 0x706d6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433df8: sbb eax, 0x70853; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433bb5: sbb eax, 0x70856; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433c78: sbb eax, 0x709d3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433a35: sbb eax, 0x709d6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004338bc: sbb eax, 0x70b4f; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433af8: sbb eax, 0x70b53; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433978: sbb eax, 0x70cd3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004336bd: sbb eax, 0x70d4e; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043383b: sbb eax, 0x70e10; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004336df: sbb eax, 0x70f6c; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433186: sbb eax, 0x710c5; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004330c9: sbb eax, 0x71182; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000432fde: sbb eax, 0x7126d; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000432f13: sbb eax, 0x71338; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431ef2: sbb eax, 0x72359; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431e54: sbb eax, 0x723f7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431da2: sbb eax, 0x724a9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431d04: sbb eax, 0x72547; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431c52: sbb eax, 0x725f9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431bb4: sbb eax, 0x72697; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431b02: sbb eax, 0x72749; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431a64: sbb eax, 0x727e7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004319b2: sbb eax, 0x72899; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431914: sbb eax, 0x72937; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431862: sbb eax, 0x729e9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004317c4: sbb eax, 0x72a87; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431712: sbb eax, 0x72b39; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431674: sbb eax, 0x72bd7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004315c2: sbb eax, 0x72c89; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431529: sbb eax, 0x72d22; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431472: sbb eax, 0x72dd9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004313d4: sbb eax, 0x72e77; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431322: sbb eax, 0x72f29; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431284: sbb eax, 0x72fc7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004311d2: sbb eax, 0x73079; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431134: sbb eax, 0x73117; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000431082: sbb eax, 0x731c9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430fe4: sbb eax, 0x73267; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430f32: sbb eax, 0x73319; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430e94: sbb eax, 0x733b7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430de2: sbb eax, 0x73469; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430d44: sbb eax, 0x73507; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430c92: sbb eax, 0x735b9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430bf4: sbb eax, 0x73657; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430b48: sbb eax, 0x73703; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430a57: sbb eax, 0x737f4; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430998: sbb eax, 0x738b3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043092e: sbb eax, 0x7391d; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043083f: sbb eax, 0x73a0c; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043077a: sbb eax, 0x73ad1; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000042fa55: sbb eax, 0x746b6; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f9db: sbb eax, 0x74730; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f94c: sbb eax, 0x747bf; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f741: sbb eax, 0x749ca; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f60f: sbb eax, 0x74afc; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f549: sbb eax, 0x74bc2; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f4cb: sbb eax, 0x74c40; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f434: sbb eax, 0x74cd7; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f238: sbb eax, 0x74ed3; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f107: sbb eax, 0x75004; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042eff8: sbb eax, 0x75113; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000411944: sbb eax, 0x8c48348; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x00000000004003c9: sbb eax, 0xbe000000; push 0x48004a2a; mov edi, ebx; mov eax, 1; syscall; 
0x0000000000400401: sbb eax, 0xbe000000; xchg byte ptr [rdx], ch; add byte ptr [rax - 0x77], cl; fistp qword ptr [rax + 1]; syscall; 
0x00000000004167c3: sbb eax, 0xd8838b48; add byte ptr [rax], al; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000046d3ba: sbb eax, 0xd8938b48; add byte ptr [rax], al; add byte ptr [rcx - 0x2076b73a], cl; call qword ptr [rdx + 0x30]; 
0x000000000047ccd5: sbb eax, 0xdb31fffa; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000004c0bf5: sbb eax, dword ptr [rax]; add byte ptr [rax + 0x42], bl; cmc; call qword ptr [rcx + 2]; 
0x000000000048f6a1: sbb eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000048f719: sbb eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000049bd41: sbb eax, dword ptr [rcx]; add byte ptr [rax], al; movzx eax, al; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x000000000048a38a: sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x000000000049d5b1: sbb eax, eax; cmp qword ptr [rsi + 8], rcx; cmova eax, edx; ret; 
0x000000000043e165: sbb eax, eax; sbb eax, -1; ret; 
0x00000000004209e1: sbb ebp, dword ptr [rcx]; add al, byte ptr [rax]; add rsp, 0x80; xor eax, eax; pop rbx; ret; 
0x0000000000400f61: sbb ebp, edi; add eax, dword ptr [rax]; nop; pop rbp; ret; 
0x00000000004be3b1: sbb ebp, edi; push qword ptr [rax]; sbb edi, ebp; call qword ptr [rax]; 
0x00000000004957b9: sbb ebx, 0x89000001; ret; 
0x00000000004583af: sbb ecx, dword ptr [rax - 0x75]; sbb eax, 0; add byte ptr [rax], al; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000045d0b0: sbb ecx, dword ptr [rax - 0x77]; ret 0x6348; 
0x000000000048106c: sbb ecx, dword ptr [rax - 0x7d]; jl 0x81095; sub byte ptr [rax], al; jne 0x81080; add rsp, 0x38; ret; 
0x0000000000447727: sbb ecx, dword ptr [rcx + 0x50895048]; push rsp; ret; 
0x00000000004a45b5: sbb ecx, edi; call qword ptr [rcx + rbx - 7]; jmp rsp; 
0x00000000004a4479: sbb ecx, edi; call qword ptr [rsi]; 
0x00000000004a4639: sbb ecx, edi; call rax; 
0x00000000004a4639: sbb ecx, edi; call rax; sbb cl, bh; jmp qword ptr [rax + 0x18]; 
0x00000000004a4635: sbb ecx, edi; inc dword ptr [rax + 0x19]; stc; call rax; 
0x00000000004a4635: sbb ecx, edi; inc dword ptr [rax + 0x19]; stc; call rax; sbb cl, bh; jmp qword ptr [rax + 0x18]; 
0x00000000004a443d: sbb ecx, edi; inc eax; sbb cl, bh; call qword ptr [rax + 0x18]; 
0x00000000004a443d: sbb ecx, edi; inc eax; sbb cl, bh; call qword ptr [rax + 0x18]; stc; jmp rax; 
0x00000000004a45b9: sbb ecx, edi; jmp rsp; 
0x00000000004a4439: sbb ecx, edi; push qword ptr [rax]; sbb ecx, edi; inc eax; sbb cl, bh; call qword ptr [rax + 0x18]; 
0x00000000004c3c61: sbb edi, eax; call qword ptr [rsi + 0xb]; 
0x00000000004be3b5: sbb edi, ebp; call qword ptr [rax]; 
0x00000000004be3b5: sbb edi, ebp; call qword ptr [rax]; sbb eax, 0x1ef0fffd; std; call rax; 
0x00000000004a4629: sbb edi, ecx; call qword ptr [rax + 0x20fff91a]; sbb bh, cl; push qword ptr [rax + 0x40fff919]; sbb ecx, edi; call rax; 
0x00000000004a4469: sbb edi, ecx; call rsi; 
0x00000000004a4469: sbb edi, ecx; call rsi; sbb bh, cl; jmp qword ptr [rsi + 0x1a]; 
0x00000000004a4465: sbb edi, ecx; inc dword ptr [rsi + 0x1b]; stc; call rsi; 
0x00000000004a4465: sbb edi, ecx; inc dword ptr [rsi + 0x1b]; stc; call rsi; sbb bh, cl; jmp qword ptr [rsi + 0x1a]; 
0x00000000004a44e9: sbb edi, ecx; inc edx; sbb bh, cl; call qword ptr [rdx + 0x1a]; 
0x00000000004a44e9: sbb edi, ecx; inc edx; sbb bh, cl; call qword ptr [rdx + 0x1a]; stc; jmp rdx; 
0x00000000004a4425: sbb edi, ecx; jmp qword ptr [rax + 0x1b]; 
0x00000000004a44e5: sbb edi, ecx; push qword ptr [rdx]; sbb edi, ecx; inc edx; sbb bh, cl; call qword ptr [rdx + 0x1a]; 
0x000000000048bd41: sbb edx, ebx; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000047d141: sbb edx, edi; jmp qword ptr [rsi - 0x70]; 
0x00000000004bf1c1: sbb esi, esp; call qword ptr [rdx]; 
0x0000000000413dfc: sbb esp, dword ptr [rsp + rax*2 - 0x77]; add byte ptr gs:[rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000048bd40: sbb r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x00000000004159da: sbb r11b, bpl; fldenv dword ptr [rsi - 0x70]; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000004a4468: sbb r15d, ecx; call rsi; 
0x00000000004a4468: sbb r15d, ecx; call rsi; sbb bh, cl; jmp qword ptr [rsi + 0x1a]; 
0x0000000000443262: sbb rax, 0x66c30000; nop dword ptr [rax + rax]; mov eax, 0x63; syscall; 
0x00000000004c9f4d: scasb al, byte ptr [rdi]; add byte ptr [rax], al; rol byte ptr [rdx - 3], 1; call qword ptr [rcx + 1]; 
0x00000000004265ad: scasb al, byte ptr [rdi]; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000042c6ce: scasb al, byte ptr [rdi]; add eax, 0x83480000; ret 0xe910; 
0x00000000004330c5: scasb al, byte ptr [rdi]; clc; lea r11, qword ptr [rip + 0x71182]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000432f0f: scasb al, byte ptr [rdi]; clc; lea r11, qword ptr [rip + 0x71338]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000401d7c: scasb al, byte ptr [rdi]; insb byte ptr [rdi], dx; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000045072c: scasb al, byte ptr [rdi]; or al, byte ptr [rax]; add byte ptr [rax - 0x75], cl; jl 0x50758; or byte ptr [rax - 0x7d], cl; call qword ptr [rbx]; 
0x000000000049ed35: scasb al, byte ptr [rdi]; ret 0x22; 
0x00000000004a14e6: scasb al, byte ptr [rdi]; ret; 
0x0000000000447081: scasb al, byte ptr [rdi]; sti; jmp qword ptr [rsi - 0x70]; 
0x000000000042c7cd: scasd eax, dword ptr [rdi]; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000048c82b: scasd eax, dword ptr [rdi]; add byte ptr [rax], al; add byte ptr [rsi + 0x48c740], bh; mov edi, 0x6cd9c4; call rdx; 
0x000000000042604d: scasd eax, dword ptr [rdi]; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x0000000000445f90: scasd eax, dword ptr [rdi]; add eax, dword ptr [rax]; mov rdi, r12; mov rax, qword ptr [rbp - 0x58]; call rax; 
0x00000000004106f0: scasd eax, dword ptr [rdi]; cwde; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbp + 0x20]; 
0x00000000004707fd: scasd eax, dword ptr [rdi]; ret 0x25; 
0x000000000041103c: scasd eax, dword ptr [rdi]; ret 0x2948; 
0x000000000043ecaa: scasd eax, dword ptr [rdi]; ret 0x72e9; 
0x0000000000421738: scasd eax, dword ptr [rdi]; ret 0x8948; 
0x0000000000401c53: scasd eax, dword ptr [rdi]; ret 0x8b48; 
0x000000000043ec95: scasd eax, dword ptr [rdi]; ret 0xaf0f; 
0x0000000000450630: scasd eax, dword ptr [rdi]; ret 0xc748; 
0x000000000049a57d: scasd eax, dword ptr [rdi]; ret 0xf48; 
0x0000000000401b34: scasd eax, dword ptr [rdi]; ret; 
0x00000000004432cc: setae al; ret; 
0x000000000047386e: sete al; add rsp, 0x48; movzx eax, al; ret; 
0x000000000041b61f: sete al; mov dword ptr [rip + 0x2b0137], r8d; mov rdi, r9; mov eax, 3; syscall; 
0x0000000000450309: sete al; movzx eax, al; mov dword ptr [rbx + 0x40], eax; xor eax, eax; pop rbx; ret; 
0x000000000041b61e: sete r8b; mov dword ptr [rip + 0x2b0137], r8d; mov rdi, r9; mov eax, 3; syscall; 
0x000000000048ca55: setne al; add rsp, 0x28; movzx eax, al; neg eax; ret; 
0x000000000049a373: setne al; add rsp, 8; movzx eax, al; neg eax; ret; 
0x00000000004173ac: setne al; neg eax; ret; 
0x00000000004330c4: sfence; lea r11, qword ptr [rip + 0x71182]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000432f0e: sfence; lea r11, qword ptr [rip + 0x71338]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000046e785: sgdt ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x00000000004a4264: shl bh, 1; clc; call rax; 
0x00000000004a40e4: shl byte ptr [rax - 0x5e0f0008], 1; clc; call qword ptr [rax]; 
0x0000000000481932: shl byte ptr [rdi + rax*8], 0x22; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x00000000004707f7: shl byte ptr [rip + 0x3d894800], 1; scasd eax, dword ptr [rdi]; ret 0x25; 
0x000000000043ef82: shl byte ptr [rip + 0x3ffc0000], cl; add eax, eax; div ecx; pop rbx; mov eax, eax; ret; 
0x000000000043ef6b: shl byte ptr [rip + 0x3fffc00], cl; div ecx; pop rbx; mov eax, eax; ret; 
0x000000000043e3af: shl byte ptr [rsi + 0x44], 0xf; out dx, eax; ret 0xf66; 
0x000000000043c753: shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000421f85: shl byte ptr [rsi + 0xf], 0xeb; ret 0xf66; 
0x000000000043056b: shl byte ptr [rsi + 0xf], 0xef; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x5173; 
0x0000000000430582: shl byte ptr [rsi + 0xf], 1; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x000000000046e337: shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x000000000046e326: shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x0000000000430461: shl byte ptr [rsi + 0xf], cl; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004a4260: shl ch, 1; clc; call rax; 
0x00000000004aff50: shl dword ptr [rax + rax], 0; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x24; 
0x000000000049a7a3: shl dword ptr [rbx], 0; ret; 
0x0000000000473ab2: shl dword ptr [rbx], 0x4e; adc byte ptr [rax - 0x73], cl; or al, 0x8e; add eax, dword ptr [rcx + rdx]; ret; 
0x00000000004996c1: shl dword ptr [rbx], 1; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004bb088: shl dword ptr [rdi - 5], 1; ret; 
0x00000000004304e6: shl dword ptr [rsi + 0xf], -0x11; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043e20b: shl dword ptr [rsi + 0xf], -0x26; ret; 
0x000000000046e322: shl dword ptr [rsi + 0xf], -0x29; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x000000000043c74b: shl dword ptr [rsi + 0xf], 0x74; fisub dword ptr [rsi + 0xf]; xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x000000000043059d: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x2373; 
0x0000000000430586: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x000000000043056f: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x5173; 
0x000000000042f02b: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000430501: shl dword ptr [rsi + 0xf], 1; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004268fc: shl dword ptr [rsi + 0xf], 1; xlatb; ret 0xc085; 
0x00000000004303c1: shl dword ptr [rsi + 0xf], cl; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004009dd: shl eax, 3; add rax, 0x6cdd60; mov qword ptr [rbp - 8], rax; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000040f1d1: shl eax, 5; mov rax, qword ptr [r13 + rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000444ea1: shl eax, cl; pop rbx; pop rbp; ret; 
0x00000000004244bb: shl ecx, 0x20; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000444e9e: shl ecx, 3; shl eax, cl; pop rbx; pop rbp; ret; 
0x000000000048a8ec: shl ecx, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000048a877: shl ecx, cl; mov qword ptr [rdi - 8], r9; ret; 
0x000000000048a846: shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x000000000042d311: shl ecx, cl; or r9, r10; mov qword ptr [rdi], r9; pop rbx; ret; 
0x000000000042da1a: shl edx, 0x30; or rax, rdx; bsf rax, rax; lea rax, qword ptr [rdi + rax]; ret; 
0x000000000047d1c4: shl edx, 4; cmp r8, qword ptr [rsi + rdx]; jae 0x7d171; xor eax, eax; ret; 
0x000000000048beea: shl esi, cl; mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000440549: shl esi, cl; std; dec dword ptr [rax - 0x77]; ret; 
0x000000000048a8eb: shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000048a876: shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x000000000048a845: shl r9, cl; mov qword ptr [rdi], r9; ret; 
0x000000000042d310: shl r9, cl; or r9, r10; mov qword ptr [rdi], r9; pop rbx; ret; 
0x00000000004009dc: shl rax, 3; add rax, 0x6cdd60; mov qword ptr [rbp - 8], rax; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000040f1d0: shl rax, 5; mov rax, qword ptr [r13 + rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000004244ba: shl rcx, 0x20; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000042da19: shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, qword ptr [rdi + rax]; ret; 
0x000000000047d1c3: shl rdx, 4; cmp r8, qword ptr [rsi + rdx]; jae 0x7d171; xor eax, eax; ret; 
0x000000000048bee9: shl rsi, cl; mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000048a8e4: shld eax, ecx, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000048a870: shld eax, ecx, cl; mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x000000000048a8e3: shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000048a86f: shld r8, r9, cl; mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x00000000004005a7: shr al, 0x93; ret; 
0x0000000000447264: shr al, 0x96; movabs al, byte ptr [0xf7840fc08548ffff]; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000481017: shr al, 0xd3; jl 0x8101b; dec dword ptr [rax - 0x77]; adc byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x00000000004736c7: shr bl, 0xbe; nop word ptr [rax + rax]; mov eax, 0x3f; syscall; 
0x00000000004012fe: shr bl, 0xd5; mov edx, 0x3c; nop word ptr cs:[rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000049cfb1: shr bl, 0xf6; nop; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x00000000004a426c: shr bl, 1; clc; jmp qword ptr [rax - 0x22]; 
0x00000000004468dd: shr bl, cl; ret 0x438b; 
0x000000000047349f: shr bl, cl; ret; 
0x0000000000403d4e: shr byte ptr [rax + rax + 0x41], 1; call rdi; 
0x00000000004015fc: shr byte ptr [rax + rax], 0xf6; ret 0x7420; 
0x00000000004c0710: shr byte ptr [rax], 1; cmc; call qword ptr [rax]; 
0x000000000044578a: shr byte ptr [rbx - 0x6f990005], cl; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000470ce3: shr byte ptr [rcx - 0x3e], cl; nop; add dword ptr [rax], eax; add byte ptr [rcx], bh; ror dword ptr [rdi], -0x6c; ret; 
0x0000000000413b3a: shr byte ptr [rcx], 0x4a; add byte ptr [rax - 0x75], cl; sbb eax, 0; add byte ptr [rax], al; call qword ptr [rax + 0x20]; 
0x000000000041397b: shr byte ptr [rcx], 0x4a; add byte ptr [rax - 0x75], cl; sbb eax, 0; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x000000000042efcf: shr byte ptr [rcx], 0xc8; ret; 
0x0000000000470de0: shr byte ptr [rcx], cl; ret 0x428d; 
0x000000000044d498: shr byte ptr [rcx], cl; ret; 
0x000000000046f5dd: shr byte ptr [rdx + 1], 0x31; leave; xor edx, edx; lea r9, qword ptr [rsp + 0x20]; lea rsi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000045c9e4: shr cl, 0x63; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000045ca5c: shr cl, 0x87; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x00000000004a4268: shr cl, 1; clc; call rax; 
0x000000000045f8a7: shr cl, cl; ret; 
0x000000000044387a: shr dword ptr [rax + rax + 0x48], -0x39; adc byte ptr [rax], sil; cmp byte ptr [rax + rax + 0x48], al; mov dword ptr [rax + 8], edx; ret; 
0x00000000004799a4: shr dword ptr [rax + rax + 0x5b], 0x5d; jmp rax; 
0x000000000049a3e6: shr dword ptr [rax + rax - 1], -0x30; add rsp, 0x20; mov rax, rbx; pop rbx; ret; 
0x0000000000480c52: shr dword ptr [rax + rax - 1], -0x30; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000049a48e: shr dword ptr [rax + rax - 1], -0x30; add rsp, 0x50; mov rax, rbx; pop rbx; ret; 
0x00000000004014b7: shr dword ptr [rax + rax], 0x48; add esp, 0x110; pop rbx; pop rbp; pop r12; ret; 
0x000000000043c79e: shr dword ptr [rax - 0x267af0e0], 1; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x0000000000427729: shr dword ptr [rdx], cl; add dword ptr [rax], eax; ret; 
0x0000000000426802: shr dword ptr [rsi + 0x2a], 0; adc byte ptr [rdx + 0x426230], bh; mov eax, 0x43e180; cmove rax, rdx; ret; 
0x000000000048c083: shr eax, 0x20; mov dword ptr [rsp - 0x14], eax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000004548dc: shr eax, 0x2e; in al, 0xff; dec dword ptr [rax - 0x7d]; jge 0x54916; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000049cf48: shr eax, 0x3f; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000043eeba: shr eax, 0xe; and eax, 0x3fc00; pop rbx; ret; 
0x000000000043ee99: shr eax, 6; and eax, 0x3fffc00; pop rbx; ret; 
0x00000000004424ec: shr ecx, cl; imul edi, ebx, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000044236c: shr ecx, cl; imul edi, ecx, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000044250c: shr ecx, cl; imul edi, edx, -1; jmp qword ptr [rsi + 0xf]; 
0x00000000004423ac: shr ecx, cl; lodsd eax, dword ptr [rsi]; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000048a9fc: shr ecx, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000048a981: shr ecx, cl; mov qword ptr [rdi + 8], r9; ret; 
0x000000000048a950: shr ecx, cl; mov qword ptr [rdi], r9; ret; 
0x000000000044230c: shr ecx, cl; pop rsp; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000046d583: shr edx, 2; sub eax, edx; ret; 
0x0000000000447263: shr r8b, 0x96; movabs al, byte ptr [0xf7840fc08548ffff]; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000048a9fb: shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000048a980: shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x000000000048a94f: shr r9, cl; mov qword ptr [rdi], r9; ret; 
0x000000000048c082: shr rax, 0x20; mov dword ptr [rsp - 0x14], eax; fld xword ptr [rsp - 0x18]; ret; 
0x000000000049cf47: shr rax, 0x3f; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000046d582: shr rdx, 2; sub eax, edx; ret; 
0x000000000048a9f4: shrd eax, ecx, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000048a97a: shrd eax, ecx, cl; mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x000000000048a9f3: shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000048a979: shrd r8, r9, cl; mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x00000000004af121: sldt word ptr [rax]; mov ebp, 0xc000000f; sldt word ptr [rax]; ret; 
0x000000000046cb37: sldt word ptr [rax]; mov rax, qword ptr [r13 + 0xd8]; mov esi, ebx; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x00000000004af129: sldt word ptr [rax]; ret; 
0x000000000043dd8f: stc; adc dword ptr [rdi], ecx; test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x000000000044696c: stc; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000041b152: stc; add eax, 0xf6410000; ret 0xf01; 
0x0000000000431c53: stc; and eax, 0x63490007; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004a4946: stc; call qword ptr [rax + 0x10fff93e]; and ecx, edi; jmp qword ptr [rax]; 
0x00000000004a4442: stc; call qword ptr [rax + 0x18]; 
0x00000000004a4442: stc; call qword ptr [rax + 0x18]; stc; jmp rax; 
0x00000000004a461a: stc; call qword ptr [rax + 0x1c]; 
0x00000000004a461a: stc; call qword ptr [rax + 0x1c]; stc; jmp rax; 
0x00000000004a462a: stc; call qword ptr [rax + 0x20fff91a]; sbb bh, cl; push qword ptr [rax + 0x40fff919]; sbb ecx, edi; call rax; 
0x00000000004a495a: stc; call qword ptr [rax + 0x74]; 
0x00000000004a495a: stc; call qword ptr [rax + 0x74]; stc; jmp qword ptr [rax + 0x74]; 
0x00000000004a4996: stc; call qword ptr [rax + 0x75]; 
0x00000000004a4996: stc; call qword ptr [rax + 0x75]; stc; jmp qword ptr [rax + 0x75]; 
0x00000000004a49ba: stc; call qword ptr [rax + 0x76]; 
0x00000000004a49ee: stc; call qword ptr [rax + 0x7a]; 
0x00000000004a49ee: stc; call qword ptr [rax + 0x7a]; stc; jmp qword ptr [rax + 0x7a]; 
0x00000000004a4886: stc; call qword ptr [rax + 0xd]; 
0x00000000004a4886: stc; call qword ptr [rax + 0xd]; stc; inc eax; or al, 0xf9; jmp qword ptr [rax]; 
0x00000000004a4682: stc; call qword ptr [rax + 0xe]; 
0x00000000004a49c2: stc; call qword ptr [rax - 0x4f00068a]; jbe 0xa49c4; call rax; 
0x00000000004a49a2: stc; call qword ptr [rax - 0x4f00068b]; jne 0xa49a4; call rax; 
0x00000000004a496a: stc; call qword ptr [rax - 0x5f00068c]; je 0xa496c; push qword ptr [rax - 0x3f00068c]; je 0xa4974; call rax; 
0x00000000004a4942: stc; call qword ptr [rax - 0x6f0006c4]; stc; call qword ptr [rax]; 
0x00000000004a4942: stc; call qword ptr [rax - 0x6f0006c4]; stc; call qword ptr [rax]; and ecx, edi; jmp qword ptr [rax]; 
0x00000000004a493a: stc; call qword ptr [rax - 0x6f0006c8]; cmp bh, cl; call qword ptr [rax - 0x6f0006c4]; stc; call qword ptr [rax]; 
0x00000000004a4432: stc; call qword ptr [rax]; 
0x00000000004a494a: stc; call qword ptr [rax]; and ecx, edi; jmp qword ptr [rax]; 
0x00000000004a49b2: stc; call qword ptr [rax]; jbe 0xa49b0; push qword ptr [rax]; jbe 0xa49b4; call qword ptr [rax + 0x76]; 
0x00000000004a498a: stc; call qword ptr [rax]; jne 0xa4988; jmp qword ptr [rax]; 
0x00000000004a45b6: stc; call qword ptr [rcx + rbx - 7]; jmp rsp; 
0x00000000004a44ee: stc; call qword ptr [rdx + 0x1a]; 
0x00000000004a44ee: stc; call qword ptr [rdx + 0x1a]; stc; jmp rdx; 
0x00000000004a44de: stc; call qword ptr [rdx]; 
0x00000000004a448a: stc; call qword ptr [rsi + 0x17]; 
0x00000000004a445a: stc; call qword ptr [rsi + 0x26fff91c]; sbb al, 0xf9; push qword ptr [rsi + 0x46fff91b]; sbb edi, ecx; call rsi; 
0x00000000004c51d2: stc; call qword ptr [rsi + 0x2b]; 
0x00000000004a47be: stc; call qword ptr [rsi + rcx + 0xe04fff9]; stc; push qword ptr [rbp + rcx - 7]; jmp rsp; 
0x00000000004a447a: stc; call qword ptr [rsi]; 
0x00000000004a4422: stc; call rax; 
0x00000000004a497a: stc; call rax; je 0xa4978; jmp rax; 
0x00000000004a49aa: stc; call rax; jne 0xa49a8; push rax; jne 0xa49ac; call qword ptr [rax]; 
0x00000000004a49d2: stc; call rax; jns 0xa49d0; jmp rax; 
0x00000000004a484a: stc; call rax; or al, 0xf9; jmp qword ptr [rax + 0xc]; 
0x00000000004a463a: stc; call rax; sbb cl, bh; jmp qword ptr [rax + 0x18]; 
0x00000000004a4422: stc; call rax; sbb edi, ecx; jmp qword ptr [rax + 0x1b]; 
0x000000000046fb79: stc; call rbx; 
0x00000000004c54ca: stc; call rdi; 
0x00000000004c55ca: stc; call rdx; 
0x00000000004a446a: stc; call rsi; 
0x00000000004a446a: stc; call rsi; sbb bh, cl; jmp qword ptr [rsi + 0x1a]; 
0x00000000004a458e: stc; call rsp; 
0x00000000004739b3: stc; cld; dec dword ptr [rax - 0x77]; add al, 0x24; mov eax, 0x14; syscall; 
0x000000000048109b: stc; dec dword ptr [rbx + 0x480c2444]; add esp, 0x38; ret; 
0x00000000004a4636: stc; inc dword ptr [rax + 0x19]; stc; call rax; 
0x00000000004a4636: stc; inc dword ptr [rax + 0x19]; stc; call rax; sbb cl, bh; jmp qword ptr [rax + 0x18]; 
0x00000000004a441e: stc; inc dword ptr [rax + 0x1c]; stc; call rax; 
0x00000000004a441e: stc; inc dword ptr [rax + 0x1c]; stc; call rax; sbb edi, ecx; jmp qword ptr [rax + 0x1b]; 
0x00000000004a4956: stc; inc dword ptr [rax + 0x74]; stc; call qword ptr [rax + 0x74]; 
0x00000000004a4956: stc; inc dword ptr [rax + 0x74]; stc; call qword ptr [rax + 0x74]; stc; jmp qword ptr [rax + 0x74]; 
0x00000000004a49ea: stc; inc dword ptr [rax + 0x7a]; stc; call qword ptr [rax + 0x7a]; 
0x00000000004a49ea: stc; inc dword ptr [rax + 0x7a]; stc; call qword ptr [rax + 0x7a]; stc; jmp qword ptr [rax + 0x7a]; 
0x00000000004a4a12: stc; inc dword ptr [rax + 0x7b]; stc; jmp qword ptr [rax + 0x7b]; 
0x00000000004a4a32: stc; inc dword ptr [rax + 0x7c]; stc; jmp qword ptr [rax + 0x7c]; 
0x00000000004a4a3a: stc; inc dword ptr [rax - 0x5f000684]; jl 0xa4a3c; inc eax; jl 0xa4a40; jmp rax; 
0x00000000004a4a1a: stc; inc dword ptr [rax - 0x5f000685]; jnp 0xa4a1c; inc eax; jnp 0xa4a20; jmp rax; 
0x00000000004a49f6: stc; inc dword ptr [rax - 0x5f000686]; jp 0xa49f8; inc eax; jp 0xa49fc; jmp rax; 
0x00000000004a483e: stc; inc dword ptr [rax - 0xf0006f2]; or eax, 0xd60fff9; stc; call rax; 
0x00000000004a4a2a: stc; inc dword ptr [rax]; jl 0xa4a28; jmp qword ptr [rax]; 
0x00000000004a4986: stc; inc dword ptr [rax]; jne 0xa4984; call qword ptr [rax]; 
0x00000000004a4986: stc; inc dword ptr [rax]; jne 0xa4984; call qword ptr [rax]; jne 0xa4988; jmp qword ptr [rax]; 
0x00000000004a4a06: stc; inc dword ptr [rax]; jnp 0xa4a04; jmp qword ptr [rax]; 
0x00000000004a49de: stc; inc dword ptr [rax]; jp 0xa49dc; call qword ptr [rax]; 
0x00000000004a4592: stc; inc dword ptr [rbp + rbx - 7]; call rsp; 
0x00000000004a4466: stc; inc dword ptr [rsi + 0x1b]; stc; call rsi; 
0x00000000004a4466: stc; inc dword ptr [rsi + 0x1b]; stc; call rsi; sbb bh, cl; jmp qword ptr [rsi + 0x1a]; 
0x00000000004a47c2: stc; inc dword ptr [rsi + rcx]; stc; push qword ptr [rbp + rcx - 7]; jmp rsp; 
0x00000000004a4456: stc; inc dword ptr [rsi]; sbb eax, 0x1c96fff9; stc; jmp qword ptr [rsi]; 
0x00000000004a4976: stc; inc eax; je 0xa4974; call rax; 
0x00000000004a4976: stc; inc eax; je 0xa4974; call rax; je 0xa4978; jmp rax; 
0x00000000004a4a42: stc; inc eax; jl 0xa4a40; jmp rax; 
0x00000000004a4a22: stc; inc eax; jnp 0xa4a20; jmp rax; 
0x00000000004a49ce: stc; inc eax; jns 0xa49cc; call rax; 
0x00000000004a49ce: stc; inc eax; jns 0xa49cc; call rax; jns 0xa49d0; jmp rax; 
0x00000000004a49fe: stc; inc eax; jp 0xa49fc; jmp rax; 
0x00000000004a488a: stc; inc eax; or al, 0xf9; jmp qword ptr [rax]; 
0x00000000004a4616: stc; inc eax; sbb al, 0xf9; call qword ptr [rax + 0x1c]; 
0x00000000004a4616: stc; inc eax; sbb al, 0xf9; call qword ptr [rax + 0x1c]; stc; jmp rax; 
0x00000000004a443e: stc; inc eax; sbb cl, bh; call qword ptr [rax + 0x18]; 
0x00000000004a443e: stc; inc eax; sbb cl, bh; call qword ptr [rax + 0x18]; stc; jmp rax; 
0x00000000004a44ea: stc; inc edx; sbb bh, cl; call qword ptr [rdx + 0x1a]; 
0x00000000004a44ea: stc; inc edx; sbb bh, cl; call qword ptr [rdx + 0x1a]; stc; jmp rdx; 
0x00000000004a45b2: stc; inc esp; sbb ecx, edi; call qword ptr [rcx + rbx - 7]; jmp rsp; 
0x00000000004a4672: stc; jmp qword ptr [rax + 0x10]; 
0x00000000004a466a: stc; jmp qword ptr [rax + 0x11]; 
0x00000000004a4662: stc; jmp qword ptr [rax + 0x12]; 
0x00000000004a465a: stc; jmp qword ptr [rax + 0x13]; 
0x00000000004a463e: stc; jmp qword ptr [rax + 0x18]; 
0x00000000004a4426: stc; jmp qword ptr [rax + 0x1b]; 
0x00000000004a495e: stc; jmp qword ptr [rax + 0x74]; 
0x00000000004a499a: stc; jmp qword ptr [rax + 0x75]; 
0x00000000004a49f2: stc; jmp qword ptr [rax + 0x7a]; 
0x00000000004a4a16: stc; jmp qword ptr [rax + 0x7b]; 
0x00000000004a4a36: stc; jmp qword ptr [rax + 0x7c]; 
0x00000000004a484e: stc; jmp qword ptr [rax + 0xc]; 
0x00000000004a4846: stc; jmp qword ptr [rax + 0xd]; 
0x00000000004a467a: stc; jmp qword ptr [rax + 0xf]; 
0x00000000004a4416: stc; jmp qword ptr [rax]; 
0x00000000004a44d2: stc; jmp qword ptr [rdx + 0x1d]; 
0x00000000004a4502: stc; jmp qword ptr [rdx]; 
0x00000000004a446e: stc; jmp qword ptr [rsi + 0x1a]; 
0x00000000004c56b2: stc; jmp qword ptr [rsi + 0x28]; 
0x000000000046dc54: stc; jmp qword ptr [rsi + 0x2e]; 
0x000000000046f620: stc; jmp qword ptr [rsi + 0xf]; 
0x000000000046669c: stc; jmp qword ptr [rsi - 0x70]; 
0x00000000004a445e: stc; jmp qword ptr [rsi]; 
0x00000000004a4446: stc; jmp rax; 
0x00000000004a44f2: stc; jmp rdx; 
0x00000000004a45ba: stc; jmp rsp; 
0x00000000004baf04: stc; jnp 0xbaec0; ret; 
0x00000000004a480e: stc; ljmp ptr [rdx + 0xc]; stc; call qword ptr [rax]; 
0x0000000000432e28: stc; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432e22: stc; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000046f7f6: stc; mov rdx, r13; mov rdi, r12; lea r9, qword ptr [rsp + 0x60]; lea rsi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000047afa8: stc; or cl, byte ptr [rdi]; test byte ptr [rcx + 0x48000005], ah; mov eax, dword ptr [rbx + 0x10]; add rax, qword ptr [r15]; call rax; 
0x000000000046de03: stc; out dx, al; sti; jmp qword ptr [rsi + 0xf]; 
0x00000000004a4652: stc; push qword ptr [rax + 0x14]; stc; push rax; adc edi, ecx; jmp qword ptr [rax + 0x13]; 
0x00000000004a4632: stc; push qword ptr [rax + 0x40fff919]; sbb ecx, edi; call rax; 
0x00000000004a441a: stc; push qword ptr [rax + 0x40fff91c]; sbb al, 0xf9; call rax; 
0x00000000004a499e: stc; push qword ptr [rax + 0x75]; stc; call qword ptr [rax - 0x4f00068b]; jne 0xa49a4; call rax; 
0x00000000004a49be: stc; push qword ptr [rax + 0x76]; stc; call qword ptr [rax - 0x4f00068a]; jbe 0xa49c4; call rax; 
0x00000000004a487e: stc; push qword ptr [rax + 0xe]; stc; jmp rax; 
0x00000000004a4972: stc; push qword ptr [rax - 0x3f00068c]; je 0xa4974; call rax; 
0x00000000004a49b6: stc; push qword ptr [rax]; jbe 0xa49b4; call qword ptr [rax + 0x76]; 
0x00000000004a4952: stc; push qword ptr [rax]; je 0xa4950; inc dword ptr [rax + 0x74]; stc; call qword ptr [rax + 0x74]; 
0x00000000004a4992: stc; push qword ptr [rax]; jne 0xa4990; call qword ptr [rax + 0x75]; 
0x00000000004a4992: stc; push qword ptr [rax]; jne 0xa4990; call qword ptr [rax + 0x75]; stc; jmp qword ptr [rax + 0x75]; 
0x00000000004a4a0e: stc; push qword ptr [rax]; jnp 0xa4a0c; inc dword ptr [rax + 0x7b]; stc; jmp qword ptr [rax + 0x7b]; 
0x00000000004a49e6: stc; push qword ptr [rax]; jp 0xa49e4; inc dword ptr [rax + 0x7a]; stc; call qword ptr [rax + 0x7a]; 
0x00000000004a4612: stc; push qword ptr [rax]; sbb eax, 0x1cc0fff9; stc; call qword ptr [rax + 0x1c]; 
0x00000000004a443a: stc; push qword ptr [rax]; sbb ecx, edi; inc eax; sbb cl, bh; call qword ptr [rax + 0x18]; 
0x00000000004a47c6: stc; push qword ptr [rbp + rcx - 7]; jmp rsp; 
0x00000000004a46fa: stc; push qword ptr [rdx]; psubw mm7, mm7; mov dl, 0xe; stc; jmp qword ptr [rdx]; 
0x00000000004a44e6: stc; push qword ptr [rdx]; sbb edi, ecx; inc edx; sbb bh, cl; call qword ptr [rdx + 0x1a]; 
0x00000000004a4462: stc; push qword ptr [rsi + 0x46fff91b]; sbb edi, ecx; call rsi; 
0x00000000004a4656: stc; push rax; adc edi, ecx; jmp qword ptr [rax + 0x13]; 
0x00000000004a4982: stc; push rax; je 0xa4980; inc dword ptr [rax]; jne 0xa4984; call qword ptr [rax]; 
0x00000000004a49ae: stc; push rax; jne 0xa49ac; call qword ptr [rax]; 
0x00000000004a49da: stc; push rax; jns 0xa49d8; inc dword ptr [rax]; jp 0xa49dc; call qword ptr [rax]; 
0x00000000004a4842: stc; push rax; or eax, 0xd60fff9; stc; call rax; 
0x0000000000474033: stc; ret 0xfff8; 
0x00000000004714d3: stc; ret; 
0x000000000043e70a: stc; salc; clc; ret; 
0x000000000040e3c5: stc; syscall; 
0x0000000000436754: stc; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000004629aa: std; add al, byte ptr [rbp + 0x481b7eed]; mov eax, dword ptr [rbx + 0xd8]; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004be3ae: std; call qword ptr [rax + 0x19]; 
0x00000000004be3ae: std; call qword ptr [rax + 0x19]; std; push qword ptr [rax]; sbb edi, ebp; call qword ptr [rax]; 
0x00000000004be3ce: std; call qword ptr [rax + 0x28]; 
0x00000000004be3ce: std; call qword ptr [rax + 0x28]; std; push qword ptr [rax]; sub bh, ch; call qword ptr [rax]; 
0x00000000004be3c6: std; call qword ptr [rax + 0x70fffd24]; std; call qword ptr [rax + 0x28]; 
0x00000000004bef22: std; call qword ptr [rax - 0x31]; 
0x00000000004bead6: std; call qword ptr [rax - 0x38]; 
0x00000000004beaaa: std; call qword ptr [rax - 0x3b]; 
0x00000000004be3b6: std; call qword ptr [rax]; 
0x00000000004be3b6: std; call qword ptr [rax]; sbb eax, 0x1ef0fffd; std; call rax; 
0x00000000004c93b2: std; call qword ptr [rbx + 2]; 
0x00000000004c4c2a: std; call qword ptr [rbx]; 
0x00000000004c9b62: std; call qword ptr [rcx + 1]; 
0x00000000004bef42: std; call qword ptr [rdi - 0x2b]; 
0x00000000004c9c52: std; call qword ptr [rdi]; 
0x00000000004be3be: std; call rax; 
0x00000000004c810a: std; call rcx; 
0x00000000004beab2: std; call rdx; 
0x00000000004beb9a: std; call rsp; 
0x00000000004be441: std; cld; jmp rax; 
0x0000000000440cbc: std; dec dword ptr [rax - 0x75]; jge 0x40cc2; call rbx; 
0x0000000000440f6f: std; dec dword ptr [rax - 0x75]; jge 0x40f75; call rbx; 
0x0000000000442b07: std; dec dword ptr [rax - 0x75]; jge 0x42b0d; call rbx; 
0x000000000049a7d6: std; dec dword ptr [rax - 0x77]; add ebx, dword ptr [rax + 0x5a]; pop rbx; ret; 
0x000000000044054b: std; dec dword ptr [rax - 0x77]; ret; 
0x0000000000440f7d: std; dec dword ptr [rcx - 0x75]; cmp al, 0x24; call rbx; 
0x0000000000440b87: std; dec dword ptr [rcx - 0x75]; jge 0x40b8d; call rbx; 
0x0000000000440cae: std; dec dword ptr [rcx - 0x75]; jge 0x40cb4; call rbx; 
0x0000000000440df1: std; dec dword ptr [rcx - 0x75]; jge 0x40df7; call rbx; 
0x0000000000440f61: std; dec dword ptr [rcx - 0x75]; jge 0x40f67; call rbx; 
0x000000000044277f: std; dec dword ptr [rcx - 0x75]; jge 0x42785; call rbx; 
0x00000000004428a7: std; dec dword ptr [rcx - 0x75]; jge 0x428ad; call rbx; 
0x00000000004429ea: std; dec dword ptr [rcx - 0x75]; jge 0x429f0; call rbx; 
0x0000000000442aeb: std; dec dword ptr [rcx - 0x75]; jge 0x42af1; call rbx; 
0x000000000047c10f: std; inc dword ptr [rbp - 0x76b48a40]; ret; 
0x00000000004bef72: std; inc dword ptr [rdi + rdx*8]; std; call rsp; 
0x00000000004736e1: std; inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x66; syscall; 
0x0000000000480bbe: std; jbe 0x80bc8; ret; 
0x00000000004be462: std; jmp qword ptr [rax + 0x4d]; 
0x00000000004be472: std; jmp qword ptr [rax + 0x56]; 
0x00000000004be482: std; jmp qword ptr [rax + 0x5f]; 
0x00000000004be492: std; jmp qword ptr [rax + 0x68]; 
0x00000000004be452: std; jmp qword ptr [rax]; 
0x00000000004ca14a: std; jmp qword ptr [rbx]; 
0x00000000004c9a2a: std; jmp qword ptr [rcx]; 
0x00000000004c9d32: std; jmp qword ptr [rdi]; 
0x00000000004bef3e: std; jmp qword ptr [rdx - 0x2b]; 
0x00000000004c3e12: std; jmp qword ptr [rdx]; 
0x0000000000446938: std; jmp qword ptr [rsi + 0xf]; 
0x00000000004be46a: std; jmp rax; 
0x00000000004bea92: std; jmp rsp; 
0x00000000004bea72: std; lcall ptr [rax]; ret 0xfffd; 
0x00000000004beb42: std; lcall ptr [rdx - 0x35]; std; jmp rsp; 
0x00000000004beb3e: std; lcall ptr [rdx - 0x35]; std; lcall ptr [rdx - 0x35]; std; jmp rsp; 
0x00000000004bef3a: std; ljmp ptr [rbp - 0x2b]; std; jmp qword ptr [rdx - 0x2b]; 
0x00000000004bef6e: std; ljmp ptr [rdi + rdx*8 - 3]; inc dword ptr [rdi + rdx*8]; std; call rsp; 
0x0000000000432643: std; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x0000000000473386: std; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x0000000000413d8c: std; mov eax, 3; syscall; 
0x000000000044f8d8: std; mov r14d, 1; mov r13d, 1; mov eax, 3; syscall; 
0x000000000043264b: std; mov word ptr [rdi - 2], cx; ret; 
0x00000000004be3aa: std; push qword ptr [rax + 0x17]; std; call qword ptr [rax + 0x19]; 
0x00000000004be3ca: std; push qword ptr [rax + 0x26]; std; call qword ptr [rax + 0x28]; 
0x00000000004be456: std; push qword ptr [rax + 0xb]; std; push qword ptr [rax - 0x17]; cld; jmp qword ptr [rax]; 
0x00000000004be45a: std; push qword ptr [rax - 0x17]; cld; jmp qword ptr [rax]; 
0x00000000004be3c2: std; push qword ptr [rax - 0x6f0002de]; and al, 0xfd; push qword ptr [rax + 0x26]; std; call qword ptr [rax + 0x28]; 
0x00000000004be3b2: std; push qword ptr [rax]; sbb edi, ebp; call qword ptr [rax]; 
0x00000000004be3d2: std; push qword ptr [rax]; sub bh, ch; call qword ptr [rax]; 
0x000000000048c7a0: std; push rbx; je 0x8c810; mov esi, 0x48c500; mov edi, 0x6cd9c0; call rax; 
0x000000000044e7be: std; retf 0x6c; ret; 
0x000000000049f572: std; sub rsp, 0x40; test rax, rax; je 0x9f583; mov edi, 0x6cc100; call rax; 
0x0000000000436484: std; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000043624a: std; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000043e822: std; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000459661: std; xor byte ptr [rdi], cl; xchg eax, esp; ret; 
0x00000000004417d0: std; xor edx, edx; xor esi, esi; mov rbx, rax; call rax; 
0x000000000041ccae: sti; add byte ptr [rax - 0x6af0ff94], bh; ret 0x8348; 
0x000000000043f63f: sti; add edi, dword ptr [rdi + 0x4a4fa0]; jne 0x3f6d8; xor esi, esi; mov eax, 2; syscall; 
0x0000000000411653: sti; call 0x13920; cmp eax, -1; jne 0x11660; pop rbx; ret; 
0x0000000000415b0a: sti; call qword ptr [rax + 0x20]; 
0x00000000004c81fa: sti; call qword ptr [rax]; 
0x00000000004c779a: sti; call qword ptr [rdi]; 
0x00000000004c825a: sti; call qword ptr [rdx]; 
0x00000000004c793a: sti; call qword ptr [rsi]; 
0x00000000004c763a: sti; call rdx; 
0x00000000004c73c2: sti; call rsi; 
0x00000000004748e7: sti; dec dword ptr [rax + 0x39]; ret; 
0x0000000000476ef9: sti; dec dword ptr [rax - 0x77]; ret; 
0x000000000046a417: sti; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; ret; 
0x00000000004686ca: sti; dec dword ptr [rax - 0x7d]; clc; adc byte ptr [rax - 0x77], cl; ret 0x860f; 
0x000000000044eff6: sti; inc dword ptr [rbx - 0x76be0008]; ret; 
0x00000000004c7eea: sti; jmp qword ptr [rax + 1]; 
0x00000000004c7462: sti; jmp qword ptr [rbp + 0xb]; 
0x00000000004c76da: sti; jmp qword ptr [rbp + 1]; 
0x00000000004c761a: sti; jmp qword ptr [rcx]; 
0x00000000004c751a: sti; jmp qword ptr [rdi]; 
0x00000000004c7c72: sti; jmp qword ptr [rdx + 9]; 
0x00000000004c7c32: sti; jmp qword ptr [rdx]; 
0x000000000045b934: sti; jmp qword ptr [rsi + 0x2e]; 
0x0000000000449e00: sti; jmp qword ptr [rsi + 0xf]; 
0x000000000044578c: sti; jmp qword ptr [rsi - 0x70]; 
0x00000000004c809a: sti; jmp qword ptr [rsi]; 
0x00000000004c79a2: sti; jmp rdi; 
0x00000000004c791a: sti; jmp rsi; 
0x0000000000432a28: sti; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000440093: sti; mov eax, 0x48; syscall; 
0x0000000000473101: sti; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x000000000044d72b: sti; mov eax, 3; syscall; 
0x0000000000432a22: sti; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000415e60: sti; mov rbp, rdx; call qword ptr [rax + 0x60]; 
0x0000000000487826: sti; ret 0xffbf; 
0x00000000004bb08a: sti; ret; 
0x00000000004a4200: sti; sar eax, -1; mov eax, edx; clc; ljmp ptr [rbx]; ret; 
0x000000000043f0f0: sti; sub rsp, 0x18; test rax, rax; je 0x3f101; mov edi, 0x6cd720; call rax; 
0x000000000044fb97: sti; test rax, rax; je 0x4fb9f; call rax; 
0x0000000000480c27: sti; test rax, rax; je 0x80c3e; mov qword ptr [rsp + 8], rsi; mov edi, 0x6cc140; call rax; 
0x0000000000436746: sti; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000440a20: sti; xor esi, esi; mov r12d, edx; mov rbp, rax; call rax; 
0x00000000004268b2: stosb byte ptr [rdi], al; add al, byte ptr [rax]; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x000000000043e7a9: stosb byte ptr [rdi], al; mov rax, rsi; sub rax, rdx; vzeroupper; ret; 
0x00000000004426b2: stosb byte ptr [rdi], al; ret; 
0x0000000000470fc8: stosb byte ptr [rdi], al; stosb byte ptr [rdi], al; sub cl, byte ptr [rcx + 1]; ret 0xf43; 
0x0000000000470fc9: stosb byte ptr [rdi], al; sub cl, byte ptr [rcx + 1]; ret 0xf43; 
0x00000000004bccd6: stosb byte ptr [rdi], al; xchg esp, edi; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x0000000000477051: stosd dword ptr [rdi], eax; add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x87; adc eax, 0x89000003; ret 0xe8c0; 
0x00000000004c9c4d: stosd dword ptr [rdi], eax; add byte ptr [rax], al; mov al, 0x38; std; call qword ptr [rdi]; 
0x000000000040afb1: stosd dword ptr [rdi], eax; cmp al, byte ptr [rcx]; add cl, ch; sar cl, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000046e154: stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000044d749: stosd dword ptr [rdi], eax; jmp qword ptr [rdi]; 
0x00000000004bc66c: stosd dword ptr [rdi], eax; ret; 
0x000000000040da33: stosd dword ptr [rdi], eax; sar edi, cl; jmp qword ptr [rsi + 0xf]; 
0x000000000046e0b5: stosd dword ptr [rdi], eax; sar rdx, cl; test rdx, rdx; je 0x6e0d0; bsf rax, rdx; ret; 
0x000000000044578b: stosd dword ptr [rdi], eax; sti; jmp qword ptr [rsi - 0x70]; 
0x0000000000470fc7: stosd dword ptr [rdi], eax; stosb byte ptr [rdi], al; stosb byte ptr [rdi], al; sub cl, byte ptr [rcx + 1]; ret 0xf43; 
0x00000000004c7a90: sub al, 0; add byte ptr [rax], al; adc al, 0x8a; add byte ptr [rax], al; cmp byte ptr [rdi - 5], dl; call rsi; 
0x00000000004c3c58: sub al, 0; add byte ptr [rax], al; fmul qword ptr [rbx]; add byte ptr [rax + 0x1b], al; clc; call qword ptr [rsi + 0xb]; 
0x00000000004c8208: sub al, 0; add byte ptr [rax], al; mov word ptr [rcx - 0x6eb00000], ss; sti; call qword ptr [rdx]; 
0x0000000000400968: sub al, 0; add ebx, esi; ret; 
0x00000000004014b8: sub al, 0; add rsp, 0x110; pop rbx; pop rbp; pop r12; ret; 
0x00000000004012c4: sub al, 0; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000400cca: sub al, 0; nop; leave; ret; 
0x0000000000400709: sub al, 0; pop rbp; pop r12; ret; 
0x00000000004002d1: sub al, 0; test rax, rax; je 0x2dd; call 0xffffffffffc00000; add rsp, 8; ret; 
0x0000000000401d1e: sub al, 0; xor eax, eax; ret; 
0x000000000044369a: sub al, 0x88; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004c93ac: sub al, 0xa3; add byte ptr [rax], al; mov al, 8; std; call qword ptr [rbx + 2]; 
0x000000000042fbb3: sub al, 0xa; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000046e2a0: sub al, 1; add byte ptr [rax], al; bsr rsi, rsi; lea rax, qword ptr [rdi + rsi]; ret; 
0x00000000004315c4: sub al, 7; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000426804: sub al, byte ptr [rax]; adc byte ptr [rdx + 0x426230], bh; mov eax, 0x43e180; cmove rax, rdx; ret; 
0x0000000000421d7b: sub al, byte ptr [rax]; add al, 0; add byte ptr [rax], al; je 0x21d8a; lea rax, qword ptr [rip + 0x1a966]; ret; 
0x00000000004c1b7d: sub al, byte ptr [rax]; add byte ptr [rax], ah; cmpsb byte ptr [rsi], byte ptr [rdi]; cmc; call rsp; 
0x000000000042716a: sub al, byte ptr [rax]; add byte ptr [rax], al; add al, byte ptr [rax]; je 0x27179; lea rax, qword ptr [rip + 0x17647]; ret; 
0x000000000041e6ac: sub al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000426b88: sub al, byte ptr [rax]; add byte ptr [rax], al; or byte ptr [rax], al; je 0x26b98; lea rax, qword ptr [rip + 0x8449]; ret; 
0x00000000004241ee: sub al, byte ptr [rax]; add byte ptr [rdx], al; add byte ptr [rax], al; je 0x241fd; lea rax, qword ptr [rip + 0x14853]; ret; 
0x000000000042771e: sub al, byte ptr [rax]; add byte ptr [rdx], al; add byte ptr [rax], al; je 0x2772d; lea rax, qword ptr [rip + 0x12ad3]; ret; 
0x0000000000421fce: sub al, byte ptr [rax]; add byte ptr [rdx], al; add byte ptr [rax], al; jne 0x21fdd; lea rax, qword ptr [rip + 3]; ret; 
0x0000000000426b74: sub al, byte ptr [rax]; add byte ptr [rdx], al; add byte ptr [rax], al; jne 0x26b84; lea rax, qword ptr [rip + 0x1d]; ret; 
0x000000000042783a: sub al, byte ptr [rax]; add byte ptr [rdx], al; add byte ptr [rax], al; jne 0x27849; lea rax, qword ptr [rip + 0x67]; ret; 
0x000000000042788d: sub al, byte ptr [rax]; add byte ptr [rdx], al; add byte ptr [rax], al; jne 0x2789c; lea rax, qword ptr [rip + 4]; ret; 
0x000000000041fa83: sub al, byte ptr [rax]; test rax, rax; je 0x1fa8c; call rax; 
0x0000000000463891: sub al, byte ptr [rbx - 0x5f743]; call qword ptr [rax]; 
0x00000000004317c6: sub al, byte ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000427169: sub al, byte ptr gs:[rax]; add byte ptr [rax], al; add al, byte ptr [rax]; je 0x27179; lea rax, qword ptr [rip + 0x17647]; ret; 
0x0000000000460a03: sub bh, 0xff; dec dword ptr [rax - 0x77]; ret 0xb848; 
0x00000000004604aa: sub bh, 0xff; dec dword ptr [rcx + 0x39]; ret; 
0x0000000000460d50: sub bh, 0xff; inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000045b933: sub bh, bl; jmp qword ptr [rsi + 0x2e]; 
0x0000000000403ff3: sub bh, byte ptr [rcx + 2]; xor esi, esi; mov eax, ecx; syscall; 
0x00000000004be3d5: sub bh, ch; call qword ptr [rax]; 
0x00000000004c7639: sub bl, bh; call rdx; 
0x00000000004c7619: sub bl, bh; jmp qword ptr [rcx]; 
0x000000000047d372: sub bl, byte ptr [rdi - 0x72b70006]; push rbp; add dword ptr [rax + 0x39], ecx; ret 0x1272; 
0x000000000049ecc1: sub bl, dh; ret; 
0x000000000049ecc0: sub bl, r14b; ret; 
0x000000000041119e: sub byte ptr [r8 + 1], r9b; ret 0x8949; 
0x00000000004767aa: sub byte ptr [rax + 0x39], cl; ret 0x1376; 
0x00000000004755a6: sub byte ptr [rax + 0x39], cl; ret 0x860f; 
0x0000000000466677: sub byte ptr [rax + 0x48000000], 0x39; ret 0x820f; 
0x000000000041119f: sub byte ptr [rax + 1], cl; ret 0x8949; 
0x000000000046869d: sub byte ptr [rax - 0x39], cl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x83e8; 
0x00000000004127f0: sub byte ptr [rax - 0x77], cl; jae 0x12815; call qword ptr [rax + 0x70]; 
0x000000000041f544: sub byte ptr [rax - 0x77], cl; out dx, eax; call rax; 
0x000000000046d2e7: sub byte ptr [rax - 0x77], cl; push rax; sbb byte ptr [rcx + 0x5bc0310b], cl; ret; 
0x0000000000410ef5: sub byte ptr [rax - 0x77], cl; ret 0x9e9; 
0x000000000046b4dc: sub byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000405ddf: sub byte ptr [rax - 0x77], cl; ret; 
0x000000000041f637: sub byte ptr [rax - 0x7d], cl; call 0x415f514f; pop rsp; pop r13; ret; 
0x0000000000464bec: sub byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000040dc49: sub byte ptr [rax - 0x7d], cl; ret; 
0x000000000044e773: sub byte ptr [rax], 0; add dword ptr [rax], edi; test rax, rax; je 0x4e788; mov edi, 0x6cd720; call rax; 
0x000000000040107a: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x1085; call 0x437c0; leave; ret; 
0x000000000044e774: sub byte ptr [rax], al; add dword ptr [rax], edi; test rax, rax; je 0x4e788; mov edi, 0x6cd720; call rax; 
0x0000000000481071: sub byte ptr [rax], al; jne 0x81080; add rsp, 0x38; ret; 
0x0000000000444dda: sub byte ptr [rax], al; pop rbx; ret; 
0x000000000044d675: sub byte ptr [rax], al; ret; 
0x00000000004038de: sub byte ptr [rax], bh; test rax, rax; je 0x38fa; mov edi, 0x6ccfe0; call rax; 
0x00000000004c09d2: sub byte ptr [rbx + 0x300e4a05], al; add ah, byte ptr [rdx + 0x41280e0a]; ret; 
0x000000000040e32a: sub byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000004162c6: sub byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000480eeb: sub byte ptr [rbx + rcx*4 + 0x5c], cl; and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000480e79: sub byte ptr [rbx + rcx*4 + 0x5c], cl; and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x50; jmp qword ptr [rax]; 
0x0000000000427647: sub byte ptr [rbx + rcx*4 + 0x6e], cl; xor byte ptr [rbx + rcx*4 + 0x76], cl; cmp byte ptr [rax + 0xf], cl; ret; 
0x0000000000444d93: sub byte ptr [rbx - 0x26], dh; mov eax, 1; ret; 
0x0000000000444d92: sub byte ptr [rbx - 0x26], sil; mov eax, 1; ret; 
0x0000000000481093: sub byte ptr [rcx - 0x17f3dbbc], cl; ret; 
0x000000000049ba3f: sub byte ptr [rcx - 0x3a], al; xchg byte ptr [rdx + 1], dh; add byte ptr [rax], al; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000004813a6: sub byte ptr [rcx - 0x3b76b310], cl; mov rbp, r9; nop; jmp rdx; 
0x000000000044dc4a: sub byte ptr [rcx - 0x77], al; ret 0x8b4c; 
0x0000000000444010: sub byte ptr [rcx], ch; add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, ebp; ret 0xc985; 
0x000000000041f65c: sub byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x00000000004319b4: sub byte ptr [rdi], al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000048ca5b: sub byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x00000000004bf538: sub byte ptr [rdx], dh; hlt; call qword ptr [rdx]; 
0x00000000004c0e8a: sub byte ptr [rsi + 0x300e4405], al; add dword ptr [rsi], 2; xchg eax, ebp; ret; 
0x00000000004be3d1: sub ch, bh; push qword ptr [rax]; sub bh, ch; call qword ptr [rax]; 
0x00000000004c0711: sub ch, dh; call qword ptr [rax]; 
0x00000000004bea90: sub cl, al; std; jmp rsp; 
0x00000000004bea70: sub cl, al; std; lcall ptr [rax]; ret 0xfffd; 
0x000000000041fa7d: sub cl, byte ptr [rax - 0x75]; add eax, 0x2adb6b; test rax, rax; je 0x1fa8c; call rax; 
0x000000000047a7fe: sub cl, byte ptr [rax - 0x7d]; ret; 
0x0000000000470fca: sub cl, byte ptr [rcx + 1]; ret 0xf43; 
0x000000000040042c: sub cl, byte ptr [rdx]; mov eax, 2; syscall; 
0x00000000004003cf: sub cl, byte ptr [rdx]; mov rdi, rbx; mov eax, 1; syscall; 
0x0000000000414a75: sub cl, ch; ret 0xfffe; 
0x000000000045c3e5: sub dh, al; add byte ptr [rip - 0x2fd17], ch; jmp qword ptr [rsi - 0x70]; 
0x00000000004593b1: sub dh, al; add byte ptr [rip - 0x42117], ch; jmp qword ptr [rsi + 0xf]; 
0x000000000045bf95: sub dh, al; add byte ptr [rip - 0xa8d17], ch; jmp qword ptr [rsi - 0x70]; 
0x000000000043fe84: sub dword ptr [rax], eax; add byte ptr [rbp + 0x14], dh; mov eax, 0; syscall; 
0x000000000043fee4: sub dword ptr [rax], eax; add byte ptr [rbp + 0x14], dh; mov eax, 1; syscall; 
0x000000000043fe24: sub dword ptr [rax], eax; add byte ptr [rbp + 0x14], dh; mov eax, 2; syscall; 
0x0000000000467082: sub dword ptr [rax], eax; add byte ptr [rcx - 0x7afcb730], cl; push -0x7c000006; ret 0x8908; 
0x00000000004431c4: sub dword ptr [rax], eax; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000446305: sub dword ptr [rax], eax; ret; 
0x0000000000444db4: sub dword ptr [rax], eax; test eax, eax; je 0x44dc0; ret; 
0x00000000004153e1: sub dword ptr [rbx], 0x1d894800; movsd dword ptr [rdi], dword ptr [rsi]; sub dword ptr [rbx], 0x83c88900; ret 0x2501; 
0x00000000004153e8: sub dword ptr [rbx], 0x83c88900; ret 0x2501; 
0x0000000000431864: sub dword ptr [rdi], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000413178: sub dword ptr [rdx], ecx; mov rax, qword ptr [rbp + 0xd8]; call qword ptr [rax + 0x40]; 
0x0000000000413b3b: sub dword ptr [rdx], ecx; mov rax, qword ptr [rbx + 0xd8]; call qword ptr [rax + 0x20]; 
0x000000000041397c: sub dword ptr [rdx], ecx; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x00000000004126aa: sub dword ptr [rdx], ecx; pop rbx; ret; 
0x0000000000430396: sub dword ptr [rip - 0xcfffffe], 0xf; outsd dx, dword ptr [rsi]; push rdi; ret; 
0x000000000043bd23: sub dword ptr [rsi + rax + 0xc634900], ecx; xchg eax, ebx; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000004031fb: sub dword ptr [rsi - 0x76b7ffd4], ebx; ret 0x8348; 
0x000000000049a458: sub dword ptr [rsp + 0x20], ecx; movaps xmmword ptr [rsp + 0x30], xmm0; je 0x9a46a; mov edi, 0x6cc140; call rax; 
0x000000000049a45d: sub dword ptr [rsp + 0x30], eax; je 0x9a46a; mov edi, 0x6cc140; call rax; 
0x00000000004431c3: sub dword ptr ss:[rax], eax; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x000000000041f639: sub eax, 0x10; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000455f75: sub eax, 0x20; cdqe; movzx eax, byte ptr [rax + 0x4b40e0]; mov rax, qword ptr [rax*8 + 0x4b3a20]; jmp rax; 
0x0000000000455fc6: sub eax, 0x20; cdqe; movzx eax, byte ptr [rax + 0x4b40e0]; mov rax, qword ptr [rax*8 + 0x4b3b20]; jmp rax; 
0x00000000004580b6: sub eax, 0x20; cdqe; movzx eax, byte ptr [rax + 0x4b40e0]; mov rax, qword ptr [rax*8 + 0x4b3c20]; jmp rax; 
0x0000000000456be9: sub eax, 0x20; cdqe; movzx eax, byte ptr [rax + 0x4b40e0]; mov rax, qword ptr [rax*8 + 0x4b3f20]; jmp rax; 
0x0000000000431474: sub eax, 0x63490007; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000045dfb1: sub eax, 0x83000000; ret; 
0x00000000004bccda: sub eax, 0x8acc8c6; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x00000000004914cf: sub eax, 0x8b00016f; add al, 0x81; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000042cccf: sub eax, 0x8b0007b7; or al, 0x8a; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004019ad: sub eax, 0xb8004a1e; add al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000004c1e15: sub eax, 0xc8480000; cmc; call qword ptr [rbx]; 
0x00000000004bd074: sub eax, 0xddb680a7; in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x000000000045bf98: sub eax, 0xfff572e9; jmp qword ptr [rsi - 0x70]; 
0x00000000004593b4: sub eax, 0xfffbdee9; jmp qword ptr [rsi + 0xf]; 
0x000000000045c3e8: sub eax, 0xfffd02e9; jmp qword ptr [rsi - 0x70]; 
0x0000000000401189: sub eax, 0xfffff04a; mov ebx, 0x4001d8; jne 0x11b5; nop dword ptr [rax]; call qword ptr [rbx + 0x10]; 
0x000000000043f72c: sub eax, 1; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000044e0b4: sub eax, 1; mov dword ptr [rbx + 8], eax; pop rbx; ret; 
0x000000000043e5e4: sub eax, 1; ret; 
0x0000000000400cc2: sub eax, 8; mov qword ptr [rip + 0x2cd6e4], rax; nop; leave; ret; 
0x0000000000480e16: sub eax, dword ptr [0]; ret; 
0x0000000000417339: sub eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004172c6: sub eax, dword ptr [rax]; add dword ptr [rip + 0x2b62d5], 1; ret; 
0x00000000004182c5: sub eax, dword ptr [rax]; add rsp, 8; mov rax, rdx; pop rbx; pop rbp; ret; 
0x000000000041b5cb: sub eax, dword ptr [rax]; jne 0x1b633; mov esi, 0x80000; mov edi, 0x4a34a0; mov eax, 2; syscall; 
0x000000000041b627: sub eax, dword ptr [rax]; mov rdi, r9; mov eax, 3; syscall; 
0x0000000000417235: sub eax, dword ptr [rax]; ret; 
0x0000000000418802: sub eax, dword ptr [rax]; test rax, rax; je 0x1880b; call rax; 
0x0000000000401fef: sub eax, dword ptr [rbx + 8]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000417a6e: sub eax, dword ptr [rdi + 0x18]; ret; 
0x0000000000431676: sub eax, dword ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000416f23: sub eax, dword ptr [rsi + 0x10]; ret; 
0x0000000000417234: sub eax, dword ptr ds:[rax]; ret; 
0x0000000000415bdd: sub eax, ebp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000046f6cb: sub eax, ebp; pop rbp; pop r12; ret; 
0x0000000000416659: sub eax, ecx; lea eax, dword ptr [r8 - 1]; ret; 
0x000000000048bfad: sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000004233fc: sub eax, ecx; ret; 
0x000000000046d479: sub eax, ecx; sar r8, 2; lea eax, dword ptr [r8 - 1]; ret; 
0x000000000048bee7: sub eax, ecx; shl rsi, cl; mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000047f573: sub eax, edi; jmp qword ptr [rsi + 0x2e]; 
0x00000000004244c9: sub eax, edi; ret; 
0x00000000004133e4: sub eax, edx; mov rdx, rax; mov rax, qword ptr [rbx + 0xd8]; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x00000000004135de: sub eax, edx; ret; 
0x000000000043e797: sub eax, edx; vzeroupper; ret; 
0x000000000046ce7c: sub eax, esi; pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000000415d3e: sub eax, esi; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000413438: sub eax, esp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000004409be: sub ebp, 0x45; add byte ptr [rax], al; ret; 
0x000000000043f4be: sub ebp, 0x5a; add byte ptr [rax], al; ret; 
0x00000000004b9d95: sub ebx, dword ptr [rbx - 0xb]; pop rbx; and dword ptr [rsi + rbp*2 - 0x7a], edi; lahf; ret 0x871e; 
0x00000000004748e6: sub ebx, edi; dec dword ptr [rax + 0x39]; ret; 
0x0000000000425cf5: sub ebx, edx; jbe 0x25d04; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000048af95: sub ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000444d8d: sub ecx, dword ptr [rdx + 0x10]; cmp rcx, qword ptr [rdx + 0x28]; jae 0x44d70; mov eax, 1; ret; 
0x0000000000444e9c: sub ecx, eax; shl ecx, 3; shl eax, cl; pop rbx; pop rbp; ret; 
0x000000000046f61f: sub ecx, edi; jmp qword ptr [rsi + 0xf]; 
0x00000000004557ef: sub ecx, esp; mov rdi, rbx; mov rdx, rcx; mov qword ptr [rbp - 0x4b0], rcx; call qword ptr [rax + 0x38]; 
0x0000000000444e9b: sub ecx, r8d; shl ecx, 3; shl eax, cl; pop rbx; pop rbp; ret; 
0x0000000000430b43: sub edi, 0x20; lea r11, qword ptr [rip + 0x73703]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430a52: sub edi, 0x40; lea r11, qword ptr [rip + 0x737f4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430993: sub edi, 0x40; lea r11, qword ptr [rip + 0x738b3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043528f: sub edi, edx; lea r11, qword ptr [rip + 0x6f178]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434f2e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x6f4d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434dae: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x6f656]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434c2e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x6f7d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434aae: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x6f956]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043492e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x6fad6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004347ae: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x6fc56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043462e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x6fdd6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004344ae: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x6ff56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043432e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x700d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004341ae: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x70256]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043402e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x703d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433eae: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x70556]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433d2e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x706d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433bae: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x70856]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433a2e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x709d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004338b5: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x70b4f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004bc7a2: sub edi, esi; int 0x6b; ret; 
0x000000000042730e: sub edx, 0x10; lea rsi, qword ptr [rsi + 0x10]; lea rdi, qword ptr [rdi + 0x10]; jne 0x27300; mov rax, rdi; ret; 
0x0000000000433181: sub edx, 0x40; lea r11, qword ptr [rip + 0x710c5]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004330c1: sub edx, 0x40; sfence; lea r11, qword ptr [rip + 0x71182]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000046d57c: sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; shr rdx, 2; sub eax, edx; ret; 
0x0000000000416f50: sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000416f45: sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000046d591: sub edx, dword ptr [rax + 8]; mov eax, dword ptr [rdi + 0x10]; shr rdx, 2; sub eax, edx; ret; 
0x00000000004268ae: sub edx, eax; jbe 0x26b60; add rax, rdi; add rax, rcx; ret; 
0x0000000000426b24: sub edx, eax; jbe 0x26b60; add rax, rdi; ret; 
0x0000000000426b34: sub edx, eax; jbe 0x26b60; lea rax, qword ptr [rdi + rax + 0x10]; ret; 
0x0000000000426b44: sub edx, eax; jbe 0x26b60; lea rax, qword ptr [rdi + rax + 0x20]; ret; 
0x0000000000426b54: sub edx, eax; jbe 0x26b60; lea rax, qword ptr [rdi + rax + 0x30]; ret; 
0x0000000000400b3a: sub edx, eax; mov rax, qword ptr [rbp - 0x10]; mov qword ptr [rax], rdx; nop; leave; ret; 
0x000000000043c2fc: sub edx, ecx; lea r11, qword ptr [rip + 0x686cb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bcdc: sub edx, ecx; lea r11, qword ptr [rip + 0x68c6b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000453a02: sub edx, esi; call qword ptr [rax + 0x38]; 
0x000000000041092a: sub edx, esi; call qword ptr [rax + 0x70]; 
0x0000000000442bf1: sub edx, esi; mov eax, r12d; syscall; 
0x0000000000410fd2: sub edx, esi; mov rdi, r15; call rax; 
0x0000000000412bf4: sub edx, esi; mov rdi, rbx; call rax; 
0x000000000045dc8b: sub edx, esi; sar rdx, 2; call qword ptr [rax + 0x38]; 
0x000000000043098f: sub esi, 0x40; sub rdi, 0x40; lea r11, qword ptr [rip + 0x738b3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434f31: sub esi, edx; lea r11, qword ptr [rip + 0x6f4d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434db1: sub esi, edx; lea r11, qword ptr [rip + 0x6f656]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434c31: sub esi, edx; lea r11, qword ptr [rip + 0x6f7d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434ab1: sub esi, edx; lea r11, qword ptr [rip + 0x6f956]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434931: sub esi, edx; lea r11, qword ptr [rip + 0x6fad6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004347b1: sub esi, edx; lea r11, qword ptr [rip + 0x6fc56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434631: sub esi, edx; lea r11, qword ptr [rip + 0x6fdd6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004344b1: sub esi, edx; lea r11, qword ptr [rip + 0x6ff56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434331: sub esi, edx; lea r11, qword ptr [rip + 0x700d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004341b1: sub esi, edx; lea r11, qword ptr [rip + 0x70256]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434031: sub esi, edx; lea r11, qword ptr [rip + 0x703d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433eb1: sub esi, edx; lea r11, qword ptr [rip + 0x70556]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433d31: sub esi, edx; lea r11, qword ptr [rip + 0x706d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433bb1: sub esi, edx; lea r11, qword ptr [rip + 0x70856]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433a31: sub esi, edx; lea r11, qword ptr [rip + 0x709d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004338b8: sub esi, edx; lea r11, qword ptr [rip + 0x70b4f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043528c: sub esi, edx; sub rdi, rdx; lea r11, qword ptr [rip + 0x6f178]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000047d2c4: sub esp, 0x1000; mov rsi, rsp; syscall; 
0x0000000000401e2d: sub esp, 0x10; test rax, rax; je 0x1e3e; xor esi, esi; mov edi, 1; call rax; 
0x000000000043f0f2: sub esp, 0x18; test rax, rax; je 0x3f101; mov edi, 0x6cd720; call rax; 
0x0000000000444a99: sub esp, 0x18; test rax, rax; mov qword ptr [rsp], rcx; je 0x44aac; mov edi, 0x6cc140; call rax; 
0x0000000000473892: sub esp, 0x30; mov rdx, rsp; syscall; 
0x000000000049f574: sub esp, 0x40; test rax, rax; je 0x9f583; mov edi, 0x6cc100; call rax; 
0x0000000000403cfc: sub esp, 0x48; test rax, rax; je 0x3d0b; mov edi, 0x6cd0a0; call rax; 
0x00000000004172af: sub esp, 0x80; call 0x432d0; add rsp, 0x80; mov qword ptr [rip + 0x2b62e0], rdx; add dword ptr [rip + 0x2b62d5], 1; ret; 
0x000000000045d1a2: sub esp, 0x80; call 0x43300; add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x000000000047357f: sub esp, 0x80; call 0x43300; add rsp, 0x80; pop rbx; ret; 
0x00000000004527e7: sub esp, 0x80; call 0x43300; add rsp, 0x80; xor eax, eax; add rsp, 8; ret; 
0x0000000000472fcb: sub esp, 0x98; syscall; 
0x00000000004a1c71: sub esp, 8; add rsp, 8; ret; 
0x0000000000479d99: sub esp, 8; call qword ptr [rip + 0x2523e6]; xor eax, eax; add rsp, 8; ret; 
0x00000000004735b6: sub esp, 8; syscall; 
0x000000000047992e: sub esp, 8; test rax, rax; je 0x7993d; mov edi, 0x6cc100; call rax; 
0x0000000000480da6: sub esp, 8; test rax, rax; je 0x80db5; mov edi, 0x6cc140; call rax; 
0x00000000004bf389: sub esp, esi; jmp qword ptr [rbx]; 
0x0000000000425cf4: sub r11, rdx; jbe 0x25d04; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000418801: sub r8, qword ptr [r8]; test rax, rax; je 0x1880b; call rax; 
0x0000000000416658: sub r8, rcx; lea eax, dword ptr [r8 - 1]; ret; 
0x000000000046d478: sub r8, rcx; sar r8, 2; lea eax, dword ptr [r8 - 1]; ret; 
0x000000000041f638: sub rax, 0x10; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000043f72b: sub rax, 1; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000043e5e3: sub rax, 1; ret; 
0x0000000000400cc1: sub rax, 8; mov qword ptr [rip + 0x2cd6e4], rax; nop; leave; ret; 
0x0000000000480e15: sub rax, qword ptr [0]; ret; 
0x0000000000417a6d: sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000480e14: sub rax, qword ptr fs:[0]; ret; 
0x0000000000413437: sub rax, r12; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000046ce7b: sub rax, r14; pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000000415d3d: sub rax, r14; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000415bdc: sub rax, rbp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000046f6ca: sub rax, rbp; pop rbp; pop r12; ret; 
0x00000000004244c8: sub rax, rdi; ret; 
0x00000000004133e3: sub rax, rdx; mov rdx, rax; mov rax, qword ptr [rbx + 0xd8]; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x00000000004135dd: sub rax, rdx; ret; 
0x000000000043e796: sub rax, rdx; vzeroupper; ret; 
0x0000000000444d8c: sub rcx, qword ptr [rdx + 0x10]; cmp rcx, qword ptr [rdx + 0x28]; jae 0x44d70; mov eax, 1; ret; 
0x00000000004557ee: sub rcx, r12; mov rdi, rbx; mov rdx, rcx; mov qword ptr [rbp - 0x4b0], rcx; call qword ptr [rax + 0x38]; 
0x0000000000430b42: sub rdi, 0x20; lea r11, qword ptr [rip + 0x73703]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430a51: sub rdi, 0x40; lea r11, qword ptr [rip + 0x737f4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430992: sub rdi, 0x40; lea r11, qword ptr [rip + 0x738b3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043528e: sub rdi, rdx; lea r11, qword ptr [rip + 0x6f178]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434f2d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x6f4d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434dad: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x6f656]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434c2d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x6f7d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434aad: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x6f956]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043492d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x6fad6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004347ad: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x6fc56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043462d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x6fdd6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004344ad: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x6ff56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043432d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x700d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004341ad: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x70256]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043402d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x703d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433ead: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x70556]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433d2d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x706d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433bad: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x70856]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433a2d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x709d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004338b4: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x70b4f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433180: sub rdx, 0x40; lea r11, qword ptr [rip + 0x710c5]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004330c0: sub rdx, 0x40; sfence; lea r11, qword ptr [rip + 0x71182]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000046d57b: sub rdx, qword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; shr rdx, 2; sub eax, edx; ret; 
0x000000000046d590: sub rdx, qword ptr [rax + 8]; mov eax, dword ptr [rdi + 0x10]; shr rdx, 2; sub eax, edx; ret; 
0x0000000000410929: sub rdx, r14; call qword ptr [rax + 0x70]; 
0x00000000004268ad: sub rdx, rax; jbe 0x26b60; add rax, rdi; add rax, rcx; ret; 
0x0000000000426b23: sub rdx, rax; jbe 0x26b60; add rax, rdi; ret; 
0x0000000000426b33: sub rdx, rax; jbe 0x26b60; lea rax, qword ptr [rdi + rax + 0x10]; ret; 
0x0000000000426b43: sub rdx, rax; jbe 0x26b60; lea rax, qword ptr [rdi + rax + 0x20]; ret; 
0x0000000000426b53: sub rdx, rax; jbe 0x26b60; lea rax, qword ptr [rdi + rax + 0x30]; ret; 
0x0000000000400b39: sub rdx, rax; mov rax, qword ptr [rbp - 0x10]; mov qword ptr [rax], rdx; nop; leave; ret; 
0x000000000043c2fb: sub rdx, rcx; lea r11, qword ptr [rip + 0x686cb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000043bcdb: sub rdx, rcx; lea r11, qword ptr [rip + 0x68c6b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000453a01: sub rdx, rsi; call qword ptr [rax + 0x38]; 
0x0000000000442bf0: sub rdx, rsi; mov eax, r12d; syscall; 
0x0000000000410fd1: sub rdx, rsi; mov rdi, r15; call rax; 
0x0000000000412bf3: sub rdx, rsi; mov rdi, rbx; call rax; 
0x000000000045dc8a: sub rdx, rsi; sar rdx, 2; call qword ptr [rax + 0x38]; 
0x000000000043098e: sub rsi, 0x40; sub rdi, 0x40; lea r11, qword ptr [rip + 0x738b3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434f30: sub rsi, rdx; lea r11, qword ptr [rip + 0x6f4d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434db0: sub rsi, rdx; lea r11, qword ptr [rip + 0x6f656]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434c30: sub rsi, rdx; lea r11, qword ptr [rip + 0x6f7d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434ab0: sub rsi, rdx; lea r11, qword ptr [rip + 0x6f956]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434930: sub rsi, rdx; lea r11, qword ptr [rip + 0x6fad6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004347b0: sub rsi, rdx; lea r11, qword ptr [rip + 0x6fc56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434630: sub rsi, rdx; lea r11, qword ptr [rip + 0x6fdd6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004344b0: sub rsi, rdx; lea r11, qword ptr [rip + 0x6ff56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434330: sub rsi, rdx; lea r11, qword ptr [rip + 0x700d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004341b0: sub rsi, rdx; lea r11, qword ptr [rip + 0x70256]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434030: sub rsi, rdx; lea r11, qword ptr [rip + 0x703d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433eb0: sub rsi, rdx; lea r11, qword ptr [rip + 0x70556]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433d30: sub rsi, rdx; lea r11, qword ptr [rip + 0x706d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433bb0: sub rsi, rdx; lea r11, qword ptr [rip + 0x70856]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433a30: sub rsi, rdx; lea r11, qword ptr [rip + 0x709d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004338b7: sub rsi, rdx; lea r11, qword ptr [rip + 0x70b4f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043528b: sub rsi, rdx; sub rdi, rdx; lea r11, qword ptr [rip + 0x6f178]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000047d2c3: sub rsp, 0x1000; mov rsi, rsp; syscall; 
0x0000000000401e2c: sub rsp, 0x10; test rax, rax; je 0x1e3e; xor esi, esi; mov edi, 1; call rax; 
0x000000000043f0f1: sub rsp, 0x18; test rax, rax; je 0x3f101; mov edi, 0x6cd720; call rax; 
0x0000000000444a98: sub rsp, 0x18; test rax, rax; mov qword ptr [rsp], rcx; je 0x44aac; mov edi, 0x6cc140; call rax; 
0x0000000000473891: sub rsp, 0x30; mov rdx, rsp; syscall; 
0x000000000049f573: sub rsp, 0x40; test rax, rax; je 0x9f583; mov edi, 0x6cc100; call rax; 
0x0000000000403cfb: sub rsp, 0x48; test rax, rax; je 0x3d0b; mov edi, 0x6cd0a0; call rax; 
0x00000000004172ae: sub rsp, 0x80; call 0x432d0; add rsp, 0x80; mov qword ptr [rip + 0x2b62e0], rdx; add dword ptr [rip + 0x2b62d5], 1; ret; 
0x000000000045d1a1: sub rsp, 0x80; call 0x43300; add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x000000000047357e: sub rsp, 0x80; call 0x43300; add rsp, 0x80; pop rbx; ret; 
0x00000000004527e6: sub rsp, 0x80; call 0x43300; add rsp, 0x80; xor eax, eax; add rsp, 8; ret; 
0x0000000000472fca: sub rsp, 0x98; syscall; 
0x00000000004a1c70: sub rsp, 8; add rsp, 8; ret; 
0x0000000000479d98: sub rsp, 8; call qword ptr [rip + 0x2523e6]; xor eax, eax; add rsp, 8; ret; 
0x00000000004735b5: sub rsp, 8; syscall; 
0x000000000047992d: sub rsp, 8; test rax, rax; je 0x7993d; mov edi, 0x6cc100; call rax; 
0x0000000000480da5: sub rsp, 8; test rax, rax; je 0x80db5; mov edi, 0x6cc140; call rax; 
0x00000000004003da: syscall; 
0x000000000047309e: syscall; add rsp, 0x98; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000440015: syscall; cmp rax, -0x1000; ja 0x40060; add rsp, 0x60; pop rbx; ret; 
0x00000000004733b5: syscall; cmp rax, -0x1000; ja 0x733c8; pop rbx; ret; 
0x000000000043f4b5: syscall; cmp rax, -0xfff; jae 0x44fb0; ret; 
0x0000000000443317: syscall; pop rdx; pop rsi; ret; 
0x000000000046fdb5: syscall; ret; 
0x000000000049697d: syscall; test edx, edx; jne 0x9695f; mov dword ptr fs:[0x2d0], eax; ret; 
0x00000000004336e1: sysret; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043c90d: test ah, 0x20; jne 0x3c9f0; test ah, 0x40; jne 0x3ca00; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000043c916: test ah, 0x40; jne 0x3ca00; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000043c82e: test ah, 0x40; jne 0x3ca00; test dh, 0x40; jne 0x3c770; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000048c382: test ah, 0x80; je 0x8c440; mov rax, rdx; pop rbx; ret; 
0x000000000044a5cf: test ah, bh; add al, 0; add byte ptr [rax - 0x73], cl; add dword ptr [rax + 0x39], ecx; ret; 
0x00000000004c8e59: test ah, bh; call qword ptr [rax]; 
0x00000000004763d7: test ah, bl; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000045eed8: test ah, cl; add byte ptr [rax], al; add byte ptr [rbx - 0x4db43], al; call qword ptr [rax]; 
0x0000000000441f27: test ah, cl; add eax, 0xf6310000; mov rdi, r15; call rbx; 
0x0000000000458b57: test ah, dh; adc dword ptr [rax], eax; add byte ptr [rax - 0x12743], al; jmp qword ptr [rsi + 0xf]; 
0x00000000004c9975: test al, 0; add byte ptr [rax + 0x32], cl; std; call rsp; 
0x0000000000416059: test al, 0; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000049ad03: test al, 0; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000044f824: test al, 0; add byte ptr [rax], al; mov dword ptr [rdi + 8], 1; mov qword ptr [rdi + 0x10], 0; mov rdi, qword ptr [rdi]; syscall; 
0x000000000049cfd3: test al, 0; add byte ptr [rax], al; ret; 
0x000000000043c8bc: test al, 0x20; jne 0x3c980; test al, 0x40; jne 0x3c990; lea rax, qword ptr [rdi + 7]; ret; 
0x000000000046d216: test al, 0x28; add dword ptr [rax], eax; add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rdi*4 - 0xa]; ret 0x7508; 
0x00000000004c7618: test al, 0x28; sti; jmp qword ptr [rcx]; 
0x00000000004c9ce8: test al, 0x39; std; jmp qword ptr [rdx]; 
0x000000000043c8c4: test al, 0x40; jne 0x3c990; lea rax, qword ptr [rdi + 7]; ret; 
0x000000000043c7ac: test al, 0x40; jne 0x3c990; test dl, 0x40; jne 0x3c770; lea rax, qword ptr [rdi + 7]; ret; 
0x0000000000477985: test al, 0x66; add r8b, bpl; ret 0xf8a5; 
0x00000000004c6318: test al, 0x7e; cli; jmp rdx; 
0x00000000004c8098: test al, 0x8f; sti; jmp qword ptr [rsi]; 
0x00000000004ba657: test al, 0x97; xchg eax, esp; ret; 
0x00000000004c4e38: test al, 0xb7; clc; call qword ptr [rcx + 0x1c]; 
0x0000000000497c7d: test al, 0xb8; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000442e67: test al, 0xb8; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000043ff84: test al, 0xbe; adc byte ptr [rax], al; add byte ptr [rax], al; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x00000000004bb19b: test al, 0xe0; sar byte ptr [rsi + rax*2], 0xf8; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x0000000000445f8d: test al, 0xe8; lea ebp, dword ptr [rdi - 0x76b3fffd]; out 0x48, eax; mov eax, dword ptr [rbp - 0x58]; call rax; 
0x00000000004c29c9: test al, 0xf6; jmp qword ptr [rsi]; 
0x00000000004a4101: test al, 0xf8; call rax; 
0x00000000004a41b8: test al, 0xf8; inc dword ptr [rsi + 0x16fff8c1]; ret 0xfff8; 
0x0000000000442f29: test al, 0xf; xchg eax, edi; ror byte ptr [rdi], 0x92; ret 0xd029; 
0x000000000043ffa6: test al, 2; cmove eax, edx; ret; 
0x0000000000411113: test al, ah; add al, byte ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x00000000004611c4: test al, al; add byte ptr [rax], al; add byte ptr [rbx - 0x106f43], al; call qword ptr [rax]; 
0x000000000041fa7a: test al, al; jne 0x1faa8; mov rax, qword ptr [rip + 0x2adb6b]; test rax, rax; je 0x1fa8c; call rax; 
0x000000000042efca: test al, al; jne 0x2efb0; xor eax, eax; sub eax, ecx; ret; 
0x0000000000480359: test al, al; jne 0x802a8; movsx eax, dl; neg eax; ret; 
0x000000000044a92f: test al, cl; add al, 0; add byte ptr [rcx - 0x73], cl; add dword ptr [r8 + 0x39], r9d; ret; 
0x000000000041b080: test al, dh; add eax, 0xf6410000; ret 0xf01; 
0x0000000000421d86: test ax, 1; ret; 
0x000000000044d724: test bh, al; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; sti; mov eax, 3; syscall; 
0x00000000004613d4: test bh, al; add byte ptr [rax], al; add byte ptr [rbx - 0x106f43], al; call qword ptr [rax]; 
0x000000000049aba4: test bh, bh; jns 0x9abab; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x000000000049d8c4: test bh, bh; jns 0x9d8cb; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x000000000049f204: test bh, bh; jns 0x9f20b; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x000000000045b92c: test bh, ch; add eax, dword ptr [rax]; add al, ch; fisubr dword ptr [rdx]; sti; jmp qword ptr [rsi + 0x2e]; 
0x0000000000443a7c: test bh, cl; add dword ptr [rax], eax; add byte ptr [rbx - 0x7cbefe39], al; ret 0x4901; 
0x000000000044726e: test bh, dh; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000419b24: test bh, dl; add al, 0; add dh, dh; ret; 
0x00000000004c7e81: test bl, bh; jmp rsi; 
0x000000000045c8e3: test bl, dl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000047dd35: test byte ptr [r8 - 0x77], r9b; ret; 
0x000000000049cd88: test byte ptr [r9 + 0xc7], 0x40; jne 0x9cdd8; cmp qword ptr [r9 + 0x38], 0; je 0x9ce03; add rsp, 0x18; ret; 
0x0000000000479d7e: test byte ptr [rax + 0x314], 4; jne 0x79d98; or byte ptr [rdi + 0x315], 4; xor eax, eax; ret; 
0x000000000043ff68: test byte ptr [rax + 0x63], 0xff; mov eax, 0x48; syscall; 
0x0000000000441b53: test byte ptr [rax + 0xa], al; add byte ptr [rax], al; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441fc3: test byte ptr [rax + 3], dl; add byte ptr [rax], al; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000446397: test byte ptr [rax + rax - 0x6f420000], ah; jo 0x463e4; add byte ptr [rdi + 0x6cd6d8], bh; call rax; 
0x0000000000496593: test byte ptr [rax + rax*4], ah; add byte ptr [rax], al; add byte ptr [rcx], bh; ret; 
0x0000000000495b69: test byte ptr [rax + rbx*8], ah; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000046be4e: test byte ptr [rax + rbx*8], ah; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ror dword ptr [rcx + rcx*4 - 0x12], cl; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000046be1a: test byte ptr [rax + rbx*8], ah; add byte ptr [rax], al; add byte ptr [rdx + 0x10], bh; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000495c2c: test byte ptr [rax + rdx*4], ah; add byte ptr [rax], al; add byte ptr [rbx + 0x3950245c], cl; ret; 
0x00000000004c8104: test byte ptr [rax - 0x6bf80000], dl; std; call rcx; 
0x000000000046fcee: test byte ptr [rax - 0x73], 0x54; and al, 0x48; mov rdi, r12; call rbx; 
0x0000000000442cbe: test byte ptr [rax - 0x75], 0x7c; and al, 8; xor eax, eax; syscall; 
0x0000000000441091: test byte ptr [rax - 0x75], 0x7d; add byte ptr [rcx + 0xf], al; lahf; ret; 
0x00000000004417d4: test byte ptr [rax - 0x77], 0xc3; call rax; 
0x000000000040ff98: test byte ptr [rax - 0x77], 0xdf; call qword ptr [rax + 0x10]; 
0x0000000000414f68: test byte ptr [rax - 0x77], 0xdf; call qword ptr [rax + 0x58]; 
0x00000000004133f2: test byte ptr [rax - 0x77], 0xdf; call qword ptr [rax + 0x70]; 
0x0000000000410925: test byte ptr [rax - 0x77], 0xdf; sub rdx, r14; call qword ptr [rax + 0x70]; 
0x0000000000442c79: test byte ptr [rax - 0x77], 4; and al, 0x48; mov edx, eax; mov eax, r12d; syscall; 
0x000000000047dd36: test byte ptr [rax - 0x77], cl; ret; 
0x0000000000478831: test byte ptr [rax], ah; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004c7515: test byte ptr [rax], al; add byte ptr [rax + 0x23], bl; sti; jmp qword ptr [rdi]; 
0x000000000046f05a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add rax, 3; ret; 
0x0000000000426afa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, qword ptr [rax + rdi + 0x10]; ret; 
0x000000000042d86a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, qword ptr [rax + rdi - 0x10]; ret; 
0x000000000043c9ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 0xa]; ret; 
0x000000000043c9ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 0xb]; ret; 
0x000000000043c9da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 0xc]; ret; 
0x000000000043c9ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 0xd]; ret; 
0x000000000043c9fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 0xe]; ret; 
0x000000000043c93a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 1]; ret; 
0x000000000043c94a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 2]; ret; 
0x000000000043c95a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 3]; ret; 
0x000000000043c96a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 4]; ret; 
0x000000000043c97a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 5]; ret; 
0x000000000043c98a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 6]; ret; 
0x000000000043c99a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 8]; ret; 
0x000000000043c9aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 9]; ret; 
0x000000000043c92a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi]; ret; 
0x000000000043c38a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, qword ptr [rdi]; ret; 
0x000000000043bd6a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x000000000043bd7a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000421c3a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x16; ret; 
0x000000000044326a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x63; syscall; 
0x000000000047370a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x68; syscall; 
0x000000000047370a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x68; syscall; ret; 
0x00000000004736fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6b; syscall; 
0x00000000004736fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6b; syscall; ret; 
0x000000000047371a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6c; syscall; 
0x000000000047371a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6c; syscall; ret; 
0x00000000004409aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xb; syscall; 
0x00000000004171da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000049b89a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 5; ret; 
0x000000000044322a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 8; syscall; 
0x0000000000416f1a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000049a79a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rip + 0x23c11a]; ret; 
0x000000000043592a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000049cf5a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + 0x98], rsi; ret; 
0x00000000004501aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -0x10; add rax, qword ptr fs:[0]; ret; 
0x00000000004501ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x00000000004501ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x00000000004171ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -1; ret; 
0x000000000045032a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xf; syscall; 
0x000000000046f07a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 1; ret; 
0x000000000046f08a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 2; ret; 
0x000000000046f09a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 3; ret; 
0x000000000046f0aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 4; ret; 
0x000000000046f0ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 5; ret; 
0x000000000046f0ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 6; ret; 
0x000000000046f0da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 7; ret; 
0x000000000046d72a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x000000000041724a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000049cf2a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000049cf6a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x000000000049cfca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x000000000049cfba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000049cf7a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x0000000000415bfa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xd8]; mov rax, qword ptr [rax + 0x40]; jmp rax; 
0x00000000004462fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x290621]; ret; 
0x000000000041722a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2b3e89]; ret; 
0x000000000041725a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rdi; ret; 
0x000000000043f4ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rdx; mov eax, esi; syscall; 
0x00000000004271ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x000000000041282a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movzx eax, byte ptr [rdx]; ret; 
0x0000000000435aba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000435a3a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000043f4a6: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0x25; syscall; 
0x00000000004737d8: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x15; syscall; 
0x00000000004409e8: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x1c; syscall; 
0x00000000004736e8: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x66; syscall; 
0x00000000004409c8: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xa; syscall; 
0x00000000004008ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x000000000043ee6a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x000000000041259a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000040130a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor edi, edi; mov eax, edx; syscall; 
0x000000000043c76a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor rax, rax; ret; 
0x00000000004ca09c: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x10], bh; add dword ptr [rdx], 0x69; ret; 
0x00000000004c7458: test byte ptr [rax], al; add byte ptr [rax], al; fadd qword ptr [rbx + 0xd200000]; sti; jmp qword ptr [rbp + 0xb]; 
0x00000000004c4028: test byte ptr [rax], al; add byte ptr [rax], al; lodsb al, byte ptr [rsi]; add byte ptr [r8], r8b; sar byte ptr [rbx], 0xf8; call qword ptr [rbx + 5]; 
0x000000000046eb5c: test byte ptr [rax], bh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000049b7fb: test byte ptr [rax], bl; add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; jl 0x9b828; sub byte ptr [rax - 0x7d], cl; ret; 
0x00000000004c4904: test byte ptr [rax], bl; add byte ptr [rax], bl; ret 0xfffd; 
0x0000000000419c3b: test byte ptr [rax], dh; add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x000000000046eb74: test byte ptr [rax], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000048c386: test byte ptr [rbp + 0x48000000], dh; mov eax, edx; pop rbx; ret; 
0x00000000004033f3: test byte ptr [rbp + 4], ah; add byte ptr [rax], al; mov edi, 0x6cd720; call rbx; 
0x0000000000441e8e: test byte ptr [rbp + 5], ah; add byte ptr [rax], al; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441eae: test byte ptr [rbp + 6], ah; add byte ptr [rax], al; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000417f36: test byte ptr [rbp - 0xa000000], ah; ret; 
0x000000000048c77a: test byte ptr [rbx + 0x2412433d], 0; jmp rax; 
0x0000000000413ccf: test byte ptr [rbx + 0x74], 2; je 0x13d40; movsxd rdx, ecx; mov eax, 2; syscall; 
0x000000000047a70b: test byte ptr [rbx + rcx], bl; add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r15]; call rax; 
0x000000000040da27: test byte ptr [rbx + rdx*8 - 0x76bb0001], dh; and byte ptr [rcx - 0x5416fb90], cl; sar edi, cl; jmp qword ptr [rsi + 0xf]; 
0x000000000049c96d: test byte ptr [rbx - 0x18000000], bl; cdq; sbb dh, bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000432437: test byte ptr [rbx - 0x76b303aa], 0x5f; out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000041eb67: test byte ptr [rbx - 0xa000000], cl; ret; 
0x00000000004162be: test byte ptr [rbx], 0x80; jne 0x162d0; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000004c1404: test byte ptr [rbx], ah; add byte ptr [rax], al; sbb byte ptr [rdi - 0xb], bl; jmp qword ptr [rax]; 
0x0000000000441d20: test byte ptr [rbx], bh; add eax, 0xf6310000; mov rdi, r12; call rbx; 
0x000000000043dd92: test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x000000000044a06c: test byte ptr [rbx], cl; add dword ptr [rax], eax; add byte ptr [rcx - 0xa], al; ret; 
0x000000000041815e: test byte ptr [rbx], dl; add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x18eb; 
0x000000000048c568: test byte ptr [rbx], dl; add dword ptr [rax], eax; add byte ptr [rsi + 0x48c500], bh; mov edi, 0x6cd9c0; call rax; 
0x000000000049ad92: test byte ptr [rcx + 0x40000000], bh; cmp dh, 0x2f; ja 0x9b5ee; movsxd rcx, dword ptr [r14 + rsi*4]; add rcx, r14; jmp rcx; 
0x000000000047afab: test byte ptr [rcx + 0x48000005], ah; mov eax, dword ptr [rbx + 0x10]; add rax, qword ptr [r15]; call rax; 
0x00000000004040ef: test byte ptr [rcx + 0x49000001], dh; movsxd rdi, esp; mov eax, 3; syscall; 
0x000000000049cd89: test byte ptr [rcx + 0xc7], 0x40; jne 0x9cdd8; cmp qword ptr [r9 + 0x38], 0; je 0x9ce03; add rsp, 0x18; ret; 
0x000000000043dd89: test byte ptr [rcx + rax - 0x67d0000], al; adc dword ptr [rdi], ecx; test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x00000000004447ef: test byte ptr [rcx + rax], ah; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000049e8cf: test byte ptr [rcx + rax], al; add byte ptr [rax], al; mov rsi, qword ptr [r14 + 8]; mov rdx, qword ptr [r15]; mov rdi, rbp; call rbx; 
0x000000000046e29f: test byte ptr [rcx + rax], ch; add byte ptr [rax], al; bsr rsi, rsi; lea rax, qword ptr [rdi + rsi]; ret; 
0x000000000049d542: test byte ptr [rcx + rcx*4 - 0x19], 0x41; call rdi; 
0x000000000046fb73: test byte ptr [rcx + rcx*4 - 0x19], 0x4d; mov ecx, edi; call rbx; 
0x0000000000498d0a: test byte ptr [rcx - 0x75000000], dh; adc byte ptr [r13 - 0x497bf040], al; add dword ptr [rax], eax; add byte ptr [rax + 1], cl; ret; 
0x00000000004586ca: test byte ptr [rcx - 0x77000000], dh; ret 0xe283; 
0x0000000000440a22: test byte ptr [rcx - 0x77], 0xd4; mov rbp, rax; call rax; 
0x0000000000423776: test byte ptr [rcx], 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000045724d: test byte ptr [rcx], al; add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rcx - 0x77]; ret 0x8b4c; 
0x00000000004c9245: test byte ptr [rcx], al; ret; 
0x00000000004597f1: test byte ptr [rcx], dl; or byte ptr [rax], al; add byte ptr [rax - 0x12743], al; jmp qword ptr [rdi - 0x75]; 
0x000000000047f4f0: test byte ptr [rdi + 0x314], 8; je 0x7f55d; pop rbx; ret; 
0x0000000000413620: test byte ptr [rdi + 0x74], 2; je 0x13658; movsxd rdi, dword ptr [rdi + 0x70]; xor eax, eax; syscall; 
0x000000000044212c: test byte ptr [rdi + 3], ah; add byte ptr [rax], al; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000046b404: test byte ptr [rdi + rdi*8 - 1], bl; dec dword ptr [rax + 0x39]; add dword ptr [rbp + 0xf48ff78], ecx; add dword ptr [r8 - 0x7d], ecx; ret 0x8508; 
0x000000000044d090: test byte ptr [rdi - 0x16000003], dl; cmp ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000004189c7: test byte ptr [rdi - 0xa000000], cl; ret; 
0x0000000000440e9a: test byte ptr [rdi], 0x84; ret 0; 
0x00000000004a06fe: test byte ptr [rdi], 0x84; ret; 
0x000000000041ec46: test byte ptr [rdi], 0x94; ret 0x8548; 
0x0000000000495c47: test byte ptr [rdi], 0x94; ret 0xd021; 
0x00000000004695ed: test byte ptr [rdi], 0x9f; ret 0xd629; 
0x000000000046e79c: test byte ptr [rdi], al; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x0000000000400603: test byte ptr [rdi], al; add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000046e784: test byte ptr [rdi], cl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x0000000000411f24: test byte ptr [rdi], dl; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x000000000044185c: test byte ptr [rdi], dl; or eax, 0xf6310000; mov rdi, r15; call rbx; 
0x000000000046e211: test byte ptr [rdx + 0x48000001], bh; bsr eax, eax; add rax, rdi; ret; 
0x0000000000470fd1: test byte ptr [rdx], dl; sahf; in al, 0x4b; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000426800: test byte ptr [rip + 0x2a6ec1], 0x10; mov edx, 0x426230; mov eax, 0x43e180; cmove rax, rdx; ret; 
0x000000000047c42e: test byte ptr [rip - 0x428], al; add dword ptr [rax - 0x7d], ecx; ret 0x4101; 
0x000000000046e03d: test byte ptr [rsi + 0x48000000], bl; bsf eax, edx; ret; 
0x000000000042ef9a: test byte ptr [rsi + 0x48fffffe], dl; bsf ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000434db7: test byte ptr [rsi], 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000406225: test byte ptr [rsi], al; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004243ad: test byte ptr [rsi], bh; add byte ptr [rax], al; bsf rax, rdx; ret; 
0x00000000004c1f04: test byte ptr [rsi], ch; add byte ptr [rax], al; sbb ch, cl; cmc; jmp rdx; 
0x000000000044f1dd: test byte ptr [rsi], dl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000043ee82: test ch, 0xf0; je 0x3ee72; movzx eax, cl; pop rbx; ret; 
0x00000000004404d6: test ch, ch; je 0x404e6; movsxd rdi, dword ptr [rsp + 0x10]; mov eax, 3; syscall; 
0x000000000041e85f: test ch, dh; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000446496: test ch, dh; add dword ptr [rax], eax; add byte ptr [rsi + 0x447090], bh; mov edi, 0x6cd6d8; call rax; 
0x000000000044696b: test cl, bh; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000041b151: test cl, bh; add eax, 0xf6410000; ret 0xf01; 
0x000000000043e26f: test cl, cl; jne 0x3e260; ret; 
0x000000000043e31f: test cl, cl; jne 0x3e310; ret; 
0x000000000043e5df: test cl, cl; jne 0x3e5d0; sub rax, 1; ret; 
0x0000000000421206: test cl, dl; add byte ptr [rax], al; add byte ptr [rcx + 9], al; ret; 
0x000000000043c837: test dh, 0x40; jne 0x3c770; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000043dcc6: test dh, 0x40; jne 0x3dc90; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x000000000043ef02: test dh, 0xf0; je 0x3ee72; lea rax, qword ptr [rdx + rdx]; pop rbx; and eax, 0x7ff80000; ret; 
0x000000000043c87d: test dh, 4; jne 0x3c770; lea rax, qword ptr [rdi + 0xb]; ret; 
0x0000000000421aa1: test dh, 7; mov eax, 0x16; je 0x21ab0; ret; 
0x00000000004713ad: test dh, cl; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004477e5: test dh, dh; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000044e876: test dh, dl; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000049aba3: test dil, dil; jns 0x9abab; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x000000000049d8c3: test dil, dil; jns 0x9d8cb; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x000000000049f203: test dil, dil; jns 0x9f20b; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x000000000043c7b4: test dl, 0x40; jne 0x3c770; lea rax, qword ptr [rdi + 7]; ret; 
0x000000000043dc12: test dl, 0x40; jne 0x3dc90; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x0000000000427274: test dl, 2; je 0x271e4; mov word ptr [rax + rdx - 2], cx; ret; 
0x000000000043c7e2: test dl, 4; jne 0x3c770; lea rax, qword ptr [rdi + 3]; ret; 
0x000000000041db69: test dl, cl; add dword ptr [rax], eax; add byte ptr [rcx - 0xa], al; ret 0xf01; 
0x000000000046f027: test dl, dl; je 0x6f040; mov cl, dl; and cl, 0xf; je 0x6f050; ret; 
0x000000000043e48f: test dl, dl; jne 0x3e480; lea rax, qword ptr [rcx - 1]; ret; 
0x000000000041e772: test dword ptr [rax + 0x48000000], edi; mov eax, edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048c98b: test dword ptr [rax + 0x48000000], edx; mov edx, dword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x000000000041316b: test dword ptr [rax + 0x48000000], esp; mov dword ptr [rax + 0x130], 0x4a29c0; mov rax, qword ptr [rbp + 0xd8]; call qword ptr [rax + 0x40]; 
0x00000000004276e9: test dword ptr [rax + 0x48fffffb], edi; mov eax, edi; ret; 
0x0000000000461108: test dword ptr [rax + 0x74ffffef], ecx; and byte ptr [rbx - 0x106f43], al; call qword ptr [rax]; 
0x0000000000460d4f: test dword ptr [rax + 0xffffef], eax; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000043c8bf: test dword ptr [rax + rax + 0x40a80000], edi; jne 0x3c990; lea rax, qword ptr [rdi + 7]; ret; 
0x000000000041a5f7: test dword ptr [rax + rax - 0x74b80000], ecx; add ecx, dword ptr [rax + 0x29]; ret; 
0x000000000043f647: test dword ptr [rax + rax - 0x9cf0000], ecx; mov eax, 2; syscall; 
0x000000000044a608: test dword ptr [rax + rax], 0x428d4800; add ecx, dword ptr [rax + 0x39]; ret; 
0x000000000046179b: test dword ptr [rax - 0x16000006], ebp; ret 0xffef; 
0x0000000000497d44: test dword ptr [rax - 0x3f], 0x894803e0; ret 0x8948; 
0x00000000004423fe: test dword ptr [rax - 0x41000006], edx; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r14; call rbx; 
0x000000000044251e: test dword ptr [rax - 0x41000007], edx; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r15; call rbx; 
0x000000000046d18d: test dword ptr [rax - 0x75000000], esp; add byte ptr [r8 - 0x75], r9b; push rax; and cl, ch; sar dh, 0xff; jmp qword ptr [rsi - 0x70]; 
0x000000000046063f: test dword ptr [rax - 0x77], 0x868b49c2; fadd dword ptr [rax]; add byte ptr [rax], al; call qword ptr [rax + 0x38]; 
0x00000000004c7635: test dword ptr [rax], eax; add al, bh; sub bl, bh; call rdx; 
0x000000000045d329: test dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000049bd4b: test dword ptr [rax], eax; add rax, rbp; jmp rax; 
0x000000000049bd4a: test dword ptr [rax], r8d; add rax, rbp; jmp rax; 
0x000000000044231e: test dword ptr [rbp - 0x41000004], esp; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r13; call rbx; 
0x000000000044259e: test dword ptr [rbp - 0x4100000b], esi; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r15; call rbx; 
0x000000000042d05f: test dword ptr [rbp - 0xc000004], esp; ret; 
0x000000000043c878: test dword ptr [rbx + 1], eax; add byte ptr [rax], al; test dh, 4; jne 0x3c770; lea rax, qword ptr [rdi + 0xb]; ret; 
0x000000000042fe97: test dword ptr [rbx + 7], edx; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004302e6: test dword ptr [rbx + rax], eax; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000498bb9: test dword ptr [rbx - 0x16000002], esi; ret; 
0x000000000046869a: test dword ptr [rbx - 0x38b7d78a], 0; add byte ptr [rax - 0x77], cl; ret 0x83e8; 
0x0000000000432273: test dword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x00000000004356b3: test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x0000000000410248: test dword ptr [rbx], 0x8000; je 0x10258; mov eax, edx; pop rbx; ret; 
0x000000000048c244: test dword ptr [rbx], 0x8000; je 0x8c250; mov eax, edx; pop rbx; ret; 
0x0000000000418d60: test dword ptr [rbx], ecx; add eax, dword ptr [rax]; add byte ptr [rcx - 0xa], al; ret; 
0x000000000045293b: test dword ptr [rbx], esp; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000426a9a: test dword ptr [rcx + 0x48000000], esi; xor eax, eax; ret; 
0x0000000000427400: test dword ptr [rcx + 0x48fffffe], esp; mov eax, edi; ret; 
0x0000000000410ac6: test dword ptr [rcx + 0xf], 0x8948c046; ret 0x8949; 
0x000000000042fe6d: test dword ptr [rcx + 7], esi; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042fd7d: test dword ptr [rcx + 8], esp; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042fca9: test dword ptr [rcx + 9], eax; add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000042fc8d: test dword ptr [rcx + 9], edx; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000450f2e: test dword ptr [rcx - 0x3f], 0x834904eb; ret; 
0x0000000000442267: test dword ptr [rcx - 0x41000006], edi; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r12; call rbx; 
0x000000000044235e: test dword ptr [rcx - 0x41000008], eax; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r14; call rbx; 
0x000000000044255e: test dword ptr [rcx - 0x4100000a], esp; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r15; call rbx; 
0x0000000000412271: test dword ptr [rcx - 0x41ffffff], eax; add cl, byte ptr [rcx]; add byte ptr [rax], al; mov edi, 0x4a2ac7; mov eax, 2; syscall; 
0x0000000000405cf2: test dword ptr [rcx - 0x7d], 0x34e801c4; out 1, al; add byte ptr [rax + 0x29], cl; ret; 
0x0000000000405d82: test dword ptr [rcx - 0x7d], 0xa4e801c5; in eax, 1; add byte ptr [rax + 0x29], cl; ret; 
0x000000000047fb47: test dword ptr [rcx], eax; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000044a5eb: test dword ptr [rcx], ecx; add eax, 0x8d480000; add cl, byte ptr [rax + 0x39]; ret; 
0x000000000041be3a: test dword ptr [rcx], edi; add dword ptr [rax], eax; add byte ptr [rbp + 0x39], cl; ret 0x976; 
0x0000000000497c2a: test dword ptr [rcx], edx; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x8308; 
0x00000000004275ea: test dword ptr [rdi + 0x48fffffc], esi; mov eax, edi; ret; 
0x00000000004042eb: test dword ptr [rdi + 0x4dfffffd], esi; test eax, eax; jne 0x42c5; mov rdi, r12; mov eax, 3; syscall; 
0x00000000004603d0: test dword ptr [rdi + rbp*8 - 1], edx; jmp qword ptr [rax]; 
0x0000000000496e33: test dword ptr [rdi + rdi*8 - 1], ecx; inc dword ptr [rcx - 0x77]; ret; 
0x000000000045bf1c: test dword ptr [rdi - 0x7c00000c], esi; ret; 
0x000000000042ce75: test dword ptr [rdi - 0xc000002], ecx; ret; 
0x000000000042419a: test dword ptr [rdi], 0x441f; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000420334: test dword ptr [rdi], eax; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x000000000044a969: test dword ptr [rdi], ebp; add eax, 0x8d490000; add r9d, dword ptr [r8 + 0x39]; ret; 
0x000000000042feab: test dword ptr [rdx + 7], ecx; add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000042fda9: test dword ptr [rdx + 8], esp; add byte ptr [rax], al; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000042fbb2: test dword ptr [rdx + rcx], ebp; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000044726f: test dword ptr [rdx], 0x83480000; ret; 
0x000000000044183d: test dword ptr [rdx], 0xf6310000; mov rdi, r14; call rbx; 
0x000000000048cc39: test dword ptr [rip + 0x240a4d], 0x200; jne 0x8cc4c; lea rax, qword ptr [rip + 4]; ret; 
0x000000000048cbe6: test dword ptr [rip + 0x240aa0], 0x200; jne 0x8cbf9; lea rax, qword ptr [rip + 0x67]; ret; 
0x0000000000426b84: test dword ptr [rip + 0x2a6b02], 0x80000; je 0x26b98; lea rax, qword ptr [rip + 0x8449]; ret; 
0x0000000000426b70: test dword ptr [rip + 0x2a6b16], 0x200; jne 0x26b84; lea rax, qword ptr [rip + 0x1d]; ret; 
0x0000000000421fca: test dword ptr [rip + 0x2ab6bc], 0x200; jne 0x21fdd; lea rax, qword ptr [rip + 3]; ret; 
0x0000000000421d77: test dword ptr [rip + 0x2ab947], 4; je 0x21d8a; lea rax, qword ptr [rip + 0x1a966]; ret; 
0x0000000000400f22: test dword ptr [rip - 0x6f000002], edx; leave; ret; 
0x00000000004441cf: test dword ptr [rsi + 0x4b], edi; add byte ptr [rax - 0x7b], cl; ror byte ptr [rax + 0xf], 0x44; ret 0x3880; 
0x000000000043c7dd: test dword ptr [rsi + 1], ebp; add byte ptr [rax], al; test dl, 4; jne 0x3c770; lea rax, qword ptr [rdi + 3]; ret; 
0x000000000043dff2: test dword ptr [rsi + 1], ebp; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000044249e: test dword ptr [rsi - 0x41000004], ecx; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r15; call rbx; 
0x000000000042d15e: test dword ptr [rsi - 0xc000005], esp; ret; 
0x00000000004425be: test dword ptr [rsi*8 + 0x3beffff], ebx; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; call rbx; 
0x0000000000434c37: test dword ptr [rsi], 0x14634900; xchg eax, ebx; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000473992: test dword ptr [rsi], ebp; add byte ptr es:[rax], al; jne 0x739ad; mov eax, 0x14; syscall; 
0x00000000004120ab: test dword ptr [rsi], esp; add dword ptr [rax], eax; add byte ptr [rsi + 0x902], bh; mov edi, 0x4a2ac7; mov eax, 2; syscall; 
0x00000000004300b8: test dword ptr [rsi], esp; add eax, 0xc0310000; ret; 
0x00000000004c9a25: test eax, 0x34980000; std; jmp qword ptr [rcx]; 
0x000000000045d283: test eax, 0x48ffff84; add esp, 0xd8; ret; 
0x00000000004428b3: test eax, 0x49fffdc1; mov edi, dword ptr [rsp]; call rbx; 
0x00000000004bc340: test eax, 0x7d4c8c5d; ret 0xd8f; 
0x0000000000433826: test eax, 0x7f0f41f3; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x00000000004bd072: test eax, 0x80a72de5; mov dh, 0xdd; in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x0000000000444e7e: test eax, 0xd8c48148; add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; ret; 
0x000000000042be92: test eax, 0xe3c4c9eb; jns 0x2befc; rcr dword ptr [rdx], 0xf; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000042c672: test eax, 0xe3c4c9eb; jns 0x2c6dc; rcr dword ptr [rdx], 0xf; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000043e5f8: test eax, 0xfffd3be9; jmp qword ptr [rsi - 0x70]; 
0x00000000004431cb: test eax, eax; cmove eax, edx; ret; 
0x00000000004408d6: test eax, eax; cmovns edx, dword ptr [rsp]; add rsp, 0x18; mov eax, edx; ret; 
0x0000000000418728: test eax, eax; je 0x1872e; pop rbx; ret; 
0x0000000000418805: test eax, eax; je 0x1880b; call rax; 
0x0000000000401e31: test eax, eax; je 0x1e3e; xor esi, esi; mov edi, 1; call rax; 
0x000000000041fa86: test eax, eax; je 0x1fa8c; call rax; 
0x0000000000424183: test eax, eax; je 0x24188; xchg eax, edx; sub eax, edx; ret; 
0x0000000000402977: test eax, eax; je 0x2984; lea rdi, qword ptr [rbx + 0x80]; call rax; 
0x0000000000402bc3: test eax, eax; je 0x2bd0; lea rdi, qword ptr [rbx + 0x80]; call rax; 
0x000000000042d706: test eax, eax; je 0x2d720; bsf eax, eax; add rax, rdi; add rax, rcx; ret; 
0x000000000042d8ff: test eax, eax; je 0x2d910; bsf eax, eax; lea rax, qword ptr [rdi + rax]; ret; 
0x00000000004002d4: test eax, eax; je 0x2dd; call 0xffffffffffc00000; add rsp, 8; ret; 
0x00000000004034a2: test eax, eax; je 0x34ad; mov edi, 0x6cd060; call rax; 
0x00000000004036f1: test eax, eax; je 0x3706; mov edi, 0x6ccfe0; call rax; 
0x0000000000403978: test eax, eax; je 0x3731; mov edi, 0x6ccfe0; call rax; 
0x00000000004038e5: test eax, eax; je 0x38fa; mov edi, 0x6ccfe0; call rax; 
0x0000000000403b46: test eax, eax; je 0x3b6d; mov qword ptr [rbp - 0x90], r8; mov qword ptr [rbp - 0x88], rcx; mov edi, 0x6cd060; call rax; 
0x0000000000403d00: test eax, eax; je 0x3d0b; mov edi, 0x6cd0a0; call rax; 
0x0000000000403e48: test eax, eax; je 0x3e53; mov edi, 0x6cd0a0; call rax; 
0x000000000043f0f6: test eax, eax; je 0x3f101; mov edi, 0x6cd720; call rax; 
0x000000000043f10e: test eax, eax; je 0x3f119; mov edi, 0x6cd720; call rax; 
0x00000000004040a0: test eax, eax; je 0x40c0; movsxd r12, r12d; mov rdi, r12; mov eax, 3; syscall; 
0x0000000000444c2f: test eax, eax; je 0x44c3a; mov edi, 0x6cc140; call rax; 
0x0000000000444db6: test eax, eax; je 0x44dc0; ret; 
0x0000000000446394: test eax, eax; je 0x46440; mov esi, 0x447090; mov edi, 0x6cd6d8; call rax; 
0x0000000000446493: test eax, eax; je 0x46690; mov esi, 0x447090; mov edi, 0x6cd6d8; call rax; 
0x000000000044e5ee: test eax, eax; je 0x4e5f9; mov edi, 0x6cd720; call rax; 
0x000000000044e61d: test eax, eax; je 0x4e630; mov edi, 0x6cd720; call rax; 
0x000000000044ec57: test eax, eax; je 0x4e633; mov edi, 0x6cd720; call rax; 
0x000000000044e71e: test eax, eax; je 0x4e724; call rax; 
0x000000000044e77d: test eax, eax; je 0x4e788; mov edi, 0x6cd720; call rax; 
0x000000000044e8f6: test eax, eax; je 0x4e908; mov edi, 0x6cd720; call rax; 
0x000000000044ebd6: test eax, eax; je 0x4ebe1; mov edi, 0x6cd720; call rax; 
0x000000000044ecda: test eax, eax; je 0x4ece0; call rax; 
0x000000000044fb99: test eax, eax; je 0x4fb9f; call rax; 
0x00000000004793d1: test eax, eax; je 0x793ea; mov qword ptr [rbp - 0xb8], r9; mov edi, 0x6cc140; call rax; 
0x0000000000479448: test eax, eax; je 0x7945f; mov dword ptr [rbp - 0xa0], edx; mov edi, 0x6cc140; call rax; 
0x00000000004796f7: test eax, eax; je 0x7971e; mov qword ptr [rbp - 0xd0], r8; mov qword ptr [rbp - 0xc8], r9; mov edi, 0x6cc140; call rax; 
0x0000000000479932: test eax, eax; je 0x7993d; mov edi, 0x6cc100; call rax; 
0x000000000047d926: test eax, eax; je 0x7d931; mov edi, 0x6cc140; call rax; 
0x000000000047d94e: test eax, eax; je 0x7d959; mov edi, 0x6cc140; call rax; 
0x000000000047d9c4: test eax, eax; je 0x7d9cf; mov edi, 0x6cc140; call rax; 
0x000000000047eee9: test eax, eax; je 0x7eef6; mov rdi, qword ptr [rbp - 0x88]; call rax; 
0x000000000047f4da: test eax, eax; je 0x7f4f9; pop rbx; mov edi, 0x6cc140; jmp rax; 
0x000000000047f491: test eax, eax; je 0x7f500; mov edi, 0x6cc140; call rax; 
0x0000000000480c4c: test eax, eax; je 0x80c12; mov edi, 0x6cc140; call rax; 
0x0000000000480c29: test eax, eax; je 0x80c3e; mov qword ptr [rsp + 8], rsi; mov edi, 0x6cc140; call rax; 
0x0000000000480daa: test eax, eax; je 0x80db5; mov edi, 0x6cc140; call rax; 
0x0000000000480dbb: test eax, eax; je 0x80dd0; mov edi, 0x6cc140; add rsp, 8; jmp rax; 
0x000000000048c51d: test eax, eax; je 0x8c52c; mov qword ptr [rip + 0x24149c], 0x6cd9e0; add rsp, 8; ret; 
0x000000000048c774: test eax, eax; je 0x8c788; pop rbx; xor esi, esi; mov edi, dword ptr [rip + 0x241243]; jmp rax; 
0x000000000048c8ad: test eax, eax; je 0x8c7c0; mov rsi, rbx; mov edi, dword ptr [rip + 0x241106]; call rax; 
0x000000000048c90f: test eax, eax; je 0x8c91a; mov qword ptr [rax], 0x6ccae0; add rsp, 8; ret; 
0x000000000048cb40: test eax, eax; je 0x8cb50; pop rbx; pop rbp; pop r12; ret; 
0x00000000004008db: test eax, eax; je 0x8f0; pop rbp; mov edi, 0x6ccb50; jmp rax; 
0x0000000000400929: test eax, eax; je 0x938; pop rbp; mov edi, 0x6ccb50; jmp rax; 
0x0000000000400958: test eax, eax; je 0x963; mov edi, 0x4bf080; call rax; 
0x0000000000498826: test eax, eax; je 0x98831; mov edi, 0x6cc140; call rax; 
0x0000000000498852: test eax, eax; je 0x9885d; mov edi, 0x6cc140; call rax; 
0x0000000000498af8: test eax, eax; je 0x98b05; mov rax, qword ptr [rax + 8]; add rax, qword ptr [rbx]; call rax; 
0x00000000004009a6: test eax, eax; je 0x998; call rax; 
0x000000000049a3e0: test eax, eax; je 0x9a3eb; mov edi, 0x6cc140; call rax; 
0x000000000049a488: test eax, eax; je 0x9a493; mov edi, 0x6cc140; call rax; 
0x000000000049cfa1: test eax, eax; je 0x9cfb0; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000049d4e5: test eax, eax; je 0x9d4f8; mov rsi, rdi; mov edi, 1; jmp rax; 
0x000000000049f578: test eax, eax; je 0x9f583; mov edi, 0x6cc100; call rax; 
0x000000000049f639: test eax, eax; je 0x9f644; mov edi, 0x6cc100; call rax; 
0x00000000004a12dc: test eax, eax; je 0xa12e7; call rax; 
0x000000000044e0b0: test eax, eax; jle 0x4e0bc; sub eax, 1; mov dword ptr [rbx + 8], eax; pop rbx; ret; 
0x0000000000415d05: test eax, eax; jne 0x15d39; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x0000000000426ad7: test eax, eax; jne 0x26b30; xor rax, rax; ret; 
0x0000000000426a97: test eax, eax; jne 0x26b50; xor rax, rax; ret; 
0x000000000042d851: test eax, eax; jne 0x2d8a0; pmovmskb eax, xmm1; bsf eax, eax; lea rax, qword ptr [rdi + rax + 0x30]; ret; 
0x000000000043c760: test eax, eax; jne 0x3c774; nop; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x00000000004042f1: test eax, eax; jne 0x42c5; mov rdi, r12; mov eax, 3; syscall; 
0x0000000000442f4d: test eax, eax; jne 0x42f18; movsxd rdi, dword ptr [rbp - 0x68]; mov eax, 3; syscall; 
0x00000000004432f0: test eax, eax; jne 0x432e4; pop rdx; pop r10; ret; 
0x000000000046d707: test eax, eax; jne 0x6d718; mov ecx, dword ptr [rdx + 0x48]; cmp ecx, dword ptr [rdx + 0x4c]; cmove eax, ecx; ret; 
0x000000000047b23f: test eax, eax; jne 0x7a710; mov rdx, qword ptr [rdx + 8]; add rdx, qword ptr [rax]; mov rax, rdx; call rax; 
0x000000000047d51e: test eax, eax; jne 0x7d540; mov qword ptr [rbx], 0; or dword ptr [rip + 0x24ec40], 1; pop rbx; ret; 
0x0000000000481069: test eax, eax; jne 0x81088; cmp qword ptr [rsp + 0x28], 0; jne 0x81080; add rsp, 0x38; ret; 
0x0000000000496972: test eax, eax; jne 0x9695f; mov ecx, 0x27; mov eax, ecx; syscall; 
0x00000000004125c2: test eax, eax; js 0x125d0; mov qword ptr [rbx + 0x90], rax; pop rbx; ret; 
0x0000000000444a9d: test eax, eax; mov qword ptr [rsp], rcx; je 0x44aac; mov edi, 0x6cc140; call rax; 
0x000000000043fd61: test eax, eax; mov rax, -1; cmove rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000452d4a: test eax, eax; mov rdi, rax; mov byte ptr [rsi], dl; jne 0x52d38; mov rax, rsi; ret; 
0x000000000047386c: test eax, eax; sete al; add rsp, 0x48; movzx eax, al; ret; 
0x000000000048ca53: test eax, eax; setne al; add rsp, 0x28; movzx eax, al; neg eax; ret; 
0x000000000049a371: test eax, eax; setne al; add rsp, 8; movzx eax, al; neg eax; ret; 
0x000000000046b7ed: test eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul dword ptr [rax - 0x77]; out dx, eax; call qword ptr [rax + 0x38]; 
0x000000000046d0fb: test eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 0x20]; 
0x000000000046cb3c: test eax, ebx; add byte ptr [rax], al; add byte ptr [rcx - 0x1076b322], cl; call qword ptr [rax + 0x18]; 
0x00000000004583ac: test ebp, ebp; jle 0x583cb; mov rax, qword ptr [rbx + 0xd8]; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004629ac: test ebp, ebp; jle 0x629cb; mov rax, qword ptr [rbx + 0xd8]; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000049f74e: test ebp, ebp; jne 0x9f728; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000042fd3e: test ebp, ecx; or byte ptr [rax], al; add byte ptr [rip + 0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000426a00: test ebx, ebp; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x000000000048c4be: test ebx, ebx; jne 0x8c4d0; pop rbx; pop rbp; pop r12; ret; 
0x00000000004033e7: test ebx, ebx; mov eax, dword ptr fs:[rax]; mov dword ptr [rbp - 0xc4], eax; je 0x385d; mov edi, 0x6cd720; call rbx; 
0x000000000049f86c: test ebx, ebx; mov qword ptr [rip + 0x22dd0b], rbx; jne 0x9f858; pop rbx; ret; 
0x000000000049f700: test ebx, ebx; mov rdi, rbx; jne 0x9f6f0; pop rbx; ret; 
0x000000000041b0df: test ebx, esi; add al, byte ptr [rax]; add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x000000000043c7a2: test ecx, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x0000000000473d38: test ecx, ecx; je 0x73cc9; cmp byte ptr [rsi - 2], 0x3a; cmove rax, r9; ret; 
0x0000000000473d11: test ecx, ecx; jne 0x73cc1; xor eax, eax; ret; 
0x000000000047b564: test ecx, ecx; jne 0x7afb0; mov rdx, qword ptr [rdx + 8]; add rdx, qword ptr [rax]; mov rax, rdx; call rax; 
0x000000000048c3bf: test ecx, ecx; jne 0x8c38e; mov dword ptr fs:[rdx], 5; pop rbx; ret; 
0x000000000041f024: test edi, ebp; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000421d30: test edi, edi; je 0x21d40; mov eax, 0x16; ret; 
0x0000000000440149: test edi, edi; je 0x4010a; mov qword ptr [rsp + 8], rdi; mov rdi, qword ptr [rsp + 8]; mov eax, 0x4f; syscall; 
0x0000000000403ff0: test edi, edi; je 0x401e; mov ecx, 2; xor esi, esi; mov eax, ecx; syscall; 
0x0000000000440aea: test edi, edi; je 0x40af6; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000440b2b: test edi, edi; je 0x40b37; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000440b63: test edi, edi; je 0x40b6f; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000440bcc: test edi, edi; je 0x40bd8; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000440c04: test edi, edi; je 0x40c10; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000440c52: test edi, edi; je 0x40c5e; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000440c8a: test edi, edi; je 0x40c96; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000440d0f: test edi, edi; je 0x40d1b; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000440d47: test edi, edi; je 0x40d53; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000440d95: test edi, edi; je 0x40da1; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000440dcd: test edi, edi; je 0x40dd9; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000440e36: test edi, edi; je 0x40e42; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000440e6e: test edi, edi; je 0x40e7a; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000440ec0: test edi, edi; je 0x40ecc; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x000000000044269d: test edi, edi; je 0x426a9; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004426d5: test edi, edi; je 0x426e1; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442723: test edi, edi; je 0x4272f; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x000000000044275b: test edi, edi; je 0x42767; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004427c5: test edi, edi; je 0x427d1; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004427fd: test edi, edi; je 0x42809; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x000000000044284b: test edi, edi; je 0x42857; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442883: test edi, edi; je 0x4288f; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442908: test edi, edi; je 0x42914; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442940: test edi, edi; je 0x4294c; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x000000000044298e: test edi, edi; je 0x4299a; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004429c6: test edi, edi; je 0x429d2; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442a30: test edi, edi; je 0x42a3c; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442a68: test edi, edi; je 0x42a74; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442ab6: test edi, edi; je 0x42ac2; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442ad4: test edi, edi; je 0x42ae0; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r14]; call rbx; 
0x000000000044e097: test edi, edi; je 0x4e06a; call 0x81040; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x00000000004a12d3: test edi, edi; je 0xa12ec; mov rax, qword ptr [rdi + 0x20]; test rax, rax; je 0xa12e7; call rax; 
0x000000000046a594: test edi, edi; jmp qword ptr [rsi + 0xf]; 
0x000000000044a607: test edi, esi; add al, 0; add byte ptr [rax - 0x73], cl; add ecx, dword ptr [rax + 0x39]; ret; 
0x0000000000420b1c: test edi, esp; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x00000000004275de: test edx, 0xffffffc0; jne 0x27600; and edx, 0x3f; jne 0x272a6; mov rax, rdi; ret; 
0x00000000004273f4: test edx, 0xfffffff8; jne 0x27410; and edx, 7; jne 0x272a6; mov rax, rdi; ret; 
0x00000000004432c1: test edx, edx; cmove rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x0000000000424362: test edx, edx; je 0x2436a; bsf eax, edx; ret; 
0x000000000042440b: test edx, edx; je 0x24420; bsf rax, rdx; ret; 
0x00000000004243aa: test edx, edx; je 0x24430; bsf rax, rdx; ret; 
0x000000000046e0aa: test edx, edx; je 0x6e0d0; bsf rax, rdx; ret; 
0x000000000046e03a: test edx, edx; je 0x6e0e0; bsf rax, rdx; ret; 
0x000000000047857d: test edx, edx; je 0x78592; mov qword ptr [rsp], r8; lea rdi, qword ptr [rax + 0x6cc1e0]; call rdx; 
0x000000000047ea50: test edx, edx; je 0x7ea5e; mov rax, qword ptr [r13]; add rax, qword ptr [rdx + 8]; call rax; 
0x000000000048c694: test edx, edx; je 0x8c6ae; mov esi, 0x48c740; mov edi, 0x6cd9c4; call rdx; 
0x000000000048c827: test edx, edx; je 0x8c8de; mov esi, 0x48c740; mov edi, 0x6cd9c4; call rdx; 
0x0000000000415a83: test edx, edx; jle 0x15ad0; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x0000000000413e33: test edx, edx; jne 0x13e40; ret; 
0x000000000047aa41: test edx, edx; jne 0x7a517; mov qword ptr [rbp - 0xf8], r11; mov qword ptr [rbp - 0xd0], rsi; mov qword ptr [rbp - 0xc8], r10; call rax; 
0x000000000047b333: test edx, edx; jne 0x7ae85; mov qword ptr [rbp - 0xe0], r11; mov qword ptr [rbp - 0xc8], r10; mov qword ptr [rbp - 0xa8], rsi; call rax; 
0x000000000049697f: test edx, edx; jne 0x9695f; mov dword ptr fs:[0x2d0], eax; ret; 
0x0000000000498061: test edx, edx; jne 0x98068; mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x000000000040f56b: test edx, esi; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000041db73: test edx, esp; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x0000000000417f07: test esi, edi; jmp qword ptr [rsi + 0xf]; 
0x000000000043c795: test esi, edx; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x000000000046dfa1: test esi, esi; jne 0x6dfa9; xor rax, rax; ret; 
0x000000000040e3a3: test esi, esi; jne 0xe3d8; mov eax, 0xba; syscall; 
0x000000000043c7af: test esp, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7540; 
0x0000000000432272: test qword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x00000000004404d5: test r13b, r13b; je 0x404e6; movsxd rdi, dword ptr [rsp + 0x10]; mov eax, 3; syscall; 
0x00000000004042f0: test r8, r8; jne 0x42c5; mov rdi, r12; mov eax, 3; syscall; 
0x0000000000424182: test r8d, r8d; je 0x24188; xchg eax, edx; sub eax, edx; ret; 
0x000000000047b23e: test r8d, r8d; jne 0x7a710; mov rdx, qword ptr [rdx + 8]; add rdx, qword ptr [rax]; mov rax, rdx; call rax; 
0x000000000047b563: test r9d, r9d; jne 0x7afb0; mov rdx, qword ptr [rdx + 8]; add rdx, qword ptr [rax]; mov rax, rdx; call rax; 
0x0000000000418727: test rax, rax; je 0x1872e; pop rbx; ret; 
0x0000000000418804: test rax, rax; je 0x1880b; call rax; 
0x0000000000401e30: test rax, rax; je 0x1e3e; xor esi, esi; mov edi, 1; call rax; 
0x000000000041fa85: test rax, rax; je 0x1fa8c; call rax; 
0x0000000000402976: test rax, rax; je 0x2984; lea rdi, qword ptr [rbx + 0x80]; call rax; 
0x0000000000402bc2: test rax, rax; je 0x2bd0; lea rdi, qword ptr [rbx + 0x80]; call rax; 
0x00000000004002d3: test rax, rax; je 0x2dd; call 0xffffffffffc00000; add rsp, 8; ret; 
0x00000000004034a1: test rax, rax; je 0x34ad; mov edi, 0x6cd060; call rax; 
0x00000000004036f0: test rax, rax; je 0x3706; mov edi, 0x6ccfe0; call rax; 
0x0000000000403977: test rax, rax; je 0x3731; mov edi, 0x6ccfe0; call rax; 
0x00000000004038e4: test rax, rax; je 0x38fa; mov edi, 0x6ccfe0; call rax; 
0x0000000000403b45: test rax, rax; je 0x3b6d; mov qword ptr [rbp - 0x90], r8; mov qword ptr [rbp - 0x88], rcx; mov edi, 0x6cd060; call rax; 
0x0000000000403cff: test rax, rax; je 0x3d0b; mov edi, 0x6cd0a0; call rax; 
0x0000000000403e47: test rax, rax; je 0x3e53; mov edi, 0x6cd0a0; call rax; 
0x000000000043f0f5: test rax, rax; je 0x3f101; mov edi, 0x6cd720; call rax; 
0x000000000043f10d: test rax, rax; je 0x3f119; mov edi, 0x6cd720; call rax; 
0x0000000000444c2e: test rax, rax; je 0x44c3a; mov edi, 0x6cc140; call rax; 
0x0000000000446393: test rax, rax; je 0x46440; mov esi, 0x447090; mov edi, 0x6cd6d8; call rax; 
0x0000000000446492: test rax, rax; je 0x46690; mov esi, 0x447090; mov edi, 0x6cd6d8; call rax; 
0x000000000044e5ed: test rax, rax; je 0x4e5f9; mov edi, 0x6cd720; call rax; 
0x000000000044e61c: test rax, rax; je 0x4e630; mov edi, 0x6cd720; call rax; 
0x000000000044ec56: test rax, rax; je 0x4e633; mov edi, 0x6cd720; call rax; 
0x000000000044e71d: test rax, rax; je 0x4e724; call rax; 
0x000000000044e77c: test rax, rax; je 0x4e788; mov edi, 0x6cd720; call rax; 
0x000000000044e8f5: test rax, rax; je 0x4e908; mov edi, 0x6cd720; call rax; 
0x000000000044ebd5: test rax, rax; je 0x4ebe1; mov edi, 0x6cd720; call rax; 
0x000000000044ecd9: test rax, rax; je 0x4ece0; call rax; 
0x000000000044fb98: test rax, rax; je 0x4fb9f; call rax; 
0x00000000004793d0: test rax, rax; je 0x793ea; mov qword ptr [rbp - 0xb8], r9; mov edi, 0x6cc140; call rax; 
0x0000000000479447: test rax, rax; je 0x7945f; mov dword ptr [rbp - 0xa0], edx; mov edi, 0x6cc140; call rax; 
0x00000000004796f6: test rax, rax; je 0x7971e; mov qword ptr [rbp - 0xd0], r8; mov qword ptr [rbp - 0xc8], r9; mov edi, 0x6cc140; call rax; 
0x0000000000479931: test rax, rax; je 0x7993d; mov edi, 0x6cc100; call rax; 
0x000000000047d925: test rax, rax; je 0x7d931; mov edi, 0x6cc140; call rax; 
0x000000000047d94d: test rax, rax; je 0x7d959; mov edi, 0x6cc140; call rax; 
0x000000000047d9c3: test rax, rax; je 0x7d9cf; mov edi, 0x6cc140; call rax; 
0x000000000047eee8: test rax, rax; je 0x7eef6; mov rdi, qword ptr [rbp - 0x88]; call rax; 
0x000000000047f4d9: test rax, rax; je 0x7f4f9; pop rbx; mov edi, 0x6cc140; jmp rax; 
0x000000000047f490: test rax, rax; je 0x7f500; mov edi, 0x6cc140; call rax; 
0x0000000000480c4b: test rax, rax; je 0x80c12; mov edi, 0x6cc140; call rax; 
0x0000000000480c28: test rax, rax; je 0x80c3e; mov qword ptr [rsp + 8], rsi; mov edi, 0x6cc140; call rax; 
0x0000000000480da9: test rax, rax; je 0x80db5; mov edi, 0x6cc140; call rax; 
0x0000000000480dba: test rax, rax; je 0x80dd0; mov edi, 0x6cc140; add rsp, 8; jmp rax; 
0x000000000048c773: test rax, rax; je 0x8c788; pop rbx; xor esi, esi; mov edi, dword ptr [rip + 0x241243]; jmp rax; 
0x000000000048c8ac: test rax, rax; je 0x8c7c0; mov rsi, rbx; mov edi, dword ptr [rip + 0x241106]; call rax; 
0x000000000048c90e: test rax, rax; je 0x8c91a; mov qword ptr [rax], 0x6ccae0; add rsp, 8; ret; 
0x000000000048cb3f: test rax, rax; je 0x8cb50; pop rbx; pop rbp; pop r12; ret; 
0x00000000004008da: test rax, rax; je 0x8f0; pop rbp; mov edi, 0x6ccb50; jmp rax; 
0x0000000000400928: test rax, rax; je 0x938; pop rbp; mov edi, 0x6ccb50; jmp rax; 
0x0000000000400957: test rax, rax; je 0x963; mov edi, 0x4bf080; call rax; 
0x0000000000498825: test rax, rax; je 0x98831; mov edi, 0x6cc140; call rax; 
0x0000000000498851: test rax, rax; je 0x9885d; mov edi, 0x6cc140; call rax; 
0x0000000000498af7: test rax, rax; je 0x98b05; mov rax, qword ptr [rax + 8]; add rax, qword ptr [rbx]; call rax; 
0x00000000004009a5: test rax, rax; je 0x998; call rax; 
0x000000000049a3df: test rax, rax; je 0x9a3eb; mov edi, 0x6cc140; call rax; 
0x000000000049a487: test rax, rax; je 0x9a493; mov edi, 0x6cc140; call rax; 
0x000000000049cfa0: test rax, rax; je 0x9cfb0; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000049d4e4: test rax, rax; je 0x9d4f8; mov rsi, rdi; mov edi, 1; jmp rax; 
0x000000000049f577: test rax, rax; je 0x9f583; mov edi, 0x6cc100; call rax; 
0x000000000049f638: test rax, rax; je 0x9f644; mov edi, 0x6cc100; call rax; 
0x00000000004a12db: test rax, rax; je 0xa12e7; call rax; 
0x0000000000442f4c: test rax, rax; jne 0x42f18; movsxd rdi, dword ptr [rbp - 0x68]; mov eax, 3; syscall; 
0x00000000004125c1: test rax, rax; js 0x125d0; mov qword ptr [rbx + 0x90], rax; pop rbx; ret; 
0x0000000000444a9c: test rax, rax; mov qword ptr [rsp], rcx; je 0x44aac; mov edi, 0x6cc140; call rax; 
0x0000000000452d49: test rax, rax; mov rdi, rax; mov byte ptr [rsi], dl; jne 0x52d38; mov rax, rsi; ret; 
0x000000000049f74d: test rbp, rbp; jne 0x9f728; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048c4bd: test rbx, rbx; jne 0x8c4d0; pop rbx; pop rbp; pop r12; ret; 
0x00000000004033e6: test rbx, rbx; mov eax, dword ptr fs:[rax]; mov dword ptr [rbp - 0xc4], eax; je 0x385d; mov edi, 0x6cd720; call rbx; 
0x000000000049f86b: test rbx, rbx; mov qword ptr [rip + 0x22dd0b], rbx; jne 0x9f858; pop rbx; ret; 
0x000000000049f6ff: test rbx, rbx; mov rdi, rbx; jne 0x9f6f0; pop rbx; ret; 
0x0000000000440148: test rdi, rdi; je 0x4010a; mov qword ptr [rsp + 8], rdi; mov rdi, qword ptr [rsp + 8]; mov eax, 0x4f; syscall; 
0x0000000000403fef: test rdi, rdi; je 0x401e; mov ecx, 2; xor esi, esi; mov eax, ecx; syscall; 
0x0000000000440ae9: test rdi, rdi; je 0x40af6; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000440b2a: test rdi, rdi; je 0x40b37; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000440b62: test rdi, rdi; je 0x40b6f; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000440bcb: test rdi, rdi; je 0x40bd8; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000440c03: test rdi, rdi; je 0x40c10; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000440c51: test rdi, rdi; je 0x40c5e; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000440c89: test rdi, rdi; je 0x40c96; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000440d0e: test rdi, rdi; je 0x40d1b; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000440d46: test rdi, rdi; je 0x40d53; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000440d94: test rdi, rdi; je 0x40da1; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000440dcc: test rdi, rdi; je 0x40dd9; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000440e35: test rdi, rdi; je 0x40e42; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000440e6d: test rdi, rdi; je 0x40e7a; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000440ebf: test rdi, rdi; je 0x40ecc; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x000000000044269c: test rdi, rdi; je 0x426a9; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004426d4: test rdi, rdi; je 0x426e1; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442722: test rdi, rdi; je 0x4272f; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x000000000044275a: test rdi, rdi; je 0x42767; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004427c4: test rdi, rdi; je 0x427d1; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004427fc: test rdi, rdi; je 0x42809; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x000000000044284a: test rdi, rdi; je 0x42857; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442882: test rdi, rdi; je 0x4288f; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442907: test rdi, rdi; je 0x42914; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x000000000044293f: test rdi, rdi; je 0x4294c; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x000000000044298d: test rdi, rdi; je 0x4299a; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004429c5: test rdi, rdi; je 0x429d2; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442a2f: test rdi, rdi; je 0x42a3c; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442a67: test rdi, rdi; je 0x42a74; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442ab5: test rdi, rdi; je 0x42ac2; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442ad3: test rdi, rdi; je 0x42ae0; mov rsi, rbx; call 0x40aa0; mov rdi, qword ptr [r14]; call rbx; 
0x000000000044e096: test rdi, rdi; je 0x4e06a; call 0x81040; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x00000000004a12d2: test rdi, rdi; je 0xa12ec; mov rax, qword ptr [rdi + 0x20]; test rax, rax; je 0xa12e7; call rax; 
0x00000000004275dd: test rdx, -0x40; jne 0x27600; and edx, 0x3f; jne 0x272a6; mov rax, rdi; ret; 
0x00000000004273f3: test rdx, -8; jne 0x27410; and edx, 7; jne 0x272a6; mov rax, rdi; ret; 
0x00000000004432c0: test rdx, rdx; cmove rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x000000000042440a: test rdx, rdx; je 0x24420; bsf rax, rdx; ret; 
0x00000000004243a9: test rdx, rdx; je 0x24430; bsf rax, rdx; ret; 
0x000000000046e0a9: test rdx, rdx; je 0x6e0d0; bsf rax, rdx; ret; 
0x000000000046e039: test rdx, rdx; je 0x6e0e0; bsf rax, rdx; ret; 
0x000000000047857c: test rdx, rdx; je 0x78592; mov qword ptr [rsp], r8; lea rdi, qword ptr [rax + 0x6cc1e0]; call rdx; 
0x000000000047ea4f: test rdx, rdx; je 0x7ea5e; mov rax, qword ptr [r13]; add rax, qword ptr [rdx + 8]; call rax; 
0x000000000048c693: test rdx, rdx; je 0x8c6ae; mov esi, 0x48c740; mov edi, 0x6cd9c4; call rdx; 
0x000000000048c826: test rdx, rdx; je 0x8c8de; mov esi, 0x48c740; mov edi, 0x6cd9c4; call rdx; 
0x0000000000413e32: test rdx, rdx; jne 0x13e40; ret; 
0x000000000046dfa0: test rsi, rsi; jne 0x6dfa9; xor rax, rax; ret; 
0x0000000000421aa0: test sil, 7; mov eax, 0x16; je 0x21ab0; ret; 
0x00000000004477e4: test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000041495f: vminsd xmm8, xmm4, qword ptr [rcx + 0x5c]; ret; 
0x00000000004362dd: vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rcx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x0000000000433310: vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm7, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x00000000004362e1: vmovdqu xmm1, xmmword ptr [rcx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x00000000004332f4: vmovdqu xmm7, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + 0x10], xmm1; vmovdqu xmmword ptr [rdi + rdx - 0x20], xmm6; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x0000000000433314: vmovdqu xmm7, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x00000000004362ea: vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x00000000004335f6: vmovdqu xmmword ptr [rax + 0x30], xmm8; vmovdqu xmmword ptr [rax + 0x40], xmm9; vmovdqu xmmword ptr [rax + 0x50], xmm10; vmovdqu xmmword ptr [rax + 0x60], xmm11; vmovdqu xmmword ptr [rax + 0x70], xmm12; ret; 
0x00000000004335fb: vmovdqu xmmword ptr [rax + 0x40], xmm9; vmovdqu xmmword ptr [rax + 0x50], xmm10; vmovdqu xmmword ptr [rax + 0x60], xmm11; vmovdqu xmmword ptr [rax + 0x70], xmm12; ret; 
0x0000000000433600: vmovdqu xmmword ptr [rax + 0x50], xmm10; vmovdqu xmmword ptr [rax + 0x60], xmm11; vmovdqu xmmword ptr [rax + 0x70], xmm12; ret; 
0x0000000000433605: vmovdqu xmmword ptr [rax + 0x60], xmm11; vmovdqu xmmword ptr [rax + 0x70], xmm12; ret; 
0x000000000043360a: vmovdqu xmmword ptr [rax + 0x70], xmm12; ret; 
0x0000000000433540: vmovdqu xmmword ptr [rcx - 0x10], xmm12; ret; 
0x000000000043353b: vmovdqu xmmword ptr [rcx - 0x20], xmm11; vmovdqu xmmword ptr [rcx - 0x10], xmm12; ret; 
0x0000000000433536: vmovdqu xmmword ptr [rcx - 0x30], xmm10; vmovdqu xmmword ptr [rcx - 0x20], xmm11; vmovdqu xmmword ptr [rcx - 0x10], xmm12; ret; 
0x0000000000433531: vmovdqu xmmword ptr [rcx - 0x40], xmm9; vmovdqu xmmword ptr [rcx - 0x30], xmm10; vmovdqu xmmword ptr [rcx - 0x20], xmm11; vmovdqu xmmword ptr [rcx - 0x10], xmm12; ret; 
0x000000000043352c: vmovdqu xmmword ptr [rcx - 0x50], xmm8; vmovdqu xmmword ptr [rcx - 0x40], xmm9; vmovdqu xmmword ptr [rcx - 0x30], xmm10; vmovdqu xmmword ptr [rcx - 0x20], xmm11; vmovdqu xmmword ptr [rcx - 0x10], xmm12; ret; 
0x000000000043e6d9: vmovdqu xmmword ptr [rdi + 0x10], xmm0; vmovdqu xmmword ptr [rsi - 0x20], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x00000000004332fe: vmovdqu xmmword ptr [rdi + 0x10], xmm1; vmovdqu xmmword ptr [rdi + rdx - 0x20], xmm6; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x000000000043e6b3: vmovdqu xmmword ptr [rdi + 0x30], xmm0; vmovdqu xmmword ptr [rsi - 0x40], xmm0; vmovdqu xmmword ptr [rsi - 0x30], xmm0; vmovdqu xmmword ptr [rsi - 0x20], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x00000000004332c2: vmovdqu xmmword ptr [rdi + 0x30], xmm3; vmovdqu xmmword ptr [rdx - 0x40], xmm4; vmovdqu xmmword ptr [rdx - 0x30], xmm5; vmovdqu xmmword ptr [rdx - 0x20], xmm6; vmovdqu xmmword ptr [rdx - 0x10], xmm7; ret; 
0x0000000000433309: vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x0000000000433303: vmovdqu xmmword ptr [rdi + rdx - 0x20], xmm6; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x00000000004362e6: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x000000000043e6d5: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + 0x10], xmm0; vmovdqu xmmword ptr [rsi - 0x20], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x00000000004332fa: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + 0x10], xmm1; vmovdqu xmmword ptr [rdi + rdx - 0x20], xmm6; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x000000000043331a: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x000000000043e6f0: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000043344f: vmovdqu xmmword ptr [rdx - 0x10], xmm12; mov rax, r8; ret; 
0x0000000000433273: vmovdqu xmmword ptr [rdx - 0x10], xmm15; ret; 
0x00000000004332d6: vmovdqu xmmword ptr [rdx - 0x10], xmm7; ret; 
0x000000000043344a: vmovdqu xmmword ptr [rdx - 0x20], xmm11; vmovdqu xmmword ptr [rdx - 0x10], xmm12; mov rax, r8; ret; 
0x000000000043326e: vmovdqu xmmword ptr [rdx - 0x20], xmm14; vmovdqu xmmword ptr [rdx - 0x10], xmm15; ret; 
0x00000000004332d1: vmovdqu xmmword ptr [rdx - 0x20], xmm6; vmovdqu xmmword ptr [rdx - 0x10], xmm7; ret; 
0x0000000000433445: vmovdqu xmmword ptr [rdx - 0x30], xmm10; vmovdqu xmmword ptr [rdx - 0x20], xmm11; vmovdqu xmmword ptr [rdx - 0x10], xmm12; mov rax, r8; ret; 
0x0000000000433269: vmovdqu xmmword ptr [rdx - 0x30], xmm13; vmovdqu xmmword ptr [rdx - 0x20], xmm14; vmovdqu xmmword ptr [rdx - 0x10], xmm15; ret; 
0x00000000004332cc: vmovdqu xmmword ptr [rdx - 0x30], xmm5; vmovdqu xmmword ptr [rdx - 0x20], xmm6; vmovdqu xmmword ptr [rdx - 0x10], xmm7; ret; 
0x00000000004332c7: vmovdqu xmmword ptr [rdx - 0x40], xmm4; vmovdqu xmmword ptr [rdx - 0x30], xmm5; vmovdqu xmmword ptr [rdx - 0x20], xmm6; vmovdqu xmmword ptr [rdx - 0x10], xmm7; ret; 
0x0000000000433440: vmovdqu xmmword ptr [rdx - 0x40], xmm9; vmovdqu xmmword ptr [rdx - 0x30], xmm10; vmovdqu xmmword ptr [rdx - 0x20], xmm11; vmovdqu xmmword ptr [rdx - 0x10], xmm12; mov rax, r8; ret; 
0x000000000043e69a: vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000043e695: vmovdqu xmmword ptr [rsi - 0x20], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000043e690: vmovdqu xmmword ptr [rsi - 0x30], xmm0; vmovdqu xmmword ptr [rsi - 0x20], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000043e68b: vmovdqu xmmword ptr [rsi - 0x40], xmm0; vmovdqu xmmword ptr [rsi - 0x30], xmm0; vmovdqu xmmword ptr [rsi - 0x20], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000043e686: vmovdqu xmmword ptr [rsi - 0x50], xmm0; vmovdqu xmmword ptr [rsi - 0x40], xmm0; vmovdqu xmmword ptr [rsi - 0x30], xmm0; vmovdqu xmmword ptr [rsi - 0x20], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x00000000004362c9: vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x00000000004362cd: vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x00000000004362a9: vmovdqu ymm3, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x00000000004362d6: vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x00000000004362bd: vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x00000000004362b7: vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x00000000004362b2: vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x00000000004362d2: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x00000000004362ae: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x000000000043e86b: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x000000000043e791: vmovdqu ymmword ptr [rsi - 0x20], ymm0; sub rax, rdx; vzeroupper; ret; 
0x000000000043e86f: vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x000000000043e78c: vmovdqu ymmword ptr [rsi - 0x40], ymm0; vmovdqu ymmword ptr [rsi - 0x20], ymm0; sub rax, rdx; vzeroupper; ret; 
0x000000000043e787: vmovdqu ymmword ptr [rsi - 0x60], ymm0; vmovdqu ymmword ptr [rsi - 0x40], ymm0; vmovdqu ymmword ptr [rsi - 0x20], ymm0; sub rax, rdx; vzeroupper; ret; 
0x000000000043e705: vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x000000000043e709: vmovq qword ptr [rsi - 8], xmm0; ret; 
0x00000000004365e5: vmovups zmmword ptr [r9 + 0x140], zmm13; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x00000000004365ec: vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x00000000004365f3: vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000043623d: vmovups zmmword ptr [r9 - 0x100], zmm4; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000043648c: vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000043628e: vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000436252: vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000436485: vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000436287: vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000043624b: vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000043647e: vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000436244: vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000436280: vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000043e83d: vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000436740: vmovups zmmword ptr [rdi - 0x140], zmm12; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000436747: vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000043674e: vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000436755: vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000043e858: vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043ea1a: vmovups zmmword ptr [rsi + 0x140], zmm2; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000043ea21: vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000043ea28: vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000043e97d: vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000043e984: vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000043e98b: vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000043e82a: vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043e823: vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043e81c: vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000405d85: vpsubsb xmm12, xmm15, xmmword ptr [rbp + 0x29480001]; ret; 
0x0000000000405ded: vpsubsb xmm15, xmm15, xmmword ptr [0x29480001]; ret; 
0x000000000043e799: vzeroupper; ret; 
0x000000000049c96e: wait; add byte ptr [rax], al; add al, ch; cdq; sbb dh, bh; jmp qword ptr [rsi + 0xf]; 
0x00000000004a40d1: wait; clc; call qword ptr [rax - 0x64]; 
0x000000000041647a: wait; mov esi, 0xc48348ff; sub byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000423f8f: xchg ah, bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042aa2f: xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000423b7f: xchg ah, ch; add eax, 0x83480000; ret 0xeb10; 
0x000000000042368b: xchg al, ah; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000479914: xchg al, bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000416eb2: xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp qword ptr [rsi - 1]; call qword ptr [rax + 0x18]; 
0x000000000046015e: xchg al, bl; add byte ptr [rax], al; add byte ptr [rcx - 0x3f], cl; inc dword ptr [rdx]; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000423e9b: xchg al, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042c67c: xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000042be9c: xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000042c28c: xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042baac: xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000492b1d: xchg bh, cl; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000442ec7: xchg bl, ah; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffd0; 
0x0000000000491621: xchg bl, cl; adc eax, 0x83480000; ret 0xe910; 
0x0000000000492821: xchg bl, cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000491f21: xchg bl, cl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000492221: xchg bl, cl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000491919: xchg bl, dl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000049acf2: xchg byte ptr [rax + 0x48000000], bh; add esp, 8; ret; 
0x000000000049ad02: xchg byte ptr [rax + 0x48000000], ch; add esp, 8; ret; 
0x000000000049acc9: xchg byte ptr [rax + 0x48000000], dh; add esp, 8; ret; 
0x000000000042b58f: xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042ad6f: xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000042390f: xchg byte ptr [rax + rcx], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042a54f: xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x0000000000423c4f: xchg byte ptr [rax - 0x7cb80000], bl; ret 0xeb10; 
0x0000000000423f6b: xchg byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004c76d5: xchg byte ptr [rax], al; add al, ch; sti; jmp qword ptr [rbp + 1]; 
0x000000000042bc4b: xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042403b: xchg byte ptr [rax], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b0af: xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042a88f: xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042a06f: xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000042b24f: xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x0000000000423def: xchg byte ptr [rbx + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004235df: xchg byte ptr [rbx + rcx - 0x7cb80000], cl; ret 0xeb10; 
0x00000000004a67c0: xchg byte ptr [rcx + 0x4a], ah; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], dl; ret 0x44; 
0x000000000049c62c: xchg byte ptr [rcx + rax - 0x10], cl; jmp rax; 
0x00000000004a4478: xchg byte ptr [rcx], bl; stc; call qword ptr [rsi]; 
0x00000000004239df: xchg byte ptr [rdi + rax - 0x7cb80000], cl; ret 0xeb10; 
0x000000000042c13c: xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b95c: xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042ca6c: xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004268b1: xchg byte ptr [rdx + 0x48000002], ch; add eax, edi; add rax, rcx; ret; 
0x000000000049ba42: xchg byte ptr [rdx + 1], dh; add byte ptr [rax], al; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000423ebf: xchg byte ptr [rdx + rax - 0x7cb80000], ch; ret 0xeb10; 
0x00000000004236af: xchg byte ptr [rdx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x000000000042a3af: xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004c7664: xchg byte ptr [rdx], al; or eax, 0x38f4806; mov es, word ptr [rcx*4 + 0x4b068c05]; add dword ptr [rdi], 3; mov bl, 2; ret; 
0x0000000000423751: xchg byte ptr [rdx], bl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000400406: xchg byte ptr [rdx], ch; add byte ptr [rax - 0x77], cl; fistp qword ptr [rax + 1]; syscall; 
0x0000000000423aaf: xchg byte ptr [rsi + rax - 0x7cb80000], bh; ret 0xeb10; 
0x000000000048a0c6: xchg byte ptr [rsi - 9], bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000491bc6: xchg byte ptr [rsi], ah; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a4e5: xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b1e5: xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000492ac6: xchg byte ptr [rsi], ah; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004921c6: xchg byte ptr [rsi], ah; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000491ec6: xchg byte ptr [rsi], ah; or eax, 0x83480000; ret 0x4910; 
0x000000000043c2e0: xchg byte ptr [rsi], al; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000042ad05: xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042c03d: xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004918be: xchg byte ptr [rsi], ch; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042c96d: xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000423d1f: xchg byte ptr [rsp + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000049094f: xchg ch, ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000049076f: xchg ch, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000491147: xchg ch, dh; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000490067: xchg ch, dl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000490f67: xchg ch, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004a41bc: xchg cl, al; clc; call qword ptr [rsi]; 
0x00000000004a41bc: xchg cl, al; clc; call qword ptr [rsi]; ret 0xfff8; 
0x000000000042b525: xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a825: xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x000000000042a345: xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b045: xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x000000000042c18d: xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042b9ad: xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000423775: xchg dh, dh; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004586c1: xchg dl, cl; add byte ptr [rax], al; add byte ptr [rbp - 0x7b], cl; in al, 0xf; test byte ptr [rcx - 0x77000000], dh; ret 0xe283; 
0x00000000004135d2: xchg dword ptr [rax + 0x48000000], edx; add esp, 8; pop rbx; pop rbp; sub rax, rdx; ret; 
0x000000000046d1b2: xchg dword ptr [rax + 0x48000000], esp; cmp dword ptr [rax + 0x30], 0; je 0x6d1c0; ret; 
0x00000000004c7795: xchg dword ptr [rax], eax; add al, ch; sti; call qword ptr [rdi]; 
0x00000000004c786d: xchg dword ptr [rax], eax; add byte ptr [rax], ah; push rax; sti; jmp qword ptr [rdx]; 
0x00000000004798f6: xchg dword ptr [rax], eax; add eax, dword ptr [rax]; add bl, dh; ret; 
0x0000000000478af3: xchg dword ptr [rax], esp; ret 0x6c; 
0x000000000049ad9c: xchg dword ptr [rbp + 8], ecx; add byte ptr [rax], al; movsxd rcx, dword ptr [r14 + rsi*4]; add rcx, r14; jmp rcx; 
0x0000000000445de6: xchg dword ptr [rbp + rcx*4 + 0x24], ecx; ret; 
0x000000000047f4f1: xchg dword ptr [rbx + rax], edx; add byte ptr [rax], al; or byte ptr [rsp + 0x5b], dh; ret; 
0x000000000045eb9d: xchg dword ptr [rbx + rcx], esp; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004673c5: xchg dword ptr [rbx - 0x76fffffd], eax; ret 0x348; 
0x000000000044f2e5: xchg dword ptr [rbx - 0x7c000005], ecx; ret 0x8901; 
0x00000000004ba00c: xchg dword ptr [rcx + 0x79], ecx; xchg eax, edx; ret 0xf869; 
0x00000000004653fb: xchg dword ptr [rcx - 0x7d000000], ebx; ret 0x8308; 
0x000000000044a3f2: xchg dword ptr [rcx], ecx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x8901; 
0x0000000000400d4e: xchg dword ptr [rdi + 0x48000001], esp; mov eax, dword ptr [rax*8 + 0x4a1ca8]; jmp rax; 
0x000000000043c245: xchg dword ptr [rdi + 0x63490006], eax; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000046a333: xchg dword ptr [rdi - 0x77000000], ebp; ret 0x348; 
0x00000000004432ee: xchg dword ptr [rdi], eax; test eax, eax; jne 0x432e4; pop rdx; pop r10; ret; 
0x0000000000477058: xchg dword ptr [rip - 0x76fffffd], edx; ret 0xe8c0; 
0x0000000000468149: xchg dword ptr [rip - 0x76ffffff], eax; ret 0x348; 
0x000000000043c246: xchg dword ptr [rsi], eax; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000004ba1ab: xchg dword ptr [rsp + rax + 0x6fa9ce9d], esp; ret; 
0x000000000049cf42: xchg eax, eax; add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; call 0x4810588d; mov eax, dword ptr [rdi + 0x98]; ret; 
0x000000000048fca8: xchg eax, ebp; adc eax, 0x83480000; ret 0xe910; 
0x000000000041c80b: xchg eax, ebp; add al, byte ptr [rax]; add byte ptr [rbp - 0x77cfdb9], cl; add al, 0x74; and al, 0x89; ret 0xb48b; 
0x000000000044881b: xchg eax, ebp; add al, byte ptr [rax]; add byte ptr [rcx], dh; ror byte ptr [rcx + 0x39], cl; ret 0x1e76; 
0x000000000046d136: xchg eax, ebp; add byte ptr [rax - 0x7d], cl; ret 0x4c01; 
0x000000000044d19b: xchg eax, ebp; add byte ptr [rbp + 0xd840fd2], al; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; rol byte ptr [rcx + rcx*2], 0x39; ret; 
0x0000000000411ec2: xchg eax, ebp; add byte ptr [rcx - 0x7cb768f4], cl; ret 0x4801; 
0x0000000000453d22: xchg eax, ebp; cmp bl, 0xff; dec dword ptr [rax - 0x7d]; ret 0xe920; 
0x000000000043fe82: xchg eax, ebp; imul ebp, dword ptr [rcx], 0x14750000; mov eax, 0; syscall; 
0x000000000046fb83: xchg eax, ebp; mov dword ptr [rbx - 0x74b7f808], 0xf70244c; xchg eax, ebp; ret 0x8b4c; 
0x0000000000495d31: xchg eax, ebp; ret 0x3840; 
0x000000000046b437: xchg eax, ebp; ret 0x5389; 
0x000000000041ccb4: xchg eax, ebp; ret 0x8348; 
0x000000000046fb8e: xchg eax, ebp; ret 0x8b4c; 
0x0000000000483135: xchg eax, ebp; ret 0x941; 
0x0000000000404107: xchg eax, ebp; ret 0x953d; 
0x000000000047087b: xchg eax, ebp; ret 0xb60f; 
0x000000000046fd31: xchg eax, ebp; ret 0xb8e9; 
0x00000000004742ff: xchg eax, ebp; ret 0xc084; 
0x000000000045bda5: xchg eax, ebp; ret 0xc283; 
0x0000000000444018: xchg eax, ebp; ret 0xc985; 
0x0000000000481a4a: xchg eax, ebp; ret 0xd348; 
0x000000000046fbec: xchg eax, ebp; ret 0xd721; 
0x0000000000410244: xchg eax, ebp; ret 0xdaf7; 
0x0000000000444df1: xchg eax, ebp; ret 0xe1eb; 
0x000000000046f820: xchg eax, ebp; ret 0xe883; 
0x000000000049c4bd: xchg eax, ebp; ret 0xf45; 
0x00000000004707ef: xchg eax, ebp; ret 0xf748; 
0x000000000041b8fa: xchg eax, ebp; ret; 
0x000000000049a374: xchg eax, ebp; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x000000000048ca56: xchg eax, ebp; ror byte ptr [rax - 0x7d], 0xc4; sub byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x00000000004173ad: xchg eax, ebp; sal bh, 0xd8; ret; 
0x0000000000468559: xchg eax, ebp; sar bl, 0xff; dec dword ptr [rax + 0x39]; ret 0x940f; 
0x000000000045dc85: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; sar rdx, 2; call qword ptr [rax + 0x38]; 
0x00000000004105aa: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul dword ptr [rcx + rcx*4 - 0x1a]; call qword ptr [rax + 0x38]; 
0x0000000000472d20: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000415e59: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; sti; mov rbp, rdx; call qword ptr [rax + 0x60]; 
0x0000000000415b02: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rbx + 0x48], dl; mov ebx, edi; call qword ptr [rax + 0x20]; 
0x0000000000415f22: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rcx + 0x48d231d1], cl; mov eax, dword ptr [rax + 0x48]; jmp rax; 
0x0000000000410bf7: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x0000000000416602: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x30]; 
0x000000000048a0c2: xchg eax, ebx; add r8b, bpl; xchg byte ptr [rsi - 9], bh; jmp qword ptr [rsi + 0xf]; 
0x000000000042f000: xchg eax, ebx; add rcx, r11; jmp rcx; 
0x00000000004c6721: xchg eax, ebx; cli; jmp qword ptr [rax]; 
0x000000000046d3bd: xchg eax, ebx; fadd dword ptr [rax]; add byte ptr [rax], al; mov esi, eax; mov rdi, rbx; call qword ptr [rdx + 0x30]; 
0x000000000043bc2c: xchg eax, ebx; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000430782: xchg eax, ebx; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000049b897: xchg eax, ebx; nop dword ptr [rax + rax]; mov eax, 5; ret; 
0x0000000000450720: xchg eax, ebx; ret 0x3948; 
0x000000000045127e: xchg eax, ebx; ret 0x3949; 
0x0000000000411c9f: xchg eax, ebx; ret 0x840; 
0x0000000000451753: xchg eax, ebx; ret 0x8548; 
0x000000000046cba4: xchg eax, ebx; ret 0xd108; 
0x00000000004005a9: xchg eax, ebx; ret; 
0x0000000000401d1d: xchg eax, ebx; sub al, 0; xor eax, eax; ret; 
0x00000000004c8255: xchg eax, ecx; add byte ptr [rax], al; js 0xc81eb; sti; call qword ptr [rdx]; 
0x00000000004c81f5: xchg eax, ecx; add byte ptr [rax], al; pop rax; xchg eax, ecx; sti; call qword ptr [rax]; 
0x00000000004c820d: xchg eax, ecx; add byte ptr [rax], al; push rax; xchg eax, ecx; sti; call qword ptr [rdx]; 
0x0000000000421b17: xchg eax, ecx; add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret 0xffdf; 
0x000000000048f265: xchg eax, ecx; add dword ptr [rax], eax; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000047258b: xchg eax, ecx; mov bl, 0x25; add byte ptr [rdi], cl; xchg eax, ebp; ret 0xf748; 
0x000000000042b631: xchg eax, ecx; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000436886: xchg eax, ecx; sar ch, 0xff; jmp qword ptr [rdx - 0xf]; 
0x00000000004c81f9: xchg eax, ecx; sti; call qword ptr [rax]; 
0x00000000004c8259: xchg eax, ecx; sti; call qword ptr [rdx]; 
0x0000000000429d5f: xchg eax, ecx; sub eax, edx; ret; 
0x000000000047cc2e: xchg eax, edi; and eax, 0x6894800; ret; 
0x00000000004bb45f: xchg eax, edi; call qword ptr [rbx + 0x7c]; 
0x00000000004c48d9: xchg eax, edi; clc; call qword ptr [rdx]; 
0x000000000048c4e1: xchg eax, edi; clc; dec dword ptr [rax + 0x39]; ret; 
0x00000000004c4969: xchg eax, edi; clc; jmp rbx; 
0x00000000004ba787: xchg eax, edi; jo 0xba7f0; salc; retf; ret 0x5508; 
0x0000000000440a86: xchg eax, edi; pop rbx; pop rbp; pop r12; mov esi, 3; jmp rax; 
0x000000000040a085: xchg eax, edi; ret; 
0x0000000000415a7e: xchg eax, edi; rol byte ptr [rax], 0; add byte ptr [rbp + 0x48497ed2], al; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x0000000000442f2b: xchg eax, edi; ror byte ptr [rdi], 0x92; ret 0xd029; 
0x000000000047cc2d: xchg eax, edi; xchg eax, edi; and eax, 0x6894800; ret; 
0x00000000004ba658: xchg eax, edi; xchg eax, esp; ret; 
0x000000000046856f: xchg eax, edx; add byte ptr [rax], al; add dh, dh; ret 0x7504; 
0x00000000004c8285: xchg eax, edx; add byte ptr [rax], al; js 0xc821b; sti; call qword ptr [rdx]; 
0x00000000004c82b5: xchg eax, edx; add byte ptr [rax], al; js 0xc824b; sti; call qword ptr [rdx]; 
0x000000000041c78c: xchg eax, edx; add dword ptr [rax], eax; add byte ptr [rbx + 0x488d2404], cl; add dword ptr [rcx], eax; ror byte ptr [rax - 0x73], 0x54; ret; 
0x000000000041825a: xchg eax, edx; add eax, dword ptr [rax]; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x0000000000481706: xchg eax, edx; add r8b, bpl; or al, dil; jmp qword ptr [rsi - 0x70]; 
0x0000000000484586: xchg eax, edx; add r8b, bpl; ret 0xf7d9; 
0x00000000004bbf1d: xchg eax, edx; jae 0xbbef3; push rsi; pop rdx; je 0xbbee8; ret 0xacfc; 
0x0000000000492bac: xchg eax, edx; lea rcx, qword ptr [rip + 0x1584c]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000004911fc: xchg eax, edx; lea rcx, qword ptr [rip + 0x171fc]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000042cc97: xchg eax, edx; lea rcx, qword ptr [rip + 0x7b761]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000042b627: xchg eax, edx; lea rcx, qword ptr [rip + 0x7cdd1]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000416de9: xchg eax, edx; mov esi, 0xc48348ff; sub byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000047154a: xchg eax, edx; push rsp; add byte ptr es:[rbp - 0x16738a40], al; imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000047d599: xchg eax, edx; ret 0x8348; 
0x000000000047de06: xchg eax, edx; ret 0xb60f; 
0x0000000000442f2e: xchg eax, edx; ret 0xd029; 
0x00000000004ba00f: xchg eax, edx; ret 0xf869; 
0x00000000004a14fa: xchg eax, edx; ret; 
0x00000000004a4500: xchg eax, edx; sbb cl, bh; jmp qword ptr [rdx]; 
0x0000000000424187: xchg eax, edx; sub eax, edx; ret; 
0x000000000042f300: xchg eax, esi; add byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004723e6: xchg eax, esi; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fmul dword ptr [rax - 0x7d]; ret; 
0x0000000000435037: xchg eax, esi; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x00000000004a0ac6: xchg eax, esi; fcompi st(7); jmp qword ptr [rsi + 0xf]; 
0x000000000042f3bd: xchg eax, esi; lock add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004a4130: xchg eax, esi; mov edx, 0xbb42fff8; clc; call qword ptr [rdx]; 
0x0000000000447266: xchg eax, esi; movabs al, byte ptr [0xf7840fc08548ffff]; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000042f31b: xchg eax, esi; nop; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000049d776: xchg eax, esi; or al, 0xf7; jmp qword ptr [rsi + 0xf]; 
0x00000000004bc8ac: xchg eax, esi; ret 0xcd11; 
0x000000000042f36c: xchg eax, esi; rol byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004a445c: xchg eax, esi; sbb al, 0xf9; jmp qword ptr [rsi]; 
0x0000000000487486: xchg eax, esp; add r8b, bpl; ret 0xf7aa; 
0x000000000047dd6a: xchg eax, esp; and al, 0xb8; add al, byte ptr [rax]; add byte ptr [rcx + 0x48b48d8], cl; ret 0x8b48; 
0x000000000045222d: xchg eax, esp; in al, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x00000000004bb07a: xchg eax, esp; mov ah, 0x5e; sar byte ptr [rip + 0x733db8a1], 0xd7; jo 0xbb0f7; mov ebp, 0xfb67d10d; ret; 
0x00000000004bcabf: xchg eax, esp; push rsi; cli; push 0x6e; ja 0xbca49; ret 0x48f; 
0x00000000004763c7: xchg eax, esp; ret 0x1f0f; 
0x000000000049637e: xchg eax, esp; ret 0x3840; 
0x0000000000495abc: xchg eax, esp; ret 0x5438; 
0x000000000041be29: xchg eax, esp; ret 0x7ae9; 
0x0000000000462535: xchg eax, esp; ret 0x7f3c; 
0x000000000043eb6f: xchg eax, esp; ret 0x8341; 
0x000000000044a9a5: xchg eax, esp; ret 0x8348; 
0x000000000043ec0f: xchg eax, esp; ret 0x8444; 
0x0000000000478021: xchg eax, esp; ret 0x8545; 
0x000000000041ec48: xchg eax, esp; ret 0x8548; 
0x000000000048c7fe: xchg eax, esp; ret 0x950f; 
0x00000000004566c8: xchg eax, esp; ret 0x9522; 
0x0000000000403048: xchg eax, esp; ret 0xb60f; 
0x000000000047475c: xchg eax, esp; ret 0xc283; 
0x0000000000495c49: xchg eax, esp; ret 0xd021; 
0x0000000000468476: xchg eax, esp; ret 0xd309; 
0x0000000000495a0f: xchg eax, esp; ret 0xda38; 
0x000000000048c240: xchg eax, esp; ret 0xdaf7; 
0x000000000049c45c: xchg eax, esp; ret 0xf45; 
0x000000000045a788: xchg eax, esp; ret 0xfa80; 
0x000000000043eb92: xchg eax, esp; ret 0xfe83; 
0x0000000000459664: xchg eax, esp; ret; 
0x0000000000414a68: xchg eax, esp; rol byte ptr [rax + rax*8 - 0x7d7af1], 0xff; dec dword ptr [rax - 0x75]; push rbx; sub cl, ch; ret 0xfffe; 
0x000000000041b620: xchg eax, esp; rol byte ptr [rcx + rcx*4 + 5], 0x37; add dword ptr [rbx], ebp; add byte ptr [rcx + rcx*4 - 0x31], cl; mov eax, 3; syscall; 
0x000000000047386f: xchg eax, esp; ror byte ptr [rax - 0x7d], 0xc4; movzx rax, al; ret; 
0x00000000004955e4: xchg eax, esp; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x73], 0x14; add byte ptr [rax + 1], cl; ret 0x8d48; 
0x000000000045030a: xchg eax, esp; ror byte ptr [rdi], 0xb6; ror byte ptr [rcx - 0x3fcebfbd], 0x5b; ret; 
0x000000000045c9e3: xchg eax, esp; shr cl, 0x63; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000045ca5b: xchg eax, esp; shr cl, 0x87; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x00000000004c8109: xchg eax, esp; std; call rcx; 
0x00000000004c1e14: xchg eax, esp; sub eax, 0xc8480000; cmc; call qword ptr [rbx]; 
0x00000000004c7514: xchg eax, esp; test byte ptr [rax], al; add byte ptr [rax + 0x23], bl; sti; jmp qword ptr [rdi]; 
0x00000000004197d4: xchg edi, esp; add al, 0; add dh, dh; ret; 
0x00000000004bccd7: xchg esp, edi; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000043f68f: xchg esp, esi; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x0000000000411ec1: xchg rax, rbp; add byte ptr [rcx - 0x7cb768f4], cl; ret 0x4801; 
0x0000000000419b25: xlatb; add al, 0; add dh, dh; ret; 
0x00000000004729a5: xlatb; add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004b1f79: xlatb; add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; call rdi; 
0x0000000000434e72: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x6f7d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434cf2: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x6f953]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434b72: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x6fad3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004349f3: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x6fc52]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434872: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x6fdd3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004346f2: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x6ff53]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434572: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x700d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004343f2: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x70253]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434272: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x703d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004340f2: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x70553]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433f72: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x706d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433df2: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x70853]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433c72: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x709d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433af2: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x70b53]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433972: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x70cd3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430928: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x7391d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043f471: xlatb; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000041023b: xlatb; call qword ptr [rax + 0x60]; 
0x00000000004a43c5: xlatb; clc; jmp rax; 
0x000000000045a78e: xlatb; dec dword ptr [rcx - 0xef43]; inc dword ptr [rax - 0x12743]; jmp qword ptr [rdi + 0xf]; 
0x0000000000440b85: xlatb; fdivp st(5); dec dword ptr [rcx - 0x75]; jge 0x40b8d; call rbx; 
0x000000000047a9d6: xlatb; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000041acc3: xlatb; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x00000000004bb083: xlatb; jo 0xbb0f7; mov ebp, 0xfb67d10d; ret; 
0x000000000043568b: xlatb; lddqu xmm0, xmmword ptr [rsi - 0x19]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435290: xlatb; lea r11, qword ptr [rip + 0x6f178]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004350dd: xlatb; lea r11, qword ptr [rip + 0x6f56b]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433838: xlatb; lea r11, qword ptr [rip + 0x70e10]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004336dc: xlatb; lea r11, qword ptr [rip + 0x70f6c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000432fdb: xlatb; lea r11, qword ptr [rip + 0x7126d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043083c: xlatb; lea r11, qword ptr [rip + 0x73a0c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430777: xlatb; lea r11, qword ptr [rip + 0x73ad1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000042fa52: xlatb; lea r11, qword ptr [rip + 0x746b6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f9d8: xlatb; lea r11, qword ptr [rip + 0x74730]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f949: xlatb; lea r11, qword ptr [rip + 0x747bf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f73e: xlatb; lea r11, qword ptr [rip + 0x749ca]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f60c: xlatb; lea r11, qword ptr [rip + 0x74afc]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f546: xlatb; lea r11, qword ptr [rip + 0x74bc2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f4c8: xlatb; lea r11, qword ptr [rip + 0x74c40]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f431: xlatb; lea r11, qword ptr [rip + 0x74cd7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f235: xlatb; lea r11, qword ptr [rip + 0x74ed3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f104: xlatb; lea r11, qword ptr [rip + 0x75004]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042eff5: xlatb; lea r11, qword ptr [rip + 0x75113]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000452dd2: xlatb; mov byte ptr [rsi], al; jne 0x52db0; mov rax, rsi; ret; 
0x000000000040e3bd: xlatb; mov eax, 0xea; movsxd rdi, ecx; syscall; 
0x000000000043f4f2: xlatb; mov eax, esi; syscall; 
0x000000000043f502: xlatb; mov eax, r8d; syscall; 
0x0000000000431521: xlatb; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x72d22]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004bc526: xlatb; ret 0x4e27; 
0x000000000046e387: xlatb; ret 0x94c; 
0x00000000004268ff: xlatb; ret 0xc085; 
0x0000000000421ed0: xlatb; ret 0xc148; 
0x0000000000424384: xlatb; ret 0xf66; 
0x0000000000421ed9: xlatb; ret; 
0x000000000042d831: xlatb; rol byte ptr [rbp + 0x664975c0], 0xf; xlatb; ret 0xc085; 
0x000000000043c75e: xlatb; rol dword ptr [rbp + 0x661075c0], cl; nop; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x0000000000426a95: xlatb; rol dword ptr [rbp - 0x4e7af040], 0; add byte ptr [rax], al; xor rax, rax; ret; 
0x0000000000438c22: xlatb; ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; call qword ptr [rbx]; 
0x0000000000438c5e: xlatb; ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x000000000043c756: xlatb; ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000423396: xlatb; sal bh, 1; ret 0x8000; 
0x0000000000423256: xlatb; sal bh, 1; ret 0xc000; 
0x0000000000423116: xlatb; sal bh, 1; ret 0xe000; 
0x0000000000422fd6: xlatb; sal bh, 1; ret 0xf000; 
0x0000000000422e96: xlatb; sal bh, 1; ret 0xf800; 
0x0000000000422d56: xlatb; sal bh, 1; ret 0xfc00; 
0x0000000000422c16: xlatb; sal bh, 1; ret 0xfe00; 
0x0000000000422ad6: xlatb; sal bh, 1; ret 0xff00; 
0x0000000000422996: xlatb; sal bh, 1; ret 0xff80; 
0x0000000000422856: xlatb; sal bh, 1; ret 0xffc0; 
0x0000000000422716: xlatb; sal bh, 1; ret 0xffe0; 
0x00000000004225d6: xlatb; sal bh, 1; ret 0xfff0; 
0x0000000000422496: xlatb; sal bh, 1; ret 0xfff8; 
0x0000000000422356: xlatb; sal bh, 1; ret 0xfffc; 
0x0000000000422216: xlatb; sal bh, 1; ret 0xfffe; 
0x0000000000432f0d: xlatb; sfence; lea r11, qword ptr [rip + 0x71338]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043c752: xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x000000000046e336: xlatb; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x000000000046e325: xlatb; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x00000000004bef75: xlatb; std; call rsp; 
0x00000000004bef71: xlatb; std; inc dword ptr [rdi + rdx*8]; std; call rsp; 
0x0000000000431675: xlatb; sub eax, dword ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434f2f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x6f4d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434daf: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x6f656]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434c2f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x6f7d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000434aaf: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x6f956]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043492f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x6fad6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004347af: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x6fc56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043462f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x6fdd6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004344af: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x6ff56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043432f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x700d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004341af: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x70256]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043402f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x703d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433eaf: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x70556]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433d2f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x706d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433baf: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x70856]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000433a2f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x709d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004338b6: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x70b4f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000043fea3: xor al, 0; add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 0; syscall; 
0x000000000043ff03: xor al, 0; add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 1; syscall; 
0x000000000043fe43: xor al, 0; add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 2; syscall; 
0x00000000004c9b58: xor al, 0; add byte ptr [rax], al; fsubr qword ptr [rdx + 0x35a00000]; std; call qword ptr [rcx + 1]; 
0x00000000004ba00a: xor al, 0x19; xchg dword ptr [rcx + 0x79], ecx; xchg eax, edx; ret 0xf869; 
0x00000000004a45b0: xor al, 0x1a; stc; inc esp; sbb ecx, edi; call qword ptr [rcx + rbx - 7]; jmp rsp; 
0x0000000000401bb9: xor al, 0x39; mov qword ptr [rsi + 8], 0x6d63f0; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000041b5d6: xor al, 0x4a; add byte ptr [rax + 2], bh; syscall; 
0x000000000040095d: xor al, 0x4b; add bh, bh; rcr byte ptr [rbp - 0x3a], 1; add eax, 0x2cc1f5; add ebx, esi; ret; 
0x000000000046fd9f: xor al, 0x5f; add byte ptr [r15 + 0x4b5e18], dil; call 0x1f50; nop dword ptr [rax]; mov eax, 0xc9; syscall; 
0x0000000000405d0d: xor al, 0x89; ret 0x5525; 
0x00000000004c82b4: xor al, 0x92; add byte ptr [rax], al; js 0xc824b; sti; call qword ptr [rdx]; 
0x00000000004c8cb4: xor al, 0x9c; add byte ptr [rax], al; or byte ptr [rcx - 0xd], bh; jmp qword ptr [rsi]; 
0x000000000046a897: xor al, 0xbe; add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x00000000004bb1ea: xor al, 0xd8; ret; 
0x000000000047d51b: xor al, 0xfc; inc dword ptr [rbp + 0x481e75c0]; mov dword ptr [rbx], 0; or dword ptr [rip + 0x24ec40], 1; pop rbx; ret; 
0x00000000004c9a29: xor al, 0xfd; jmp qword ptr [rcx]; 
0x0000000000430de4: xor al, 7; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004a4254: xor al, ah; clc; call qword ptr [rax]; 
0x0000000000430fe5: xor al, byte ptr [edi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000430fe6: xor al, byte ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000004748e3: xor al, ch; mov bh, 0x29; sti; dec dword ptr [rax + 0x39]; ret; 
0x000000000040fd96: xor ax, 3; add rsp, 0x80; add rsp, 0xd0; mov eax, esi; pop rbx; ret; 
0x000000000043ecf7: xor bh, ah; jmp qword ptr [rsi + 0xf]; 
0x00000000004c9979: xor bh, ch; call rsp; 
0x00000000004c71d0: xor bl, 0xfa; jmp qword ptr [rbx + 5]; 
0x00000000004a44e8: xor bl, byte ptr [rbx]; stc; inc edx; sbb bh, cl; call qword ptr [rdx + 0x1a]; 
0x0000000000426a1d: xor byte ptr [r14 + 0xf], r12b; xlatb; ret; 
0x0000000000426a91: xor byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp - 0x4e7af040], 0; add byte ptr [rax], al; xor rax, rax; ret; 
0x0000000000415650: xor byte ptr [r8 - 0x77], cl; and byte ptr [r9 + 0x5bc03113], cl; ret; 
0x000000000049f4b4: xor byte ptr [rax + 0x39], cl; ret; 
0x00000000004003fd: xor byte ptr [rax + rax], al; mov edx, 0x1d; mov esi, 0x4a2a86; mov rdi, rbx; mov eax, 1; syscall; 
0x00000000004bfc37: xor byte ptr [rax + rax], dl; add byte ptr [rax], al; mov esp, 0xc000000b; cmc; hlt; call qword ptr [rbx]; 
0x00000000004706cd: xor byte ptr [rax - 0x39], cl; ret; 
0x000000000044a78b: xor byte ptr [rax - 0x75], cl; and al, 0x20; call rax; 
0x00000000004413c3: xor byte ptr [rax - 0x75], cl; jge 0x41388; mov r13d, ebx; mov rax, qword ptr [rbp - 0x48]; call rax; 
0x0000000000480ef0: xor byte ptr [rax - 0x75], cl; push rsp; and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000480e7e: xor byte ptr [rax - 0x75], cl; push rsp; and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x50; jmp qword ptr [rax]; 
0x0000000000415d08: xor byte ptr [rax - 0x75], cl; sbb eax, 0; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x000000000042428f: xor byte ptr [rax - 0x77], cl; add cl, byte ptr [rax - 0x7d]; ret 0x4808; 
0x0000000000415651: xor byte ptr [rax - 0x77], cl; and byte ptr [r9 + 0x5bc03113], cl; ret; 
0x00000000004127ec: xor byte ptr [rax - 0x77], cl; jae 0x12819; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x0000000000476873: xor byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000046d272: xor byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x000000000046d1f2: xor byte ptr [rax], 1; add byte ptr [rax], al; call qword ptr [rax + 0x68]; 
0x000000000046d30a: xor byte ptr [rax], 1; add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000046d172: xor byte ptr [rax], 1; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x000000000046c882: xor byte ptr [rax], 1; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000041166d: xor byte ptr [rax], 1; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000046bf2c: xor byte ptr [rax], 1; add byte ptr [rax], al; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x00000000004c20bd: xor byte ptr [rax], al; add al, dh; fdiv st(5); jmp qword ptr [rdi + 3]; 
0x000000000040f1e2: xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x000000000040f19a: xor byte ptr [rax], al; add byte ptr [rax], al; call rdx; 
0x000000000040fc29: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x11f00; add rsp, 0xd8; ret; 
0x000000000040fb98: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x55730; add rsp, 0xd8; ret; 
0x000000000047c86c: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x7c1e0; add rsp, 0xd8; ret; 
0x000000000048c109: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x8c120; add rsp, 0xd8; ret; 
0x000000000043ef4c: xor byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000046d1ba: xor byte ptr [rax], al; je 0x6d1c0; ret; 
0x000000000049acc4: xor byte ptr [rbp + 0x24], dh; mov rax, qword ptr [rsi + 0xb0]; add rsp, 8; ret; 
0x000000000049d7c8: xor byte ptr [rbp + 0x25], dh; mov rax, qword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x00000000004162c0: xor byte ptr [rbp + 0xd], 0x48; add esp, 0x28; pop rbx; pop rbp; ret; 
0x000000000043c241: xor byte ptr [rbp + rcx*4 + 0x1d], cl; xchg dword ptr [rdi + 0x63490006], eax; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000403d43: xor byte ptr [rbp - 0x7b], cl; dec dword ptr [rax - 0x77]; ret; 
0x00000000004a06fb: xor byte ptr [rbp - 0x7b], cl; test byte ptr [rdi], 0x84; ret; 
0x00000000004a4994: xor byte ptr [rbp - 7], dh; call qword ptr [rax + 0x75]; 
0x00000000004a4994: xor byte ptr [rbp - 7], dh; call qword ptr [rax + 0x75]; stc; jmp qword ptr [rax + 0x75]; 
0x00000000004165b6: xor byte ptr [rbx + 0x374fff8], al; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x000000000049f00e: xor byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x000000000042764b: xor byte ptr [rbx + rcx*4 + 0x76], cl; cmp byte ptr [rax + 0xf], cl; ret; 
0x000000000041660e: xor byte ptr [rbx - 0x198a0008], al; pop rbx; ret; 
0x000000000049778b: xor byte ptr [rbx - 0xbf7b], cl; jmp qword ptr [rsi - 0x77]; 
0x00000000004a4a10: xor byte ptr [rbx - 7], bh; inc dword ptr [rax + 0x7b]; stc; jmp qword ptr [rax + 0x7b]; 
0x00000000004a4010: xor byte ptr [rbx], bh; clc; inc dword ptr [rax + 0x3d]; clc; call qword ptr [rax + 0x3f]; 
0x00000000004be3b4: xor byte ptr [rbx], bl; std; call qword ptr [rax]; 
0x00000000004be3b4: xor byte ptr [rbx], bl; std; call qword ptr [rax]; sbb eax, 0x1ef0fffd; std; call rax; 
0x000000000046d1e3: xor byte ptr [rcx + rcx*4 + 0x60], cl; cmp byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x00000000004213f8: xor byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; ret; 
0x000000000041b5fc: xor byte ptr [rcx + rcx*4 - 0x31], cl; mov eax, r8d; syscall; 
0x00000000004a4954: xor byte ptr [rcx + rdi*8 - 1], dh; je 0xa4954; call qword ptr [rax + 0x74]; 
0x00000000004a4954: xor byte ptr [rcx + rdi*8 - 1], dh; je 0xa4954; call qword ptr [rax + 0x74]; stc; jmp qword ptr [rax + 0x74]; 
0x0000000000459697: xor byte ptr [rcx - 0x7d], al; std; xor byte ptr [rdi], cl; xchg eax, esp; ret; 
0x000000000046d1f3: xor byte ptr [rcx], al; add byte ptr [rax], al; call qword ptr [rax + 0x68]; 
0x000000000046d30b: xor byte ptr [rcx], al; add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000046d173: xor byte ptr [rcx], al; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x000000000046c883: xor byte ptr [rcx], al; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000041622c: xor byte ptr [rcx], al; add byte ptr [rax], al; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000041166e: xor byte ptr [rcx], al; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000046bf2d: xor byte ptr [rcx], al; add byte ptr [rax], al; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x00000000004a443c: xor byte ptr [rcx], bl; stc; inc eax; sbb cl, bh; call qword ptr [rax + 0x18]; 
0x000000000042f9dc: xor byte ptr [rdi + 7], al; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x00000000004a422c: xor byte ptr [rdi - 0x404f0008], bh; clc; push qword ptr [rax]; sar al, 0xff; rol al, 0xf8; call qword ptr [rax - 0x3f]; 
0x00000000004311d4: xor byte ptr [rdi], al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000459662: xor byte ptr [rdi], cl; xchg eax, esp; ret; 
0x000000000045ca59: xor byte ptr [rdi], cl; xchg eax, esp; shr cl, 0x87; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000426808: xor byte ptr [rdx + 0x42], ah; add byte ptr [rax + 0x43e180], bh; cmove rax, rdx; ret; 
0x00000000004c1180: xor byte ptr [rdx - 0xb], bl; jmp qword ptr [rsi + 2]; 
0x00000000004a49e8: xor byte ptr [rdx - 7], bh; inc dword ptr [rax + 0x7a]; stc; call qword ptr [rax + 0x7a]; 
0x00000000004a49e8: xor byte ptr [rdx - 7], bh; inc dword ptr [rax + 0x7a]; stc; call qword ptr [rax + 0x7a]; stc; jmp qword ptr [rax + 0x7a]; 
0x00000000004c24cf: xor byte ptr [rdx], al; ret; 
0x00000000004be3d4: xor byte ptr [rdx], ch; std; call qword ptr [rax]; 
0x00000000004a4614: xor byte ptr [rip + 0x1cc0fff9], bl; stc; call qword ptr [rax + 0x1c]; 
0x00000000004a4614: xor byte ptr [rip + 0x1cc0fff9], bl; stc; call qword ptr [rax + 0x1c]; stc; jmp rax; 
0x00000000004c386f: xor byte ptr [rsi + 0x380e4106], al; add dword ptr [rdi], 3; mov bh, 1; ret; 
0x00000000004bd076: xor byte ptr [rsi + 0x4ce2e5dd], 0x67; add ch, byte ptr [rbp + rbp*2 + 0x5b]; ret 0x6f9; 
0x000000000042f0af: xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042f0aa: xor byte ptr [rsi + 0xf], ah; out dx, eax; push rsi; xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000046e2ec: xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x0000000000426a1e: xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x0000000000426a92: xor byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp - 0x4e7af040], 0; add byte ptr [rax], al; xor rax, rax; ret; 
0x000000000040e86a: xor byte ptr [rsi - 0x73], cl; cmp al, 0x33; call rax; 
0x00000000004a49b8: xor byte ptr [rsi - 7], dh; call qword ptr [rax + 0x76]; 
0x0000000000473803: xor byte ptr [rsi], ah; add byte ptr [rax], al; jne 0x7381d; mov eax, 3; syscall; 
0x00000000004c8d00: xor byte ptr [rsp + rdi*8], bh; jmp qword ptr [rdx]; 
0x0000000000417ada: xor ch, byte ptr [rcx - 1]; jmp qword ptr [rsi - 0x70]; 
0x000000000046e96b: xor cl, byte ptr [rax + 0x39]; ret; 
0x0000000000413625: xor cl, byte ptr [rax + 0x63]; jg 0x1369a; xor eax, eax; syscall; 
0x000000000047bd26: xor cl, byte ptr [rax - 0x7d]; ret 0x4810; 
0x00000000004975cf: xor cl, byte ptr [rax - 0x7d]; ret 0xf08; 
0x0000000000441962: xor cl, byte ptr [rdx]; add byte ptr [rax], al; xor esi, esi; mov rdi, r14; call rbx; 
0x00000000004bf539: xor dh, ah; call qword ptr [rdx]; 
0x00000000004c9978: xor dil, bpl; call rsp; 
0x000000000047f9f0: xor dl, dh; ret; 
0x000000000043fdd6: xor dword ptr [rax + 0x63], ecx; clc; mov rsi, rdx; mov eax, 5; syscall; 
0x000000000040e3a6: xor dword ptr [rax + 0xba], edi; syscall; 
0x0000000000421735: xor dword ptr [rax + 0xf], ecx; scasd eax, dword ptr [rdi]; ret 0x8948; 
0x000000000045afed: xor dword ptr [rax - 0x77], ecx; ror dword ptr [rax - 0x77], 1; ret 0x47e9; 
0x000000000041e8fa: xor dword ptr [rax - 0x7d], ecx; ret 0x4810; 
0x000000000041622b: xor dword ptr [rax], 0x48000001; mov dword ptr [rdi + 0xa8], 0; ret; 
0x000000000044e616: xor dword ptr [rax], edi; test rax, rax; je 0x4e630; mov edi, 0x6cd720; call rax; 
0x000000000043fe37: xor dword ptr [rcx + rdx*2], 0; ret; 
0x0000000000431084: xor dword ptr [rdi], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000441e03: xor dword ptr [rsi], eax; add byte ptr [rax], al; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000049ed89: xor eax, 0x22efc2; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000049ec31: xor eax, 0x22f11a; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000043fee2: xor eax, 0x2969; jne 0x3fefd; mov eax, 1; syscall; 
0x0000000000486f79: xor eax, 0x40b9; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004bb19a: xor eax, 0x444be0a8; sar byte ptr [rsi + rax*2], 0xf8; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x00000000004138e9: xor eax, 0x48ffffff; mov eax, dword ptr [rbx + 0xd8]; or esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000430c94: xor eax, 0x63490007; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000049a55b: xor eax, 0x89480023; ret 0xc148; 
0x000000000049a2c4: xor eax, 0x8948fffe; adc byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x000000000047cfd1: xor eax, 0xc031fff8; ret; 
0x000000000040b546: xor eax, 0xc4e90001; idiv bh; jmp qword ptr [rsi - 0x70]; 
0x000000000049a58e: xor eax, 0xc730023; mov rdx, qword ptr [rip + 0x23359e]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000046c76d: xor eax, 0xd8838b48; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x28]; jmp rax; 
0x000000000040f1df: xor eax, dword ptr [0x30]; call rax; 
0x0000000000430e96: xor eax, dword ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000041072e: xor eax, eax; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000049da7d: xor eax, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000481117: xor eax, eax; add rsp, 0x48; ret; 
0x00000000004811ef: xor eax, eax; add rsp, 0x68; ret; 
0x000000000047d43a: xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004527f9: xor eax, eax; add rsp, 8; ret; 
0x000000000046da57: xor eax, eax; call rbx; 
0x00000000004173a7: xor eax, eax; cmp esi, -1; setne al; neg eax; ret; 
0x00000000004432c7: xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x0000000000473e5a: xor eax, eax; lea rsp, qword ptr [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret; 
0x00000000004434c5: xor eax, eax; leave; ret; 
0x000000000046fcea: xor eax, eax; mov rsi, r14; lea rdx, qword ptr [rsp + 0x48]; mov rdi, r12; call rbx; 
0x000000000046b829: xor eax, eax; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000044133b: xor eax, eax; pop rbp; pop r12; ret; 
0x000000000044343f: xor eax, eax; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000041f65d: xor eax, eax; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000495558: xor eax, eax; pop rbx; pop rbp; pop r12; pop r14; ret; 
0x000000000040f3ed: xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000042431c: xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000412e3c: xor eax, eax; pop rbx; ret; 
0x0000000000401d20: xor eax, eax; ret; 
0x000000000042efce: xor eax, eax; sub eax, ecx; ret; 
0x000000000041362a: xor eax, eax; syscall; 
0x000000000043ee80: xor eax, eax; test ch, 0xf0; je 0x3ee72; movzx eax, cl; pop rbx; ret; 
0x0000000000473d36: xor eax, eax; test ecx, ecx; je 0x73cc9; cmp byte ptr [rsi - 2], 0x3a; cmove rax, r9; ret; 
0x0000000000413e30: xor eax, eax; test rdx, rdx; jne 0x13e40; ret; 
0x000000000046e20b: xor eax, edx; and rax, rcx; je 0x6e3d0; bsr rax, rax; add rax, rdi; ret; 
0x000000000046e48f: xor eax, edx; and rsi, rax; je 0x6e3d0; bsr rax, rsi; add rax, rdi; ret; 
0x000000000045a605: xor ebp, ebp; mov rax, qword ptr [rax + 0x38]; mov rdx, rcx; mov qword ptr [rbp - 0xb8], rcx; mov rdi, rbx; call rax; 
0x0000000000470603: xor ebx, dword ptr [rbx + 0x5d]; pop r12; pop r13; pop r14; ret; 
0x000000000047ccd8: xor ebx, ebx; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000047347d: xor ecx, dword ptr [rax + 0x39]; ret 0xdd72; 
0x0000000000442cb7: xor ecx, dword ptr [rax - 0x75]; adc al, 0x24; mov rsi, r14; mov rdi, qword ptr [rsp + 8]; xor eax, eax; syscall; 
0x000000000043f0c2: xor ecx, dword ptr [rax - 0x75]; and al, 8; add rsp, 0x10; pop rbx; ret; 
0x000000000044101d: xor ecx, dword ptr [rax - 0x75]; jl 0x41046; adc byte ptr [rax - 0x75], cl; and al, 0x18; call rax; 
0x0000000000442be7: xor ecx, dword ptr [rax - 0x77]; and al, 8; mov rdi, rax; sub rdx, rsi; mov eax, r12d; syscall; 
0x0000000000448c11: xor ecx, dword ptr [rax - 0x77]; ret; 
0x000000000046edf5: xor ecx, dword ptr [rax - 0x7d]; ret 0x4801; 
0x0000000000412133: xor ecx, dword ptr [rcx + rcx*4 + 0x43]; or byte ptr [rdx + 1], bh; mov rsi, rbx; mov rdi, r12; mov eax, r9d; syscall; 
0x0000000000442c76: xor ecx, dword ptr [rcx + rcx*4 - 0xa]; mov qword ptr [rsp], rax; mov rdx, rax; mov eax, r12d; syscall; 
0x000000000046e299: xor ecx, eax; and rsi, rcx; je 0x6e3d0; bsr rsi, rsi; lea rax, qword ptr [rdi + rsi]; ret; 
0x000000000044fcd2: xor ecx, eax; ret 0x4809; 
0x000000000044564f: xor ecx, ecx; not eax; xor edx, edx; add eax, 2; push rax; call rbx; 
0x000000000046f5e0: xor ecx, ecx; xor edx, edx; lea r9, qword ptr [rsp + 0x20]; lea rsi, qword ptr [rsp + 0x40]; call rbx; 
0x0000000000440961: xor edi, edi; mov eax, 9; movsxd r10, r10d; syscall; 
0x0000000000401310: xor edi, edi; mov eax, edx; syscall; 
0x000000000040f197: xor edx, dword ptr [0x30]; call rdx; 
0x0000000000400a57: xor edx, eax; mov rax, qword ptr [rbp - 0x10]; mov qword ptr [rax], rdx; nop; leave; ret; 
0x0000000000445653: xor edx, edx; add eax, 2; push rax; call rbx; 
0x00000000004433bf: xor edx, edx; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000043ef6a: xor edx, edx; and eax, 0x3fffc00; div ecx; pop rbx; mov eax, eax; ret; 
0x000000000045b043: xor edx, edx; div ecx; add eax, r8d; ret; 
0x000000000048c4e9: xor edx, edx; div rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000046f5e2: xor edx, edx; lea r9, qword ptr [rsp + 0x20]; lea rsi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000047ca44: xor edx, edx; mov eax, edx; pop rbx; pop rbp; ret; 
0x00000000004796da: xor edx, edx; mov edx, 1; mov esi, 0x81; add rdi, 0x1c; mov eax, 0xca; syscall; 
0x00000000004019a5: xor edx, edx; mov esi, 0x20000; mov edi, 0x4a1e2d; mov eax, 2; syscall; 
0x0000000000401934: xor edx, edx; mov esi, 0x20001; mov edi, 0x4a1e23; mov eax, 2; syscall; 
0x0000000000441cfb: xor edx, edx; mov esi, 1; mov rdi, rbp; call rbx; 
0x0000000000415f29: xor edx, edx; mov rax, qword ptr [rax + 0x48]; jmp rax; 
0x000000000041830c: xor edx, edx; mov rax, rdx; pop rbx; pop rbp; ret; 
0x00000000004042c3: xor edx, edx; mov rdx, r8; mov rsi, r9; mov rdi, r12; mov eax, r10d; syscall; 
0x000000000049a543: xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x000000000044d6ac: xor edx, edx; xor esi, esi; mov edi, 0x4a6d28; mov eax, ecx; syscall; 
0x00000000004417d1: xor edx, edx; xor esi, esi; mov rbx, rax; call rax; 
0x0000000000414f65: xor edx, edx; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x00000000004bb45d: xor esi, dword ptr [rcx]; xchg eax, edi; call qword ptr [rbx + 0x7c]; 
0x0000000000416476: xor esi, esi; call 0xffffffffffc00000; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000049f631: xor esi, esi; mov eax, 0; test rax, rax; je 0x9f644; mov edi, 0x6cc100; call rax; 
0x000000000043f64c: xor esi, esi; mov eax, 2; syscall; 
0x0000000000403ff9: xor esi, esi; mov eax, ecx; syscall; 
0x0000000000400428: xor esi, esi; mov edi, 0x4a2aa4; mov eax, 2; syscall; 
0x000000000044d6ae: xor esi, esi; mov edi, 0x4a6d28; mov eax, ecx; syscall; 
0x0000000000401e35: xor esi, esi; mov edi, 1; call rax; 
0x000000000048c779: xor esi, esi; mov edi, dword ptr [rip + 0x241243]; jmp rax; 
0x000000000047367f: xor esi, esi; mov edi, ebx; call 0x73290; add rsp, 0x90; pop rbx; ret; 
0x0000000000440a21: xor esi, esi; mov r12d, edx; mov rbp, rax; call rax; 
0x00000000004417d3: xor esi, esi; mov rbx, rax; call rax; 
0x00000000004417f8: xor esi, esi; mov rdi, r12; call rbx; 
0x000000000044181d: xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441841: xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441861: xor esi, esi; mov rdi, r15; call rbx; 
0x000000000040ff97: xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x0000000000414f67: xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x00000000004433be: xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x00000000004796d9: xor r10d, r10d; mov edx, 1; mov esi, 0x81; add rdi, 0x1c; mov eax, 0xca; syscall; 
0x00000000004042c2: xor r10d, r10d; mov rdx, r8; mov rsi, r9; mov rdi, r12; mov eax, r10d; syscall; 
0x000000000045a604: xor r13d, r13d; mov rax, qword ptr [rax + 0x38]; mov rdx, rcx; mov qword ptr [rbp - 0xb8], rcx; mov rdi, rbx; call rax; 
0x000000000049f630: xor r14d, r14d; mov eax, 0; test rax, rax; je 0x9f644; mov edi, 0x6cc100; call rax; 
0x000000000046da56: xor r8d, r8d; call rbx; 
0x000000000046fce9: xor r8d, r8d; mov rsi, r14; lea rdx, qword ptr [rsp + 0x48]; mov rdi, r12; call rbx; 
0x000000000040f1de: xor rax, qword ptr [0x30]; call rax; 
0x000000000040f1dd: xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000426a9f: xor rax, rax; ret; 
0x000000000046e20a: xor rax, rdx; and rax, rcx; je 0x6e3d0; bsr rax, rax; add rax, rdi; ret; 
0x000000000046e48e: xor rax, rdx; and rsi, rax; je 0x6e3d0; bsr rax, rsi; add rax, rdi; ret; 
0x000000000046e298: xor rcx, rax; and rsi, rcx; je 0x6e3d0; bsr rsi, rsi; lea rax, qword ptr [rdi + rsi]; ret; 
0x000000000040f196: xor rdx, qword ptr [0x30]; call rdx; 
0x000000000040f195: xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000400a56: xor rdx, rax; mov rax, qword ptr [rbp - 0x10]; mov qword ptr [rax], rdx; nop; leave; ret; 

19429 gadgets found
